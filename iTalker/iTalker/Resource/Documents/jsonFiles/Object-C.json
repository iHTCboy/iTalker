{"success":1,"total":272,"result":[
  {
    "answer" : "iOS中的多线程，是Cocoa框架下的多线程，通过Cocoa的封装，可以让我们更为方便的使用线程，做过C++的同学可能会对线程有更多的理解，比如线程的创立，信号量、共享变量有认识，Cocoa框架下会方便很多，它对线程做了封装，有些封装，可以让我们创建的对象，本身便拥有线程，也就是线程的对象化抽象，从而减少我们的工程，提供程序的健壮性。\n\nGCD是(Grand Central Dispatch)的缩写 ，从系统级别提供的一个易用地多线程类库，具有运行时的特点，能充分利用多核心硬件。GCD的API接口为C语言的函数，函数参数中多数有Block，关于Block的使用参看这里，为我们提供强大的“接口”，对于GCD的使用参见本文\n\nNSOperation与Queue\n\nNSOperation是一个抽象类，它封装了线程的细节实现，我们可以通过子类化该对象，加上NSQueue来同面向对象的思维，管理多线程程序。具体可参看这里：一个基于NSOperation的多线程网络访问的项目。\n\nNSThread\n\nNSThread是一个控制线程执行的对象，它不如NSOperation抽象，通过它我们可以方便的得到一个线程，并控制它。但NSThread的线程之间的并发控制，是需要我们自己来控制的，可以通过NSCondition实现。\n\n参看 iOS多线程编程之NSThread的使用\n\n其他多线程\n\n在Cocoa的框架下，通知、Timer和异步函数等都有使用多线程，(待补充).",
    "ID" : "5629f9e1e4b05e6f47b0ea1f",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "iOS 中的多线程"
  },
  {
    "ID" : "55b5a5cde4b0ef2b57558344",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : " 栈私有，堆私有",
    "optionC" : "栈私有, 堆公有",
    "optionAnswer" : "C",
    "answer" : "多线程中栈私有, 堆公有",
    "optionB" : "栈公有，堆公有",
    "type" : "1",
    "optionA" : "栈公有, 堆私有",
    "question" : "多线程中栈与堆是公有的还是私有的 "
  },
  {
    "answer" : "管理方式：对于栈来讲，是由编译器自动管理，无需我们手工控制；对于堆来说，释放工作由程序员控制，容易产生memory leak。\n\n申请大小：\n\n栈：在Windows下,栈是向低地址扩展的数据结构，是一块连续的内存的区域。这句话的意思是栈顶的地址和栈的最大容量是系统预先规定好的，在 WINDOWS下，栈的大小是2M（也有的说是1M，总之是一个编译时就确定的常数），如果申请的空间超过栈的剩余空间时，将提示overflow。因 此，能从栈获得的空间较小。\n\n堆：堆是向高地址扩展的数据结构，是不连续的内存区域。这是由于系统是用链表来存储的空闲内存地址的，自然是不连续的，而链表的遍历方向是由低地址向高地址。堆的大小受限于计算机系统中有效的虚拟内存。由此可见，堆获得的空间比较灵活，也比较大。\n碎片问题：对于堆来讲，频繁的new\/delete势必会造成内存空间的不连续，从而造成大量的碎片，使程序效率降低。对于栈来讲，则不会存在这个问题，因为栈是先进后出的队列，他们是如此的一一对应，以至于永远都不可能有一个内存块从栈中间弹出\n\n分配方式：堆都是动态分配的，没有静态分配的堆。栈有2种分配方式：静态分配和动态分配。静态分配是编译器完成的，比如局部变量的分配。动态分配由alloca函数进行分配，但是栈的动态分配和堆是不同的，他的动态分配是由编译器进行释放，无需我们手工实现。\n\n分配效率：栈是机器系统提供的数据结构，计算机会在底层对栈提供支持：分配专门的寄存器存放栈的地址，压栈出栈都有专门的指令执行，这就决定了栈的效率比较高。堆则是C\/C++函数库提供的，它的机制是很复杂的。",
    "ID" : "5629f9e1e4b05e6f47b0ea29",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "Objective-C堆和栈的区别？"
  },
  {
    "answer" : "NSLog(@”%0.1f”,4.4324);",
    "ID" : "5602715de4b043d0cb1d39d0",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "用NSLog 函数输出一个浮点类型，结果四舍五入，并保留一位小数"
  },
  {
    "answer" : "#define MIN(A,B) （（A） <= (B) ? (A) : (B))\n这个测试是为下面的目的而设的：\n\n标识#define在宏中应用的基本知识。这是很重要的，因为直到嵌入(inline)操作符变为标准C的一部分，宏是方便产生嵌入代码的唯一方\n\n法，\n\n对于嵌入式系统来说，为了能达到要求的性能，嵌入代码经常是必须的方法。\n\n三重条件操作符的知识。这个操作符存在C语言中的原因是它使得编译器能产生比 if-then-else 更优化的代码，了解这个用法是很重要的。\n\n懂得在宏中小心地把参数用括号括起来\n\n我也用这个问题开始讨论宏的副作用，例如：当你写下面的代码时会发生什么事？\nleast = MIN(*p++, b);\n结果是：\n((*p++) <= (b) ? (*p++) : (*p++))\n这个表达式会产生副作用，指针p会作三次++自增操作。",
    "ID" : "5629f9e1e4b05e6f47b0ea2d",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "写一个”标准\"宏MIN ，这个宏输入两个参数并返回较小的一个。"
  },
  {
    "answer" : "当您向一个对象发送一个autorelease 消息时，Cocoa就会将该对象的一个",
    "ID" : "5602715de4b043d0cb1d39d3",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "自动释放池是什么,如何工作。"
  },
  {
    "answer" : "创建 Socket 的上下文；创建 Socket ；配置要访问的服务器信息；封装服务器信息；连接服务器；",
    "ID" : "5602715de4b043d0cb1d39b7",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "CFSocket使用有哪几个步骤。"
  },
  {
    "ID" : "55b5a5cde4b0ef2b57558358",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "@package 本包内使用，跨包也可以",
    "optionC" : "@public 不可以被所有的类访问",
    "optionAnswer" : "A",
    "answer" : "类变量的@protected,@private,@public,@package,声明含义。",
    "optionB" : "@private 该类中的方法可以访问，子类也可以访问。",
    "type" : "1",
    "optionA" : "@protected该类和所有子类中的方法可以直接访问这样的变量。",
    "question" : "下列说法中正确的是"
  },
  {
    "ID" : "55b5a5cde4b0ef2b5755832e",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "into",
    "optionC" : "start",
    "optionAnswer" : "C",
    "answer" : "select,update,delete,insert into ,drop create是基本语句，select 查询是最基本的语句，做任何动作前要先查询；update更新数据，delete删除数数据；insert into插入数据；drop 删除对象；create 建立对象。",
    "optionB" : "drop",
    "type" : "1",
    "optionA" : "update",
    "question" : "下列不是数据库语句的是"
  },
  {
    "answer" : "\/\/ 添加键值观察\n\/*\n1 观察者，负责处理监听事件的对象\n2 观察的属性\n3 观察的选项\n4 上下文\n*\/\n[self.person addObserver:self forKeyPath:@\"name\" options:NSKeyValueObservingOptionNew | NSKeyValueObservingOptionOld context:@\"Person Name\"];\nobserver中需要实现一下方法：\n\n\/\/ 所有的 kvo 监听到事件，都会调用此方法\n\/*\n 1. 观察的属性\n 2. 观察的对象\n 3. change 属性变化字典（新／旧）\n 4. 上下文，与监听的时候传递的一致\n *\/\n- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary *)change context:(void *)context;",
    "ID" : "55f2e4eee4b0152a611431e0",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "addObserver:forKeyPath:options:context:各个参数的作用分别是什么，observer中需要实现哪个方法才能获得KVO回调？"
  },
  {
    "answer" : "编译时是NSString的类型;运行时是NSData类型的对象",
    "ID" : "5629f9e0e4b05e6f47b0e9ed",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "对于语句NSString*obj = [[NSData alloc] init]; obj在编译时和运行时分别时什么类型的对象?"
  },
  {
    "ID" : "55b5a5cee4b0ef2b57558388",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "定义一项协议时，可以扩展现有协议的定义。",
    "optionC" : "协议引用NSObject类",
    "optionAnswer" : "C",
    "answer" : "协议不引用任何类，它是无类的（classless）。任何类都可以遵守某项协议。",
    "optionB" : "如果一个类遵守某项协议，那么它的子类也遵守该协议",
    "type" : "1",
    "optionA" : "协议的声明类似于类接口的声明，有一点不同的是，协议没有父类，并且不能定义成员变量。",
    "question" : "关于协议叙述错误的是"
  },
  {
    "answer" : "   \/\/ 添加键值观察     \/**      1. 调用对象：要监听的对象      2. 参数      1> 观察者，负责处理监听事件的对象      2> 观察的属性      3> 观察的选项      4> 上下文      *\/     [self.person addObserver:self forKeyPath:@\"name\" options:NSKeyValueObservingOptionNew | NSKeyValueObservingOptionOld context:@\"Person Name\"];  \/\/ NSObject 分类方法，意味着所有的 NSObject 都可以实现这个方法！ \/\/ 跟协议的方法很像，分类方法又可以称为“隐式代理”！不提倡用，但是要知道概念！ \/\/ 所有的 kvo 监听到事件，都会调用此方法 \/**  1. 观察的属性  2. 观察的对象  3. change 属性变化字典（新／旧）  4. 上下文，与监听的时候传递的一致 可以利用上下文区分不同的监听！  *\/ - (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary *)change context:(void *)context { NSLog(@\"睡会 %@\", [NSThread currentThread]); [NSThread sleepForTimeInterval:1.0]; NSLog(@\"%@ %@ %@ %@\", keyPath, object, change, context); }",
    "ID" : "d2584fd4ea7f11e5b65200163e0021c8",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "addObserver:forKeyPath:options:context:各个参数的作用分别是什么，observer中需要实现哪个方法才能获得KVO回调？"
  },
  {
    "ID" : "5629f9e0e4b05e6f47b0e9c9",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "开启ARC后，可以重载dealloc，必须在dealloc里写 [super dealloc]方法",
    "optionC" : "在dealloc方法里，应该在[super dealloc]后释放本类所拥有的对象",
    "optionAnswer" : "B",
    "answer" : "当计数器为0时,dealloc方法由系统自动调用\n",
    "optionB" : "一个对象在引用计数变为0时，会调用自己的dealloc方法",
    "type" : "1",
    "optionA" : "当计数器为1时,dealloc方法由系统自动调用",
    "question" : "下面描述正确的选项是："
  },
  {
    "ID" : "55b5a5cde4b0ef2b57558329",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "跳转结构",
    "optionC" : "循环结构",
    "optionAnswer" : "D",
    "answer" : "1966年，Bohra和Jacopini提出了以下三种基本结构，用这三种基本结构作为表示一个良好算法的基本单元：1、顺序结构；2、选择结构；3、循环结构。",
    "optionB" : "选择结构",
    "type" : "1",
    "optionA" : "顺序结构",
    "question" : "一个良好的算法由下面的基本结构组成，但不包括"
  },
  {
    "answer" : "\t• 类方法 \t\t○ 类方法是属于类对象的 \t\t○ 类方法只能通过类对象调用 \t\t○ 类方法中的self是类对象 \t\t○ 类方法可以调用其他的类方法 \t\t○ 类方法中不能访问成员变量 \t\t○ 类方法中不定直接调用对象方法 \t• 实例方法 \t\t○ 实例方法是属于实例对象的 \t\t○ 实例方法只能通过实例对象调用 \t\t○ 实例方法中的self是实例对象 \t\t○ 实例方法中可以访问成员变量 \t\t○ 实例方法中直接调用实例方法 实例方法中也可以调用类方法(通过类名)",
    "ID" : "6b714c9eea7a11e58afd00163e0021c8",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "objc中的类方法和实例方法有什么本质区别和联系？"
  },
  {
    "answer" : "self指本类的某一对象，有时候也指类对象。Super指父类（超类）。Id指任意对象类型，不能表示基本数据类型。",
    "ID" : "5629f9e0e4b05e6f47b0e9e0",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "self和super是什么意思？id表示什么数据类型？"
  },
  {
    "answer" : " \t• 所有父类的成员变量和自己的成员变量都会存放在该对象所对应的存储空间中. \t• 每一个对象内部都一个isA指针,指向他的类对象,类对象中存放着本对象的对象方法列表和成员变量的列表,属性列表,它内部也有一个isA指针指向元对象(meta class),元对象内部存放的是类方法列表,类对象内部还有一个superclass的指针,指向他的父类对象 根对象就是NSObject",
    "ID" : "b7d985f8ea7811e5b65200163e0021c8",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "一个objc对象如何进行内存布局？（考虑有父类的情况）"
  },
  {
    "answer" : "1).obj-c的编译器处理后缀为m的文件时，可以识别obj-c和c的代码，处理mm文件可以识别obj-c,c,c++代码，但cpp文件必须只能用c\/c++代码，而且cpp文件include的头文件中，也不能出现obj-c的代码，因为cpp只是cpp\n\n2).在mm文件中混用cpp直接使用即可，所以obj-c混cpp不是问题\n\n3).在cpp中混用obj-c其实就是使用obj-c编写的模块是我们想要的。\n\n如果模块以类实现，那么要按照cpp class的标准写类的定义，头文件中不能出现obj-c的东西，包括#import cocoa的。实现文件中，即类的实现代码中可以使用obj-c的东西，可以import,只是后缀是mm。\n\n如果模块以函数实现，那么头文件要按c的格式声明函数，实现文件中，c++函数内部可以用obj-c，但后缀还是mm或m。\n总结：只要cpp文件和cpp include的文件中不包含obj-c的东西就可以用了，cpp混用obj-c的关键是使用接口，而不能直接使用 实现代 码，实际上cpp混用的是obj-c编译后的o文件，这个东西其实是无差别的，所以可以用。obj-c的编译器支持cpp",
    "ID" : "5629f9e1e4b05e6f47b0ea28",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "C和obj-c 如何混用"
  },
  {
    "answer" : "CocoaTouch框架中用到了大量委托，其中UITableViewDelegate就是委托机制的典型应用，是一个典型的使用委托来实现适配器模式，其中UITableViewDelegate协议是目标，tableview是适配器，实现UITableViewDelegate协议，并将自身设置为talbeview的delegate的对象，是被适配器，一般情况下该对象是UITableViewController。\n\nUITableVIew的Data Source方法有- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section;\n\n- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath;",
    "ID" : "5629f9e1e4b05e6f47b0ea0c",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "给出委托方法的实例，并且说出UITableVIew的Data Source方法"
  },
  {
    "ID" : "55b5a5cee4b0ef2b575583d5",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "ARC有效时，虽然autorelease无法使用、也不起作用。",
    "optionC" : "附有__unsafe_unretained修饰符的变量不属于编译器的内存管理对象。",
    "optionAnswer" : "D",
    "answer" : "ARC有效时可以这样使用autorelease功能：\n@autoreleasepool{\n id __autoreleasing obj = [[NSObject alloc] init];\n}",
    "optionB" : "ARC式的内存管理是编译器的工作。",
    "type" : "1",
    "optionA" : "通过检查附有__weak修饰符的变量是否为nil，可以判断被赋值的对象是否已废弃。",
    "question" : "下列说法错误的是"
  },
  {
    "answer" : " 1. 每一个线程中都一个runloop,只有主线的的runloop默认是开启的,其他线程的runloop是默认没有开启的  2. 可以通过CFRunLoopRun() 函数来开启一个事件循环",
    "ID" : "e5956576ea7c11e5b65200163e0021c8",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "runloop和线程有什么关系？"
  },
  {
    "answer" : " http是客户端用http协议进行请求，发送请求时候需要封装http请求头，并绑定请求的数据，服务器一般有web服务器配合（当然也非绝对）。 http请求方式为客户端主动发起请求，服务器才能给响应，一次请求完毕后则断开连接，以节省资源。服务器不能主动给客户端响应（除非采取http长连接 技术）。iphone主要使用类是NSUrlConnection。\n\nscoket是客户端跟服务器直接使用socket“套接字”进行连接，并没有规定连接后断开，所以客户端和服务器可以保持连接通道，双方 都可以主动发送数据。一般在游戏开发或股票开发这种要求即时性很强并且保持发送数据量比较大的场合使用。主要使用类是CFSocketRef。",
    "ID" : "5629f9e1e4b05e6f47b0ea3d",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "http和scoket通信的区别。"
  },
  {
    "answer" : "_objc_msgForward是 IMP 类型，用于消息转发的：当向一个对象发送一条消息，但它并没有实现的时候，_objc_msgForward会尝试做消息转发。",
    "ID" : "55f2e4eee4b0152a611431cc",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "_objc_msgForward函数是做什么的，直接调用它将会发生什么？"
  },
  {
    "ID" : "55b5a5cee4b0ef2b57558395",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "goBack：返回前一画面",
    "optionC" : "stopLoading：读入停止",
    "optionAnswer" : "B",
    "answer" : "goForward是进入下一画面",
    "optionB" : "goForward：回到主界面",
    "type" : "1",
    "optionA" : "reload：重新读入页面",
    "question" : "下列关于UIWebView中方法叙述错误的是"
  },
  {
    "ID" : "55b5a5cee4b0ef2b575583b4",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "Motion",
    "optionC" : "Accelerometer",
    "optionAnswer" : "A",
    "answer" : "UISwipeGestureRecognizer手势，手指在屏幕上很快的滑动",
    "optionB" : "Multitouch",
    "type" : "1",
    "optionA" : "UISwipeGestureRecognizer",
    "question" : "下列中属于手势的是"
  },
  {
    "answer" : "1）管道（Pipe）：管道可用于具有亲缘关系进程间的通信，允许一个进程和另一个与它有共同祖先的进程之间进行通信。\n\n　　（2）命名管道（named pipe）：命名管道克服了管道没有名字的限制，因此，除具有管道所具有的功能外，它还允许无亲缘关系进程间的通信。命名管道在文件系统中有对应的文件名。命名管道通过命令mkfifo或系统调用mkfifo来创建。\n\n　　（3）信号（Signal）：信号是比较复杂的通信方式，用于通知接受进程有某种事件发生，除了用于进程间通信外，进程还可以发送信号给进程本身；linux除了支持Unix早期信号语义函数sigal外，还支持语义符合Posix.1标准的信号函数sigaction（实际上，该函数是基于BSD的，BSD为了实现可靠信号机制，又能够统一对外接口，用sigaction函数重新实现了signal函数）。\n\n　　（4）消息（Message）队列：消息队列是消息的链接表，包括Posix消息队列system V消息队列。有足够权限的进程可以向队列中添加消息，被赋予读权限的进程则可以读走队列中的消息。消息队列克服了信号承载信息量少，管道只能承载无格式字节流以及缓冲区大小受限等缺\n\n　　（5）共享内存：使得多个进程可以访问同一块内存空间，是最快的可用IPC形式。是针对其他通信机制运行效率较低而设计的。往往与其它通信机制，如信号量结合使用，来达到进程间的同步及互斥。\n\n　　（6）内存映射（mapped memory）：内存映射允许任何多个进程间通信，每一个使用该机制的进程通过把一个共享的文件映射到自己的进程地址空间来实现它。\n\n　　（7）信号量（semaphore）：主要作为进程间以及同一进程不同线程之间的同步手段。\n\n　　（8）套接口（Socket）：更为一般的进程间通信机制，可用于不同机器之间的进程间通信。起初是由Unix系统的BSD分支开发出来的，但现在一般可以移植到其它类Unix系统上：Linux和System V的变种都支持套接字。",
    "ID" : "5602715de4b043d0cb1d39e1",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "进程间通信的方式有______"
  },
  {
    "answer" : "首先我们从代码来看，数据源如何关联上的，其实是在数据源关联的代理方法里实现的。\n因此我们并不关心如何去关联他，他怎么关联上，方法只是让我返回根据自己的需要去设置如相关的数据源。\n因此，我觉得可以设置多个数据源啊，但是有个问题是，你这是想干嘛呢?想让列表如何显示，不同的数据源分区块显示?",
    "ID" : "5602715ee4b043d0cb1d3a07",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "一个tableView是否可以关联两个不同的数据源?你会怎么处理?"
  },
  {
    "ID" : "55b5a5cde4b0ef2b57558366",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "frame 的参考系是自身坐标，bounds 的参考系是父视图的坐标",
    "optionC" : "frame 的参考系是父视图坐标，bounds 的参考系是自身的坐标 ",
    "optionAnswer" : "C",
    "answer" : "frame的参考系是父视图坐标，bounds的参考系是自身的坐标。",
    "optionB" : "frame 是 bounds 的继承类 ",
    "type" : "1",
    "optionA" : "frame 是 bounds 的别名 ",
    "question" : "在UIKit中，frame与bounds的区别是 "
  },
  {
    "answer" : "30\n #define SQUAKE(a)((5)*(6))",
    "ID" : "5602715de4b043d0cb1d39e0",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "#define SQUAKE(a)((a)*(a))\nint a=5;\nint b;\nb = SQUAKE(a++);\n此时：b=_____"
  },
  {
    "ID" : "55b5a5cde4b0ef2b57558360",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "View不可以兼听广播信息。",
    "optionC" : "Model和View可以直接通讯",
    "optionAnswer" : "A",
    "answer" : "Controller可以直接和Model通信\nController也可以直接和View通信\nModel和View永远不能直接通信View也可以监听广播信息，但一般不是Model发出的信息",
    "optionB" : "Controller不可以直接和View通讯",
    "type" : "1",
    "optionA" : "Controller可以直接和Model通信",
    "question" : "下列属于Model，Controller,View 相互通讯规则的是"
  },
  {
    "answer" : "  1. 他是一个死循环   2.如果事件队列中存放在事件,那就取出事件,执行相关代码   3.如果没有事件,就挂起,等有事件了,立即唤醒事件循环,开始执行. 简单来说。。。 function loop() {     initialize();     do {         var message = get_next_message();         process_message(message);     } while (message != quit); }",
    "ID" : "28e64480ea7d11e58afd00163e0021c8",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "猜想runloop内部是如何实现的？"
  },
  {
    "answer" : "iOS中的多线程，是Cocoa框架下的多线程，通过Cocoa的封装，可以让我们更为方便的使用线程，做过C++的同学可能会对线程有更多的理解，比如线程的创立，信号量、共享变量有认识，Cocoa框架下会方便很多，它对线程做了封装，有些封装，可以让我们创建的对象，本身便拥有线程，也就是线程的对象化抽象，从而减少我们的工程，提供程序的健壮性。\n\nGCD是(Grand Central Dispatch)的缩写 ，从系统级别提供的一个易用地多线程类库，具有运行时的特点，能充分利用多核心硬件。GCD的API接口为C语言的函数，函数参数中多数有Block，关于Block的使用参看这里，为我们提供强大的“接口”。\n\nNSOperation与Queue\nNSOperation是一个抽象类，它封装了线程的细节实现，我们可以通过子类化该对象，加上NSQueue来同面向对象的思维，管理多线程程序。具体可参看这里：一个基于NSOperation的多线程网络访问的项目。\n\nNSThread\nNSThread是一个控制线程执行的对象，它不如NSOperation抽象，通过它我们可以方便的得到一个线程，并控制它。但NSThread的线程之间的并发控制，是需要我们自己来控制的，可以通过NSCondition实现。\n\n其他多线程\n在Cocoa的框架下，通知、Timer和异步函数等都有使用多线程。",
    "ID" : "5669528f60b25a8c2e23e0c5",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "简述一下iOS 中的多线程"
  },
  {
    "answer" : "设计模式：并不是一种新技术，而是一种编码经验，使用比如java中的接口，iphone中的协议，继承关系等基本手段，用比较成熟的逻辑去处理某一种类型的事情，总结为所谓设计模式。面向对象编程中，java已经归纳了23种设计模式。\n\nmvc设计模式 ：模型，视图，控制器，可以将整个应用程序在思想上分成三大块，对应是的数据的存储或处理，前台的显示，业务逻辑的控制。 Iphone本身的设计思想就是遵循mvc设计模式。其不属于23种设计模式范畴。\n\n代理模式：代理模式给某一个对象提供一个代理对象，并由代理对象控制对源对象的引用.比如一个工厂生产了产品，并不想直接卖给用户，而是搞了很多代理商，用户可以直接找代理商买东西，代理商从工厂进货.常见的如QQ的自动回复就属于代理拦截，代理模式在iphone中得到广泛应用.\n\n单例模式：说白了就是一个类不通过alloc方式创建对象，而是用一个静态方法返回这个类的对象。系统只需要拥有一个的全局对象，这样有利于我们协调系统整体的行为，比如想获得[UIApplication sharedApplication];任何地方调用都可以得到 UIApplication的对象，这个对象是全局唯一的。\n\n观察者模式： 当一个物体发生变化时，会通知所有观察这个物体的观察者让其做出反应。实现起来无非就是把所有观察者的对象给这个物体，当这个物体的发生改变，就会调用遍历所有观察者的对象调用观察者的方法从而达到通知观察者的目的。\n\n工厂模式:\npublic class Factory{\npublic static Sample creator(int which){\nif (which==1)\nreturn new SampleA();\nelse if (which==2)\nreturn new SampleB();\n}\n}",
    "ID" : "5629f9e0e4b05e6f47b0e9f6",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "MVC设计模式是什么？ 你还熟悉什么设计模式？"
  },
  {
    "answer" : "runtime 对注册的类， 会进行布局，对于 weak 对象会放入一个 hash 表中。 用 weak 指向的对象地址作为 key，当此对象的引用计数为0的时候会 dealloc， 进而在这个 weak 表中找到此对象地址为键的所有 weak 对象，从而设置为 nil",
    "ID" : "d504a9d0ea7511e58afd00163e0021c8",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "runtime 如何实现 weak 属性?"
  },
  {
    "answer" : "iOS 的相册是支持保存 GIF 和 APNG 动图的，只是不能直接播放。用 [ALAssetsLibrary writeImageDataToSavedPhotosAlbum:metadata:completionBlock] 可以直接把 APNG、GIF 的数据写入相册。如果图省事直接用 UIImageWriteToSavedPhotosAlbum() 写相册，那么图像会被强制转码为 PNG。",
    "ID" : "6c312f1c3d0611e6914600163e002bfe",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "如何把 GIF 动图保存到相册？"
  },
  {
    "answer" : "1.死循环了  2.访问一个僵尸对象",
    "ID" : "a35e74a8ea7d11e58afd00163e0021c8",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "BAD_ACCESS在什么情况下出现？"
  },
  {
    "ID" : "55b5a5cee4b0ef2b575583ce",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "id和对象类型在没有明确指定所有权修饰符时，默认为__weak修饰符.",
    "optionC" : "__strong修饰符的变量，不仅只在变量作用域中，在赋值上也能够正确地管理其对象的所有者。",
    "optionAnswer" : "D",
    "answer" : "id和对象类型在没有明确指定所有权修饰符时，默认为__strong修饰符.",
    "optionB" : "ARC有效时id和对象类型的所有权修饰符：__strong、__weak、__unsafe_unretained、__autoreleasing",
    "type" : "1",
    "optionA" : "__strong修饰符表示对对象的“强引用”，持有强引用的变量在超出其作用域时被废弃，随着强引用的失效，引用的对象会随之释放。",
    "question" : "下列说法错误的是"
  },
  {
    "ID" : "5629f9e0e4b05e6f47b0e9c0",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "auto",
    "optionC" : "retain",
    "optionAnswer" : "A",
    "answer" : "retain 表示持有特性，setter方法将传入参数先保留，再赋值，传入参数的retaincount会+1;\nassign 是赋值特性，setter方法将传入参数赋值给实例变量;仅设置变量时;\ncopy 表示赋值特性，setter方法将传入对象复制一份;需要完全一份新的变量时。\n",
    "optionB" : "copy",
    "type" : "1",
    "optionA" : "assign",
    "question" : "简单类型的成员比如:int类型成员在使用@property()时,括号中应使用："
  },
   {
   "ID" : "55b5a5cee4b0ef2b575583ae",
   "typeID" : "549936f7e4b06783458bde67",
   "optionD" : "int (^blk)(int) = ^(int count){return count+3;};",
   "optionC" : "void ^(int count){return count+2;}",
   "optionAnswer" : "C",
   "answer" : "没有返回值",
   "optionB" : "^{printf(“Block”)};",
   "type" : "1",
   "optionA" : "^(int count){return count+1;}",
   "question" : "下列有关block有误的一项是："
   },
   {
   "answer" : "版本控制 svn,cvs 是两种版控制的器,需要配套相关的svn，cvs服务器。\n\nscm是xcode里配置版本控制的地方。版本控制的原理就是a和b同时开发一个项目，a写完当天的代码之后把代码提交给服务器，b要做的时候先从服务器得到最新版本，就可以接着做。 如果a和b都要提交给服务器，并且同时修改了同一个方法，就会产生代码冲突，如果a先提交，那么b提交时，服务器可以提示冲突的代码，b可以清晰的看到，并做出相应的修改或融合后再提交到服务器。",
   "ID" : "5629f9e1e4b05e6f47b0ea3f",
   "typeID" : "549936f7e4b06783458bde67",
   "type" : "2",
   "question" : "你了解svn,cvs等版本控制工具么？"
   },
   {
   "ID" : "5629f9e0e4b05e6f47b0e9b3",
   "typeID" : "549936f7e4b06783458bde67",
   "optionD" : "方括号中可以为空",
   "optionC" : "在Objective-C中通知对象执行某种操作,称为发送消息.(也叫调用方法)",
   "optionAnswer" : "D",
   "answer" : "调用方法不可为空",
   "optionB" : "方括号内第一项是对象,其余部分是你需要对象执行的操作",
   "type" : "1",
   "optionA" : "用于通知某个对象该做什么",
   "question" : "对于Objective-C中的方括号“[]”的作用,下列说法错误的是："
   },
   {
   "ID" : "55b5a5cee4b0ef2b5755837c",
   "typeID" : "549936f7e4b06783458bde67",
   "optionD" : "UDP具有较好的实时性，工作效率较TCP高",
   "optionC" : "TCP对系统资源要求少，UDP对系统资源要求多。",
   "optionAnswer" : "C",
   "answer" : "TCP对系统资源要求多，UDP对系统资源要求少。",
   "optionB" : "TCP具有高可靠性，确保传输数据的正确性，不出现丢失或乱序",
   "type" : "1",
   "optionA" : "TCP和UDP都属于传输层协议",
   "question" : "下列关于TCP和UDP错误的是"
   },
   {
   "ID" : "55b5a5cde4b0ef2b5755834f",
   "typeID" : "549936f7e4b06783458bde67",
   "optionD" : "init -> viewDidAppear -> viewDidUnload -> viewDidLoad",
   "optionC" : "init -> viewDidLoad -> viewDidUnload -> viewDidAppear",
   "optionAnswer" : "A",
   "answer" : "UIViewController的调用顺序init -> viewDidLoad -> viewDidAppear -> viewDidUnload ",
   "optionB" : "init -> viewDidAppear -> viewDidLoad -> viewDidUnload ",
   "type" : "1",
   "optionA" : "init -> viewDidLoad -> viewDidAppear -> viewDidUnload ",
   "question" : "UIViewController在显示过程中，各个方法的调用顺序是 "
   },
   {
   "ID" : "55b5a5cde4b0ef2b57558328",
   "typeID" : "549936f7e4b06783458bde67",
   "optionD" : "算法程序中的指令条数",
   "optionC" : "算法执行过程中所需要的基本运算次数\n",
   "optionAnswer" : "C",
   "answer" : "所谓算法的时间复杂度，是指执行算法所需要的计算工作量。",
   "optionB" : "算法程序的长度",
   "type" : "1",
   "optionA" : "执行算法程序所需要的时间",
   "question" : "算法的时间复杂度是指"
   },
   {
   "ID" : "55b5a5cde4b0ef2b57558352",
   "typeID" : "549936f7e4b06783458bde67",
   "optionD" : "imageNamed方法将使用完图片后立即释放",
   "optionC" : "imageNamed方法将图片加载到内存中后不再释放 ",
   "optionAnswer" : "C",
   "answer" : "imageNamed方法将图片加载到内存中后不再释放 ",
   "optionB" : "imageNamed方法只是创建了一个指针，没有分配其他内存",
   "type" : "1",
   "optionA" : " 没有区别，只是为了方便 ",
   "question" : "使用imageNamed方法创建UIImage对象时，与普通的init方法有什么区别？ "
   },
   {
   "ID" : "5629f9dfe4b05e6f47b0e99f",
   "typeID" : "549936f7e4b06783458bde67",
   "optionD" : "7",
   "optionC" : "6",
   "optionAnswer" : "A",
   "answer" : "set集合中的元素不能重复，所以会少一个元素“2”",
   "optionB" : "5",
   "type" : "1",
   "optionA" : "4",
   "question" : "NSArray *array = [NSArray arrayWithObjects:@\"1\",@\"2\",@\"3\",@\"4\",@\"2\", nil];\nNSMutableSet *set = [[NSMutableSet alloc]init];\nfor(NSString *str in array){ \n [set addObject:str];\n}\nNSLog(@\"%lu\",[set count]);\n[set release];\n控制台打印的结果是："
   },
   {
   "answer" : "#define SECONDS_PER_YEAR (60 * 60 * 24 * 365)UL\n\n我在这想看到几件事情：\n\n#define 语法的基本知识（例如：不能以分号结束，括号的使用，等等）\n\n懂得预处理器将为你计算常数表达式的值，因此，直接写出你是如何计算一年中有多少秒而不是计算出实际的值，是更清晰而没有代价的。\n\n意识到这个表达式将使一个16位机的整型数溢出-因此要用到长整型符号L,告诉编译器这个常数是的长整型数。\n\n如果你在你的表达式中用到UL（表示无符号长整型），那么你有了一个好的起点。记住，第一印象很重要。\n\n",
   "ID" : "5629f9e1e4b05e6f47b0ea2c",
   "typeID" : "549936f7e4b06783458bde67",
   "type" : "2",
   "question" : "用预处理指令#define声明一个常数，用以表明1年中有多少秒（忽略闰年问题）"
   },
   {
   "ID" : "55b5a5cde4b0ef2b5755831f",
   "typeID" : "549936f7e4b06783458bde67",
   "optionD" : "返回值错误",
   "optionC" : "正常 ",
   "optionAnswer" : "B",
   "answer" : "循环调用 会出现死循环",
   "optionB" : "调用会出现死循环 ",
   "type" : "1",
   "optionA" : "应该将var synthesize",
   "question" : "下面的代码问题在哪？\n@implementation xxx\n…\n…\n- (void) setVar:(int)i {\nself.var = i;\n}\n"
   },
  {
    "ID" : "55b5a5cde4b0ef2b5755832c",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "3",
    "optionC" : "2",
    "optionAnswer" : "C",
    "answer" : "- NSString a []={@ \"abc\" ,@ \"def\" };缺少*，OC对象的声明都是指针类型。\n - NSArray * a =[ NSArray arrayWithObjects :@ \"abc\" ,@ \"def\" ];需要一个nil做结尾。",
    "optionB" : "1",
    "type" : "1",
    "optionA" : "0",
    "question" : "NSString a[]={@\"abc\",@\"def\"};\nNSArray*a=@[@\"abc\",@\"def\"];\nNSArray*a=[NSArray arrayWithObjects:@\"abc\",@\"def\"];\nNSArray*a=[NSMutableArray arrayWithArray:@[@\"abc\"]];\n上面的定义中，错误的个数为："
  },
  {
    "ID" : "55b5a5cee4b0ef2b575583b8",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "静态全局变量",
    "optionC" : "静态全局变量",
    "optionAnswer" : "A",
    "answer" : "在函数的多次调用之间能够传递值的变量有：静态局部变量、静态全局变量、全局变量",
    "optionB" : "静态局部变量",
    "type" : "1",
    "optionA" : "函数的参数",
    "question" : "在函数的多次调用之间不能够传递值的变量有"
  },
  {
    "ID" : "55b5a5cde4b0ef2b5755835d",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "用户需要管理放进去的线程执行顺序",
    "optionC" : "放进去的线程会自动执行",
    "optionAnswer" : "D",
    "answer" : "不需要用户管理，会自动管理。",
    "optionB" : " 可以设置最大并发数",
    "type" : "1",
    "optionA" : "存放NSOperation的集合类",
    "question" : "对NSOperationQueue理解不正确的是"
  },
  {
    "answer" : "客户端程序留下后门端口，客户端总是监听针对这个后门的请求，于是 服务器可以主动像这个端口推送消息。",
    "ID" : "5629f9e1e4b05e6f47b0ea40",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "什么是push。"
  },
  {
    "answer" : "copy是内容拷贝，retain是指针拷贝。Copy其实是建立了一个相同的对象，其对象地址和原来对象的地址不同，retain则不是，retain相当于把指针拷贝了一次，地址仍然相同。只有接收了NSCoping协议的对象才能使用copy。",
    "ID" : "5629f9e0e4b05e6f47b0e9e6",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "copy和retain的区别是什么？"
  },
  {
    "answer" : "const 意味着\"只读\"，下面的声明都是什么意思？\nconst int a;\nint const a;\nconst int *a;\nint * const a;\nint const * a const;\n前两个的作用是一样，a是一个常整型数。\n\n第三个意味着a是一个指向常整型数的指针（也就是，整型数是不可修改的，但指针可以）。\n\n第四个意思a是一个指向整型数的常指针（也就是说，指针指向的整型数是可以修改的，但指针是不可修改的）。\n\n最后一个意味着a是一个指向常整型数的常指针（也就是说，指针指向的整型数是不可修改的，同时指针也是不可修改的）。\n\n结论：\n\n关键字const的作用是为给读你代码的人传达非常有用的信息，实际上，声明一个参数为常量是为了告诉了用户这个参数的应用目的。\n\n如果你曾花很多时间清理其它人留下的垃圾，你就会很快学会感谢这点多余的信息。（当然，懂得用const的程序员很少会留下的垃圾让别人来清理的）  通过给优化器一些附加的信息，使用关键字const也许能产生更紧凑的代码。合理地使用关键字const可以使编译器很自然地保护那些不希望被改变的参数，防止其被无意的代码修改。简而言之，这样可以减少bug的出现。\n\n1).欲阻止一个变量被改变，可以使用 const 关键字。在定义该 const 变量时，通常需要对它进行初\n\n始化，因为以后就没有机会再去改变它了；\n\n2).对指针来说，可以指定指针本身为 const，也可以指定指针所指的数据为 const，或二者同时指\n\n定为 const；\n\n3).在一个函数声明中，const 可以修饰形参，表明它是一个输入参数，在函数内部不能改变其值；\n\n4).对于类的成员函数，若指定其为 const 类型，则表明其是一个常函数，不能修改类的成员变量；\n\n5).对于类的成员函数，有时候必须指定其返回值为 const 类型，以使得其返回值不为“左值”。\n\n",
    "ID" : "5629f9e1e4b05e6f47b0ea2e",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "关键字const有什么含意？修饰类呢?static的作用,用于类呢?还有extern c的作用"
  },
  {
    "ID" : "55b5a5cee4b0ef2b575583c9",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "autorelease类似于C语言中的自动变量，当超出其作用域时对象实例的release实例方法被调用。",
    "optionC" : "引用计数值为1时，也可以调用dealloc方法废弃对象。",
    "optionAnswer" : "D",
    "answer" : "调用alloc或retain方法后，引用计数值加1.调用release后，引用计数值减1.引用计数值为0时，调用dealloc方法废弃对象。",
    "optionB" : "只调用release后，引用计数值不一定减1.",
    "type" : "1",
    "optionA" : "只调用alloc或retain方法后，引用计数值可能不变.",
    "question" : "下列说法正确的是"
  },
  {
    "answer" : "typedef void(^animations) (void);\ntypedef void(^completion) (BOOL finished);",
    "ID" : "5629f9e1e4b05e6f47b0ea1b",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "[UIView transitionWithView:self.view\nduration:0.2\noptions:UIViewAnimationOptionTransitionFlipFromLeft\nanimations:^{ [[blueViewController view] removeFromSuperview]; [[self view] insertSubview:yellowViewController.view atIndex:0]; }\ncompletion:NULL];\n写出上面代码的Block的定义。"
  },
  {
    "ID" : "5629f9e0e4b05e6f47b0e9ce",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "类比较抽象，对象比较具体",
    "optionC" : "一对文件（Person.h Person.m）只能定义一个类",
    "optionAnswer" : "C",
    "answer" : "一个文件可以定义多个类",
    "optionB" : "可以把声明和实现都放到.h文件中",
    "type" : "1",
    "optionA" : "类的接口部分可以包含实例变量、属性和方法",
    "question" : "以下对类的描述不正确的是："
  },
  {
    "answer" : "指向他的类对象,从而可以找到对象上的方法",
    "ID" : "55f2e4eee4b0152a611431c7",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "一个objc对象的isa的指针指向什么？有什么作用？"
  },
  {
    "answer" : " 只要是一个对象对该block进行了强引用,在block内部有直接使用到该对象就会造成循环引用；用弱引用解决",
    "ID" : "48769862ea7e11e5b65200163e0021c8",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "使用block时什么情况会发生循环引用，如何解决？"
  },
  {
    "ID" : "55b5a5cee4b0ef2b575583b1",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "程序启动的主入口点为iOS应用程序的UIApplication函数",
    "optionC" : "main函数的主要作用是控制UIKit framework",
    "optionAnswer" : "C",
    "answer" : "UIApplicationMain函数有四个参数，程序启动的主入口点为iOS应用程序的main函数，一个iOS中必须有Main函数",
    "optionB" : "一个iOS程序可以没有Main函数",
    "type" : "1",
    "optionA" : "UIApplicationMain函数有两个参数",
    "question" : "下列说法正确的是"
  },
  {
    "answer" : "可修改不可修改的集合类。这个我个人简单理解就是可动态添加修改和不可动态添加修改一样。\n\n比如NSArray和NSMutableArray。前者在初始化后的内存控件就是固定不可变的，后者可以添加等，可以动态申请新的内存空间。",
    "ID" : "5629f9e1e4b05e6f47b0e9fd",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "oc中可修改和不可以修改类型。"
  },
  {
    "ID" : "55b5a5cee4b0ef2b5755837d",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "ood的多态特性在?obj-c?中通过委托来实现",
    "optionC" : "多继承在这里是用protocol?委托代理来实现的",
    "optionAnswer" : "A",
    "answer" : "Category理论上不能添加变量，但是可以使用@dynamic 来弥补这种不足",
    "optionB" : "cocoa 中所有的类都是NSObject 的子类",
    "type" : "1",
    "optionA" : "Category上可以添加变量",
    "question" : "下列错误的选项是"
  },
  {
    "answer" : "多态，子类指针可以赋值给父类。 这个题目其实可以出到一切面向对象语言中， 因此关于多态，继承和封装基本最好都有个自我意识的理解，也并非一定要把书上资料上写的能背出来。 最重要的是转化成自我理解。",
    "ID" : "5602715de4b043d0cb1d39bd",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "关于多态性"
  },
  {
    "ID" : "55b5a5cee4b0ef2b575583cb",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "Cocoa框架中很多类方法用于返回autorelease的对象。",
    "optionC" : "大量使用autorelease对象时，容易导致内存不足现象。",
    "optionAnswer" : "B",
    "answer" : "如果NSAutoreleasePool被嵌套使用，那么会使用最内侧的。",
    "optionB" : "如果NSAutoreleasePool被嵌套使用，那么会使用最外侧的。",
    "type" : "1",
    "optionA" : "autorelease类似于C语言中的自动变量，当超出其作用域时对象实例的release实例方法被调用。",
    "question" : "下列说法错误的是"
  },
  {
    "answer" : "\/\/头插法，逆序链表\n\n#include\n\n#include\n\nusing namespace std;\n\ntypedef struct _NODE{\n\n     int x;\n\n     struct _NODE *pNext;\n\n}NODE;\n\n\n\n#define LEN_NODE ( sizeof(NODE) )\n\n \n\nNODE *pHead = (NODE *) malloc (LEN_NODE);\n\n\nvoid fun( NODE *p )\n\n{\n\n NODE *pCur,     \/\/curten node of old list\n\n   *pNewCur;    \/\/curten node of new list\n\n \n\n pCur = pHead->pNext;\n\n pHead->pNext = NULL;\n\n\n while( pCur )\n\n {\n\n  if( pHead->pNext != NULL )\n\n  {\/\/link other node\n\n   pNewCur = pHead->pNext;\n\n   pHead->pNext = pCur;\n\n   pCur = pCur->pNext;\n\n   pHead->pNext->pNext = pNewCur;\n\n  }\n\n  else\n\n  {\/\/Link first node\n\n   pHead->pNext = pCur;\n\n   pCur = pCur->pNext;\n\n   pHead->pNext->pNext = NULL;\n\n  }  \n\n }\n\n\n \/\/test print\n\n pCur = pHead->pNext;\n\n while( pCur )\n\n {\n\n  printf(\"%d\\n\", pCur->x );\n\n  pCur = pCur->pNext; \n\n }\n\n}\n\nvoid main()\n\n{\n\n\n NODE *pCur = pHead;\n\n int i = 10;\n\n while( i-- )\n\n {\n\n  pCur->pNext = (NODE *) malloc (LEN_NODE);\n\n  pCur = pCur->pNext;\n\n  pCur->x = i + 1;\n\n }\n\n pCur->pNext = NULL;\n\n\n\n pCur = pHead->pNext;\n\n\n\n while( pCur )\n\n {\n\n  printf(\"%d\\n\", pCur->x );\n\n  pCur = pCur->pNext; \n\n }\n\n\n\n \/\/TEST\n\n fun(pHead);\n}",
    "ID" : "5602715de4b043d0cb1d39e2",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "将一个头指针为head且带头结点的单链表反向排列，求算法"
  },
  {
    "answer" : "有以下几种保存机制：\n\n1).通过web服务，保存在服务器上\n\n2).通过NSCoder固化机制，将对象保存在文件中\n\n3).通过SQlite或CoreData保存在文件数据库中",
    "ID" : "5629f9e1e4b05e6f47b0ea14",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "在iPhone应用中如何保存数据?"
  },
  {
    "ID" : "55b5a5cee4b0ef2b57558394",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "UIApplication",
    "optionC" : "应用程序视图",
    "optionAnswer" : "D",
    "answer" : "在MainStoryBoard.storyboard界面中包含了三个图标First Responder（一个UIResponder实例）ViewController（我们的ViewController类）应用程序视图（一个View实例）。",
    "optionB" : "ViewController",
    "type" : "1",
    "optionA" : "First Responder",
    "question" : "在MainStoryboard.storyboard界面中不包括下列哪项"
  },
  {
    "ID" : "55b5a5cde4b0ef2b57558351",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "4",
    "optionC" : "3",
    "optionAnswer" : "B",
    "answer" : "一个用来存所有数据，一个用来存要显示出来的数据",
    "optionB" : "2",
    "type" : "1",
    "optionA" : "1",
    "question" : "UITableView中cell的复用是由几个数组实现的"
  },
  {
    "ID" : "55b5a5cee4b0ef2b57558378",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "KVO 能够观察一个对象的 KVC key path 值的变化",
    "optionC" : "KVC 有两个方法：一个是设置 key 的值，另一个是获取 key 的值",
    "optionAnswer" : "B",
    "answer" : "KVO 就是基于 KVC 实现的关键技术之一",
    "optionB" : "KVO 与 KVC 没有什么关系",
    "type" : "1",
    "optionA" : "KVC是一个非正式的 Protocol，提供一种机制来间接访问对象的属性",
    "question" : "下列关于KVC、KVO的说法错误的是"
  },
  {
    "answer" : "原子操作  信号量机制    自旋锁    管程，会合，分布式系统",
    "ID" : "5629f9e1e4b05e6f47b0ea33",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "列举几种进程的同步机制，并比较其优缺点。"
  },
  {
    "ID" : "5602715de4b043d0cb1d3987",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "x=1",
    "optionC" : " ++x",
    "optionAnswer" : "D",
    "answer" : "前三个的值都是可变的。多个线程同时访问的时候，可能每个获取到的数据不同，但是x=1;这句只是一个赋值语句，并且返回值是固定的。没有同步的必要。",
    "optionB" : "x++",
    "type" : "1",
    "optionA" : "x=y",
    "question" : "以下多线程对int型变量x的操作，哪个不需要进行同步： "
  },
  {
    "ID" : "55b5a5cfe4b0ef2b575583e0",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "RemoteControl",
    "optionC" : "UIPinchGestureRecognizer",
    "optionAnswer" : "D",
    "answer" : "typedef enum {\n    UIEventTypeTouches,\n    UIEventTypeMotion,\n    UIEventTypeRemoteControl,\n} UIEventType;",
    "optionB" : "UISwipeGestureRecognizer",
    "type" : "1",
    "optionA" : "UITapGestureRecognizer",
    "question" : "下列属于UIEventType事件类型的是"
  },
  {
    "answer" : "如果没有指定成员变量的名称与自动生成一个属性同名的成员变量,如果指定的成员变量的名称,会生成一个指定的名称的成员变量,如果这个成员已经存在了就不再生成了. 如果是 @synthesize foo; 还会生成一个名称为foo的成员变量 如果是 @synthesize foo = _foo; 就不会生成成员变量了.",
    "ID" : "99c8408cea7711e5b65200163e0021c8",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "@synthesize合成实例变量的规则是什么？假如property名为foo，存在一个名为_foo的实例变量，那么还会自动合成新变量么？"
  },
  {
    "answer" : "objective-c – 类里面的方法只有两种, 静态方法和实例方法. 这似乎就不是完整的面向对象了,按照OO的原则就是一个对象只暴露有用的东西. 如果没有了私有方法的话, 对于一些小范围的代码重用就不那么顺手了. 在类里面声名一个私有方法\n\n@interface Controller : NSObject { NSString *something; }\n\n+ (void)thisIsAStaticMethod;\n\n- (void)thisIsAnInstanceMethod;\n\n@end\n\n@interface Controller (private) -\n\n(void)thisIsAPrivateMethod;\n\n@end\n\n \n\n@private 可以用来修饰私有变量\n\n在Objective‐C 中，所有实例变量默认都是私有的，所有实例方法默认都是公有的",
    "ID" : "5602715de4b043d0cb1d39c7",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "obj-c 有私有方法么? 私有变量呢？"
  },
  {
    "answer" : "只输出：1 。发生主线程锁死。",
    "ID" : "55f2e4eee4b0152a611431df",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "以下代码运行结果如何？\n- (void)viewDidLoad\n{\n    [super viewDidLoad];\n    NSLog(@\"1\");\n    dispatch_sync(dispatch_get_main_queue(), ^{\n        NSLog(@\"2\");\n    });\n    NSLog(@\"3\");\n}"
  },
  {
    "ID" : "55b5a5cde4b0ef2b5755835b",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "if([str1 length] == [str2 length]) xxx;",
    "optionC" : "if(str1 && str2) xxx ; ",
    "optionAnswer" : "B",
    "answer" : "字符串之间的比较用\"isEqualToString\"",
    "optionB" : "if([str1 isEqualToString:str2]) xxx ; ",
    "type" : "1",
    "optionA" : "if(str1 = str2) xxx ; ",
    "question" : "下面那个方法可以比较两个NSString *str1, *str2 的异同 "
  },
  {
    "ID" : "55b5a5cee4b0ef2b57558386",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "若使用alloc或copy方法来直接创建对象，不需要由你释放他",
    "optionC" : "若你的方法中不再需要一个对象时，但需要返回它，可发送一条autorelease消息来加入自动释放池",
    "optionAnswer" : "C",
    "answer" : "1、释放对象，可以释放其所占的内存，规则是：不再使用创建或者保持的对象时，就释放它们。2、发送一条release消息不一定销毁对象，只有引用计数变为0时，才销毁这个对象。系统向对象发送一条dealloc消息来释放它所占的内存。\n3、自动释放池在释放池本身的时候自动释放池中的对象。系统向每个对象发送一条release消息，对引用计数变为0的对象发送一条dealloc消息来释放它所占的内存。\n4、若你的方法中不再需要一个对象时，但需要返回它，可发送一条autorelease消息来加入自动释放池。\n5、若使用alloc或copy方法（或使用allocWithZone：、copyWithZone：或mutableCopy方法来直接创建对象，则由你负责释放它。每次retain对象时，应该release或autoreleas它。",
    "optionB" : "系统向对象发送一条dealloc消息来释放他所占的内存，对象不一定销毁",
    "type" : "1",
    "optionA" : "发送一条release消息对象就会销毁",
    "question" : "下列关于内存管理说法正确的是"
  },
  {
    "answer" : "void fun (char *a)\n\n {\n\nint j=0;\n\nchar *p=a;\n\nwhile (*p==’*’)p++;\n\nwhile (*p){\n\na[j++]=*p;\n\np++;\n\n }\n\na[j]=0;\n\n }",
    "ID" : "5602715de4b043d0cb1d39c8",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "假定输入的字符串中只包含字母和* 号。编写函数fun，功能是，除了中间和尾部的*号外，\n\n将字符串中其他* 号全部删除。编写时，不用c的其他函数。\n例：*****A*BC*DEF*G****    结果为：A*BC*DEF*G****"
  },
  {
    "ID" : "5629f9e0e4b05e6f47b0e9c2",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "dealloc方法不能直接调用",
    "optionC" : "release可以减小对象的引用计数，但autorelease不可以",
    "optionAnswer" : "C",
    "answer" : "release，releasepool的功能是一样的",
    "optionB" : "retain关键字可以增大对象的引用计数。",
    "type" : "1",
    "optionA" : "retaincount是指对象的引用计数。",
    "question" : "内存管理的关键字描述错误的是："
  },
  {
    "answer" : "第一次握手：客户端发送syn包(syn=j)到服务器，并进入SYN_SEND状态，等待服务器确认； 第二次握手：服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态； 第三次握手：客户端收到服务器的SYN＋ACK包，向服务器发送确认包ACK(ack=k+1)，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手。  握手过程中传送的包里不包含数据，三次握手完毕后，客户端与服务器才正式开始传送数据。理想状态下，TCP连接一旦建立，在通信双方中的任何一方主动关闭连接之前，TCP 连接都将被一直保持下去。断开连接时服务器和客户端均可以主动发起断开TCP连接的请求，断开过程需要经过“四次握手”（过程就不细写了，就是服务器和客户端交互，最终确定断开）",
    "ID" : "83181d6cea7211e5b65200163e0021c8",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "什么是TCP连接的三次握手"
  },
  {
    "ID" : "5602715de4b043d0cb1d398a",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "@autorelease SomeClass ",
    "optionC" : "@implementation SomeClass",
    "optionAnswer" : "A",
    "answer" : "类声明的编译处理指令以@interface开始，以@end结尾，在这之间代码便是类变量的定义和方法的声明。",
    "optionB" : "@protocol SomeClass",
    "type" : "1",
    "optionA" : "@interface SomeClass ",
    "question" : "Objective-C声明一个类所要用到的编译指令是 "
  },
  {
    "answer" : "不能向编译后得到的类中增加实例变量；\n能向运行时创建的类中添加实例变量；\n解释下：\n\n因为编译后的类已经注册在 runtime 中，类结构体中的 objc_ivar_list 实例变量的链表 和 instance_size 实例变量的内存大小已经确定，同时runtime 会调用 class_setIvarLayout 或 class_setWeakIvarLayout 来处理 strong weak 引用。所以不能向存在的类中添加实例变量；\n运行时创建的类是可以添加实例变量，调用 class_addIvar 函数。但是得在调用 objc_allocateClassPair 之后，objc_registerClassPair 之前，原因同上。",
    "ID" : "55f2e4eee4b0152a611431ce",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "能否向编译后得到的类中增加实例变量？能否向运行时创建的类中添加实例变量？为什么？"
  },
  {
    "ID" : "55b5a5cee4b0ef2b5755837a",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : " JSON是一种轻量级的数据交换格式",
    "optionC" : "花括号保存数组",
    "optionAnswer" : "C",
    "answer" : "花括号保存对象\n方括号保存数组",
    "optionB" : "数据由逗号分隔",
    "type" : "1",
    "optionA" : "数据在名称\/值对中",
    "question" : "下列关于JSON 错误的是"
  },
  {
    "answer" : "1. 我猜想autoreleasepool 本质就是一个队列(数组), 2. 当调用autorelease的时候会把该对象添加到autoreleasepool中,并且把引用计数+1 3. 当autoreleasepool即将销毁的时候,把其中的所有对象进行一次release操作",
    "ID" : "c4e3bf34ea7d11e5b65200163e0021c8",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "苹果是如何实现autoreleasepool的？"
  },
  {
    "ID" : "55b5a5cee4b0ef2b57558376",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "单例模式（Singleton）",
    "optionC" : "模板(Template)模式",
    "optionAnswer" : "D",
    "answer" : "组合模式composition，所有的container view都用了这个模式\n\n观察者模式observer，所有的UIResponder都用了这个模式。\n\n模板(Template)模式，所有datasource和delegate接口都是模板模式的典型应用",
    "optionB" : "观察者模式observer",
    "type" : "1",
    "optionA" : "组合模式composition",
    "question" : "下列哪个设计模式在UIscrollVew中没有用到"
  },
  {
    "ID" : "5629f9dfe4b05e6f47b0e998",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "@protocol",
    "optionC" : "@implemention",
    "optionAnswer" : "B",
    "answer" : " @import是导入头文件\n@implement是接口方法的实现\n@protocol是协议的声明",
    "optionB" : "@interface",
    "type" : "1",
    "optionA" : "@import",
    "question" : "在OC中类的接口声明关键字为："
  },
  {
    "ID" : "55b5a5cee4b0ef2b575583aa",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "此时obj0持有obj1赋值的对象B的强引用。",
    "optionC" : "此时obj0、obj1、obj2都失去了强引用，因此对象B被废弃",
    "optionAnswer" : "C",
    "answer" : "此时，持有对象B的强引用的变量为obj0、obj2",
    "optionB" : "、因为nil被赋予了obj1，所以对对象B的强引用失效",
    "type" : "1",
    "optionA" : "obj1被赋值nil之前，obj2持有由obj0赋值的对象B的强引用。",
    "question" : "id __strong obj0 = [[NSObject alloc] init]; \/*obj0持有对象A的强引用*\/\nid __strong obj1 = [[NSObject alloc] init]; \/*obj1持有对象B的强引用*\/\nid __strong obj2 = nil; \/*obj2不持有任何对象*\/obj0 = obj1;\nobj2 = obj0；\nobj1 = nil;，下列说法错误的是"
  },
  {
    "answer" : "breakpoint 设置断点定位到某一个函数\nn 断点指针下一步\npo打印对象",
    "ID" : "55f2e4eee4b0152a611431e8",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "lldb（gdb）常用的调试命令？"
  },
  {
    "answer" : "简单来说：\n当调用该对象上某个方法,而该对象上没有实现这个方法的时候， 可以通过“消息转发”进行解决。\n简单的流程如下，在上一题中也提到过：\n\nobjc是动态语言，每个方法在运行时会被动态转为消息发送，即：objc_msgSend(receiver, selector)。\nobjc在向一个对象发送消息时，runtime库会根据对象的isa指针找到该对象实际所属的类，然后在该类中的方法列表以及其父类方法列表中寻找方法运行，如果，在最顶层的父类中依然找不到相应的方法时，程序在运行时会挂掉并抛出异常unrecognized selector sent to XXX 。但是在这之前，objc的运行时会给出三次拯救程序崩溃的机会：\n\n1、Method resolution\nobjc运行时会调用+resolveInstanceMethod:或者 +resolveClassMethod:，让你有机会提供一个函数实现。如果你添加了函数，那运行时系统就会重新启动一次消息发送的过程，否则 ，运行时就会移到下一步，消息转发（Message Forwarding）。\n\n2、Fast forwarding\n如果目标对象实现了-forwardingTargetForSelector:，Runtime 这时就会调用这个方法，给你把这个消息转发给其他对象的机会。 只要这个方法返回的不是nil和self，整个消息发送的过程就会被重启，当然发送的对象会变成你返回的那个对象。否则，就会继续Normal Fowarding。 这里叫Fast，只是为了区别下一步的转发机制。因为这一步不会创建任何新的对象，但下一步转发会创建一个NSInvocation对象，所以相对更快点。\n\n\n3、Normal forwarding\n这一步是Runtime最后一次给你挽救的机会。首先它会发送-methodSignatureForSelector:消息获得函数的参数和返回值类型。如果-methodSignatureForSelector:返回nil，Runtime则会发出-doesNotRecognizeSelector:消息，程序这时也就挂掉了。如果返回了一个函数签名，Runtime就会创建一个NSInvocation对象并发送-forwardInvocation:消息给目标对象。\n\n",
    "ID" : "55f2e4eee4b0152a611431c5",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "什么时候会报unrecognized selector的异常？"
  },
  {
    "ID" : "55b5a5cee4b0ef2b57558392",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "UIResponder的实例被称为响应者",
    "optionC" : "继承UIResponder的类不能响应iOS生成的触摸对象",
    "optionAnswer" : "C",
    "answer" : "继承UIResponder的类可以响应iOS生成的触摸对象。",
    "optionB" : "在iOS中所有的显示在界面上得对象都是从UIResponder直接或间接继承的",
    "type" : "1",
    "optionA" : "一个UIResponder类表示一个可以接受触摸屏上得触摸事件的对象",
    "question" : "下列关于响应者（UIResponder）说法错误的是"
  },
  {
    "answer" : "队列和栈是两种不同的数据容器。从”数据结构”的角度看，它们都是线性结构，即数据元素之间的关系相同。\n\n队列是一种先进先出的数据结构，它在两端进行操作，一端进行入队列操作，一端进行出列队操作。\n\n栈是一种先进后出的数据结构，它只能在栈顶进行操作，入栈和出栈都在栈顶操作。",
    "ID" : "5602715de4b043d0cb1d39a9",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "队列和栈有什么区别："
  },
  {
    "ID" : "55b5a5cde4b0ef2b5755832f",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "数据库系统比文件系统能管理更多的数据",
    "optionC" : "数据库系统中数据的一致性是指数据类型的一致",
    "optionAnswer" : "A",
    "answer" : "由数据的共享自身又可极大地减少数据冗余性，不仅减少了不必要的存储空间，更为重要的是可以避免数据的不一致性。所谓数据的一致性是指在系统中同一数据的不同出现应保持相同的值。",
    "optionB" : "数据库系统避免了一切冗余",
    "type" : "1",
    "optionA" : "数据库系统减少了数据冗余",
    "question" : "下述关于数据库系统的叙述中正确的是"
  },
  {
    "answer" : "iPhone OS 应用程序的基础 Cocoa Touch 框架重用了许多 Mac 系统的成熟模式，但是它更多地专注于触摸的接口和优化。\n\nUIKit 为您提供了在 iPhone OS 上实现图形，事件驱动程序的基本工具，其建立在和 Mac OS X 中一样的 Foundation 框架上，包括文件处理，网络，字符串操作等。\n\nCocoa Touch 具有和 iPhone 用户接口一致的特殊设计。有了 UIKit，您可以使用 iPhone OS 上的独特的图形接口控件，按钮，以及全屏视图的功能，您还可以使用加速仪和多点触摸手势来控制您的应用。\n\n各色俱全的框架 除了UIKit 外，Cocoa Touch 包含了创建世界一流 iPhone 应用程序需要的所有框架，从三维图形，到专业音效，甚至提供设备访问 API 以控制摄像头，或通过 GPS 获知当前位置。\n\nCocoa Touch 既包含只需要几行代码就可以完成全部任务的强大的 Objective-C 框架，也在需要时提供基础的 C 语言 API 来直接访问系统。这些框架包括：\n\nCore Animation：通过 Core Animation，您就可以通过一个基于组合独立图层的简单的编程模型来创建丰富的用户体验。\n\nCore Audio：Core Audio 是播放，处理和录制音频的专业技术，能够轻松为您的应用程序添加强大的音频功能。\n\nCore Data：提供了一个面向对象的数据管理解决方案，它易于使用和理解，甚至可处理任何应用或大或小的数据模型。\n\n功能列表：框架分类\n\n下面是 Cocoa Touch 中一小部分可用的框架：\n\n音频和视频：Core Audio ，OpenAL ，Media Library ，AV Foundation\n\n数据管理 ：Core Data ，SQLite\n\n图形和动画 ：Core Animation ，OpenGL ES ，Quartz 2D\n\n网络：Bonjour ，WebKit ，BSD Sockets\n\n用户应用：Address Book ，Core Location ，Map Kit ，Store Kit\n\n",
    "ID" : "5629f9e1e4b05e6f47b0ea38",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "cocoa touch框架"
  },
  {
    "answer" : "类的接口声明是严格与特定的类关联的，尤其是由本类实现的方法的声明，协议声明的方法与任何特定的类都无关，它可以被任何类来实现，协议本质上就是一堆还未与任何类的实现代码关联的方法的声明，只有声明部分，没有实现部分，协议里面的方法也可以设置optional。",
    "ID" : "5629f9e0e4b05e6f47b0e9e7",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "协议和类的区别是什么？"
  },
  {
    "ID" : "5629f9e0e4b05e6f47b0e9af",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "构造",
    "optionC" : "多态",
    "optionAnswer" : "D",
    "answer" : "面向对象的三个基本特征是：封装、继承、多态。",
    "optionB" : "继承",
    "type" : "1",
    "optionA" : "封装",
    "question" : "面向对象的特性不包括"
  },
  {
    "answer" : "可以，在不同的C文件中以static形式来声明同名全局变量。\n    可以在不同的C文件中声明同名的全局变量，前提是其中只能有一个C文件中对此变量赋初值，此时连接不会出错",
    "ID" : "5602715ee4b043d0cb1d39e5",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "全局变量可不可以定义在可被多个.C文件包含的头文件中？为什么？"
  },
  {
    "answer" : "协议有控制链(has-a)的关系，通知没有。\n首先我一开始也不太明白，什么叫控制链(专业术语了~)。但是简单分析下通知和代理的行为模式，我们大致可以有自己的理解\n简单来说，通知的话，它可以一对多，一条消息可以发送给多个消息接受者。\n代理按我们的理解，到不是直接说不能一对多，比如我们知道的明星经济代理人，很多时候一个经济人负责好几个明星的事务。\n只是对于不同明星间，代理的事物对象都是不一样的，一一对应，不可能说明天要处理A明星要一个发布会，代理人发出处理发布会的消息后，别称B的\n发布会了。但是通知就不一样，他只关心发出通知，而不关心多少接收到感兴趣要处理。\n因此控制链(has-a从英语单词大致可以看出，单一拥有和可控制的对应关系。",
    "ID" : "5602715ee4b043d0cb1d39fe",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "通知和协议的不同之处?"
  },
  {
    "ID" : "55b5a5cde4b0ef2b57558356",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "通知中心",
    "optionC" : "Mail",
    "optionAnswer" : "C",
    "answer" : "i0S5后Safari浏览器在显示网上文章时可以排除广告或其他杂乱内容,从而使顾客可以不受干扰阅读",
    "optionB" : "Safari浏览器",
    "type" : "1",
    "optionA" : "报刊杂志",
    "question" : "哪项i0S5功能在显示网上文章时可以排除广告或其他杂乱内容,从而使顾客可以不受干扰阅读"
  },
  {
    "ID" : "55b5a5cde4b0ef2b5755836f",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "使用单例时，就不会调用类的init方法了。",
    "optionC" : "MRC中，单例类的dealloc方法永远都不会被调用，所以写单例时该方法可以不用实现。",
    "optionAnswer" : "D",
    "answer" : "A:单例模式的意思就是只有一个实例。单例模式确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例\nB:例如，NSFileManager可以通过defaultManager方法返回相同的一个NSFileManager对象。如果需要新的一个NSFileManager实例对象，可以通过init方法。\nC:单例的dealloc方法永远都不会被调用--因为在程序的生命周期内，该单例一直都存在。（所以该方法可以不用实现）\nD:当第一次使用这个单例时，会调用这个类的init方法。",
    "optionB" : "在iOS \nSDK中，根据特定的需求，有些类不仅提供了单例访问的接口，还为开发者提供了实例化一个新的对象接口。",
    "type" : "1",
    "optionA" : "单例模式是一个类在系统中只有一个实例对象。",
    "question" : "下列有关单例的说法错误的一项是？"
  },
  {
    "answer" : "某个iphone工程进行文件操作有此工程对应的指定的位置，不能逾越。\n\niphone沙箱模型的有四个文件夹documents，tmp，app，Library，永久数据存储一般放documents文件夹，得到模拟器的路径的可使用NSHomeDirectory()方法。Nsuserdefaults保存的文件在tmp文件夹里。\n\n",
    "ID" : "5629f9e1e4b05e6f47b0ea45",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "什么是沙盒模型？哪些操作是属于私有api范畴?"
  },
  {
    "ID" : "5602715de4b043d0cb1d3982",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "线性表 ",
    "optionC" : "二叉树 ",
    "optionAnswer" : "C",
    "answer" : "一棵二叉树的一个结点下面可以有2个子结点，故不是线性结构（通俗地理解，看是否能排成条直线。\nA是先进后出的线性表；B先进先出的线性表",
    "optionB" : "链表",
    "type" : "1",
    "optionA" : "栈",
    "question" : "下面的数据结构中不属于线性结构的是 "
  },
  {
    "answer" : "1).GET 方法\n\nGET 方法提交数据不安全，数据置于请求行，客户端地址栏可见;\n\nGET 方法提交的数据大小有限\n\nGET 方法不可以设置书签\n\n2).POST 方法\n\nPOST 方法提交数据安全，数据置于消息主体内，客户端不可见\n\nPOST 方法提交的数据大小没有限制\n\nPOST 方法可以设置书签",
    "ID" : "5629f9e1e4b05e6f47b0ea4a",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "HTTP协议中，POST和GET的区别是什么？"
  },
  {
    "answer" : "推送通知更是一种技术。\n\n简单点就是客户端获取资源的一种手段。\n\n普通情况下，都是客户端主动的pull。\n\n推送则是服务器端主动push。 测试push的实现可以查看该博文。",
    "ID" : "5629f9e1e4b05e6f47b0ea00",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "什么是推送消息?"
  },
  {
    "ID" : "55b5a5cde4b0ef2b57558359",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "8G ",
    "optionC" : "4G ",
    "optionAnswer" : "C",
    "answer" : "post传输的最大文件不能超过4G",
    "optionB" : "2G ",
    "type" : "1",
    "optionA" : "1G ",
    "question" : "post传输的最大文件限制为"
  },
  {
    "answer" : "NSURLConnection主要用于网络访问，其中+ sendSynchronousRequest:returningResponse:error:是同步访问数据，即当前线程会阻塞，并等待request的返回的response，而– initWithRequest:delegate:使用的是异步加载，当其完成网络访问后，会通过delegate回到主线程，并其委托的对象。",
    "ID" : "5629f9e1e4b05e6f47b0ea1d",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "简单介绍下NSURLConnection类及+ sendSynchronousRequest:returningResponse:error:与– initWithRequest:delegate:两个方法的区别?"
  },
  {
    "answer" : "self.name =nil;   \/\/使用nil参数调用setName:方法\n\n［name release］生成的访问器将自动释放以前的name对象 ",
    "ID" : "5602715de4b043d0cb1d3994",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "请简述self.name= nil的机制，以及与[namerelease]的区别？"
  },
  {
    "ID" : "55b5a5cde4b0ef2b5755832a",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "请求保持",
    "optionC" : "避免策略",
    "optionAnswer" : "D",
    "answer" : "请求保持是死锁的条件",
    "optionB" : "预防策略",
    "type" : "1",
    "optionA" : "鸵鸟策略",
    "question" : "下列不是死锁的处理方法是"
  },
  {
    "ID" : "5629f9e0e4b05e6f47b0e9d9",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "setValue:forKey:",
    "optionC" : "initWithCapacity:",
    "optionAnswer" : "D",
    "answer" : "filteredArrayUsingPredicate:对数组中的每一个元素通过谓词筛选并返回一个新的数组\narrayByAddingObject:向数组中添加一个元素\ninitWithCapacity:初始化时设置容量大小",
    "optionB" : "arrayByAddingObject:",
    "type" : "1",
    "optionA" : "filteredArrayUsingPredicate:",
    "question" : "NSMutableDictionary字典中删除对象可以使用下面那个方法："
  },
  {
    "ID" : "55b5a5cee4b0ef2b575583c5",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "非自己持有的对象也可释放。",
    "optionC" : "不再需要自己持有的对象时不用释放。",
    "optionAnswer" : "A",
    "answer" : "引用计数式内存管理的思考方式：1、自己生成的对象，自己所持有。2、非自己生成的对象，自己也能持有。3、不再需要自己持有的对象时释放。4、非自己持有的对象无法释放。",
    "optionB" : "非自己生成的对象，自己不能持有。",
    "type" : "1",
    "optionA" : "自己生成的对象，自己所持有。",
    "question" : "下引用计数式内存管理的思考方式，列说法正确的是"
  },
  {
    "answer" : "当一个对象上有某个方法,却没有实现的时候",
    "ID" : "589b36aeea7811e58afd00163e0021c8",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "什么时候会报unrecognized selector的异常？"
  },
  {
    "ID" : "5629f9dfe4b05e6f47b0e99e",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "copy:此属性只对实现NSCopying协议的对象有效(NSString)。拷贝工作由copy方法执行。",
    "optionC" : "retain:此属性只用于obj-c的对象类型，对参数进行release旧值，再retain新值。",
    "optionAnswer" : "A",
    "answer" : "nonatomic禁止多线程，变量保护，提高性能",
    "optionB" : "assign:属性默认值。说明设置器直接进行赋值，针对基础数据类型 （NSInteger，CGFloat）和C数据类型（int, float, double, char）等等。",
    "type" : "1",
    "optionA" : "nonatomic：提供多线程保护，提高性能，在没有使用多线程的编程中可以选择使用。",
    "question" : "以下说法不正确的是："
  },
  {
    "ID" : "5629f9e0e4b05e6f47b0e9a6",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "@protocol",
    "optionC" : "@required",
    "optionAnswer" : "C",
    "answer" : " @property是属性声明\n@interface是类的声明部分\n@protocol是正式协议",
    "optionB" : "@interface",
    "type" : "1",
    "optionA" : "@property",
    "question" : "必须实现的协议方法使用：关键字声明."
  },
  {
    "answer" : "\t1. 因为父类指针可以指向子类对象,使用copy的目的是为了让本对象的属性不受外界影响,使用copy无论给我传入是一个可变对象还是不可对象,我本身持有的就是一个不可变的副本. 如果我们使用是strong,那么这个属性就有可能指向一个可变对象,如果这个可变对象在外部被修改了,那么会影响该属性.",
    "ID" : "15fbb1daea7711e5b65200163e0021c8",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "用@property声明的NSString（或NSArray，NSDictionary）经常使用copy关键字，为什么？如果改用strong关键字，可能造成什么问题？"
  },
  {
    "ID" : "55b5a5cde4b0ef2b57558368",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "可以一个对象的delegate指派给多个其他类型的对象",
    "optionC" : "没有指派则不会触发",
    "optionAnswer" : "D",
    "answer" : "一个对象的delegate不能指派给多个其他类型的对象，只能指派一个。",
    "optionB" : "主要用于不同类型的对象之间一对一传递消息 ",
    "type" : "1",
    "optionA" : "delegate中的函数在其他类中实现 ",
    "question" : "一个类的delegate（代理）的作用不正确的是 "
  },
  {
    "ID" : "55b5a5cde4b0ef2b57558355",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "在类中的 static 成员函数属于整个类所拥有，这个函数不接收 this 指针，因而只能访问类的static 成员变量",
    "optionC" : "在类中的 static 成员变量属于整个类所拥有，对类的所有对象只有一份拷贝",
    "optionAnswer" : "A",
    "answer" : "在模块内的 static 全局变量可以被模块内所用函数访问，但不能被模块外其它函数访问",
    "optionB" : "在模块内的 static 函数只可被这一模块内的其它函数调用，这个函数的使用范围被限制在声明 它的模块内",
    "type" : "1",
    "optionA" : "在模块内的 static 全局变量可以被模块内所用函数访问，也能被模块外其它函数访问",
    "question" : "下列不是static关键字的作用的是"
  },
  {
    "ID" : "55b5a5cde4b0ef2b57558350",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "contentStretch",
    "optionC" : "transform",
    "optionAnswer" : "B",
    "answer" : "opaque不是animatable的",
    "optionB" : "opaque",
    "type" : "1",
    "optionA" : "backgroundColor",
    "question" : "UIView的哪个属性不是Animatable的："
  },
  {
    "answer" : " @protocol SimpleProtocol\n\n-(void)doSomething:(NSString*)str;\n\n@end\n\n@interfaceSimpleClass:NSObject< SimpleProtocol >{\n\n}\n\n@end\n\n@implementationSimpleClass\n\n-(void)doSomething:(NSString *)str\n\n{\n\nNSLog(str);\n\n}\n\n@end",
    "ID" : "5602715de4b043d0cb1d39ba",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "自定义一个委托"
  },
  {
    "answer" : "self.name =”object”：会调用对象的setName()方法；\n\nname = “object”：会直接把object赋值给当前对象的name属性。",
    "ID" : "5629f9e1e4b05e6f47b0ea46",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "在一个对象的方法里面：self.name= “object”；和 name =”object” 有什么不同吗?"
  },
  {
    "ID" : "5629f9e0e4b05e6f47b0e9de",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "3=1 3=2 4=3",
    "optionC" : "2=1 3=1 4=3",
    "optionAnswer" : "C",
    "answer" : "第一行代码创建的字典为{2=1 3=2 4=3}\n第二行代码改了key为3的值改为1，{2=1 3=1 4=3}\n没有key为1的值，所以打印出来的字典为{2=1 3=1 4=3}",
    "optionB" : "1=2 1=3 3=4",
    "type" : "1",
    "optionA" : "1=3 2=3 3=4",
    "question" : "下面程序段的输出结果是什么：\nNSMutableDictionary * dic = [[NSMutableDictionary alloc] initWithObjectsAndKeys:@\"1\",@\"2\",@\"2\",@\"3\",@\"3\",@\"4\", nil];\n[dic setObject:@\"1\" forKey:@\"3\"];\n[dic removeObjectForKey:@\"1\"];\nNSLog(@\"%@\",dic);"
  },
  {
    "ID" : "5629f9e0e4b05e6f47b0e9ab",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "1\/-1",
    "optionC" : "true\/false",
    "optionAnswer" : "B",
    "answer" : "objective-c 中的BOOL 实际上是一种对带符号的字符类型（signed char）的类型定义（typedef），它使用8位的存储空间。通过#define指令把YES定义为1，NO定义为0。\n注意：objective-c 并不会将BOOL作为仅能保存YES或NO值的真正布尔类型来处理。编译器仍将BOOL认作8位二进制数，YES 和 NO 值只是在习惯上的一种理解。",
    "optionB" : "YES\/NO",
    "type" : "1",
    "optionA" : "1\/0",
    "question" : "OC中布尔(BOOL)类型的变量的值只有："
  },
  {
    "answer" : "typedef void(^animations) (void);\ntypedef void(^completion) (BOOL finished);\n",
    "ID" : "5602715ee4b043d0cb1d3a18",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "写出上面代码的Block的定义。"
  },
  {
    "answer" : "1). sprintf是格式化函数。将一段数据通过特定的格式，格式化到一个字符串缓冲区中去。sprintf格式化的函数的长度不可控，有可能格式化后的字符串会超出缓冲区的大小，造成溢出。\n\n2).strcpy是一个字符串拷贝的函数，它的函数原型为strcpy(char *dst, const char *src\n\n将src开始的一段字符串拷贝到dst开始的内存中去，结束的标志符号为 ‘\\0'，由于拷贝的长度不是由我们自己控制的，所以这个字符串拷贝很容易出错。\n\n3). memcpy是具备字符串拷贝功能的函数，这是一个内存拷贝函数，它的函数原型为memcpy(char *dst, const char* src, unsigned int len);将长度为len的一段内存，从src拷贝到dst中去，这个函数的长度可控。但是会有内存叠加的问题。",
    "ID" : "5629f9e1e4b05e6f47b0ea3b",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "sprintf,strcpy,memcpy使用上有什么要注意的地方。"
  },
  {
    "ID" : "55b5a5cde4b0ef2b57558364",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "Concurrent Versions System",
    "optionC" : "Git",
    "optionAnswer" : "C",
    "answer" : "自从Xcode的第五版本起，就集成了git的丰富功能，包括各种选项菜单的按钮和管理源代码的子菜单。",
    "optionB" : "Mercurial",
    "type" : "1",
    "optionA" : "Subversion",
    "question" : "使用Xcode创建工程时，支持同时创建的版本管理库是"
  },
  {
    "answer" : "在并行队列中，为了保持某些任务的顺序，需要等待一些任务完成后才能继续进行，使用 barrier 来等待之前任务完成，避免数据竞争等问题。 dispatch_barrier_async 函数会等待追加到Concurrent Dispatch Queue并行队列中的操作全部执行完之后，然后再执行 dispatch_barrier_async 函数追加的处理，等 dispatch_barrier_async 追加的处理执行结束之后，Concurrent Dispatch Queue才恢复之前的动作继续执行。\n\n打个比方：比如你们公司周末跟团旅游，高速休息站上，司机说：大家都去上厕所，速战速决，上完厕所就上高速。超大的公共厕所，大家同时去，程序猿很快就结束了，但程序媛就可能会慢一些，即使你第一个回来，司机也不会出发，司机要等待所有人都回来后，才能出发。 dispatch_barrier_async 函数追加的内容就如同 “上完厕所就上高速”这个动作。",
    "ID" : "55f2e4eee4b0152a611431dd",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "dispatch_barrier_async的作用是什么？"
  },
  {
    "answer" : "对于基本数据类型默认关键字是：atomic,readwrite,assign 对于普通的OC对象：atomic,readwrite,strong",
    "ID" : "e4e686ceea7611e58afd00163e0021c8",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "ARC下，不指定任何属性关键字时，默认的关键字都有哪些？"
  },
  {
    "ID" : "55b5a5cee4b0ef2b5755839d",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "frame和bounds的参考点都是父View的坐标系统",
    "optionC" : "frame参照点是父View的坐标系统",
    "optionAnswer" : "D",
    "answer" : "frame指的是：该view在父view坐标系统中的位置和大小。(参照点是父亲的坐标系统)bounds指的是：该view在本身坐标系统中 的位置和大小。(参照点是本身坐标系统)",
    "optionB" : "bounds指的是：该view在本身坐标系统中 的位置和大小。",
    "type" : "1",
    "optionA" : "frame指的是：该view在父view坐标系统中的位置和大小",
    "question" : "下列关于frame和bounds说法错误的是"
  },
  {
    "ID" : "55b5a5cee4b0ef2b575583a3",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "create",
    "optionC" : "insert into",
    "optionAnswer" : "B",
    "answer" : "select 查询是最基本的语句，做任何动作前要先查询；update更新数据，delete删除数数据；insert into插入数据；drop 删除对象；create 建立对象。",
    "optionB" : "refresh",
    "type" : "1",
    "optionA" : "select",
    "question" : "下列不属于数据库常用基本语句的是"
  },
  {
    "answer" : "每一个类对象中都一个方法列表,方法列表中记录着方法的名称,方法实现,以及参数类型,其实selector本质就是方法名称,通过这个方法名称就可以在方法列表中找到对应的方法实现.",
    "ID" : "d7d9e590ea7911e5b65200163e0021c8",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "runtime如何通过selector找到对应的IMP地址？（分别考虑类方法和实例方法）"
  },
  {
    "answer" : "不需要,在ARC环境无论是强指针还是弱指针都无需在dealloc设置为nil,ARC会自动帮我们处理",
    "ID" : "5926ae52ea7611e58afd00163e0021c8",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "weak属性需要在dealloc中置nil么？"
  },
  {
    "answer" : "ARC就是automatic reference counting ，简单说就是就是代码中自动加入了retain\/release，原先需要手动添加的用来处理内存管理的引用计数的代码可以自动地由编译器完成了。\n\n使用ARC的好处\n\n使用ARC有什么好处呢？\n\n看到上面的例子，大家就知道了，以后写Objective-C的代码变得简单多了，因为我们不需要担心烦人的内存管理，担心内存泄露了\n\n代码的总量变少了，看上去清爽了不少，也节省了劳动力\n\n代码高速化，由于使用编译器管理引用计数，减少了低效代码的可能性\n\n不好的地方\n\n记住一堆新的ARC规则—关键字及特性等需要一定的学习周期\n\n一些旧的代码，第三方代码使用的时候比较麻烦；修改代码需要工数，要么修改编译开关",
    "ID" : "5602715de4b043d0cb1d39a2",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "ARC机制"
  },
  {
    "answer" : "数据库框架，对sqllite的数据操作进行了封装，使用着可把精力都放在sql语句上面。",
    "ID" : "5629f9e1e4b05e6f47b0ea43",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "fmdb框架"
  },
  {
    "answer" : "CFNetwork 、 CFSocket 和 BSD Socket 。",
    "ID" : "5602715de4b043d0cb1d39b8",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "Core Foundation中提供了哪几种操作Socket的方法？"
  },
  {
    "ID" : "5629f9e0e4b05e6f47b0e9c6",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "NSSet存放的数据是有序的。",
    "optionC" : "NSSet可以通过下标获取数据。",
    "optionAnswer" : "B",
    "answer" : "集合：集合（NSSet）和数组（NSArray）有相似之处，都是存储不同的对象的地址；不过NSArray是有序的集合，NSSet是无序的集合。\n集合是一种哈希表，运用散列算法，查找集合中的元素比数组速度更快，但是它没有顺序。",
    "optionB" : "NSSet存放数据是无序的。",
    "type" : "1",
    "optionA" : "NSSet可以存放任何数据类型的数据。",
    "question" : "关于NSSet描述正确的有："
  },
  {
    "answer" : "[supper didReceiveMemoryWarning];",
    "ID" : "5602715ee4b043d0cb1d39e6",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "ViewController的didReceiveMemoryWarning怎么被调用："
  },
  {
    "answer" : "只能输出1,然后线程主线程死锁",
    "ID" : "fcb8e8caea7e11e5b65200163e0021c8",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "以下代码运行结果如何？ - (void)viewDidLoad {     [super viewDidLoad];     NSLog(@\"1\");     dispatch_sync(dispatch_get_main_queue(), ^{         NSLog(@\"2\");     });     NSLog(@\"3\"); }"
  },
  {
    "ID" : "55b5a5cde4b0ef2b5755834e",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "dealloc销毁该视图时调用",
    "optionC" : "ViewDidUnload视图已经加载但没有加载出来调用",
    "optionAnswer" : "A",
    "answer" : "loadView加载视图时调用\n\nViewDidLoad视图已经加载后调用",
    "optionB" : "ViewWillAppear视图将要出现时调用",
    "type" : "1",
    "optionA" : "loadView视图已经加载后调用",
    "question" : "下列说法错误的是"
  },
  {
    "answer" : "总结下@synthesize合成实例变量的规则，有以下几点：\n\n1）如果指定了成员变量的名称,会生成一个指定的名称的成员变量,\n\n2）如果这个成员已经存在了就不再生成了.\n\n3）如果是 @synthesize foo; 还会生成一个名称为foo的成员变量，也就是说：如果没有指定成员变量的名称会自动生成一个属性同名的成员变量。\n\n4）如果是 @synthesize foo = _foo; 就不会生成成员变量了.",
    "ID" : "55f2e4eee4b0152a611431c3",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "@synthesize合成实例变量的规则是什么？假如property名为foo，存在一个名为_foo的实例变量，那么还会自动合成新变量么？"
  },
  {
    "answer" : "1). atomic提供多线程安全。是防止在写未完成的时候被另外一个线程读取，造成数据错误\n\n2). non-atomic:在自己管理内存的环境中，解析的访问器保留并自动释放返回的值，如果指定了 nonatomic ，那么访问器只是简单地返回这个值。",
    "ID" : "5629f9e0e4b05e6f47b0e9f1",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "原子(atomic)跟非原子(non-atomic)属性有什么区别?"
  },
  {
    "answer" : "NSManagedObject是NSObject的子类 ，也是coredata的重要组成部分，它是一个通用的类,实现了core data 模型层所需的基本功能，用户可通过子类化NSManagedObject，建立自己的数据模型。",
    "ID" : "5629f9e1e4b05e6f47b0ea16",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "什么是NSManagedObject模型?"
  },
  {
    "ID" : "55b5a5cee4b0ef2b575583a5",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "以上都可以",
    "optionC" : "NSTimer",
    "optionAnswer" : "D",
    "answer" : "四种方式：1. beginAnimation\n\n              2. 线程\n\n              3. NSTimer\n\n              4. 图层动画（路径）",
    "optionB" : "线程",
    "type" : "1",
    "optionA" : "beginAnimation",
    "question" : "下列哪种方法可以让一个物体从界面的一点运动到另外一点"
  },
  {
    "ID" : "55b5a5cde4b0ef2b5755831e",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "iPhoto",
    "optionC" : "无线局域网",
    "optionAnswer" : "A",
    "answer" : "照片流（Photo Stream）是苹果云存储和同步服务icloud中包含的一项内容。当您在 iOS 设备上拍照或将照片从数码相机导入电脑时，照片流会自动将新照片上传至 iCloud 并将照片推送至您的所有其他设备。",
    "optionB" : "iTunes\n",
    "type" : "1",
    "optionA" : "照片流",
    "question" : "利用什么顾客使用iPad拍摄的照片会自动发送到其他设备上，因此顾客可以在所有设备上欣赏最近拍摄的照片。"
  },
  {
    "ID" : "55b5a5cee4b0ef2b5755838c",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "AVFoundation",
    "optionC" : "OpenGL ES",
    "optionAnswer" : "C",
    "answer" : "Cocoa Touch 中关于音频和视频常用的框架有：Core Audio、OpenAL、Media Library、AVFoundation 。 OpenGL ES属于图形和动画类。",
    "optionB" : "Open AL ",
    "type" : "1",
    "optionA" : "Core Audio",
    "question" : "下列Cocoa Touch 中得框架不属于音频视频类的是"
  },
  {
    "ID" : "5629f9dfe4b05e6f47b0e99a",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "保时捷;犀利哥",
    "optionC" : "邻居家的猫咪“贝贝”;我的弟弟“张三”",
    "optionAnswer" : "C",
    "answer" : "Mac mini的哪一款…\n狗，老虎的哪一个品种\n保时捷的哪一款\n这些对象都没j",
    "optionB" : "狗;老虎",
    "type" : "1",
    "optionA" : "我的白色iPhone4s;Mac Mini",
    "question" : "下列选项中全部属于对象的是："
  },
  {
    "answer" : "在每次事件循环开始创建自动释放池,在每次事件结束销毁自动释放池 以viewDidLoad方法为例,可以理解为在viewDidLoad方法开始执行之前创建自动释放池, 在viewDidLoad方法执行之后销毁自动释放",
    "ID" : "7dc9e0b0ea7d11e58afd00163e0021c8",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "不手动指定autoreleasepool的前提下，一个autorealese对象在什么时刻释放？（比如在一个vc的viewDidLoad中创建）"
  },
  {
    "ID" : "5602715de4b043d0cb1d398d",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "@protocol ",
    "optionC" : "@interface ",
    "optionAnswer" : "B",
    "answer" : "optional",
    "optionB" : "@optional",
    "type" : "1",
    "optionA" : "@required ",
    "question" : "使用protocol时，声明一组可选择实现与否的函数，需要在声明的前一行加上： "
  },
  {
    "ID" : "55b5a5cee4b0ef2b575583bf",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "id是通用对象，但如果使用instancetype，编译器就知道方法返回什么类型的对象。",
    "optionC" : "并不是所有的Foundation\/Cocoa对象都继承息NSObject",
    "optionAnswer" : "A",
    "answer" : "并不是所有的Foundation\/Cocoa对象都继承息NSObject，比如NSProxy就不从NSObject继承，所以你无法使用NSObject＊指向这个对象，即使NSProxy对象有release和retain这样的通用方法。",
    "optionB" : "苹果在iOS 8中全面使用instancetype代替id",
    "type" : "1",
    "optionA" : "id与NSObject*是等价的",
    "question" : "下列说法错误的是"
  },
  {
    "answer" : "#define MIN(A,B) （（A） <= (B) ? (A) : (B))\n\n这个测试是为下面的目的而设的：\n\n标识#define在宏中应用的基本知识。这是很重要的，因为直到嵌入(inline)操作符变为标准C的一部分，宏是方便产生嵌入代码的唯一方\n\n法，对于嵌入式系统来说，为了能达到要求的性能，嵌入代码经常是必须的方法。\n\n三重条件操作符的知识。这个操作符存在C语言中的原因是它使得编译器能产生比 if-then-else 更优化的代码，了解这个用法是很重要的。 懂得在宏中小心地把参数用括号括起来  我也用这个问题开始讨论宏的副作用，例如：当你写下面的代码时会发生什么事？  least = MIN(*p++, b);\n\n结果是：\n\n((*p++) <= (b) ? (*p++) :(*p++))\n\n这个表达式会产生副作用，指针p会作三次++自增操作。 ",
    "ID" : "5602715de4b043d0cb1d399a",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "写一” 标准”宏MIN ，这个宏输入两个参数并返回较小的一个"
  },
  {
    "answer" : "互斥、请求保持、不可剥夺、环路",
    "ID" : "5629f9e1e4b05e6f47b0ea36",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "死锁的4个必要条件"
  },
  {
    "ID" : "5629f9e0e4b05e6f47b0e9ca",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "@package",
    "optionC" : "@protected",
    "optionAnswer" : "C",
    "answer" : "@protected",
    "optionB" : "@private",
    "type" : "1",
    "optionA" : "@public",
    "question" : "实例变量默认的访问修饰符是："
  },
  {
    "answer" : "动画有两种基本类型：隐式动画和显式动画",
    "ID" : "5629f9e1e4b05e6f47b0ea4f",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "动画有基本类型有哪几种；表视图有哪几种基本样式。"
  },
  {
    "ID" : "55b5a5cde4b0ef2b57558369",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "创建对私有方法的前向引用",
    "optionC" : "将类的实现分散到多个不同文件或多个不同框架中",
    "optionAnswer" : "B",
    "answer" : "类别是一种为现有的类添加新方法的方式。利用Objective-C的动态运行时分配机制，Category提供了一种比继承（inheritance）更为简洁的方法来对class进行扩展，无需创建对象类的子类就能为现有的类添加新方法，可以为任何已经存在的 class 添加方法，包括那些没有源代码的类（如某些框架类），但不能删除修改之前的方法。",
    "optionB" : "category可以删除修改之前的方法",
    "type" : "1",
    "optionA" : "category可以添加新的方法",
    "question" : "下面对category描述不正确的是"
  },
  {
    "ID" : "55b5a5cde4b0ef2b57558367",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "strong",
    "optionC" : "copy",
    "optionAnswer" : "A",
    "answer" : "使用B\/D都由可能导致代理与被代理者之间循环引用，析构不了。",
    "optionB" : "retain",
    "type" : "1",
    "optionA" : "assign",
    "question" : "delegate中的property使用以下哪个属性"
  },
  {
    "ID" : "5602715de4b043d0cb1d3984",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "n^2",
    "optionC" : "2n",
    "optionAnswer" : "A",
    "answer" : "最糟糕的情况应该是比较到线性表最后一个值，也没有查找到所需要的值，那么从线性表的第0个值开始比较，每次取出一个值比较，不符合，再取下一个值，依次比较，一直到最后一个，那么长度为N，就需要比较N次。",
    "optionB" : "2n-1",
    "type" : "1",
    "optionA" : "n",
    "question" : "在长度为n的线性表上进行顺序查找，在最糟糕的情况下需要的比较次数是 "
  },
  {
    "ID" : "55b5a5cde4b0ef2b5755833b",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "向对象添加非正式协议。继承可以增加，修改或者删除方法，并且可以增加属性",
    "optionC" : "创建对私有方法的前向引用。",
    "optionAnswer" : "A",
    "answer" : "category只能添加新的方法，不能删除修改。",
    "optionB" : "将类的实现分散到多个不同文件或多个不同框架中。",
    "type" : "1",
    "optionA" : "category可以添加删除修改新的方法",
    "question" : "下列不是类别主要作用的是"
  },
  {
    "ID" : "55b5a5cde4b0ef2b57558338",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "协议",
    "optionC" : "多态",
    "optionAnswer" : "D",
    "answer" : "面向对象的三大特征:封装、继承、多态",
    "optionB" : "继承",
    "type" : "1",
    "optionA" : "封装",
    "question" : "下列不是面向对象的三大特征的是？"
  },
  {
    "answer" : "项目中使用NSOperation的优点是NSOperation是对线程的高度抽象，在项目中使用它，会使项目的程序结构更好，子类化NSOperation的设计思路，是具有面向对象的优点(复用、封装)，使得实现是多线程支持，而接口简单，建议在复杂项目中使用。\n\n项目中使用GCD的优点是GCD本身非常简单、易用，对于不复杂的多线程操作，会节省代码量，而Block参数的使用，会是代码更为易读，建议在简单项目中使用。",
    "ID" : "5669532b60b2298f8e73b3df",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "什么时候选择使用GCD，什么时候选择NSOperation?"
  },
  {
    "ID" : "5629f9e0e4b05e6f47b0e9d7",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "程序崩溃",
    "optionC" : "1=2 3=3 3=3",
    "optionAnswer" : "D",
    "answer" : "基本数据类型不能直接添加到字典中，需要NSNumber进行包装",
    "optionB" : "1=2 3=3 3=4",
    "type" : "1",
    "optionA" : "2=1 3=3 4=3",
    "question" : "下面程序段的输出结果是什么：\nNSMutableDictionary * dic = [[NSMutableDictionary alloc] initWithObjectsAndKeys:@\"1\",@\"2\",@\"2\",@\"3\",@\"3\",@\"4\", nil];\nNSString *str = @\"3\";\nint a = 3;\n[dic setObject:a forKey:str];\nNSLog(@\"%@\",dic);"
  },
  {
    "ID" : "55b5a5cfe4b0ef2b575583e4",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "以上都正确",
    "optionC" : "此时obj0、obj1、obj2都失去了强引用，因此对象B被废弃",
    "optionAnswer" : "A",
    "answer" : "此时，因为nil被赋予了obj1，所以对对象B的强引用失效，持有对象B的强引用的变量为obj0、obj2",
    "optionB" : "此时obj1对对象B的强引用有效",
    "type" : "1",
    "optionA" : "obj1被赋值nil之前，obj2持有由obj0赋值的对象B的强引用。",
    "question" : "id __strong obj0 = [[NSObject alloc] init]; \/*obj0持有对象A的强引用*\/\nid __strong obj1 = [[NSObject alloc] init]; \/*obj1持有对象B的强引用*\/\nid __strong obj2 = nil; \/*obj2不持有任何对象*\/\nobj0 = obj1;\nobj2 = obj0；\nobj1 = nil;下列说法正确的是"
  },
  {
    "ID" : "5629f9e0e4b05e6f47b0e9d1",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "类目和延展声明语法不同",
    "optionC" : "无论能否拿到类的源码，类目都可以对其扩展",
    "optionAnswer" : "B",
    "answer" : "类目（category）：为现有类添加新的方法，但是不能添加实例变量。通过类目加入的方法和原始类的方法没有区别，同样可以被继承。类目可以覆写原始类中得方法，但是一旦覆写后，原始类中得方法将不可再被调用。\n延展（extension）：延展的作用就是定义自己的私有方法。他可以看成是一种匿名的类目，有时候需要一些知识自己看见的私有方法，定义在.m文件里面。匿名的延展可以定义属性。",
    "optionB" : "类目、延展不但能为类添加方法，而且都可以添加新的实例变量",
    "type" : "1",
    "optionA" : "延展主要为类提供“私有”方法",
    "question" : "关于类目、延展的描述错误的是："
  },
  {
    "ID" : "55b5a5cee4b0ef2b57558371",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "单例类必须自己创建自己的唯一实例。",
    "optionC" : "单例类必须给所有其他对象提供这一实例。",
    "optionAnswer" : "B",
    "answer" : "单例模式中没有抽象层，因此单例类的扩展有很大的困难。",
    "optionB" : "由于单例模式中存在抽象层，因此方便扩展。",
    "type" : "1",
    "optionA" : "单例常用来做应用程序级别的共享资源控制。",
    "question" : "下列有关单例的说法错误的一项是？"
  },
  {
    "ID" : "55b5a5cee4b0ef2b575583d6",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "附有__unsafe_unretained修饰符的变量属于编译器的内存管理对象。",
    "optionC" : "当某一对象持有其自身时，即自引用，也会发生循环引用。",
    "optionAnswer" : "D",
    "answer" : "ARC有效时id和对象类型的所有权修饰符：__strong、__weak、__unsafe_unretained、__autoreleasing",
    "optionB" : "ARC有效时可以这样使用autorelease功能：\n@autoreleasepool{\n id __autoreleasing obj = [[NSObject alloc] init];\n}",
    "type" : "1",
    "optionA" : "dealloc不能显示调用",
    "question" : "下列说法错误的是"
  },
  {
    "ID" : "55b5a5cee4b0ef2b575583b6",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "一个应用可以有一个storyboard和一个nib",
    "optionC" : "一个应用程序可以同时有一个主storyboard文件和一个主nib文件。",
    "optionAnswer" : "C",
    "answer" : "一个应用程序可以有一个主storyboard文件或者一个主nib文件，但它不能兼得。",
    "optionB" : "一个应用可以有一个主nib文件",
    "type" : "1",
    "optionA" : "一个应用可以有一个主storyboard",
    "question" : "下列说法错误的是"
  },
  {
    "answer" : "设置全局断点快速定位问题代码所在行",
    "ID" : "d5060a58ea8111e5b65200163e0021c8",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "如何调试BAD_ACCESS错误？"
  },
  {
    "ID" : "55b5a5cee4b0ef2b5755837b",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "JSONKit",
    "optionC" : "SBJSON",
    "optionAnswer" : "A",
    "answer" : "Gdata是用来解析XML格式数据的",
    "optionB" : "原声JSON解析",
    "type" : "1",
    "optionA" : "GData",
    "question" : "下列不属于JSON的解析方法的是"
  },
  {
    "answer" : "无论在MRC下还是ARC下均不需要",
    "ID" : "55f2e4eee4b0152a611431ca",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "使用runtime Associate方法关联的对象，需要在主对象dealloc的时候释放么？"
  },
  {
    "ID" : "55b5a5cee4b0ef2b575583b5",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "UIEventTypeRemoteControl",
    "optionC" : "Motion",
    "optionAnswer" : "B",
    "answer" : "UIRotationGestureRecognizer旋转的手势",
    "optionB" : "UIRotationGestureRecognizer",
    "type" : "1",
    "optionA" : "Accelerometer",
    "question" : "下列中属于手势的是"
  },
  {
    "ID" : "55b5a5cfe4b0ef2b575583dc",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "以上都正确",
    "optionC" : "获取家目录路径的函数：\nNSString *homeDir = NSHomeDirectory()",
    "optionAnswer" : "D",
    "answer" : "1，获取家目录路径的函数：\nNSString *homeDir = NSHomeDirectory();\n\n2，获取Documents目录路径的方法：\nNSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);\nNSString *docDir = [paths objectAtIndex:0];\n\n3，获取Caches目录路径的方法：\nNSArray*paths=NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES);\nNSString *cachesDir = [paths objectAtIndex:0];\n\n4，获取tmp目录路径的方法：\nNSString *tmpDir = NSTemporaryDirectory();",
    "optionB" : "获取Caches目录路径的方法：\nNSArray*paths=NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES);\nNSString *cachesDir = [paths objectAtIndex:0];",
    "type" : "1",
    "optionA" : "获取Documents目录路径的方法：\nNSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);\nNSString *docDir = [paths objectAtIndex:0];",
    "question" : "下列关于获取沙盒目录函数正确的是"
  },
  {
    "answer" : "UITableView 通过重用单元格来达到节省内存的目的: 通过为每个单元格指定一个重用标识符(reuseIdentifier),即指定了单元格的种类,以及当单元格滚出屏幕时,允许恢复单元格以便重用.对于不同种类的单元格使用不同的ID,对于简单的表格,一个标识符就够了.",
    "ID" : "5602715de4b043d0cb1d39cb",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "tableView 的重用机制"
  },
  {
    "answer" : "当数组在程序运行时，需要不断变化的，使用NSMutableArray，当数组在初始化后，便不再改变的，使用NSArray。需要指出的是，使用NSArray只表明的是该数组在运行时不发生改变，即不能往NSAarry的数组里新增和删除元素，但不表明其数组內的元素的内容不能发生改变。NSArray是线程安全的，NSMutableArray不是线程安全的，多线程使用到NSMutableArray需要注意。",
    "ID" : "5602715ee4b043d0cb1d3a08",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "什么时候使用NSMutableArray，什么时候使用NSArray?"
  },
  {
    "ID" : "55b5a5cde4b0ef2b57558361",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "不可以隐藏的那个UIWindow对象",
    "optionC" : " 可接收到键盘输入等事件的UIWindow ",
    "optionAnswer" : "C",
    "answer" : "key window是可接受到键盘输入等事件的UIWindow。",
    "optionB" : "可以指定一个key的UIWindow ",
    "type" : "1",
    "optionA" : "App中唯一的那个UIWindow对象 ",
    "question" : "什么是key window？ "
  },
  {
    "ID" : "55b5a5cde4b0ef2b57558320",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "遵循NSData协议，来实现复杂对象的存储",
    "optionC" : " 将对象写到文件或者数据库里，并且可以读取出来",
    "optionAnswer" : "D",
    "answer" : "遵循NSCoding协议，来实现复杂对象的存储",
    "optionB" : " 把字节序列恢复为对象的过程称为对象的反序列化",
    "type" : "1",
    "optionA" : "把对象转换为字节序列的过程称为对象的序列化 ",
    "question" : "下列关于序列化和反序列化叙述错误的是"
  },
  {
    "answer" : "iOS的系统架构分为（ 核心操作系统层 theCore OS layer ）、（ 核心服务层theCore Services layer ）、（ 媒体层 theMedia layer ）和（ Cocoa 界面服务层 the Cocoa Touch layer ）四个层次。",
    "ID" : "5629f9e1e4b05e6f47b0ea4b",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "iOS的系统架构"
  },
  {
    "ID" : "55b5a5cee4b0ef2b575583a7",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "以上都是",
    "optionC" : "快速排序",
    "optionAnswer" : "D",
    "answer" : "IOS中常用的排序方式：冒泡排序、快速排序、希尔排序",
    "optionB" : "冒泡排序",
    "type" : "1",
    "optionA" : "希尔排序",
    "question" : "下列属于Objective-C中常用的排序方法的是"
  },
  {
    "ID" : "55b5a5cde4b0ef2b57558362",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "连按三次主屏幕按钮",
    "optionC" : "使用三根手指连按两次显示屏",
    "optionAnswer" : "A",
    "answer" : "双击home键就可以唤出当前后台的程序",
    "optionB" : "连续两次点击屏幕",
    "type" : "1",
    "optionA" : "双击主屏幕按钮",
    "question" : "通过多任务处理用户界面可以在活动的应用程序之间快速切换，只需什么就可激活应用程序"
  },
  {
    "ID" : "5629f9e0e4b05e6f47b0e9cb",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "程序崩溃",
    "optionC" : "3",
    "optionAnswer" : "C",
    "answer" : "数组的索引为2的元素为3，所有字符串为3",
    "optionB" : "2",
    "type" : "1",
    "optionA" : "1",
    "question" : "下面程序段的输出结果是什么：\nNSArray * arr1 = [[NSArray alloc] initWithObjects:@\"1\",@\"2\",@\"3\", nil];\nNSString *str;\nstr = [arr1 objectAtIndex:2];\nNSLog(@\"%@\",str);"
  },
  {
    "answer" : "1、整个程序运行初始，会默认建立一个autoreleasepool。建立代码如答案最下方所示，是在main.m中，每个项目都是这样的，所以你所说的没有创建，不知道是怎么得出的结论。代码来源于苹果官方demo。 2、因为不能控制系统autoreleasepool中对象的释",
    "ID" : "5602715ee4b043d0cb1d3a0a",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "在应用中可以创建多少autorelease对象,是否有限制?"
  },
  {
    "ID" : "55b5a5cee4b0ef2b575583d7",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "大量使用附有__weak修饰符的变量，并不会消耗相应的CPU资源。",
    "optionC" : "init方法返回的对象应为id类型、该方法声明类的对象类型、该类的超类型、子类型",
    "optionAnswer" : "D",
    "answer" : "D选项会消耗相应地CPU资源，良策是只在需要避免循环引用时使用__weak修饰符.",
    "optionB" : "init方法返回的对象并不注册到autoreasepool上",
    "type" : "1",
    "optionA" : "对象型变量不能作为C语言结构体(struct\/union)的成员",
    "question" : "下列说法错误的是"
  },
  {
    "ID" : "55b5a5cde4b0ef2b57558357",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "可以将NSTimer添加到runloop中",
    "optionC" : "在一个单独的线程中没有必要去启用RunLoop",
    "optionAnswer" : "C",
    "answer" : "每一个线程都有其对应的RunLoop，但是默认非主线程的RunLoop是没有运行的，需要为RunLoop添加至少一个事件源，然后去run它。一般情况下我们是没有必要去启用线程的RunLoop的，除非你在一个单独的线程中需要长久的检测某个事件。",
    "optionB" : "默认非主线程的RunLoop是没有运行的",
    "type" : "1",
    "optionA" : "每一个线程都有其对应的RunLoop",
    "question" : "对于runloop的理解不正确的是"
  },
  {
    "ID" : "55b5a5cee4b0ef2b575583d4",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "id __strong obj = [[NSObject alloc] init];",
    "optionC" : "id __strong obj0 = [[NSObject alloc] init];\nid __strong obj1 = obj0;",
    "optionAnswer" : "A",
    "answer" : "为了不以自己持有的状态来保存自己生成并持有的对象，生成的对象会立即被释放。",
    "optionB" : "id __strong obj0 = [[NSObject alloc] init];\nid __weak obj1 = obj0;",
    "type" : "1",
    "optionA" : "id __weak obj = [[NSObject alloc] init];",
    "question" : "下列代码中编译器会发出警告的是"
  },
  {
    "answer" : "（1）函数体内static 变量的作用范围为该函数体，不同于 auto 变量，该变量的内存只被分配一次，\n\n因此其值在下次调用时仍维持上次的值；\n\n（2）在模块内的static 全局变量可以被模块内所用函数访问，但不能被模块外其它函数访问；\n\n（3）在模块内的static 函数只可被这一模块内的其它函数调用，这个函数的使用范围被限制在声明\n\n它的模块内；\n\n（4）在类中的static 成员变量属于整个类所拥有，对类的所有对象只有一份拷贝；\n\n（5）在类中的static 成员函数属于整个类所拥有，这个函数不接收 this 指针，因而只能访问类的static 成员变量。 ",
    "ID" : "5602715de4b043d0cb1d399c",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "static的作用"
  },
  {
    "answer" : "objc优点：\n\n1) Cateogies\n\n2) Posing\n\n3) 动态识别\n\n4) 指标计算\n\n5）弹性讯息传递\n\n6) 不是一个过度复杂的 C 衍生语言\n\n7) Objective-C 与 C++ 可混合编程\n\n缺点:\n\n1) 不支援命名空间\n\n2)  不支持运算符重载\n\n3） 不支持多重继承\n\n4） 使用动态运行时类型，所有的方法都是函数调用，所以很多编译时优化方法都用不到。（如内联函数等），性能低劣。",
    "ID" : "5602715de4b043d0cb1d39a7",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "obj-c的优缺点"
  },
  {
    "answer" : "谁申请，谁释放\n遵循Cocoa Touch的使用原则;\n内存管理主要要避免“过早释放”和“内存泄漏”，对于“过早释放”需要注意@property设置特性时，一定要用对特性关键字，对于“内存泄漏”，一定要申请了要负责释放，要细心。\n关键字alloc 或new 生成的对象需要手动释放;\n设置正确的property属性，对于retain需要在合适的地方释放；",
    "ID" : "5602715ee4b043d0cb1d39f2",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "内存管理的几条原则时什么?按照默认法则.那些关键字生成的对象需要手动释放?在和property结合的时候怎样有效的避免内存泄露?"
  },
  {
    "ID" : "55b5a5cde4b0ef2b5755834c",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "数组",
    "optionC" : "NSUserDefaults",
    "optionAnswer" : "D",
    "answer" : "数组只能临时存储数据。",
    "optionB" : "数据库",
    "type" : "1",
    "optionA" : "plist",
    "question" : "下列不是iOS中永久保存数据的方法的是"
  },
  {
    "answer" : "链表逆序就是把一个链表按照原来的链接顺序逆序实现（也就是将头变成尾，尾变成头）。\n\n编程思路：其实最关键的是先通过原来的链接顺序找到下个节点，然后再把前个节点反序。",
    "ID" : "5602715de4b043d0cb1d39b1",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "链表逆序"
  },
  {
    "answer" : "编译时根据代码上下文，插入 retain\/release",
    "ID" : "55f2e4eee4b0152a611431d4",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "ARC通过什么方式帮助开发者管理内存？"
  },
  {
    "ID" : "55b5a5cee4b0ef2b575583c1",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "如果函数无参数，那么应声明其参数为void",
    "optionC" : "如果函数没有返回值，那么应声明为void类型",
    "optionAnswer" : "B",
    "answer" : "void*可以需要强制类型转换才能赋给其它类型的指针",
    "optionB" : "void*可以无需强制类型转换地赋给其它类型的指针",
    "type" : "1",
    "optionA" : "任何类型的指针都可以直接赋值给void*，无需进行强制类型转换",
    "question" : "下列说法错误的是"
  },
  {
    "ID" : "55b5a5cee4b0ef2b575583a2",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "tmp",
    "optionC" : "library",
    "optionAnswer" : "A",
    "answer" : "沙盒下包括的文件夹：Documents、library、tmp。",
    "optionB" : "Documents",
    "type" : "1",
    "optionA" : "Source",
    "question" : "下列不属于沙盒下路径的是"
  },
  {
    "answer" : "对应基本数据类型默认关键字是\natomic,readwrite,assign\n\n对于普通的OC对象\natomic,readwrite,strong",
    "ID" : "55f2e4eee4b0152a611431c1",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "ARC下，不显式指定任何属性关键字时，默认的关键字都有哪些？"
  },
  {
    "answer" : "iPhone 上没有 GC 。 iPhone 开发的时候没有垃圾回收机制。 在垃圾回收环境中，release 是一个空操作。因此， NSAutoreleasePool 提供了 drain 方法，在引用计数环境中，该方法的作用等同于调用 release ，但在垃圾回收环境中，它会触发垃圾回收（如果自上次垃圾回收以来分配的内存大于当前的阈值）。因此，在通常情况下，您应该使用 drain 而不是 release 来销毁自动释放池。",
    "ID" : "5602715de4b043d0cb1d39c3",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "自动释放池跟GC （垃圾回收）有什么区别？iPhone上有GC么？［poolrelease］ 和［pooldrain］有什么区别？"
  },
  {
    "answer" : "1、在ARC中,出现循环引用的时候,必须要有一端使用weak,比如:自定义View的代理属性 2、已经自身已经对它进行一次强应用,没有必要在强引用一次,此时也会使用weak,自定义View的子控件属性一般也使用weak;但b是也可以使用strong 3、weak当对象销毁的时候,指针会被自动设置为nil,而assign不会* assigin 可以用非OC对象,而weak必须用于OC对象",
    "ID" : "2fb476f6ea7311e58afd00163e0021c8",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "什么情况使用 weak 关键字，相比 assign 有什么不同？"
  },
  {
    "ID" : "5602715ce4b043d0cb1d3980",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "归并排序",
    "optionC" : "堆排序",
    "optionAnswer" : "B",
    "answer" : "选择排序、快速排序、希尔排序、堆排序不是稳定的排序算法，\n冒泡排序、插入排序、归并排序和基数排序是稳定的排序算法。\n快速排序：平均时间复杂度log2(n)*n，所有内部排序方法中最高好的，大多数情况下总是最好的。\n冒泡法：这是最原始，也是众所周知的最慢的算法了。他的名字的由来因为它的工作看来象是冒泡：  复杂度为O(n*n)。当数据为正序，将不会有交换。复杂度为O(0)。\n堆排序：log2(n)*n\n归并排序：log2(n)*n",
    "optionB" : "冒泡排序",
    "type" : "1",
    "optionA" : "快速排序",
    "question" : "下面四种内部排序算法中哪一种在最差情况下时间复杂度最高？"
  },
  {
    "ID" : "5629f9e0e4b05e6f47b0e9c4",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "集合内只能存对象",
    "optionC" : "字典内键值可以相同，但是每个键值对应的对象必须不同",
    "optionAnswer" : "D",
    "answer" : "D。还可以存元素",
    "optionB" : "集合内可以存整型的数",
    "type" : "1",
    "optionA" : "集合内不能存不同类型的对象",
    "question" : "下面哪个选项对集合的描述是正确的："
  },
  {
    "answer" : "1.通过setValue:forKey: 给属性赋值 2.通过setValue:forKeyPath: 给属性赋值 3.直接调用setter方法方法给属性赋值 4.直接通过指针给属性赋值 5.给这个value设置一个值,就可以触发了",
    "ID" : "28b2cd72ea8111e58afd00163e0021c8",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "如何触发一个value的KVO"
  },
  {
    "answer" : "\/\/ 获取根路径\n\nNSArray *paths=NSSearchPathForDirectoriesInDomains(NSDocumentDirectory,NSUserDomainMask,YES);\n\nNSString *documentsDirectory = [paths objectAtIndex:];\n\n\/\/ 创建文件系统管理器\n\nNSFileManager *fileManager = [[NSFileManageralloc] init];\n\n\/\/ 判断userData 目录是否存在\n\nif(![fileManagerfileExistsAtPath:[NSStringstringWithFormat:@”%@\/userData”,documentsDirectory]]) {\n\n\/\/ 不存在, 创建一个userData目录\n\n[fileManagercreateDirectoryAtPath:[NSStringstringWithFormat:@”%@\/userData”,documentsDirectory]withIntermediateDirectories:falseattributes:nilerror:nil];\n\n}",
    "ID" : "5602715de4b043d0cb1d39ca",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "获取项目根路径，并在其下创建一个名称为userData 的目录。"
  },
  {
    "answer" : "kvc:键 – 值编码是一种间接访问对象的属性使用字符串来标识属性，而不是通过调用存取方法，直接或通过实例变量访问的机制。\n很多情况下可以简化程序代码。apple文档其实给了一个很好的例子。\nkvo:键值观察机制，他提供了观察某一属性变化的方法，极大的简化了代码。\n具体用看到嗯哼用到过的一个地方是对于按钮点击变化状态的的监控。\n比如我自定义的一个button\n[self addObserver:self forKeyPath:@\"highlighted\" options:0 context:nil];\n#pragma mark KVO\n- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object \nchange:(NSDictionary *)change context:(void *)context\n{\nif ([keyPath isEqualToString:@\"highlighted\"] ) {\n[self setNeedsDisplay];\n}\n}\n对于系统是根据keypath去取的到相应的值发生改变，理论上来说是和kvc机制的道理是一样的。\n对于kvc机制如何通过key寻找到value：\n“当通过KVC调用对象时，比如：[self \nvalueForKey:@”someKey”]时，程序会自动试图通过几种不同的方式解析这个调用。首先查找对象是否带有 someKey \n这个方法，如果没找到，会继续查找对象是否带有someKey这个实例变量(iVar)，如果还没有找到，程序会继续试图调用 -(id) \nvalueForUndefinedKey:这个方法。如果这个方法还是没有被实现的话，程序会抛出一个NSUndefinedKeyException异常错误。\n(cocoachina.com注：Key-Value \nCoding查找方法的时候，不仅仅会查找someKey这个方法，还会查找getsomeKey这个方法，前面加一个get，或者_someKey以及_getsomeKey这几种形式。同时，查找实例变量的时候也会不仅仅查找someKey这个变量，也会查找_someKey这个变量是否存在。)\n设计valueForUndefinedKey:方法的主要目的是当你使用-(id)valueForKey方法从对象中请求值时，对象能够在错误发生前，有最后的机会响应这个请求。这样做有很多好处，下面的两个例子说明了这样做的好处。“\n来至cocoa，这个说法应该挺有道理。\n因为我们知道button却是存在一个highlighted实例变量.因此为何上面我们只是add一个相关的keypath就行了，\n可以按照kvc查找的逻辑理解，就说的过去了。",
    "ID" : "5602715ee4b043d0cb1d39fa",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "什么是KVO和KVC?"
  },
  {
    "ID" : "5629f9e0e4b05e6f47b0e9b8",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : " 12-5-31  5:45:04 PM",
    "optionC" : " 2012\/5\/31  5:45:04 PM",
    "optionAnswer" : "D",
    "answer" : "根据日期格式YY-MM-dd hh:mm:ss aaa判断D正确",
    "optionB" : " 12\/5\/31  5:45:04 PM",
    "type" : "1",
    "optionA" : "2012-05-31 17:45:04 PM",
    "question" : "NSDateFormatter * formatter = [[NSDateFormatter alloc] init];\n [formatter setAMSymbol:@\"AM\"];\n[formatter setPMSymbol:@\"PM\"];\n[formatter setDateFormat:@\"YY-MM-dd hh:mm:ss aaa\"];\n NSString * currentDate = [formatter stringFromDate:[NSDate date]];\n NSLog(@\"%@\",currentDate);\n打印结果是："
  },
  {
    "answer" : "\t1. 在protocol中使用property只会生成setter和getter方法声明,我们使用属性的目的,是希望遵守我协议的对象的实现该属性 \t2. category 使用 @property 也是只会生成setter和getter方法的声明,如果我们真的需要给category增加属性的实现,需要借助于运行时的两个函数 \t\t1. objc_setAssociatedObject objc_getAssociatedObject",
    "ID" : "aca3291cea7511e58afd00163e0021c8",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "@protocol 和 category 中如何使用 @property?"
  },
  {
    "answer" : "category 可以在不获悉，不改变原来代码的情况下往里面添加新的方法，只能添加，不能删除修改。 并且如果类别和原来类中的方法产生名称冲突，则类别将覆盖原来的方法，因为类别具有更高的优先级。 类别主要有 3 个作用： (1) 将类的实现分散到多个不同文件或多个不同框架中。 (2) 创建对私有方法的前向引用。 (3) 向对象添加非正式协议。 继承可以增加，修改方法，并且可以增加属性。",
    "ID" : "5602715de4b043d0cb1d39bb",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "类别的作用？继承和类别在实现中有何区别？"
  },
  {
    "ID" : "55b5a5cde4b0ef2b57558365",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "retain表示持有特性，copy属性表示拷贝属性，都会建立一个相同的对象",
    "optionC" : "assign是赋值属性，setter方法将传入参数赋值给实例变量",
    "optionAnswer" : "D",
    "answer" : "retain是指针拷贝，copy是内容拷贝。",
    "optionB" : "readonly是只读特性，只有getter方法，没有setter方法",
    "type" : "1",
    "optionA" : "readwrite是可读可写特性，需要生成getter方法和setter方法",
    "question" : "关于Objective-C中属性的说明，以下错误的是"
  },
  {
    "answer" : "iOS 中可以有四种持久化数据的方式：属性列表(plist)、对象归档、 SQLite3 和 Core Data； core data 可以使你以图形界面的方式快速的定义 app 的数据模型，同时在你的代码中容易获取到它。 coredata 提供了基础结构去处理常用的功能，例如保存，恢复，撤销和重做，允许你在 app 中继续创建新的任务。在使用 core data 的时候，你不用安装额外的数据库系统，因为 core data 使用内置的 sqlite 数据库。 core data 将你 app 的模型层放入到一组定义在内存中的数据对象。 coredata 会追踪这些对象的改变，同时可以根据需要做相反的改变，例如用户执行撤销命令。当 core data 在对你 app 数据的改变进行保存的时候， core data 会把这些数据归档，并永久性保存。 mac os x 中sqlite 库，它是一个轻量级功能强大的关系数据引擎，也很容易嵌入到应用程序。可以在多个平台使用， sqlite 是一个轻量级的嵌入式 sql 数据库编程。与 core data 框架不同的是， sqlite 是使用程序式的， sql 的主要的 API 来直接操作数据表。 Core Data 不是一个关系型数据库，也不是关系型数据库管理系统 (RDBMS) 。虽然 Core Dta 支持SQLite 作为一种存储类型，但它不能使用任意的 SQLite 数据库。 Core Data 在使用的过程种自己创建这个数据库。 Core Data 支持对一、对多的关系。",
    "ID" : "5629f9e2e4b05e6f47b0ea5a",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : " ios 平台怎么做数据的持久化?coredata 和sqlite有无必然联系？coredata是一个关系型数据库吗？"
  },
  {
    "ID" : "55b5a5cee4b0ef2b575583c2",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "任何类型的指针都可以直接赋值给void*，无需进行强制类型转换",
    "optionC" : "如果函数没有返回值，那么应声明为void类型",
    "optionAnswer" : "A",
    "answer" : "ANSI标准坚持：进行算法操作的指针必须是确定知道其指向数据类型大小的。但是GNU则指定void * 的算法操作与char * 一致。",
    "optionB" : "如果函数的参数可以是任意类型指针，那么应声明其参数为void*",
    "type" : "1",
    "optionA" : "ANSI标准，不能对void指针进行算法操作，即下列操作都是合法的：\nvoid * pvoid;\npvoid ++;\/",
    "question" : "下列说法错误的是"
  },
  {
    "answer" : "OC2.0有Garbage collection，但是iOS平台不提供。",
    "ID" : "56582e4900b0bf379eff7b08",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "OC有垃圾回收机制吗?"
  },
  {
    "answer" : "音视频编解码框架，内部使用UDP协议针对流媒体开发，内部开辟了六个端口来接受流媒体数据，完成快速接受之目的。",
    "ID" : "5629f9e1e4b05e6f47b0ea42",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "fmmpeg框架"
  },
  {
    "answer" : "* MRC 手动引用计数 * ARC 自动引用计数,现在通常使用自动引用计数",
    "ID" : "44213f0cea7d11e58afd00163e0021c8",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "objc使用什么机制管理对象内存？"
  },
  {
    "ID" : "55b5a5cee4b0ef2b57558375",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "如果想让一个对象的生命周期超过”Autorelease Pool”，还可以再次”retain”",
    "optionC" : "同一个对象只可以调用一次”autorelease”方法",
    "optionAnswer" : "C",
    "answer" : "同一个对象可以被多次调用”autorelease”方法，并可以放到同一个”Autorelease Pool” 中。",
    "optionB" : "引入这个自动释放池机制，对象的”autorelease”方法代替”relrease”方法可以延长它的生命周期，直接到当 前”Autorelrease Pool”释放",
    "type" : "1",
    "optionA" : "一个”Autorelease Pool”实例中“包含”其它各种调用了”autorelease”方法的对象",
    "question" : "关于Autorelease Pools下列叙述错误的是"
  },
  {
    "ID" : "55b5a5cde4b0ef2b57558335",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "当系统发现这个内存计数器变为小于等于0，那么就调用垃圾回收程序把这段内存回收(这个过程是dealloc)； ",
    "optionC" : " 紧接着程序A不需要这个内存了，那么程序A就把这个内存计数器减1 (这个过程是release); ",
    "optionAnswer" : "B",
    "answer" : "copy是复制一个新的对象，引用计数不+1",
    "optionB" : " 程序B里要使用已存在内存，那么内存计数器从1变为2 (这个过程是retain或者copy);",
    "type" : "1",
    "optionA" : "程序A里有一段内存被成功申请完成之后，内存计数器就从0变为1 (这个过程是alloc); ",
    "question" : "内存管理理解不正确的是"
  },
  {
    "answer" : "• 在普通的OC对象中,@property就是编译其自动帮我们生成一个私有的成员变量和setter与getter方法的声明和实现 • 我为了搞清属性是怎么实现的,曾经反编译过相关的代码,他大致生成了五个个东西 • OBJC_IVAR_$类名$属性名称 该属性的偏移量 • setter与getter方法对应的实现函数 • ivar_list 就是成员变量列表 • method_list 方法列表 • prop_list 属性列表 也就是说我们每次在增加一个属性,系统都会在ivar_list中添加一个成员变量的描述,在method_list中增加setter与getter方法的描述,在属性列表中增加一个属性的属性的描述,然后计算该属性在对象中的偏移量,然后伸出setter与getter方法对应的实现,在setter方法方法中从偏移量的位置开始赋值,在getter方法中从偏移量开始取值,为了能够读取正确字节数,系统对象偏移量的指针类型进行了类型强转.",
    "ID" : "65ce2578ea7511e5b65200163e0021c8",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "@property 的本质是什么？ivar、getter、setter 是如何生成并添加到这个类中的？"
  },
  {
    "answer" : " Cocoa Touch 提供了 4 种 Core Animation 过渡类型，分别为：交叉淡化、推挤、显示和覆盖。",
    "ID" : "5629f9e2e4b05e6f47b0ea52",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "Cocoa Touch提供了哪几种Core Animation过渡类型？"
  },
  {
    "answer" : "线程创建有三种方法：使用NSThread创建、使用GCD的dispatch、使用子类化的NSOperation,然后将其加入NSOperationQueue;在主线程执行代码，方法是performSelectorOnMainThread，如果想延时执行代码可以用performSelector:onThread:withObject:waitUntilDone:",
    "ID" : "5602715ee4b043d0cb1d39f4",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "OC中创建线程的方法是什么?如果在主线程中执行代码，方法是什么?如果想延时执行代码、方法又是什么?"
  },
  {
    "answer" : "面向对象和面向过程是从不同角度出发的，面向过程是一种以事件为中心的编程思想，就是分析问题需要经过多少步骤才能解决，然后用函数把这些步骤一步一步实现，使用的时候一个一个一次调用就可以了。面向对象是一种以事物为中心的编程思想，把构成问题事物分解成各个对象，简历对象的目的不是为了完成某一步骤，而是为了描述某个事物在整个解决问题的步骤中的行为。",
    "ID" : "5629f9e0e4b05e6f47b0e9e3",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "面向对象和面向过程有什么不同？"
  },
  {
    "answer" : "类方法：\n类方法是属于类对象的\n类方法只能通过类对象调用\n类方法中的self是类对象\n类方法可以调用其他的类方法\n类方法中不能访问成员变量\n类方法中不定直接调用对象方法\n\n实例方法：\n实例方法是属于实例对象的\n实例方法只能通过实例对象调用\n实例方法中的self是实例对象\n实例方法中可以访问成员变量\n实例方法中直接调用实例方法\n实例方法中也可以调用类方法(通过类名)",
    "ID" : "55f2e4eee4b0152a611431cb",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "objc中的类方法和实例方法有什么本质区别和联系？"
  },
  {
    "ID" : "55b5a5cee4b0ef2b575583ba",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "\n重载load时不需要手动添加@autoreleasepool\n\n",
    "optionC" : "\n在自己Class的load方法时可以替换系统framework（比如UIKit）中的某个类的方法实现\n\n",
    "optionAnswer" : "B",
    "answer" : "重载自己Class的load方法时不能调父类。 runtime负责按继承顺序递归调用，所以重载自己Class的load方法时不能调super ",
    "optionB" : "重载自己Class的load方法时需要调父类。 ",
    "type" : "1",
    "optionA" : "派生类继承父类方法时，该方法具有相同的返回类型，并且参数的数目与重载的方法相同，即对父类同名函数进行重写",
    "question" : "下列说法错误的是"
  },
  {
    "ID" : "55b5a5cee4b0ef2b575583d0",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "__strong修饰符的成员变量在持有对象时，很容易发生循环引用。",
    "optionC" : "附有这些修饰符的自动变量初始化时自动赋值为nil：__strong、__weak、__autoreleasing",
    "optionAnswer" : "A",
    "answer" : "__strong修饰符表示对对象的“强引用”，持有强引用的变量在超出其作用域时被废弃，随着强引用的失效，引用的对象会随之释放。",
    "optionB" : "__strong修饰符的变量，不仅只在变量作用域中，在赋值上也能够正确地管理其对象的所有者。",
    "type" : "1",
    "optionA" : "__strong修饰符修饰的强引用变量即使在超出其作用域时也不会被释放。",
    "question" : "下列说法错误的是"
  },
  {
    "ID" : "55b5a5cde4b0ef2b57558323",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "线程有自己的堆栈和局部变量",
    "optionC" : "进程和线程的主要差别在于它们是不同的操作系统资源管理方式",
    "optionAnswer" : "B",
    "answer" : "每个进程都拥有自己的地址空间，但线程没有自己独立的地址空间，而是运行在一个进程里的所有线程共享该进程的整个虚拟地址空间",
    "optionB" : "线程之间有单独的地址空间",
    "type" : "1",
    "optionA" : "进程和线程都是由操作系统所体会的程序运行的基本单元",
    "question" : "线程和进程的区别不正确的是"
  },
  {
    "ID" : "55b5a5cee4b0ef2b5755838a",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "Objective-C中得字符串是@\"abc\"，也可以是\"abc\"。",
    "optionC" : "字符可以是字符集中任意字符。",
    "optionAnswer" : "D",
    "answer" : "Objective-C中得字符串只能是@\"abc\",不能去掉\"abc\"。",
    "optionB" : "字符常量只能是单个字符，不能是字符串，转义字符除外。",
    "type" : "1",
    "optionA" : "字符常量只能用单引号括起来，不能用双引号或其它括号",
    "question" : "下列不属于Objective-C中得字符常量的特点的是"
  },
  {
    "answer" : "具体原因同上题：该方法编译之后就是objc_msgSend()函数调用.如果我没有记错的大概是这样的：\n\n((void ()(id, SEL))(void )objc_msgSend)((id)obj, sel_registerName(\"foo\"));\n也就是说：\n\n[obj foo];在objc动态编译时，会被转意为：objc_msgSend(obj, @selector(foo));。",
    "ID" : "55f2e4eee4b0152a611431c4",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "objc中向一个对象发送消息[obj foo]和objc_msgSend()函数之间有什么关系？"
  },
  {
    "answer" : "1).函数体内 static 变量的作用范围为该函数体，不同于 auto 变量，该变量的内存只被分配一次，\n\n因此其值在下次调用时仍维持上次的值；\n\n2).在模块内的 static 全局变量可以被模块内所用函数访问，但不能被模块外其它函数访问；\n\n3).在模块内的 static 函数只可被这一模块内的其它函数调用，这个函数的使用范围被限制在声明\n\n它的模块内；\n\n4).在类中的 static 成员变量属于整个类所拥有，对类的所有对象只有一份拷贝；\n\n5).在类中的 static 成员函数属于整个类所拥有，这个函数不接收 this 指针，因而只能访问类的static 成员变量。",
    "ID" : "5629f9e1e4b05e6f47b0ea31",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "static 关键字的作用："
  },
  {
    "answer" : " id 是个很重要的类型，是个可以指向任何类型的指针或者可以理解为指向任何未知类型的指针。\n\n",
    "ID" : "5602715de4b043d0cb1d39c2",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "id 声明的对象有什么特性？"
  },
  {
    "ID" : "55b5a5cde4b0ef2b5755836d",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "retain 表示持有特性，setter方法将传入参数先保留，再赋值，传入参数的retaincount会+1;",
    "optionC" : "assign 是赋值特性，和weak一样，可用weak代替；",
    "optionAnswer" : "C",
    "answer" : "assign 是赋值属性，在ARC中可用weak替代",
    "optionB" : "readonly 是只读特性 只会生成getter方法 不会生成setter方法 ;不希望属性在类外改变",
    "type" : "1",
    "optionA" : "readwrite 是可读可写特性；需要生成getter方法和setter方法时",
    "question" : "下面说法不正确的是 "
  },
  {
    "ID" : "55b5a5cde4b0ef2b5755833f",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "obj-c的编译器支持cpp",
    "optionC" : "只要cpp文件和cpp include的文件中不包含obj-c的东西就可以用了",
    "optionAnswer" : "B",
    "answer" : "只要cpp文件和cpp include的文件中不包含obj-c的东西就可以用了，cpp混用obj-c的关键是使用接口，而不能直接使用实现代码，实际上cpp混用的是obj-c编译后的o文件，这个东西其实是无差别的，所以可以用。obj-c的编译器支持cpp",
    "optionB" : " 可以随便混用",
    "type" : "1",
    "optionA" : "obj-c的编译器处理后缀为m的文件时，可以识别obj-c和c的代码，处理mm文件可以识别obj-c,c,c++代码，但cpp文件必须只能用c\/c++代码，而且cpp文件include的头文件中，也不能出现obj-c的代码，因为cpp只是cpp",
    "question" : "下列关于c和obj-c如何混用不正确的是"
  },
  {
    "ID" : "55b5a5cde4b0ef2b57558332",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "tmp",
    "optionC" : "Library",
    "optionAnswer" : "B",
    "answer" : "DataSource不是沙盒下得目录。",
    "optionB" : "DataSource",
    "type" : "1",
    "optionA" : "Documents",
    "question" : "下列哪个路径不是沙盒下得路径"
  },
  {
    "answer" : "容易误用造成死锁",
    "ID" : "e309c32cea7e11e5b65200163e0021c8",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "苹果为什么要废弃dispatch_get_current_queue？"
  },
  {
    "ID" : "5629f9dfe4b05e6f47b0e9a0",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "dealloc",
    "optionC" : "retain",
    "optionAnswer" : "C",
    "answer" : "通过alloc、new、retain操作创建的对象，在非ARC情况下需要release操作",
    "optionB" : "assign",
    "type" : "1",
    "optionA" : "delegate",
    "question" : "经过下列哪种操作后需要使用release方法。"
  },
  {
    "ID" : "55b5a5cde4b0ef2b57558336",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "对于“内存泄漏”，一定要申请了要负责释放，要细心、关键字alloc 或new 生成的对象不需要手动释放、设置正确的property属性，对于retain需要在合适的地方释放",
    "optionC" : "对于“过早释放”需要注意@property设置特性时，一定要用对特性关键字",
    "optionAnswer" : "D",
    "answer" : "alloc或new生成的对象需要手动释放。",
    "optionB" : "内存管理主要要避免“过早释放”和“内存泄漏”",
    "type" : "1",
    "optionA" : "谁申请，谁释放、遵循Cocoa Touch的使用原则",
    "question" : "内存管理的几条原则错误的是?"
  },
  {
    "answer" : "都输出 Son\n这个题目主要是考察关于objc中对 self 和 super 的理解。\n\nself 是类的隐藏参数，指向当前调用方法的这个类的实例。而 super 是一个 Magic Keyword， 它本质是一个编译器标示符，和 self 是指向的同一个消息接受者。\n\n上面的例子不管调用[self class]还是[super class]，接受消息的对象都是当前 Son ＊xxx 这个对象。而不同的是，super是告诉编译器，调用 class 这个方法时，要去父类的方法，而不是本类里的。\n\n当使用 self 调用方法时，会从当前类的方法列表中开始找，如果没有，就从父类中再找；而当使用 super 时，则从父类的方法列表中开始找。然后调用父类的这个方法。",
    "ID" : "55f2e4eee4b0152a611431c8",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "下面的代码输出什么？\n@implementation Son : Father\n- (id)init\n{\n    self = [super init];\n    if (self) {\n        NSLog(@\"%@\", NSStringFromClass([self class]));\n        NSLog(@\"%@\", NSStringFromClass([super class]));\n    }\n    return self;\n}\n@end"
  },
  {
    "ID" : "5629f9e0e4b05e6f47b0e9ba",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : " +(id) studentWithName:(NSString *) newName{  Student * stu = [[Student alloc] init];   stu.Name = newName;   [stu autorelease];  return stu;}",
    "optionC" : " +(id) studentWithName:(NSString *) newName{  Student * stu = [[Student alloc] init];   stu.Name= newName;  [stu release];  return stu;}",
    "optionAnswer" : "D",
    "answer" : "遍历构造器: 是一种快速创建对象的方式.它本质上是把初始化方法做了一次封装,方便外接使用.\n便利构造器:+号方法",
    "optionB" : " +(id) studentWithName:(NSString *) newName{  Student * stu = [[Student alloc] init];   stu.Name\n\n= newName;  return stu;}",
    "type" : "1",
    "optionA" : " -(id) initWithName:(NSString *) newName{  Student * stu = [[Student alloc] init];   stu.Name\n\n= newName;  return stu;}",
    "question" : "现有自定义类Student，下列选项中Student类的便利构造器编写正确的是："
  },
  {
    "answer" : "• 对于字符串和block的属性一般使用copy • 字符串使用copy是为了外部把字符串内容改了,影响该属性 block使用copy是在MRC遗留下来的,在MRC中,方法内部的block是在在栈区的,使用copy可以把它放到堆区.在ACR中对于block使用copy还是strong效果是一样的",
    "ID" : "91a67292ea7311e58afd00163e0021c8",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "什么情况使用 copy 关键字？"
  },
  {
    "answer" : "NSManagedobjectContext对象负责应用和数据库之间的交互",
    "ID" : "5602715ee4b043d0cb1d3a14",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "什么是NSManagedobjectContext?"
  },
  {
    "answer" : "两个问题：\n1、添加,删除,修改数组内的元素的时候,程序会因为找不到对应的方法而崩溃.因为copy就是复制一个不可变NSArray的对象；\n2、使用了atomic属性会严重影响性能。\n\n第1条的相关原因在下文中有论述《用@property声明的NSString（或NSArray，NSDictionary）经常使用copy关键字，为什么？如果改用strong关键字，可能造成什么问题？》 以及上文《怎么用 copy 关键字？》也有论述。\n\n第2条原因，如下：\n\n该属性使用了同步锁，会在创建时生成一些额外的代码用于帮助编写多线程程序，这会带来性能问题，通过声明nonatomic可以节省这些虽然很小但是不必要额外开销。\n\n在默认情况下，由编译器所合成的方法会通过锁定机制确保其原子性(atomicity)。如果属性具备nonatomic特质，则不使用同步锁。请注意，尽管没有名为“atomic”的特质(如果某属性不具备nonatomic特质，那它就是“原子的”(atomic))。",
    "ID" : "55f2e4eee4b0152a611431b9",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "这个写法会出什么问题： @property (copy) NSMutableArray *array;"
  },
  {
    "answer" : "str的retainCount创建+1，retain+1，加入数组自动+1 retain+1，release-1，release-1，数组删除所有对象，所有数组内的对象自动；",
    "ID" : "5602715ee4b043d0cb1d39f1",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "看下面的程序,第一个NSLog会输出什么?这时str的retainCount是多少?第二个和第三个呢? 为什么?\n=======================================================\nNSMutableArray* ary = [[NSMutableArray array] retain];\nNSString *str = [NSString stringWithFormat:@\"test\"];\n[strretain];\n[aryaddObject:str];\nNSLog(@”%@%d”,str,[str retainCount]);\n[strretain];\n[strrelease];\n[strrelease];\nNSLog(@”%@%d”,str,[str retainCount]);\n[aryremoveAllObjects];\nNSLog(@”%@%d”,str,[str retainCount]);\n======================================================="
  },
  {
    "answer" : "a)    int a;\n\nb)    int *a;\n\nc)    int **a;\n\nd)    int a[10]\n\ne)    int *a[10];\n\nf)    int (*a)[10];\n\ng)    int (*a)(int);\n\ni)    int (*a[10])(int);",
    "ID" : "5602715de4b043d0cb1d39cd",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "用变量a 给出下面的定义\n\na)    一个整型\n\nb)    一个指向整型数的指针\n\nc)    一个指向指针的的指针，它指向的指针是指向一个整型数\n\nd)    一个有10 个整型数的数组\n\ne)    一个有10 个指针的数组，该指针是指向一个整型数的\n\nf)    一个指向有10 个整型数数组的指针\n\ng)    一个指向函数的指针，该函数有一个整型参数并返回一个整型数\n\nh)    一个有10 个指针的数组，该指针指向一个函数，该函数有一个整型参数并返回一个整型数"
  },
  {
    "answer" : "1）在protocol中使用property只会生成setter和getter方法声明,我们使用属性的目的,是希望遵守我协议的对象能实现该属性\n\n2）category 使用 @property 也是只会生成setter和getter方法的声明,如果我们真的需要给category增加属性的实现,需要借助于运行时的两个函数：\n\n①objc_setAssociatedObject\n\n②objc_getAssociatedObject",
    "ID" : "55f2e4eee4b0152a611431bc",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "@protocol 和 category 中如何使用 @property"
  },
  {
    "ID" : "55b5a5cee4b0ef2b575583c0",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "id类型就是一个指针，它可以指向的类型不仅限于继承自NSObject的对象          ",
    "optionC" : "如果一个方法声明的返回类型是id，那么得到所在类的类型",
    "optionAnswer" : "D",
    "answer" : "如果一个方法声明的返回类型是id，那么得到的返回值类型也是id",
    "optionB" : "?id<NSObject>告诉编译器，你不关心对象是什么类型，但它必须遵守NSObject协议(protocol)",
    "type" : "1",
    "optionA" : "id类型是运行时的动态类型，编译器无法知道它的真实类型，即使你发送一个id类型没有的方法，也不会产生编译警告。",
    "question" : "下列说法错误的是"
  },
  {
    "ID" : "55b5a5cee4b0ef2b575583a9",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "此时，只有obj0持有对象B的强引用",
    "optionC" : "对象A并不会立即被废弃",
    "optionAnswer" : "A",
    "answer" : "因为obj0被赋值，所以原先持有的对对象A的强引用失效。对象A的所有者不存在，因此对象A被废弃。此时，持有对象B的强引用的变量为obj0和obj1。",
    "optionB" : "原先持有的对对象A的强引用不会失效",
    "type" : "1",
    "optionA" : "此时obj0持有obj1赋值的对象B的强引用。",
    "question" : "id __strong obj0 = [[NSObject alloc] init]; \/*obj0持有对象A的强引用*\/\nid __strong obj1 = [[NSObject alloc] init]; \/*obj1持有对象B的强引用*\/\nobj0 = obj1，下列叙述正确的是"
  },
  {
    "answer" : "assign用于简单数据类型，如NSInteger,double,bool,retain 和copy用户对象，copy用于当 a指向一个对象，b也想指向同样的对象的时候，如果用assign，a如果释放，再调用b会crash,如果用copy 的方式，a和b各自有自己的内存，就可以解决这个问题。retain 会使计数器加一，也可以解决assign的问题。另外：tomic和nonatomic用来决定编译器生成的getter和setter是否为原子操作。在多线程环境下，原子操作是必要的，否则有可能引起错误的结果。",
    "ID" : "5602715de4b043d0cb1d39df",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "定义属性时，什么情况使用copy，assign，和retain"
  },
  {
    "ID" : "5629f9e0e4b05e6f47b0e9b7",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "当引用计数为0时.",
    "optionC" : "[super dealloc]时",
    "optionAnswer" : "D",
    "answer" : "当retainCount为0时调用dealloc",
    "optionB" : "[instance release]后",
    "type" : "1",
    "optionA" : "[property release]后",
    "question" : "类何时调用dealloc方法："
  },
  {
    "ID" : "5629f9e0e4b05e6f47b0e9b0",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "free",
    "optionC" : "dealloc",
    "optionAnswer" : "C",
    "answer" : "alloc ---> dealloc (系统自动调用)\nretain\/copy\/alloc\/new (它们使retainCount + 1)  ---> release\/autorelease  (它们使retainCount - 1 )\nretainCount为0时...系统会自动调用dealloc",
    "optionB" : "retain",
    "type" : "1",
    "optionA" : "release",
    "question" : "OC中与alloc相反的方法是："
  },
  {
    "ID" : "55b5a5cde4b0ef2b57558326",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "一种储存空间的名称",
    "optionC" : "一种在主屏幕上整理应用程序的方法",
    "optionAnswer" : "C",
    "answer" : "在ios系统里，文件夹是一种在主屏幕上整理应用程序的方法",
    "optionB" : "Photo应用程序中的一种幻灯片过度方式",
    "type" : "1",
    "optionA" : "一种整理邮件的方法",
    "question" : "在ios系统里，文件夹是"
  },
  {
    "ID" : "55b5a5cde4b0ef2b5755836c",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "使用#import头文件会自动只导入一次，不会重复导入",
    "optionC" : "#import与#include没有区别",
    "optionAnswer" : "C",
    "answer" : "#import防止重复导入，所以有区别。",
    "optionB" : "#include是C\/C++导入头文件的关键字",
    "type" : "1",
    "optionA" : "#import是Objective-C导入头文件的关键字",
    "question" : "下列关于#import 和#include错误的是？"
  },
  {
    "answer" : "\t• 在ARC下不需要 在MRC中,对于使用retain或copy策略的需要",
    "ID" : "4651bbbaea7a11e58afd00163e0021c8",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "使用runtime Associate方法关联的对象，需要在主对象dealloc的时候释放么？"
  },
  {
    "answer" : "实现简单的表格显示需要设置 UITableView 的 dataSource 和 delegate 属性，实现UITableViewDataSource 和 UITableViewDelegate 协议。",
    "ID" : "5629f9e1e4b05e6f47b0ea50",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "实现简单的表格显示需要设置UITableView的什么属性、实现什么协议？"
  },
  {
    "ID" : "55b5a5cfe4b0ef2b575583e2",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "UISwipeGestureRecognizer",
    "optionC" : "Accelerometer",
    "optionAnswer" : "B",
    "answer" : "typedef enum {\n    UIEventTypeTouches,\n    UIEventTypeMotion,\n    UIEventTypeRemoteControl,\n} UIEventType;",
    "optionB" : "Touches",
    "type" : "1",
    "optionA" : "Multitouch",
    "question" : "下列属于UIEventType事件类型的是"
  },
  {
    "ID" : "55b5a5cee4b0ef2b575583ac",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "A和B都有可能正确输出obj1表示的对象",
    "optionC" : "A和B都不会正确输出obj1表示的对象\n",
    "optionAnswer" : "D",
    "answer" : "obj0变量在超出其作用域后强引用失效，所以自动释放了自己持有的对象。因为对象无持有者，所以废弃该对象。obj1变量表示的对象已经被废弃，obj1成为悬垂指针，访问错误。但应用程序在个别运行状态下才会崩溃。\n",
    "optionB" : "A和B都会正确输出obj1表示的对象",
    "type" : "1",
    "optionA" : "只有A会正确输出obj1表示的对象\n",
    "question" : "下列说法中正确的一项是\nid __unsafe_unretained obj1 = nil;\n{\/\/作用域\n    id __strong obj0 = [[NSObject alloc] init];\n    obj1= obj0;\n    NSLog(@“A:%@”,obj1);\n}\/\/obj0作用域结束\nNSLog(@“B:%@”,obj1);"
  },
  {
    "ID" : "55b5a5cde4b0ef2b5755834d",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "[self pushViewController:nextViewController animated:YES];",
    "optionC" : "[self presentModalViewController:nextViewController animated:YES];",
    "optionAnswer" : "C",
    "answer" : "C采用模态弹出视图的方式切换视图控制器。\n\nA 的话需要 NavigationController\nB 的话需要使用 ViewController 容器\nD 也需要 NavigationController",
    "optionB" : "[self view addSubview:nextViewController.view];",
    "type" : "1",
    "optionA" : "[self navigationController pushViewController:nextViewController animated:YES];",
    "question" : "在没有navigationController的情况下，要从一个ViweController切换到另一个ViewController应该"
  },
  {
    "ID" : "55b5a5cde4b0ef2b5755834a",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "消息通知",
    "optionC" : "Delegate",
    "optionAnswer" : "B",
    "answer" : "传值的方式有：属性，Delegate，单例，消息通知，Block。继承是子类可以直接使用父类的部分特征和行为",
    "optionB" : "继承",
    "type" : "1",
    "optionA" : "属性",
    "question" : "下列不是用来传值的是"
  },
  {
    "answer" : "在OC 中NSNumber是数字对象，可以进行拆装箱操作！\n\n\/\/ 将int 转为NSNumber\n\nNSNumber *num = [NSNumber numberWithInt:123];\n\n\/\/ 得到一个int\n\ninttestNum = [numintValue];",
    "ID" : "5602715de4b043d0cb1d39cf",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "objective-c 中的数字对象都有哪些，简述它们与基本数据类型的区别是什么？"
  },
  {
    "answer" : "类别：为已知的类增加新的方法，哪怕是那些没有源代码的类，也可以作为子类的替代手段，易于多人合作开发同一个类。\n类扩展：通过在本类的定义里使用类别来声明私有方法，也是对类的一种扩展，类扩展只能增加实例方法，不能增加实例变量。",
    "ID" : "5629f9e0e4b05e6f47b0e9e5",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "类别和类扩展有什么区别？他们的作用分别是什么？"
  },
  {
    "answer" : "一个定义为 volatile的变量是说这变量可能会被意想不到地改变，这样，编译器就不会去假设这个变量的值了。精确地说就是，优化器在用到这个变量时必须每次都小心地重新读取这个变量的值，而不是使用保存在寄存器里的备份。\n\n下面是volatile变量的几个例子：\n\n并行设备的硬件寄存器（如：状态寄存器）\n\n一个中断服务子程序中会访问到的非自动变量(Non-automatic variables)\n\n多线程应用中被几个任务共享的变量",
    "ID" : "5629f9e1e4b05e6f47b0ea2f",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "关键字volatile有什么含意?并给出三个不同的例子。"
  },
  {
    "answer" : "事件响应链。包括点击事件，画面刷新事件等。在视图栈内从上至下，或者从下之上传播。\n可以说点事件的分发，传递以及处理。具体可以去看下touch事件这块。因为问的太抽象化了\n严重怀疑题目出到越后面就越笼统。\n可以从责任链模式，来讲通过事件响应链处理，其拥有的扩展性",
    "ID" : "5602715ee4b043d0cb1d3a01",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "说说响应链"
  },
  {
    "answer" : "CFNetwork 、 CFSocket 和 BSD Socket 。",
    "ID" : "5629f9e2e4b05e6f47b0ea58",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : " Core Foundation中提供了哪几种操作Socket的方法？"
  },
  {
    "answer" : "全局变量(外部变量)的说明之前再冠以static 就构成了静态的全局变量。全局变量本身就是静态存储方式， 静态全局变量当然也是静态存储方式。 这两者在存储方式上并无不同。这两者的区别虽在于非静态全局变量的作用域是整个源程序，当一个源程序由多个源文件组成时，非静态的全局变量在各个源文件中都是有效的。 而静态全局变量则限制了其作用域， 即只在定义该变量的源文件内有效， 在同一源程序的其它源文件中不能使用它。由于静态全局变量的作用域局限于一个源文件内，只能为该源文件内的函数公用， 因此可以避免在其它源文件中引起错误。\n    从以上分析可以看出， 把局部变量改变为静态变量后是改变了它的存储方式即改变了它的生存期。把全局变量改变为静态变量后是改变了它的作用域， 限制了它的使用范围。\n    static函数与普通函数作用域不同。static函数仅在本文件中使用。只在当前源文件中使用的函数应该说明为内部函数(static)，内部函数应该在当前源文件中说明和定义。对于可在当前源文件以外使用的函数，应该在一个头文件中说明，要使用这些函数的源文件要包含这个头文件\n    static全局变量与普通的全局变量有什么区别：static全局变量只初使化一次，防止在其他文件单元中被引用;\n    static局部变量和普通局部变量有什么区别：static局部变量只被初始化一次，下一次依据上一次结果值；\n    static函数与普通函数有什么区别：static函数在内存中只有一份，普通函数在每个被调用中维持一份拷贝",
    "ID" : "5602715ee4b043d0cb1d39e3",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "static全局变量与普通的全局变量有什么区别？static局部变量和普通局部变量有什么区别？static函数与普通函数有什么区别？"
  },
  {
    "ID" : "55b5a5cde4b0ef2b57558321",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "UIViewController",
    "optionC" : "AppDelegate ",
    "optionAnswer" : "B",
    "answer" : "点击Button响应链中最终得到响应的是Application",
    "optionB" : "Application ",
    "type" : "1",
    "optionA" : "Window ",
    "question" : "点击Button响应链中最终得到响应的是"
  },
  {
    "ID" : "5629f9e0e4b05e6f47b0e9c5",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "NSString和NSMutableString没有任何关系。",
    "optionC" : "NSMutableString是NSString的子类。",
    "optionAnswer" : "D",
    "answer" : "D选项。NSMutableString继承自NSString",
    "optionB" : "NSMutableString是可变字符串，即本身内容可修改。",
    "type" : "1",
    "optionA" : "NSString是不可变字符串，即本身内容不能被改变。",
    "question" : "NSString 和 NSMutableString的关系和区别描述不正确的是："
  },
  {
    "answer" : "死循环",
    "ID" : "5602715de4b043d0cb1d39cc",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "这段代码有什么问题吗\n\n@implementation Person  \n\ni.       (void)setAge:(int)newAge\n\n{  \n\nself.age = newAge;  \n\n}"
  },
  {
    "ID" : "55b5a5cee4b0ef2b575583ad",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "new",
    "optionC" : "autorelease",
    "optionAnswer" : "D",
    "answer" : "ARC有效时new方法可以使用",
    "optionB" : "retainCount",
    "type" : "1",
    "optionA" : "retain",
    "question" : "ARC有效时。以下哪个方法可以使用："
  },
  {
    "answer" : "浅层复制：只复制指向对象的指针，而不复制引用对象本身。\n\n深层复制：复制引用对象本身。\n\n意思就是说我有个A对象，复制一份后得到A_copy对象后，对于浅复制来说，A和A_copy指向的是同一个内存资源，复制的只不过是是一个指针，对象本身资源\n\n还是只有一份，那如果我们对A_copy执行了修改操作,那么发现A引用的对象同样被修改，这其实违背了我们复制拷贝的一个思想。深复制就好理解了,内存中存在了\n\n两份独立对象本身。\n\n用网上一哥们通俗的话将就是：\n\n浅复制好比你和你的影子，你完蛋，你的影子也完蛋\n\n深复制好比你和你的克隆人，你完蛋，你的克隆人还活着。",
    "ID" : "5629f9e0e4b05e6f47b0e9f7",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "浅复制和深复制（浅拷贝和深拷贝）的区别?"
  },
  {
    "answer" : "添加,删除,修改数组内的元素的时候,程序会因为找不到对于的方法而崩溃.因为copy就是复制一个不可变NSArray的对象",
    "ID" : "42da6e38ea7411e58afd00163e0021c8",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "这样写会出什么问题吗？ @property (copy) NSMutableArray *array;"
  },
  {
    "answer" : "从Apple 的文档可以看出：Apple 并不希望过多暴露 KVO 的实现细节。不过，要是借助 runtime 提供的方法去深入挖掘，所有被掩盖的细节都会原形毕露：\n\n当你观察一个对象时，一个新的类会被动态创建。这个类继承自该对象的原本的类，并重写了被观察属性的 setter 方法。重写的 setter 方法会负责在调用原 setter 方法之前和之后，通知所有观察对象：值的更改。最后通过 isa 混写（isa-swizzling） 把这个对象的 isa 指针 ( isa 指针告诉 Runtime 系统这个对象的类是什么 ) 指向这个新创建的子类，对象就神奇的变成了新创建的子类的实例。",
    "ID" : "55f2e4eee4b0152a611431e5",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "apple用什么方式实现对一个对象的KVO？"
  },
  {
    "ID" : "5629f9e0e4b05e6f47b0e9a5",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "scanf()",
    "optionC" : "NSPrintf()",
    "optionAnswer" : "A",
    "answer" : "Printf()和scanf()是C语言中的打印方式\nNSPrintf()是PHP中的打印方式\n",
    "optionB" : "Printf()",
    "type" : "1",
    "optionA" : "NSLog()",
    "question" : "向Xcode控制台输出一个字符串应该用："
  },
  {
    "ID" : "5629f9e0e4b05e6f47b0e9d5",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "3",
    "optionC" : "2",
    "optionAnswer" : "C",
    "answer" : "initWithFormat:只取第一个参数",
    "optionB" : "234",
    "type" : "1",
    "optionA" : "123",
    "question" : "NSMutableDictionary * dic = [[NSMutableDictionary alloc] initWithObjectsAndKeys:@\"1\",@\"2\",@\"2\",@\"3\",@\"3\",@\"4\", nil];\nNSArray *arr = [[NSArray alloc] initWithArray:[dic allKeys]];\nNSString *str = [[NSString alloc] initWithFormat:[arr objectAtIndex:0],[arr objectAtIndex:1],[arr objectAtIndex:2]];\nNSLog(@\"%@\",str);结果是："
  },
  {
    "answer" : "用户自己创建的数据线程，则需要创建该线程的内存池",
    "ID" : "5602715ee4b043d0cb1d3a0c",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "什么时候需要在程序中创建内存池?"
  },
  {
    "answer" : "加号方法是类方法，属于静态方法\n\n减号方法是实例方法必须由类的实例来调用",
    "ID" : "5602715de4b043d0cb1d39a1",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "OC中加号方法与减号的区别？"
  },
  {
    "ID" : "5629f9e0e4b05e6f47b0e9b9",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "length,width",
    "optionC" : "location,height",
    "optionAnswer" : "A",
    "answer" : "NSRange为结构体，包含location，length",
    "optionB" : "width,height",
    "type" : "1",
    "optionA" : "location,length",
    "question" : "NSRange的成员变量有："
  },
  {
    "ID" : "55b5a5cee4b0ef2b57558387",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "和一般接口部分不同的是，不必实现分类中的所有方法",
    "optionC" : "可以拥有很多分类",
    "optionAnswer" : "B",
    "answer" : "分类可以重载该类中的另一个方法，但是通常认为这种做法不可取。因为，重载之后，再不能访问原来的方法。",
    "optionB" : "一般通过分类重载该类中的另一个方法",
    "type" : "1",
    "optionA" : "尽管分类可以访问原始类的实例变量，但是它不能添加自身的任何变量。如果需要添加变量，可以考虑创建子类",
    "question" : "下列关于分类错误的是"
  },
  {
    "ID" : "5629f9e0e4b05e6f47b0e9ac",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "#import<>",
    "optionC" : "#import \"\"",
    "optionAnswer" : "C",
    "answer" : "当我们在代码中使用两次#include的时候会报错：因为#include相当于拷贝头文件中的声明内容，所以会报重复定义的错误\n但是使用两次#import的话，不会报错，所以他可以解决重复导入的问题，他会做一次判断，如果已经导入一次就不导入了\n",
    "optionB" : "#include<>",
    "type" : "1",
    "optionA" : "#include \"\"",
    "question" : "Objective-C中包含一个自定义的头文件应该使用："
  },
  {
    "answer" : "总体上说:  使用 dispatch group，然后 wait forever 等待完成， 或者采取 group notify 来通知回调。   细节:   1. 创建异步队列   2. 创建dispatch_group  dispatch_group_t =  dispatch_group_create()   3. 通过组来执行异步下载任务     dispatch_group_async(queueGroup, aQueue, ^{               NSLog(@\"下载图片.\");         });    4.等到所有任务完成   dispatch_group_wait(queueGroup, DISPATCH_TIME_FOREVER);   5.合成图片",
    "ID" : "a0a9bc3aea7e11e5b65200163e0021c8",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "如何用GCD同步若干个异步调用？（如根据若干个url异步加载多张图片，然后在都下载完成后合成一张整图）"
  },
  {
    "answer" : "iOS 中可以有四种持久化数据的方式：属性列表、对象归档、 SQLite3 和 Core Data； core data 可以使你以图形界面的方式快速的定义 app 的数据模型，同时在你的代码中容易获取到它。 coredata 提供了基础结构去处理常用的功能，例如保存，恢复，撤销和重做，允许你在 app 中继续创建新的任务。在使用 core data 的时候，你不用安装额外的数据库系统，因为 core data 使用内置的 sqlite 数据库。 core data 将你 app 的模型层放入到一组定义在内存中的数据对象。 coredata 会追踪这些对象的改变，同时可以根据需要做相反的改变，例如用户执行撤销命令。当 core data 在对你 app 数据的改变进行保存的时候， core data 会把这些数据归档，并永久性保存。 mac os x 中sqlite 库，它是一个轻量级功能强大的关系数据引擎，也很容易嵌入到应用程序。可以在多个平台使用， sqlite 是一个轻量级的嵌入式 sql 数据库编程。与 core data 框架不同的是， sqlite 是使用程序式的， sql 的主要的 API 来直接操作数据表。 Core Data 不是一个关系型数据库，也不是关系型数据库管理系统 (RDBMS) 。虽然 Core Dta 支持SQLite 作为一种存储类型，但它不能使用任意的 SQLite 数据库。 Core Data 在使用的过程种自己创建这个数据库。 Core Data 支持对一、对多的关系。",
    "ID" : "5602715de4b043d0cb1d39c5",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "ios 平台怎么做数据的持久化?coredata 和sqlite有无必然联系？coredata是一个关系型数据库吗？"
  },
  {
    "ID" : "55b5a5cee4b0ef2b575583c6",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "copy",
    "optionC" : "retain",
    "optionAnswer" : "C",
    "answer" : "OC方法中可以生成并持有对象的操作有:alloc\/new\/copy\/mutableCopy",
    "optionB" : "new",
    "type" : "1",
    "optionA" : "alloc",
    "question" : "下列OC方法中不能生成并持有对象的操作有"
  },
  {
    "ID" : "55b5a5cde4b0ef2b57558349",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "代理可以理解为java中的回调监听机制的一种类似",
    "optionC" : "可以减少框架复杂度",
    "optionAnswer" : "B",
    "answer" : "允许一个类在某些特定时刻通知到其他类，而不需要获取到那些类的指针",
    "optionB" : "允许一个类在某些特定时刻通知到其他类，需要获取到那些类的指针",
    "type" : "1",
    "optionA" : "代理的目的是改变或传递控制链",
    "question" : "下列关于代理叙述错误的是"
  },
  {
    "ID" : "5629f9e0e4b05e6f47b0e9bd",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "延展",
    "optionC" : "类目",
    "optionAnswer" : "B",
    "answer" : "不包括多态",
    "optionB" : "多态",
    "type" : "1",
    "optionA" : "继承",
    "question" : "在OC中扩展类的方法的形式不包括"
  },
  {
    "ID" : "55b5a5cee4b0ef2b57558379",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "单例模式是通过减方法实现",
    "optionC" : "提供一个标准的实例访问接口",
    "optionAnswer" : "D",
    "answer" : "单例模式是一种设计模式，通过加方法实现",
    "optionB" : "提供一个固定的实例创建方法",
    "type" : "1",
    "optionA" : "封装一个共享的资源",
    "question" : "单例模式下列叙述错误的是"
  },
  {
    "ID" : "5602715de4b043d0cb1d3989",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : ".m",
    "optionC" : ".mm",
    "optionAnswer" : "C",
    "answer" : "假设:\n  1 我们的项目要使用   C 库(即 在 xcode 中添加 .a 的静态库，静态库中 封装的是 C 逻辑), 那么我们只需要添加静态库 以及加入 C 库中的头文件 ，然后直接调用 C 库中头文件声明的方法。\n  2 我们的项目中使用  C＋＋库（在 xcode 中添加.a 静态库，静态库中封装 C＋＋ 写的逻辑), 那么我们只需要添加静态库 以及加入 C＋＋ 库中的头文件 ，然后直接调用 C＋＋ 库中头文件声明的方法（还须修改一下编译环境 compile source as  的值为 objective-c ++ ,默认的是According to file type).\n  3  我们的项目中使用 C库 和 C++ 库 ,  那么 要在 2 的基础之上 ，再他 所有的.c \/.cpp 文件 改为 .mm 文件。 这样才能通过编译。\n\n综上所述：\n  如果 使用 C 静态库能满足 我们的所有需求，就不要使用 C++ 库，并且尽量避免三者混编。因为代价很大，要修改所有的 实现文件为 .mm 文件。",
    "optionB" : ".cpp ",
    "type" : "1",
    "optionA" : ".c ",
    "question" : "在Xcode中，需要编译混合Objective-C和C++的源码文件，需要将文件格式的后缀改为"
  },
  {
    "ID" : "5602715de4b043d0cb1d3985",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "在运行时增加对象的方法",
    "optionC" : "在运行时修改对象中的方法 ",
    "optionAnswer" : "B",
    "answer" : "动态特性是在Cocoa程序开发时非常常用的语言特性，而在这之后，OC在底层也提供了相当丰富的运行时的特性，比如枚举类属性方法、获取方 法实现等等。虽然在平常的Cocoa开发中这些较底层的运行特性基本用不着，但是在某些情况下如果你知道这些特性并合理加以运用的话，往往能事半功倍。",
    "optionB" : "在运行时动态加载lib文件",
    "type" : "1",
    "optionA" : "在运行时替换一个类 ",
    "question" : "下面那项不是动态语言的特性 "
  },
  {
    "ID" : "5629f9e0e4b05e6f47b0e9ae",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "readonly",
    "optionC" : "copy",
    "optionAnswer" : "B",
    "answer" : "retain 表示持有特性，setter方法将传入参数先保留，再赋值，传入参数的retaincount会+1;\nassign 是赋值特性，setter方法将传入参数赋值给实例变量;仅设置变量时;\ncopy 表示赋值特性，setter方法将传入对象复制一份;需要完全一份新的变量时。\nreadonly 是只读特性 只会生成getter方法 不会生成setter方法 ;不希望属性在类外改变",
    "optionB" : "assign",
    "type" : "1",
    "optionA" : "retain",
    "question" : "OC中的委托最好声明成："
  },
  {
    "answer" : "串行队列Serial Dispatch Queue\n并行队列Concurrent Dispatch Queue\n",
    "ID" : "55f2e4eee4b0152a611431db",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "GCD的队列（dispatch_queue_t）分哪两种类型"
  },
  {
    "answer" : "它能够通过KVC的方式配置一些你在interface builder 中不能配置的属性。当你希望在IB中作尽可能多得事情，这个特性能够帮助你编写更加轻量级的viewcontroller",
    "ID" : "55f2e4eee4b0152a611431e6",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "IB中User Defined Runtime Attributes如何使用？"
  },
  {
    "ID" : "55b5a5cee4b0ef2b575583d3",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "__weak弱引用不能持有对象实例",
    "optionC" : "在持有某对象的弱引用时，若该对象被废弃，则此弱引用将自动失效且处于nil被赋值的状态。",
    "optionAnswer" : "B",
    "answer" : "为了不以自己持有的状态来保存自己生成并持有的对象，生成的对象会立即被释放。",
    "optionB" : "id __strong obj0 = [[NSObject alloc] init];\nid __weak obj1 = obj0;\n编译器会发出警告.",
    "type" : "1",
    "optionA" : "id __weak obj = [[NSObject alloc] init];编译器会发出警告。",
    "question" : "下列说法错误的是"
  },
  {
    "answer" : "cocoa 中所有的类都是NSObject 的子类，多继承在这里是用protocol 委托代理来实现的。你不用去考虑繁琐的多继承，虚基类的概念。",
    "ID" : "5602715de4b043d0cb1d39c6",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "obj-c 有多重继承么? 如果没有什么替代方法?"
  },
  {
    "answer" : "coredata是苹果提供一套数据保存框架，其基于Sqlite",
    "ID" : "5629f9e1e4b05e6f47b0ea15",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "什么是coredata?"
  },
  {
    "ID" : "55b5a5cde4b0ef2b57558343",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "GCD",
    "optionC" : "NSOperation ",
    "optionAnswer" : "A",
    "answer" : "Block不属于多线程，可以用来传值。",
    "optionB" : "NSThread ",
    "type" : "1",
    "optionA" : "Block ",
    "question" : "下列技术不属于多线程的是"
  },
  {
    "answer" : "此为.a文件，相当于java里的jar包，把一些类编译到一个包中，在不同的工程中如果导入此文件就可以使用里面的类，具体使用依然是#import “ xx.h”。",
    "ID" : "5629f9e1e4b05e6f47b0ea41",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "静态链接库"
  },
  {
    "ID" : "55b5a5cee4b0ef2b57558393",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "UIResponder继承UIView",
    "optionC" : "UIButton继承UIControl",
    "optionAnswer" : "D",
    "answer" : "应该是UIView继承UIResponder",
    "optionB" : "UIControl继承UIView",
    "type" : "1",
    "optionA" : "UIResponder继承NSObject",
    "question" : "下列叙述错误的是"
  },
  {
    "ID" : "5629f9e0e4b05e6f47b0e9a9",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "Objective-C协议分为非正式协议和正式协议",
    "optionC" : "Objective-C对象使用new分配内存,用delete释放",
    "optionAnswer" : "C",
    "answer" : "用release释放",
    "optionB" : "Objective-C一个完整的类分为interface和implementation两块",
    "type" : "1",
    "optionA" : "Objective-C不用\"函数调用\",而用互相传递讯息.",
    "question" : "下列说法中错误的是："
  },
  {
    "ID" : "55b5a5cee4b0ef2b57558372",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "在interface里使用@class 是为了加快编译的速度",
    "optionC" : "使用#include要注意重复引用的问题",
    "optionAnswer" : "A",
    "answer" : "＃import<> 是包含iOS框架类库里的类，#import\"\"是包含项目里自定义的类",
    "optionB" : "#import确定一个文件只能被导入一次",
    "type" : "1",
    "optionA" : "＃import\"\" 包含iOS框架类库里的类，#import<>包含项目里自定义的类",
    "question" : "下列说法错误的一项是？"
  },
  {
    "answer" : "共享存储系统消息传递系统管道：以文件系统为基础",
    "ID" : "5629f9e1e4b05e6f47b0ea34",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "进程之间通信的途径"
  },
  {
    "ID" : "5629f9e0e4b05e6f47b0e9b5",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "栈区，堆区",
    "optionC" : "全局区，栈区",
    "optionAnswer" : "A",
    "answer" : "静态区： 保存自动全局变量和 static 变量（包括 static 全局和局部变量）。静态区的内容在总个程序的生命周期内都存在，由编译器在编译的时候分配。\n堆： 由 malloc 系列函数或 new 操作符分配的内存，其生命周期由 free 或 delete 决定。在没有释放之前一直存在，直到程序结束，其特点是使用灵活，空间比较大，但容易出错\n栈： 保存局部变量，栈上的内容只在函数的范围内存在，当函数运行结束，这些内容也会自动被销毁，其特点是效率高，但空间大小有限\n文字常量区： 常量字符串就是放在这里的，程序结束后由系统释放 。",
    "optionB" : "常量区，堆区",
    "type" : "1",
    "optionA" : "堆区，栈区",
    "question" : "创建对象时,对象的内存和指向对象的指针分别分配在哪里："
  },
  {
    "ID" : "5629f9e0e4b05e6f47b0e9dd",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "编译错误",
    "optionC" : "30",
    "optionAnswer" : "D",
    "answer" : "代码执行a+++b是报错",
    "optionB" : "20",
    "type" : "1",
    "optionA" : "21",
    "question" : "下面程序段的输出结果是什么：\nint a = 10;\nNSNumber *b = [[NSNumber alloc] initWithInt:a];\nNSLog(@\"%d\", a+++b);"
  },
  {
    "ID" : "5629f9e0e4b05e6f47b0e9db",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "string = 2",
    "optionC" : "string = 1",
    "optionAnswer" : "A",
    "answer" : "因为“hehe”为字符串常量，系统不会收回，也不会对其作引用计数，即使我们对name如何retain或release。都是打印-1或2137483647",
    "optionB" : "string = 0",
    "type" : "1",
    "optionA" : "string = -1",
    "question" : "下面程序段的输出结果是什么：\nNSString * aString = [[NSString alloc] initWithString:@\"hehe\"]; \n[aString autorelease];\nNSMutableArray *arr = [NSMutableArray array];\n[arr addObject:aString];\nNSLog(@\"string = %d\",[aString retainCount]);"
  },
  {
    "ID" : "55b5a5cee4b0ef2b57558397",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "title",
    "optionC" : "viewController",
    "optionAnswer" : "C",
    "answer" : "navigationBar中包含的几个重要组成部分：leftBarButtonItem、rightBarButtonItem、backBarButtonItem、title",
    "optionB" : "backBarButtonItem",
    "type" : "1",
    "optionA" : "leftBarButtonItem",
    "question" : "navigationBar 中不包括下列哪项"
  },
  {
    "answer" : "对自己拥有的对象负责，凡是你通过retain，alloc，copy等手段后的了所有权的对象，都必须在你不再使用的时候，由你来调用release，autorelease等手段来释放对它的所有权。\n在一定的代码段内，对同一个对象所做的copy,alloc和retain的操作次数应当与release和autorelease操作的次数相等。\n可以在类的dealloc方法中释放你战友的实例变量。\n对于便利构造器和访问器来说，你没有通过上面的手段获得对象的所有权，因为在这些情况下，你无需对获得的对象进行额外的释放操作。",
    "ID" : "5629f9e0e4b05e6f47b0e9df",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "叙述一下内存管理的基本原则"
  },
  {
    "ID" : "5629f9e0e4b05e6f47b0e9d6",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "1,-1,-1",
    "optionC" : "1,-1,0",
    "optionAnswer" : "D",
    "answer" : "个人用xcode打印出来的都是-1",
    "optionB" : "1,1,0",
    "type" : "1",
    "optionA" : "1,2,1",
    "question" : "下面程序段的输出结果是什么：\nNSString * aString = [[NSString alloc] initWithFormat:@\"123\"]; \nNSLog(@\"%d\",aString.retainCount);\naString = @\"456\";\nNSLog(@\"%d\",aString.retainCount);\n[aString release];\naString = @\"789\";\nNSLog(@\"%d\",aString.retainCount);"
  },
  {
    "ID" : "55b5a5cde4b0ef2b57558345",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "对于堆来讲，频繁的new\/delete势必会造成内存空间的不连续，从而造成大量的碎片，使程序效率降低。",
    "optionC" : "在Windows下,栈是向高地址扩展的数据结构，是连续的内存区域，栈顶的地址和栈的最大容量是系统预先规定好的",
    "optionAnswer" : "D",
    "answer" : "频繁地分配和释放不同大小的堆空间将会产生堆内碎块",
    "optionB" : " 对于堆来说，释放工作由编译器自动管理，无需我们手工控制",
    "type" : "1",
    "optionA" : "对于栈来讲，我们需要手工控制，容易产生memory leak。",
    "question" : "堆和栈的区别正确的是"
  },
  {
    "answer" : " 在Objective-C中向nil发送消息是完全有效的——只是在运行时不会有任何作用: \t\t○ 如果一个方法返回值是一个对象，那么发送给nil的消息将返回0(nil)。例如：Person * motherInlaw = [ aPerson spouse] mother];如果spouse对象为nil，那么发送给nil的消息mother也将返回nil。 \t\t○ 如果方法返回值为指针类型，其指针大小为小于或者等于sizeof(void*)，float，double，long double 或者long long的整型标量，发送给nil的消息将返回0。 \t\t○ 如果方法返回值为结构体,发送给nil的消息将返回0。结构体中各个字段的值将都是0。 \t\t○ 如果方法的返回值不是上述提到的几种情况，那么发送给nil的消息的返回值将是未定义的。",
    "ID" : "f1ae1d62ea7711e58afd00163e0021c8",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "objc中向一个nil对象发送消息将会发生什么？"
  },
  {
    "answer" : "一个视图控制只提供了一个 View 视图，理论上一个 tableViewController 也不能放吧， 只能说可以嵌入一个 tableview 视图。当然，题目本身也有歧义，如果不是我们定性思维认为的 UIViewController ， 而是宏观的表示视图控制者，那我们倒是可以把其看成一个视图控制者，它可以控制多个视图控制器，比如 TabbarController 那样的感觉",
    "ID" : "5602715de4b043d0cb1d39bf",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "是否在一个视图控制器中嵌入两个tableview控制器？"
  },
  {
    "answer" : "objective-c – 类里面的方法只有两种, 静态方法和实例方法. 这似乎就不是完整的面向对象了,按照OO的原则就是一个对象只暴露有用的东西. 如果没有了私有方法的话, 对于一些小范围的代码重用就不那么顺手了. 在类里面声名一个私有方法\n@interface Controller : NSObject { NSString *something; }\n+ (void)thisIsAStaticMethod;\n– (void)thisIsAnInstanceMethod;\n@end\n@interface Controller (private) -\n(void)thisIsAPrivateMethod;\n@end\n@private可以用来修饰私有变量\n\n在Objective‐C中，所有实例变量默认都是私有的，所有实例方法默认都是公有的\n\n",
    "ID" : "5629f9e1e4b05e6f47b0ea25",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "OC有私有方法吗？私有变量呢？"
  },
  {
    "ID" : "55b5a5cee4b0ef2b57558384",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "通过向目前的自动释放池发送一条autorelease消息，可以将一个对象添加到其中。",
    "optionC" : "自动释放池其实并不包含实际的对象本身，仅仅是对释放的对象的引用",
    "optionAnswer" : "B",
    "answer" : "资源自动释放池并没有直接把对象放入其内部,它仅仅是保存了对象的一个引用指针，这样当其销毁时(调用drain方法)顺便把其引用的对象也释放掉。",
    "optionB" : "自动释放池销毁时先销毁保存对象的引用指针再自身销毁",
    "type" : "1",
    "optionA" : "程序中可以有多个自动释放池",
    "question" : "下列关于自动释放池错误的是"
  },
  {
    "ID" : "5629f9dfe4b05e6f47b0e999",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "2",
    "optionC" : "1",
    "optionAnswer" : "A",
    "answer" : "因为“张三”为字符串常量，系统不会收回，也不会对其作引用计数，即使我们对name如何retain或release。都是打印-1或2137483647",
    "optionB" : "0",
    "type" : "1",
    "optionA" : "-1",
    "question" : "NSString *name = [[NSString alloc]initWithString:@\"张三\"];\nNSLog(@\"%d\",[name retainCount]);\n上述代码打印结果是："
  },
  {
    "answer" : " @property是一个属性访问声明，扩号内支持以下几个属性：\n\n1 ). getter=getterName，setter=setterName，设置setter与 getter的方法名\n\n2).readwrite,readonly，设置可供访问级别\n\n2).assign，setter方法直接赋值，不进行任何retain操作，为了解决原类型与环循引用问题\n\n3).retain，setter方法对参数进行release旧值再retain新值，所有实现都是这个顺序(CC上有相关资料)\n\n4).copy，setter方法进行Copy操作，与retain处理流程一样，先旧值release，再 Copy出新的对象，retainCount为1。这是为了减少对上下文的依赖而引入的机制。\n\n5).nonatomic，非原子性访问，不加同步，多线程并发访问会提高性能。注意，如果不加此属性，则默认是两个访问方法都为原子型事务访问。锁被加到所属对象实例级。",
    "ID" : "5629f9e1e4b05e6f47b0ea3c",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "readwrite，readonly，assign，retain，copy，nonatomic 属性的作用"
  },
  {
    "answer" : "使用Dispatch Group追加block到Global Group Queue,这些block如果全部执行完毕，就会执行Main Dispatch Queue中的结束处理的block。",
    "ID" : "55f2e4eee4b0152a611431dc",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "如何用GCD同步若干个异步调用？（如根据若干个url异步加载多张图片，然后在都下载完成后合成一张整图）"
  },
  {
    "answer" : "都可以。",
    "ID" : "55f2e4eee4b0152a611431e2",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "若一个类有实例变量 NSString *_foo ，调用setValue:forKey:时，可以以foo还是 _foo 作为key"
  },
  {
    "answer" : "objc优点：\n\n1).  Cateogies\n\n2).  Posing\n\n3). 动态识别\n\n4).指标计算\n\n5).弹性讯息传递\n\n6).不是一个过度复杂的 C 衍生语言\n\n7).Objective-C 与 C++ 可混合编程\n\nobjc缺点:\n\n1).不支援命名空间\n\n2).不支持运算符重载\n\n3).不支持多重继承\n\n4).使用动态运行时类型，所有的方法都是函数调用，所以很多编译时优化方法都用不到。（如内联函数等），性能低劣。",
    "ID" : "5629f9e1e4b05e6f47b0ea3a",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "Objective-C的优缺点。"
  },
  {
    "ID" : "55b5a5cee4b0ef2b575583cd",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "ARC项目中可以使用手动内存管理写的第三方类",
    "optionC" : "ARC无效:-fno-objc-arc",
    "optionAnswer" : "D",
    "answer" : "通过设置ARC有效的编译方法",
    "optionB" : "设置ARC有效的编译方法是指定编译器属性为-fobjc-arc",
    "type" : "1",
    "optionA" : "同一程序中按文件单位可以选择ARC有效\/无效",
    "question" : "下列说法错误的是"
  },
  {
    "ID" : "5629f9e0e4b05e6f47b0e9aa",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "崩溃信息",
    "optionC" : "three",
    "optionAnswer" : "D",
    "answer" : "该数组的索引为0，1，2；检索3的时候超过了数组大小，所有程序崩溃",
    "optionB" : "two",
    "type" : "1",
    "optionA" : "one",
    "question" : "NSArray *array = [NSArray arrayWithObjects:@\"one\", @\"two\", @\"three\",nil];\nNSLog(@\"%@\",[array objectAtIndex:1]);\nNSLog(@\"%@\",[array objectAtIndex:3]);\n控制台中打印的最后一条信息会是："
  },
  {
    "ID" : "5629f9e0e4b05e6f47b0e9bb",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "+(id)personWithName:(NSString *)theName;",
    "optionC" : "+(id)personwithName:(NSString *)theName;",
    "optionAnswer" : "D",
    "answer" : "D为正确的格式",
    "optionB" : "-(id)personwithName:(NSString *)theName;",
    "type" : "1",
    "optionA" : "-(id)personWithName:(NSString *)theName;",
    "question" : "自定义一个Person类，下面哪个选项是规范的便利构造器声明方式："
  },
  {
    "ID" : "55b5a5cfe4b0ef2b575583da",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "SQLite",
    "optionC" : "NSUserDefaults",
    "optionAnswer" : "A",
    "answer" : "NSArray不能永久保存数据",
    "optionB" : "plist",
    "type" : "1",
    "optionA" : "NSArray",
    "question" : "下列不可以永久保存数据的是"
  },
  {
    "answer" : "分两种情况：手动干预释放时机、系统自动去释放。\n\n手动干预释放时机--指定autoreleasepool 就是所谓的：当前作用域大括号结束时释放。\n系统自动去释放--不手动指定autoreleasepool\nAutorelease对象会在当前的 runloop 迭代结束时释放。\n如果在一个vc的viewDidLoad中创建一个 Autorelease对象，那么该对象会在 viewDidAppear 方法执行前就被销毁了。",
    "ID" : "55f2e4eee4b0152a611431d5",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "不手动指定autoreleasepool的前提下，一个autorealese对象在什么时刻释放？（比如在一个vc的viewDidLoad中创建）"
  },
  {
    "answer" : "什么情况使用 weak 关键字？\n\n1）在ARC中,在有可能出现循环引用的时候,往往要通过让其中一端使用weak来解决,比如:delegate代理属性\n\n2）自身已经对它进行一次强引用,没有必要再强引用一次,此时也会使用weak,自定义IBOutlet控件属性一般也使用weak；当然，也可以使用strong。在下文也有论述：《IBOutlet连出来的视图属性为什么可以被设置成weak?》\n\n不同点：\n\n1）weak 此特质表明该属性定义了一种“非拥有关系” (nonowning relationship)。为这种属性设置新值时，设置方法既不保留新值，也不释放旧值。此特质同assign类似， 然而在属性所指的对象遭到摧毁时，属性值也会清空(nil out)。 而 assign 的“设置方法”只会执行针对“纯量类型” (scalar type，例如 CGFloat 或 NSlnteger 等)的简单赋值操作。\n\n2）assigin 可以用非OC对象,而weak必须用于OC对象",
    "ID" : "55f2e4eee4b0152a611431b7",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "什么情况使用 weak 关键字，相比 assign 有什么不同？"
  },
  {
    "ID" : "55b5a5cee4b0ef2b57558374",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "通常发送者和接收者的关系是间接的多对多关系",
    "optionC" : "接收者并不能反过来影响发送者的行为",
    "optionAnswer" : "B",
    "answer" : "代理的效率要高于nsnotification",
    "optionB" : "效率是nsnotification比delegate高",
    "type" : "1",
    "optionA" : "消息的发送者告知接收者事件已经发生或者将要发送",
    "question" : "关于Notification下列错误的是"
  },
  {
    "ID" : "55b5a5cee4b0ef2b5755839f",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "imageWithCGImage:scale:orientation",
    "optionC" : "[[UIImage alloc]init];",
    "optionAnswer" : "D",
    "answer" : "imageNamed:系统会先检查系统缓存中是否有该名字的Image，如果有的话，则直接返回，如果没有，则先加载图像到缓存，然后再返回。\n\ninitWithContentsOfFile:系统不会检查系统缓存，而直接从文件系统中加载并返回。\n\nimageWithCGImage:scale:orientation 当scale=1的时候图像为原始大小，orientation制定绘制图像的方向。",
    "optionB" : "initWithContentsOfFile:",
    "type" : "1",
    "optionA" : "imageNamed:",
    "question" : "UIImage初始化一张图片的方法"
  },
  {
    "answer" : "dispatch_get_current_queue容易造成死锁",
    "ID" : "55f2e4eee4b0152a611431de",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "苹果为什么要废弃dispatch_get_current_queue？"
  },
  {
    "answer" : "object-c的数据类型有NSString，NSNumber，NSArray，NSMutableArray，NSData等等，这些都是class，创建后便是对象，而C语言的基本数据类型int，只是一定字节的内存空间，用于存放数值;NSInteger是基本数据类型，并不是NSNumber的子类，当然也不是NSObject的子类。NSInteger是基本数据类型Int或者Long的别名(NSInteger的定义typedef long NSInteger)，它的区别在于，NSInteger会根据系统是32位还是64位来决定是本身是int还是Long。",
    "ID" : "5629f9e0e4b05e6f47b0e9ee",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "常见的object-c的数据类型有那些， 和C的基本数据类型有什么区别?如：NSInteger和int"
  },
  {
    "answer" : "1).代码区：存放函数二进制代码\n\n2).数据区：系统运行时申请内存并初始化，系统退出时由系统释放。存放全局变量、静态变量、常量\n\n3).堆区：通过malloc等函数或new等操作符动态申请得到，需程序员手动申请和释放\n\n4).栈区：函数模块内申请，函数结束时由系统自动释放。存放局部变量、函数参数",
    "ID" : "5629f9e1e4b05e6f47b0ea48",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "简述内存分区情况"
  },
  {
    "answer" : "遵守NSCopying协议 实现 - (id)copyWithZone:(NSZone *)zone; 方法",
    "ID" : "f20a62a0ea7411e58afd00163e0021c8",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "自定义的类如何使用 copy 修饰符？"
  },
  {
    "ID" : "55b5a5cee4b0ef2b575583bc",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "instancetype 关键字表示一个方法的相关返回类型。",
    "optionC" : "instancetype和id都只能在方法生命中作为返回类型使用。",
    "optionAnswer" : "D",
    "answer" : "instancetype关键在只能在方法中作为返回值类型使用。Id关键字即能在方法中作为返回值使用也能在方法中作为参数类型使用。",
    "optionB" : "id只能在方法声明中作为返回类型使用",
    "type" : "1",
    "optionA" : "instancetype 关键字可以作为参数类型使用",
    "question" : "下列说法正确的是"
  },
  {
    "ID" : "5629f9e0e4b05e6f47b0e9bf",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "定义类目必须要拿到自己类的源代码",
    "optionC" : "协议中定义的方法默认是必须实现的",
    "optionAnswer" : "C",
    "answer" : "求数组中的个数为count方法\n字典是根据key来检索的\n",
    "optionB" : "字典是根据其位置来索引数据的",
    "type" : "1",
    "optionA" : "求数组的内容的个数用length方法",
    "question" : "以下说法正确的是："
  },
  {
    "answer" : "(1) id 是 Objective-C 对象，但是并不一定是NSObject对象，并非所有的Foundation\/Cocoa对象都是继承于NSObject对象的，比如NSProxy。同时，id与NSObject对象之间有很多的共同方法，比如retain与release等方法。更一步来说：所有的对象本质来说都是 id 类型的。\n(2) 对于id来说，你可以调用任意可见的selector，编译器和IDE不会进行类型检查，这个时候就需要你自己进行类型检查并且进行类型转换，来确保这些调用不会出错。而对于NSObject *类型，只能调用NSObject对象所声明的selector，不能调用它子类的selector，编译器会进行检查。\n(3) 对于一些不想或者不能进行类型检查的地方，可以使用id。比如在集合(array, collection)类型中，比如在一些你并不知道方法的返回类型的地方(比如alloc)，比如我们经常声明delegate为id类型，在运行的时候再使用respondToSelector:来进行检查。",
    "ID" : "56380ca560b21eab1c8262b7",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "id 与 NSObject *的区别？"
  },
  {
    "ID" : "55b5a5cee4b0ef2b575583cc",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "大量产生autorelease对象时，只要不废弃NSAutoreleasePool对象，生成的对象就不能被释放，有时会产生内存不足的现象。",
    "optionC" : "对象调用autorelease方法实现上调用的都是NSObject的autorelease实例方法，但NSAutoreleasePool类的autorelease实例方法已被该类重载，因此运行时就会出错",
    "optionAnswer" : "A",
    "answer" : "对象调用autorelease方法实现上调用的都是NSObject的autorelease实例方法，但NSAutoreleasePool类的autorelease实例方法已被该类重载，因此运行时就会出错",
    "optionB" : "如果NSAutoreleasePool被嵌套使用，那么会使用最内侧的。",
    "type" : "1",
    "optionA" : "autorelease NSAutoreleasePool对象不会发生异常",
    "question" : "下列说法错误的是"
  },
  {
    "ID" : "55b5a5cee4b0ef2b575583af",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "再一次输出val=2",
    "optionC" : "再一次输出val=5",
    "optionAnswer" : "A",
    "answer" : "Blocks中，Block表达式会截获所使用的自动变量的值，即保存该自动变量的瞬间值。\n",
    "optionB" : "val=5",
    "type" : "1",
    "optionA" : "val=10",
    "question" : "请选择下列代码执行的结果：\nint main(){\n int val = 10;\n const char *fmt = “val=%d\\n”;\n void (^blk)(void) = ^{printf(fmt,val);};\n val = 2;\n fmt = “再一次输出val=%d\\n”;\n blk();\n val=5;\n return 0;\n}\n"
  },
  {
    "answer" : "局部变量的作用范围：它所在的语句块或者所在的方法内有效。实例变量的作用范围：本类所有实例方法中有效，如果有子类，保护类型的实例变量在子类中也有效，公有类型的实例变量会在所有类中有效，一般不提倡使用公有，这违背了封装的特性。",
    "ID" : "5629f9e0e4b05e6f47b0e9e1",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "叙述一下实例变量和局部变量的作用范围"
  },
  {
    "ID" : "55b5a5cee4b0ef2b575583ab",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "__unsafe_unretained\n",
    "optionC" : "__weak",
    "optionAnswer" : "C",
    "answer" : "弱引用__weak修饰符修饰的对象被废弃后会被自动赋值nil.",
    "optionB" : "__autoreleasing",
    "type" : "1",
    "optionA" : "__strong",
    "question" : "id __strong obj0 = [[NSObject alloc] init];\nid __weak obj1 = obj0;\n下了哪个修饰符修饰的对象被废弃后会被自动赋值nil："
  },
  {
    "answer" : "在objective-c中要实现一个单例类，至少需要做以下四个步骤：\n1).为单例对象实现一个静态实例，并初始化，然后设置成nil；\n2).实现一个实例构造方法检查上面声明的静态实例是否为nil，如果是则新建并返回一个本类的实例；\n3).重写allocWithZone方法，用来保证其他人直接使用alloc和init试图获得一个新实力的时候不产生一个新实例；\n4).适当实现allocWitheZone，copyWithZone，release和autorelease。",
    "ID" : "56582b44ddb299ad38ed2a7e",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "请简述如何实现一个单例？"
  },
  {
    "answer" : "原子性---nonatomic特质\n在默认情况下，由编译器合成的方法会通过锁定机制确保其原子性(atomicity)。如果属性具备nonatomic特质，则不使用同步锁。请注意，尽管没有名为“atomic”的特质(如果某属性不具备nonatomic特质，那它就是“原子的” ( atomic) )，但是仍然可以在属性特质中写明这一点，编译器不会报错。若是自己定义存取方法，那么就应该遵从与属性特质相符的原子性。\n1）读\/写权限---readwrite(读写)、readooly (只读)\n2）内存管理语义---assign、strong、 weak、unsafe_unretained、copy\n3）方法名---getter=、setter=\ngetter=的样式：\n  @property (nonatomic, getter=isOn) BOOL on;\n（ setter=这种不常用，也不推荐使用。故不在这里给出写法。）\n4）不常用的：nonnull,null_resettable,nullable",
    "ID" : "55f2e4eee4b0152a611431be",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "@property中有哪些属性关键字？\/ @property 后面可以有哪些修饰符？"
  },
  {
    "ID" : "55b5a5cee4b0ef2b575583b7",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "Main（）函数调用UIApplication函数",
    "optionC" : "Main（）函数创建了一个自动释放池",
    "optionAnswer" : "B",
    "answer" : "程序在进入我们的main函数前已经执行了很多代码，比如熟知的+ load方法等。",
    "optionB" : "iOS程序第一个执行的是main()函数。",
    "type" : "1",
    "optionA" : "程序在进入main()函数前做了许多事情",
    "question" : "下列说法错误的是"
  },
  {
    "answer" : "输出的结果都是:Son, 原因:super 和 self 都是指向的本实例对象的, 不同的是,super调用的跳过本类方法,调用父类的方法 父类方法的class方法本来都是在基类中实现的,所以无论使用self和super调用都是一样的.",
    "ID" : "1275e9c0ea7911e5b65200163e0021c8",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "下面的代码输出什么？ @implementation Son : Father - (id)init {     self = [super init];     if (self) {         NSLog(@\"%@\", NSStringFromClass([self class]));         NSLog(@\"%@\", NSStringFromClass([super class]));     }     return self; } @end"
  },
  {
    "answer" : "上下文：主要用于描述图形写入哪里；\n\n路径：是在图层上绘制的内容；\n\n状态：用于保存配置变换的值、填充和轮廓， alpha 值等。",
    "ID" : "5629f9e2e4b05e6f47b0ea53",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "Quatrz 2D的绘图功能的三个核心概念是什么并简述其作用。"
  },
  {
    "ID" : "55b5a5cfe4b0ef2b575583db",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "使用keychain需要导入Security.framework ",
    "optionC" : "在用户重新安装App后之前的数据会消失。",
    "optionAnswer" : "C",
    "answer" : "keychain里保存的信息不会因App被删除而丢失，在用户重新安装App后依然有效，数据还在。",
    "optionB" : "keychain里保存的信息不会因App被删除而丢失",
    "type" : "1",
    "optionA" : "keychain用于存储一些私密信息，比如密码、证书等",
    "question" : "下列关于keychain说法错误的是"
  },
  {
    "ID" : "55b5a5cde4b0ef2b57558324",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "GCD可以根据不同优先级分配线程",
    "optionC" : "NSOperationQueue是比NSthread更高层的封装 ",
    "optionAnswer" : "B",
    "answer" : "不可以在子线程中修改UI元素，再主线程中修改",
    "optionB" : "可以在子线程中修改UI元素 ",
    "type" : "1",
    "optionA" : " GCD所用的开销要比NSThread大 ",
    "question" : "下面关于线程管理错误的是 "
  },
  {
    "ID" : "55b5a5cde4b0ef2b57558333",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "375*667",
    "optionC" : "320*568",
    "optionAnswer" : "A",
    "answer" : "240*360不是苹果手机的屏幕分辨率",
    "optionB" : "320*480",
    "type" : "1",
    "optionA" : "240*360",
    "question" : "下面不是苹果手机的屏幕分辨率大小的是"
  },
  {
    "answer" : "存入到文件、 存入到NSUserDefaults(系统plist文件中)、存入到Sqlite文件数据库",
    "ID" : "5602715ee4b043d0cb1d3a16",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "和coredata一起有哪几种持久化存储机制?"
  },
  {
    "ID" : "55b5a5cee4b0ef2b57558382",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "NSRect",
    "optionC" : "NSSize",
    "optionAnswer" : "A",
    "answer" : "表示用来处理几何图形的数据类型：NSPoint（点坐标）和NSSize（长度和宽度）还有一个矩形数据类型（由点和大小复合而成）NSRect\n",
    "optionB" : "NSPoint",
    "type" : "1",
    "optionA" : "NSData",
    "question" : "下列不是用来处理几何图形的数据类型是"
  },
  {
    "ID" : "5629f9e0e4b05e6f47b0e9b6",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "定义协议使用@protocol关键字",
    "optionC" : "类接受了多个协议，这些协议写在父类后面的<>内，多个协议之间用“、”隔开",
    "optionAnswer" : "C",
    "answer" : "多个协议用\",\"隔开",
    "optionB" : "协议里的方法默认是必须实现的",
    "type" : "1",
    "optionA" : "委托是iOS的一种设计模式",
    "question" : "协议与委托的描述不正确的是："
  },
  {
    "ID" : "5629f9e0e4b05e6f47b0e9b1",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "不用写关键字",
    "optionC" : "@private",
    "optionAnswer" : "D",
    "answer" : " @required:表示必须强制实现的方法\n@optional:表示可以有选择性的实现方法",
    "optionB" : "@protected",
    "type" : "1",
    "optionA" : "@optional",
    "question" : "用哪个关键字定义协议中必须实现的方法："
  },
  {
    "ID" : "55b5a5cee4b0ef2b5755837e",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "MessageUI.framework",
    "optionC" : "SystemConfiguration.framework",
    "optionAnswer" : "B",
    "answer" : "UIKit包含iOS应用程序用户界面层使用的类和方法、Foundation包含Cocoa Foundation层的类和方法、SystemConfiguration包含用于处理设备网络配置的接口、MessageUI包含撰写和排队发送电子邮件信息的界面",
    "optionB" : "Foundation.framework",
    "type" : "1",
    "optionA" : "UIKit.framework",
    "question" : "建一个工程用到最基本的两个框架是什么？"
  },
  {
    "answer" : "若想令自己所写的对象具有拷贝功能，则需实现NSCopying协议。如果自定义的对象分为可变版本与不可变版本，那么就要同时实现NSCopyiog与NSMutableCopying协议。\n\n具体步骤：\n\n1）需声明该类遵从NSCopying协议\n\n2）实现NSCopying协议。该协议只有一个方法:\n\n- (id)copyWithZone: (NSZone*) zone\n注意：一提到让自己的类用 copy 修饰符，我们总是想覆写copy方法，其实真正需要实现的却是“copyWithZone”方法。",
    "ID" : "55f2e4eee4b0152a611431ba",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "如何让自己的类用 copy 修饰符？如何重写带 copy 关键字的 setter？"
  },
  {
    "ID" : "5629f9e0e4b05e6f47b0e9be",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "当对象的属性值改变时，我们能收到一个通知。",
    "optionC" : "只能访问对象的属性。",
    "optionAnswer" : "B",
    "answer" : "KVC是指“Key-Value-Coding”",
    "optionB" : "是一种间接访问对象的属性的机制。",
    "type" : "1",
    "optionA" : "KVC是指\"Key-Value Observing\"",
    "question" : "关于KVC的描述正确的是："
  },
  {
    "ID" : "55b5a5cee4b0ef2b575583a6",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "AES",
    "optionC" : "伪加密",
    "optionAnswer" : "C",
    "answer" : "伪加密是安卓中得加密方式",
    "optionB" : "MD5",
    "type" : "1",
    "optionA" : "Base64",
    "question" : "下列不属于iOS中加密方式的是"
  },
  {
    "answer" : "都可以",
    "ID" : "64e29cbeea8111e58afd00163e0021c8",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "若一个类有实例变量NSString *_foo，调用setValue:forKey:时，可以以foo还是_foo作为key？"
  },
  {
    "ID" : "55b5a5cde4b0ef2b57558363",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "#import 和 #include 的使用效果完全相同",
    "optionC" : "#import 只用于引用 Objective-C的文件， #include 只用于引用C和C++的文件",
    "optionAnswer" : "A ",
    "answer" : "使用#import代替#include是为了防止重复引用。\n#import 确定一个文件只能被导入一次，这使你在递归包含中不会出现问题 @class一般用于头文件中需要声明该类的某个实例变量的时候用到，在m文件中还是需要使用#import @class就是告诉编译器有这么一个类，至于类的定义是啥不知道 @class一般用于头文件中需要声明该类的某个实例变量的时候用到，在m文件中还是需要使用#import ＃import<> 跟 #import\"\"又什么区别？“”的意思是自己创建的文件，用这个首先会在当前的目录中寻找，如果找不到就到其他的位置寻找，“”和<>是相对的一个是自己创建的文件一个是系统的文件",
    "optionB" : "#import 和 #include 不可以混合使用",
    "type" : "1",
    "optionA" : "#import 是 #include 的替代指令，防止重复引用 ",
    "question" : "下面关于#import和#include的描述正确的是"
  },
  {
    "ID" : "5629f9e0e4b05e6f47b0e9d4",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "此属性只能读取，不能赋值。",
    "optionC" : "此属性在合成时可以生成设置器方法。",
    "optionAnswer" : "D",
    "answer" : "copy 表示赋值特性，setter方法将传入对象复制一份;需要完全一份新的变量时。\nreadonly 是只读特性 只会生成getter方法 不会生成setter方法 ;不希望属性在类外改变\nnonatomic 非原子操作，决定编译器生成的setter getter是否是原子操作，atomic表示多线程安全，一般使用nonatomic",
    "optionB" : "此属性可保证多线程安全。",
    "type" : "1",
    "optionA" : "没有getter方法,当对calvalue赋值时，将产生一个NSString副本。",
    "question" : "对于下面代码说法正确的是：\n@property (copy,nonatomic,readonly)NSString * calValue；"
  },
  {
    "answer" : "必须用在集合对象上或普通对象的集合属性上\n简单集合运算符有@avg， @count ， @max ， @min ，@sum，\n格式 @\"@sum.age\"或 @\"集合属性.@max.age\"",
    "ID" : "55f2e4eee4b0152a611431e3",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "KVC的keyPath中的集合运算符如何使用？"
  },
  {
    "answer" : "（1）数组可以申请在栈区和数据区；指针可以指向任意类型的内存块\n\n（2）sizeof作用于数组时，得到的是数组所占的内存大小；作用于指针时，得到的都是4个字节的大小\n\n（3）数组名表示数组首地址，值不可以改变，如不可以将＋＋作用于数组名上；普通指针的值可以改变，如可将＋＋作用于指针上\n\n（4）用字符串初始化字符数组是将字符串的内容拷贝到字符数组中；用字符串初始化字符指针是将字符串的首地址赋给指针，也就是指针指向了该数组",
    "ID" : "5602715de4b043d0cb1d399b",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "数组和指针的区别"
  },
  {
    "ID" : "55b5a5cde4b0ef2b57558341",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "Block：适用于回调只发生一次的简单任务。",
    "optionC" : "通知：当需要多个对象处理同一个事件或代码中两个不相关的模块中传递消息时使用。",
    "optionAnswer" : "B",
    "answer" : "代理(Delegate)：也叫委托，当某个对象收到多个事件，并要求同一个对象来处理所有事件时。委托机制依赖于某个协议定义的方法来发送消息。",
    "optionB" : "代理：也叫委托，当某个对象收到多个事件，并要求同一个对象来处理所有事件时。委托机制必须依赖于某个协议定义的方法来发送消息。",
    "type" : "1",
    "optionA" : "Target-Action：当两个对象之间建立了一个松散的关系时使用，是回应 UI 事件时典型的消息传递方式。",
    "question" : " 下列关于回调机制的理解不正确的是"
  },
  {
    "answer" : "TCP全称是Transmission Control Protocol，中文名为传输控制协议，它可以提供可靠的、面向连接的网络数据传递服务。传输控制协议主要包含下列任务和功能：\n\n* 确保IP数据报的成功传递。\n\n* 对程序发送的大块数据进行分段和重组。\n\n* 确保正确排序及按顺序传递分段的数据。\n\n* 通过计算校验和，进行传输数据的完整性检查。\n\nTCP提供的是面向连接的、可靠的数据流传输，而UDP提供的是非面向连接的、不可靠的数据流传输。\n\n简单的说，TCP注重数据安全，而UDP数据传输快点，但安全性一般",
    "ID" : "5629f9e1e4b05e6f47b0ea3e",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "TCP和UDP的区别"
  },
  {
    "ID" : "5629f9e0e4b05e6f47b0e9cf",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "NSArray *(^aBlock)(NSString * str,NSString *str2)",
    "optionC" : "NSArray (^aBlock)(NSString * str,NSString *str2)",
    "optionAnswer" : "D",
    "answer" : "Block 变量拥有 blocks 的引用。你可以使用和声明函数指针类似的语法来声明它 们,除了它们使用 ^修饰符来替代 * 修饰符。Block 类型可以完全操作其他 C 系统 类型。以下都是合法的 block 声明: \n    void (^blockReturningVoidWithVoidArgument)(void);\n    int (^blockReturningIntWithIntAndCharArguments)(int, char);\n    void (^arrayOfTenBlocksReturningVoidWithIntArgument[10])(int);\n \nBlocks 还支持可变参数(...)。一个没有使用任何参数的 block 必须在参数列表 上面用 void 标明。",
    "optionB" : "NSArray ^(*aBlock)(NSString * str,NSString *str2)",
    "type" : "1",
    "optionA" : "NSArray (*aBlock)(NSString * str,NSString *str2)",
    "question" : "声明一个返回值为NSArray，并且带两个字符串对象的BLOCK类型变量："
  },
  {
    "ID" : "5629f9e0e4b05e6f47b0e9da",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "NSArray *arr1 = [[NSArray alloc]initWithArray:arr2];",
    "optionC" : "NSMutableData *data1 = [NSMutableData allocWithZone:data2];",
    "optionAnswer" : "B",
    "answer" : "alloc、new、retain会使retainCount加1",
    "optionB" : "int a=1;",
    "type" : "1",
    "optionA" : "NSString *str1 = [[NSString stringWithFormat:@\"hehe\"];",
    "question" : "下列哪个操作不会引起引用计数（retaincount）的变化是："
  },
  {
    "ID" : "55b5a5cee4b0ef2b5755838f",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "如果代理类（delegate class）为nil则程序假设程序的代理来自Main nib文件",
    "optionC" : "如果主要类（principal class）为nil则默认为UIApplication",
    "optionAnswer" : "B",
    "answer" : "函数UIApplication是初始化程序的核心他接受四个参数，并且开发者永远不要修改传入的这四个参数。",
    "optionB" : "开发者可以修改传入的参数",
    "type" : "1",
    "optionA" : "它接受四个参数",
    "question" : "函数UIApplication是初始化程序的核心，下列说法不正确的是"
  },
  {
    "answer" : " AVFoundation.framework\n\n步骤：配置 AVAudioPlayer 对象；\n\n实现 AVAudioPlayer 类的委托方法；\n\n控制 AVAudioPlayer 类的对象；\n\n监控音量水平；\n\n回放进度和拖拽播放。",
    "ID" : "5602715de4b043d0cb1d39b4",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "使用AVAudioPlayer类调用哪个框架、使用步骤 ？"
  },
  {
    "answer" : "总的说来，Run loop，正如其名，loop表示某种循环，和run放在一起就表示一直在运行着的循环。实际上，run loop和线程是紧密相连的，可以这样说run loop是为了线程而生，没有线程，它就没有存在的必要。Run loops是线程的基础架构部分， Cocoa 和 CoreFundation 都提供了 run loop 对象方便配置和管理线程的 run loop （以下都以 Cocoa 为例）。每个线程，包括程序的主线程（ main thread ）都有与之相应的 run loop 对象。",
    "ID" : "55f2e4eee4b0152a611431cf",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "runloop和线程有什么关系？"
  },
  {
    "ID" : "5629f9e0e4b05e6f47b0e9bc",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "ou3g",
    "optionC" : "www.lan",
    "optionAnswer" : "B",
    "answer" : "从索引为4的位置开始截取7个长度为lanou3g",
    "optionB" : "lanou3g",
    "type" : "1",
    "optionA" : "lan",
    "question" : "下列代码正确的输出结果是：\nNSString * urlStr = @\" www.lanou3g.com\";\nNSRange range = NSMakeRange(4,7);\nNSString *prefix = [urlStr substringWithRange:range];\nNSLog(@\"%@\",prefix);"
  },
  {
    "answer" : "category和extensions的不同在于 后者可以添加属性。另外后者添加的方法是必须要实现的。\nextensions可以认为是一个私有的Category。",
    "ID" : "5602715ee4b043d0cb1d39f8",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "类别和类扩展的区别。"
  },
  {
    "ID" : "55b5a5cde4b0ef2b57558354",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : " myTimer对象未通过[[myTimer alloc] init]方法初始化",
    "optionC" : "忘记传递数据给userInfo",
    "optionAnswer" : "A",
    "answer" : "没有将timer加入runloop",
    "optionB" : "doSomeThing缺少参数 ",
    "type" : "1",
    "optionA" : "没有将timer加入runloop ",
    "question" : "下面代码的作用是让doSomeThing函数每隔1秒被调用1次。请问哪里有问题\n\nNSTimer *myTimer = [NSTimer timerWithTimeInterval:1.0\n                                           target:self\n                                           selector:@selector(doSomeThing:)\n                                           userInfo:nil\n                                           repeats:YES]; \n[myTimer fire]"
  },
  {
    "ID" : "5629f9e0e4b05e6f47b0e9cd",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "协议中声明的方法，默认是@optional的。",
    "optionC" : "一个协议可以被多个类确认。",
    "optionAnswer" : "D",
    "answer" : "默认是@required",
    "optionB" : "在要求确认协议的类必须实现协议中的方法时，可以使用@required。",
    "type" : "1",
    "optionA" : "协议分正式和非正式协议。",
    "question" : "关于协议描述不正确的是："
  },
  {
    "ID" : "55b5a5cfe4b0ef2b575583de",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "UIPageControl",
    "optionC" : "UIButton",
    "optionAnswer" : "B",
    "answer" : "UIControl继承自UIView",
    "optionB" : "UIView",
    "type" : "1",
    "optionA" : "UISwitch",
    "question" : "下列不是继承Uicontrol的是"
  },
  {
    "answer" : "1）因为父类指针可以指向子类对象,使用copy的目的是为了让本对象的属性不受外界影响,使用copy无论给我传入是一个可变对象还是不可对象,我本身持有的就是一个不可变的副本.\n\n2）如果我们使用是strong,那么这个属性就有可能指向一个可变对象,如果这个可变对象在外部被修改了,那么会影响该属性.\n\ncopy此特质所表达的所属关系与strong类似。然而设置方法并不保留新值，而是将其“拷贝” (copy)。 当属性类型为NSString时，经常用此特质来保护其封装性，因为传递给设置方法的新值有可能指向一个NSMutableString类的实例。这个类是NSString的子类，表示一种可修改其值的字符串，此时若是不拷贝字符串，那么设置完属性之后，字符串的值就可能会在对象不知情的情况下遭人更改。所以，这时就要拷贝一份“不可变” (immutable)的字符串，确保对象中的字符串值不会无意间变动。只要实现属性所用的对象是“可变的” (mutable)，就应该在设置新属性值时拷贝一份。\n\n为了理解这种做法，首先要知道，对非集合类对象的copy操作：\n\n在非集合类对象中：对immutable对象进行copy操作，是指针复制，mutableCopy操作时内容复制；对mutable对象进行copy和mutableCopy都是内容复制。",
    "ID" : "55f2e4eee4b0152a611431c2",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "用@property声明的NSString（或NSArray，NSDictionary）经常使用copy关键字，为什么？如果改用strong关键字，可能造成什么问题？"
  },
  {
    "ID" : "55b5a5cde4b0ef2b57558327",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "推送是服务器端主动pull",
    "optionC" : "普通情况下，都是客户端主动的pull",
    "optionAnswer" : "D",
    "answer" : "推送是服务器端主动push",
    "optionB" : "客户端获取资源的一种手段",
    "type" : "1",
    "optionA" : "推送通知是一种技术",
    "question" : "关于推送消息下列叙述错误的是"
  },
  {
    "ID" : "55b5a5cee4b0ef2b575583be",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "id是通用对象，但如果使用instancetype，编译器就知道方法返回什么类型的对象。",
    "optionC" : "如果一个方法声明的返回类型是id，那么得到的返回值类型也是id",
    "optionAnswer" : "B",
    "answer" : "并不是所有的Foundation\/Cocoa对象都继承息NSObject，比如NSProxy就不从NSObject继承，所以你无法使用NSObject＊指向这个对象，即使NSProxy对象有release和retain这样的通用方法。",
    "optionB" : "id类型声明了一个指向NSObject对象的指针",
    "type" : "1",
    "optionA" : "如果一个方法声明的返回类型是instancetype，那么方法返回所在类的类型。",
    "question" : "下列说法错误的是"
  },
  {
    "ID" : "55b5a5cde4b0ef2b5755832d",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "NSArray是线程安全的，NSMutableArray不是线程安全的",
    "optionC" : "NSArray数组内的元素内容不能发生改变。",
    "optionAnswer" : "C",
    "answer" : "使用NSArray只表明的是该数组在运行时不发生改变，即不能往NSAarry的数组里新增和删除元素，但不表明其数组內的元素的内容不能发生改变。",
    "optionB" : "使用NSArray只表明的是该数组在运行时不发生改变，即不能往NSAarry的数组里新增和删除元素",
    "type" : "1",
    "optionA" : "当数组在程序运行时，需要不断变化的，使用NSMutableArray，当数组在初始化后，便不再改变的，使用NSArray。",
    "question" : "下列关于NSMutableArray与NSArray错误的是"
  },
  {
    "answer" : "loadView 尽管不直接调用该方法，如多手动创建自己的视图，那么应该覆盖这个方法并将它们赋值给试图控制器的 view 属性。\n\nviewDidLoad 只有在视图控制器将其视图载入到内存之后才调用该方法，这是执行任何其他初始化操作的入口。\n\nviewDidUnload 当试图控制器从内存释放自己的方法的时候调用，用于清楚那些可能已经在试图控制器中创建的对象。\n\nviewVillAppear 当试图将要添加到窗口中并且还不可见的时候或者上层视图移出图层后本视图变成顶级视图时调用该方法，用于执行诸如改变视图方向等的操作。实现该方法时确保调用 [super viewWillAppear:\n\nviewDidAppear 当视图添加到窗口中以后或者上层视图移出图层后本视图变成顶级视图时调用，用于放置那些需要在视图显示后执行的代码。确保调用 [super viewDidAppear：] 。\n\n",
    "ID" : "5629f9e1e4b05e6f47b0ea4e",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "简述视图控件器的生命周期。"
  },
  {
    "ID" : "55b5a5cee4b0ef2b5755839e",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "线程之间有单独的地址空间",
    "optionC" : "进程有独立的地址空间",
    "optionAnswer" : "D",
    "answer" : "线程有自己的堆栈和局部变量，但线程之间没有单独的地址空间，一个线程死掉就等于整个进程死掉，所以多进程的程序要比多线程的程序健壮，但在进程切换时，耗费资源较大，效率要差一些",
    "optionB" : "程和线程的主要差别在于它们是不同的操作系统资源管理方式",
    "type" : "1",
    "optionA" : "进程和线程都是由操作系统所体会的程序运行的基本单元，系统利用该基本单元实现系统对应用的并发性",
    "question" : "下列关于线程与进程错误的是"
  },
  {
    "ID" : "55b5a5cde4b0ef2b57558346",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "size",
    "optionC" : "type ",
    "optionAnswer" : "A",
    "answer" : "请求头Range",
    "optionB" : "length ",
    "type" : "1",
    "optionA" : "range ",
    "question" : "断点续传需要在请求头中添加的控制续传最重要的关键字是"
  },
  {
    "ID" : "55b5a5cee4b0ef2b575583a8",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "能够统一管理引用计数用内存块与对象用内存块。",
    "optionC" : "少量代码即可完成。",
    "optionAnswer" : "B",
    "answer" : "C、D为通过内存块头部管理引用计数的好处\nA、无需考虑\nB、在调试时有着举足轻重的作用，即使出现故障导致对象占用的内存块损坏，但只要引用计数表没有破坏，就能够确认各内存块的位置。\n",
    "optionB" : "引用计数表各记录中存有内存块地址，可以从各个记录追溯到各对象的内存块。",
    "type" : "1",
    "optionA" : "对象用内存块的分配需考虑内存块头部。",
    "question" : "下列属于通过引用计数表管理引用计数的好处的是："
  },
  {
    "answer" : "#import是Objective-C导入头文件的关键字，#include是C\/C++导入头文件的关键字,使用#import头文件会自动只导入一次，不会重复导入，相当于#include和#pragma once;@class告诉编译器某个类的声明，当执行时，才去查看类的实现文件，可以解决头文件的相互包含;#import<>用来包含系统的头文件，#import””用来包含用户头文件。",
    "ID" : "5629f9e0e4b05e6f47b0e9ea",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "#import 跟#include 又什么区别，@class呢, #import<> 跟 #import””又什么区别?"
  },
  {
    "ID" : "5629f9e0e4b05e6f47b0e9a7",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "有时相同，有时不同",
    "optionC" : "随机打印",
    "optionAnswer" : "A",
    "answer" : "appendFormat:方法无返回值，它实现的是子类原始的replaceCharactersInRange:range:方法，所有两个打印结果是一样的",
    "optionB" : "不同",
    "type" : "1",
    "optionA" : "相同",
    "question" : "NSMutableString * str = [[NSMutableString alloc] initWithFormat:@\"123\"];\nNSLog(@\"str = %p\",str);\n[str appendFormat:@\"456\"];\nNSLog(@\"str = %p\",str);\n上面代码对字符串str进行拼接后，2次打印的地址是否相同："
  },
  {
    "ID" : "55b5a5cee4b0ef2b57558383",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "使用getValue：来提取数值（传递的是要存储这个数值的变量）",
    "optionC" : "可以用NSValue将结构放入NSArray和NSDictionary中",
    "optionAnswer" : "D",
    "answer" : "getValue：提取数值传递的时要存储这个数值变量的地址（先找地址再取值）",
    "optionB" : "NSValue可以封装任意值",
    "type" : "1",
    "optionA" : "NSNumber实际上是NSValue的子类",
    "question" : "下列关于NSValue的说法错误的是"
  },
  {
    "ID" : "55b5a5cde4b0ef2b5755836e",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "AppDelegate",
    "optionC" : "NSUserDefaults",
    "optionAnswer" : "D",
    "answer" : "  ",
    "optionB" : "NSFileMananger",
    "type" : "1",
    "optionA" : "UIApplication",
    "question" : "下列iOS SDK中的哪个类未使用单例模式?"
  },
  {
    "answer" : "面试时，面试官会先问一些，是否了解block，是否使用过block，这些问题相当于开场白，往往是下面一系列问题的开始，所以一定要如实根据自己的情况回答。\n\n1). 使用block和使用delegate完成委托模式有什么优点?\n\n首先要了解什么是委托模式，委托模式在iOS中大量应用，其在设计模式中是适配器模式中的对象适配器，Objective-C中使用id类型指向一切对象，使委托模式更为简洁。了解委托模式的细节：\n\niOS设计模式—-委托模式\n\n使用block实现委托模式，其优点是回调的block代码块定义在委托对象函数内部，使代码更为紧凑;\n\n适配对象不再需要实现具体某个protocol，代码更为简洁。\n\n2). 多线程与block\n\nGCD与Block\n\n使用 dispatch_async 系列方法，可以以指定的方式执行block\n\nGCD编程实例\n\ndispatch_async的完整定义\nvoid dispatch_async(\ndispatch_queue_t queue,\ndispatch_block_t block);\n功能：在指定的队列里提交一个异步执行的block，不阻塞当前线程\n\n通过queue来控制block执行的线程。主线程执行前文定义的 finishBlock对象\ndispatch_async(dispatch_get_main_queue(),^(void){finishBlock();});\n",
    "ID" : "5629f9e1e4b05e6f47b0ea23",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "关于block"
  },
  {
    "answer" : "1）@property有两个对应的词，一个是@synthesize，一个是@dynamic。如果@synthesize和@dynamic都没写，那么默认的就是@syntheszie var = _var;\n\n2）@synthesize的语义是如果你没有手动实现setter方法和getter方法，那么编译器会自动为你加上这两个方法。\n\n3）@dynamic告诉编译器：属性的setter与getter方法由用户自己实现，不自动生成。（当然对于readonly的属性只需提供getter即可）。假如一个属性被声明为@dynamic var，然后你没有提供@setter方法和@getter方法，编译的时候没问题，但是当程序运行到instance.var = someVar，由于缺setter方法会导致程序崩溃；或者当运行到 someVar = var时，由于缺getter方法同样会导致崩溃。编译时没问题，运行时才执行相应的方法，这就是所谓的动态绑定。\n\n",
    "ID" : "55f2e4eee4b0152a611431c0",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "@synthesize和@dynamic分别有什么作用？"
  },
  {
    "ID" : "55b5a5cee4b0ef2b575583bd",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : " instancetype 只能在方法声明中作为返回类型使用。",
    "optionC" : "如果一个方法声明的返回类型是instancetype，那么得到的返回值类型也是instancetype",
    "optionAnswer" : "C",
    "answer" : "如果一个方法声明的返回类型是instancetype，那么方法返回所在类的类型。",
    "optionB" : "如果一个方法声明的返回类型是id，那么得到的返回值类型也是id",
    "type" : "1",
    "optionA" : "id是通用对象，但如果使用instancetype，编译器就知道方法返回什么类型的对象。",
    "question" : "下列说法错误的是"
  },
  {
    "answer" : "File’s Owner 是所有 nib 文件中的每个图标，它表示从磁盘加载 nib 文件的对象；\n\nFirst Responder 就是用户当前正在与之交互的对象；\n\nView 显示用户界面；完成用户交互；是 UIView 类或其子类。",
    "ID" : "5629f9e1e4b05e6f47b0ea4d",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "xib文件的构成分为哪3个图标？都具有什么功能。"
  },
  {
    "ID" : "5629f9e0e4b05e6f47b0e9c1",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "不是合法的Objective-C语法格式",
    "optionC" : "是说myObject遵从于Painting协议",
    "optionAnswer" : "C",
    "answer" : "协议变量声明",
    "optionB" : "是说myObject遵从于Painting分类",
    "type" : "1",
    "optionA" : "是说myObject是Painting分类的一部分",
    "question" : "下列代码：@property(nonatomic,assign)id<Painting>myObject;"
  },
  {
    "answer" : "系统的某些block api中，UIView的block版本写动画时不需要考虑，但也有一些api 需要考虑：\n\n所谓“引用循环”是指双向的强引用，所以那些“单向的强引用”（block 强引用 self ）没有问题，",
    "ID" : "55f2e4eee4b0152a611431da",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "使用系统的某些block api（如UIView的block版本写动画时），是否也考虑引用循环问题？"
  },
  {
    "ID" : "55b5a5cee4b0ef2b575583b2",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "Control",
    "optionC" : "Touches",
    "optionAnswer" : "D",
    "answer" : "typedef enum {\n    UIEventTypeTouches,\n    UIEventTypeMotion,\n    UIEventTypeRemoteControl,\n} UIEventType;",
    "optionB" : "RemoteControl",
    "type" : "1",
    "optionA" : "Motion",
    "question" : "不属于UIEventType三种事件类型的一项是："
  },
  {
    "answer" : "懒汉模式，只在用到的时候才去初始化。\n也可以理解成延时加载。\n我觉得最好也最简单的一个列子就是tableView中图片的加载显示了。\n一个延时载，避免内存过高，一个异步加载，避免线程堵塞。",
    "ID" : "5602715ee4b043d0cb1d3a05",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "什么是延迟加载?"
  },
  {
    "answer" : "viewDidLoad在view从nib文件初始化时调用，\n\nloadView在controller的view为nil时调用。\n\n此方法在编程实现view时调用，view控制器默认会注册memory warning notification，\n\n当view controller的任何view没有用的时候，\n\nviewDidUnload会被调用，在这里实现将retain的view release，如果是retain的IBOutlet view 属性则不要在这里release，IBOutlet会负责release 。",
    "ID" : "5602715de4b043d0cb1d3995",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "请简要说明viewDidLoad和viewDidUnload何时调用"
  },
  {
    "answer" : "多态，子类指针可以赋值给父类。\n\n这个题目其实可以出到一切面向对象语言中，\n\n因此关于多态，继承和封装基本最好都有个自我意识的理解，也并非一定要把书上资料上写的能背出来",
    "ID" : "5629f9e1e4b05e6f47b0ea01",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "关于多态性"
  },
  {
    "answer" : "界面线程维护着自己的内存池，用户自己创建的数据线程，则需要创建该线程的内存池\n",
    "ID" : "5602715ee4b043d0cb1d3a0b",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "如果我们不创建内存池，是否有内存池提供给我们?"
  },
  {
    "ID" : "55b5a5cfe4b0ef2b575583e5",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "Stack空间有限，Heap是很大的自由存储区",
    "optionC" : "Heap上的空间由系统自动分配\/释放",
    "optionAnswer" : "C",
    "answer" : "Stack的空间由操作系统自动分配\/释放，Heap上的空间手动分配\/释放。",
    "optionB" : "Stack的空间由操作系统自动分配\/释放",
    "type" : "1",
    "optionA" : "Heap是堆，Stack是栈",
    "question" : "下列关于Heap和Stack的差别错误的是"
  },
  {
    "ID" : "55b5a5cee4b0ef2b575583ca",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "调用release后，引用计数值减1.",
    "optionC" : "引用计数值为0时，对象自动销毁",
    "optionAnswer" : "C",
    "answer" : "引用计数值为0时，调用dealloc方法废弃对象。",
    "optionB" : "调用alloc或retain方法后，引用计数值加1.",
    "type" : "1",
    "optionA" : "在OC的对象中存有引用计数这一整数值。",
    "question" : "下列说法错误的是"
  },
  {
    "answer" : "不需要。\n\n在ARC环境无论是强指针还是弱指针都无需在deallco设置为nil，ARC会自动帮我们处理。\n\n即便是编译器不帮我们做这些，weak也不需要在dealloc中置nil：",
    "ID" : "55f2e4eee4b0152a611431bf",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "weak属性需要在dealloc中置nil么？"
  },
  {
    "ID" : "55b5a5cde4b0ef2b5755835f",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "代码高效率",
    "optionC" : "较低的生命周期成本",
    "optionAnswer" : "D",
    "answer" : "运行效率会低一些",
    "optionB" : "高重用性和可适用性",
    "type" : "1",
    "optionA" : "低耦合性",
    "question" : " MVC优点不正确的是"
  },
  {
    "answer" : "通过 retainCount 的机制来决定对象是否需要释放。 每次 runloop 的时候，都会检查对象的 retainCount，如果retainCount 为 0，说明该对象没有地方需要继续使用了，可以释放掉了。",
    "ID" : "55f2e4eee4b0152a611431d3",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "objc使用什么机制管理对象内存？"
  },
  {
    "ID" : "55b5a5cee4b0ef2b5755839b",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "深复制：复制之后内存中会出现两个对象。",
    "optionC" : "浅复制：复制的只不过是是一个指针，对象本身资源还是只有一份，但是如果修其中一个对象，另一个不会改变",
    "optionAnswer" : "C",
    "answer" : "浅复制复制的只是一个指针，内存中只有一个对象。",
    "optionB" : "深层复制：复制引用对象本身",
    "type" : "1",
    "optionA" : "浅层复制：只复制指向对象的指针，而不复制引用对象本身",
    "question" : "下列关于深复制、浅复制叙述错误的是"
  },
  {
    "ID" : "55b5a5cee4b0ef2b57558389",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "dateWithTimeIntervalSinceNow:接受一个NSTimeInterval参数通过该参数可以指定时间偏移的方式：对于将来的时间，使用正的时间间隔；对于过去的时间，使用负的时间间隔",
    "optionC" : "dateWithTimeIntervalSinceNow:接受一个NSTimeInterval参数，该参数是一个双精度值，表示以秒为单位的时间间隔",
    "optionAnswer" : "B",
    "answer" : "可以使用[NSDatedate];获取当前的日期和时间，它是一个自动释放对象",
    "optionB" : "可以使用[NSDatedate];获取当前的日期和时间，它用过之后需要手动释放",
    "type" : "1",
    "optionA" : "NSDate是用于处理日期和时间的基础类。",
    "question" : "下列关于NSDate错误的是"
  },
  {
    "ID" : "55b5a5cde4b0ef2b57558347",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "大量使用第三方库",
    "optionC" : "在编码前先设计好流程图或使用伪代码，清晰化整个设计意图",
    "optionAnswer" : "D",
    "answer" : "写代码时合理使用第三方库 这样会提高代码的效率",
    "optionB" : "避免不必要的类型转换错误",
    "type" : "1",
    "optionA" : "使用严格的命名规则（如匈牙利命名法）",
    "question" : "下列编码中哪个会降低代码质量、软件性能、健壮性和代码效率"
  },
  {
    "answer" : "每一个类对象中都一个方法列表,方法列表中记录着方法的名称,方法实现,以及参数类型,其实selector本质就是方法名称,通过这个方法名称就可以在方法列表中找到对应的方法实现.",
    "ID" : "55f2e4eee4b0152a611431c9",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "runtime如何通过selector找到对应的IMP地址？（分别考虑类方法和实例方法）"
  },
  {
    "ID" : "5629f9dfe4b05e6f47b0e99d",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "西红柿",
    "optionC" : "世界冠军刘翔",
    "optionAnswer" : "C",
    "answer" : "类是抽象的，属于定义的范畴，对象就是把类具体实例化。",
    "optionB" : "保龄球",
    "type" : "1",
    "optionA" : "奥迪A6",
    "question" : "关于类和对象的概念，下列属于对象的是："
  },
  {
    "answer" : "NSString *str = “20|http:\/\/www.621life.com”;\nNSRange range = [str rangeOfString:@”|”];\nint location = range.location;\nNSString *str1 = [str substringToIndex:location];\nNSString *str2 = [str substringFromIndex:location+1];\n",
    "ID" : "5602715de4b043d0cb1d39dd",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "截取字符串“20｜http:\/\/www.621life.com” 中 ‘｜’字符前面及后面的数据，分别输出它们"
  },
  {
    "answer" : "barrier:是障碍物的意思,在多个并行任务中间,他就像是一个隔离带,把前后的并行任务分开. dispatch_barrier_async 作用是在并行队列中，等待前面操作并行任务完成再执行dispatch_barrier_async中的任务,如果后面还有并行任务,会开始执行后续的并行任务",
    "ID" : "ca9d0ad8ea7e11e58afd00163e0021c8",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "dispatch_barrier_async的作用是什么？"
  },
  {
    "ID" : "5629f9e0e4b05e6f47b0e9b4",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "3",
    "optionC" : "2",
    "optionAnswer" : "B",
    "answer" : "alloc后retainCount为1，retain后retainCount为2，release后retainCount为1\n所以最后retainCount为1",
    "optionB" : "1",
    "type" : "1",
    "optionA" : "0",
    "question" : "以下代码执行后，person对象的retain count是多少：\nPerson * person = [[Person alloc] init];\n[person retain]; \n[person release];"
  },
  {
    "ID" : "55b5a5cfe4b0ef2b575583dd",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "UIControl",
    "optionC" : "UITableView",
    "optionAnswer" : "C",
    "answer" : "UITableView继承UIScrollView",
    "optionB" : "UIScrollView",
    "type" : "1",
    "optionA" : "UIAlertView",
    "question" : "下列不是继承UIView的是"
  },
  {
    "ID" : "5629f9e0e4b05e6f47b0e9a8",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : ".c",
    "optionC" : ".pl",
    "optionAnswer" : "B",
    "answer" : ".cpp是C++类型文件\n.pl是用Perl 写的CGI文件\n.c是C类型文件",
    "optionB" : ".m",
    "type" : "1",
    "optionA" : ".cpp",
    "question" : "Objective-C的代码文件的后缀为："
  },
  {
    "answer" : "有很多，如 UIViewAnimationOptionCurveEaseInOut UIViewAnimationOptionCurveEaseIn UIViewAnimationOptionCurveEaseOut UIViewAnimationOptionTransitionFlipFromLeft UIViewAnimationOptionTransitionFlipFromRight UIViewAnimationOptionTransitionCurlUpUIViewAnimationOptionTransitionCurlDown",
    "ID" : "5629f9e1e4b05e6f47b0ea13",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "UIView的动画效果有那些?"
  },
  {
    "ID" : "55b5a5cee4b0ef2b5755838d",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "双击home键划掉任务",
    "optionC" : "程序可以使用本地通知再指定的时间给用户发消息，不管程序是否在运行。",
    "optionAnswer" : "D",
    "answer" : "双击home键划掉任务后任务结束不运行",
    "optionB" : "程序可以声明支持某种特定的服务，需要周期的后台运行时间",
    "type" : "1",
    "optionA" : "程序可以申请在有限的时间完成一些重要的任务",
    "question" : "下列什么情况下程序在后台不运行"
  },
  {
    "ID" : "5629f9e0e4b05e6f47b0e9cc",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "2=1 3=2",
    "optionC" : "2=1 4=3",
    "optionAnswer" : "C",
    "answer" : "移除key为3的value后字典为2=1 4=3",
    "optionB" : "1=2 2=3",
    "type" : "1",
    "optionA" : "1=2 3=4",
    "question" : "下面程序段的输出结果是什么：\nNSMutableDictionary * dic = [[NSMutableDictionary alloc] initWithObjectsAndKeys:@\"1\",@\"2\",@\"2\",@\"3\",@\"3\",@\"4\", nil];\n[dic removeObjectForKey:@\"3\"];\nNSLog(@\"%@\",dic);"
  },
  {
    "ID" : "5629f9dfe4b05e6f47b0e99b",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "a value : aKey",
    "optionC" : "崩溃信息",
    "optionAnswer" : "C",
    "answer" : "过度释放，malloc分配的内存赋值给一个已经释放的指针，程序会奔溃",
    "optionB" : "aKey : a value",
    "type" : "1",
    "optionA" : "a value",
    "question" : "NSDictionary *dict = [NSDictionary dictionaryWithObject:@\"a value\" forKey:@\"aKey\"];\nNSLog(@\"%@\",[dict objectForKey:@\"aKey\"]);\n[dict release];\n控制台中打印的最后一条信息会是："
  },
  {
    "answer" : "model 主要是用来指定事件在运行循环中的优先级的，分为：\n\nNSDefaultRunLoopMode（kCFRunLoopDefaultMode）：默认，空闲状态\nUITrackingRunLoopMode：ScrollView滑动时\nUIInitializationRunLoopMode：启动时\nNSRunLoopCommonModes（kCFRunLoopCommonModes）：Mode集合\n苹果公开提供的 Mode 有两个：\n\nNSDefaultRunLoopMode（kCFRunLoopDefaultMode）\nNSRunLoopCommonModes（kCFRunLoopCommonModes）",
    "ID" : "55f2e4eee4b0152a611431d0",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "runloop的mode作用是什么？"
  },
  {
    "answer" : "SystemSound Services\n\nAVAudioPlayer 类\n\nAudio Queue Services\n\nOpenAL",
    "ID" : "5602715de4b043d0cb1d39b3",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "iPhone OS主要提供了几种播放音频的方法？"
  },
  {
    "answer" : "autoreleasepool以一个队列数组的形式实现,主要通过下列三个函数完成.\n\nobjc_autoreleasepoolPush\nobjc_autoreleasepoolPop\nobjc_aurorelease\n看函数名就可以知道，对autorelease分别执行push，和pop操作。销毁对象时执行release操作。",
    "ID" : "55f2e4eee4b0152a611431d7",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "苹果是如何实现autoreleasepool的？"
  },
  {
    "ID" : "55b5a5cee4b0ef2b5755837f",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "以上都是 ",
    "optionC" : "NSRange range = NSMakeRange(17, 7); ",
    "optionAnswer" : "D",
    "answer" : "第一种是直接给字段赋值、第二种是应用C语言的聚合结构赋值机制、第三种是Cocoa提供的快捷函数",
    "optionB" : "NSRange range = {17,7}; ",
    "type" : "1",
    "optionA" : "NSRange range;  \nrange.location = 17;  \nrange.length = 7;  ",
    "question" : "下面是创建NSRange的方式的是"
  },
  {
    "ID" : "55b5a5cee4b0ef2b575583cf",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "__autoreleasing",
    "optionC" : "__block",
    "optionAnswer" : "C",
    "answer" : "ARC有效时id和对象类型的所有权修饰符：__strong、__weak、__unsafe_unretained、__autoreleasing",
    "optionB" : "__weak",
    "type" : "1",
    "optionA" : "__strong",
    "question" : "ARC有效时，id类型和对象类型同C语言其他类型不同，其类型上必须附加所有权修饰符。下列不属于所有权修饰符的是"
  },
  {
    "ID" : "55b5a5cee4b0ef2b57558377",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "100-200",
    "optionC" : "50-100",
    "optionAnswer" : "C",
    "answer" : "NSTimer可以精确到50-100毫秒，NSTimer不是绝对准确的,而且中间耗时或阻塞错过下一个点,那么下一个点就pass过去了",
    "optionB" : "20-50",
    "type" : "1",
    "optionA" : "0-20",
    "question" : "NSTimer的时间间隔可以精确到多少毫秒？"
  },
  {
    "ID" : "55b5a5cde4b0ef2b5755833c",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "避免内存过高",
    "optionC" : "只在用到的时候才去初始化。",
    "optionAnswer" : "A",
    "answer" : "可以理解成延时加载",
    "optionB" : "tableView中图片的加载显示属于懒汉模式",
    "type" : "1",
    "optionA" : "提前加载完成",
    "question" : "关于懒汉模式下列错误的选项是"
  },
  {
    "answer" : "多线程是个复杂的概念，按字面意思是同步完成多项任务，提高了资源的使用效率，从硬件、操作系统、应用软件不同的角度去看，多线程被赋予不同的内涵，对于硬件，现在市面上多数的CPU都是多核的，多核的CPU运算多线程更为出色;从操作系统角度，是多任务，现在用的主流操作系统都是多任务的，可以一边听歌、一边写博客;对于应用来说，多线程可以让应用有更快的回应，可以在网络下载时，同时响应用户的触摸操作。在iOS应用中，对多线程最初的理解，就是并发，它的含义是原来先做烧水，再摘菜，再炒菜的工作，会变成烧水的同时去摘菜，最后去炒菜。",
    "ID" : "5629f9e1e4b05e6f47b0ea1e",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "多线程是什么"
  },
  {
    "answer" : "所有父类的成员变量和自己的成员变量都会存放在该对象所对应的存储空间中.\n每一个对象内部都有一个isa指针,指向他的类对象,类对象中存放着本对象的\n1）对象方法列表（对象能够接收的消息列表，保存在它所对应的类对象中）\n\n2）成员变量的列表\n\n3）属性列表\n\n它内部也有一个isa指针指向元对象(meta class),元对象内部存放的是类方法列表,类对象内部还有一个superclass的指针,指向他的父类对象。",
    "ID" : "55f2e4eee4b0152a611431c6",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "一个objc对象如何进行内存布局？（考虑有父类的情况）"
  },
  {
    "answer" : "所谓的“手动触发”是区别于“自动触发”：\n\n自动触发是指类似这种场景：在注册 KVO 之前设置一个初始值，注册之后，设置一个不一样的值，就可以触发了。\n\n想知道如何手动触发，必须知道自动触发 KVO 的原理：\n\n键值观察通知依赖于 NSObject 的两个方法: willChangeValueForKey: 和 didChangevlueForKey: 。在一个被观察属性发生改变之前， willChangeValueForKey: 一定会被调用，这就 会记录旧的值。而当改变发生后， didChangeValueForKey: 会被调用，继而 observeValueForKey:ofObject:change:context: 也会被调用。如果可以手动实现这些调用，就可以实现“手动触发”了。\n\n那么“手动触发”的使用场景是什么？一般我们只在希望能控制“回调的调用时机”时才会这么做。",
    "ID" : "55f2e4eee4b0152a611431e1",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "如何手动触发一个value的KVO"
  },
  {
    "ID" : "55b5a5cde4b0ef2b5755834b",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "远程擦除所丢失的设备上的数据",
    "optionC" : "在iphone上安装应用程序",
    "optionAnswer" : "D",
    "answer" : "查找我的iphone可以远程擦除数据",
    "optionB" : "管理iphone的用途",
    "type" : "1",
    "optionA" : "查找感兴趣的iphone应用程序",
    "question" : "你可以将查找我的iphone应用程序用于以下目的"
  },
  {
    "ID" : "5602715de4b043d0cb1d3986",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "deabc",
    "optionC" : "decab ",
    "optionAnswer" : "A",
    "answer" : "方法很简单\ndabec是后序遍历\n则c是根节点\n将中序遍历以c为中心分为两边\n如此操作即可得到一棵树\n(dabec),(debac)\n((dabe)c),((deba)c)\n(((dab)e)c),(((d)e(ba))c)\n((((d)(a)b)e)c),(((d)e(b(a)))c)\n这样就把树给构造了出来",
    "optionB" : "acbed ",
    "type" : "1",
    "optionA" : "cedba ",
    "question" : "已知二叉树后序遍历序列是dabec，中序遍历序列是debac，它的前序遍历序列是 "
  },
  {
    "ID" : "5629f9dfe4b05e6f47b0e9a3",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "UIView",
    "optionC" : "NSCoding",
    "optionAnswer" : "A",
    "answer" : "NSObject为所有类的根类\nNSDate继承自NSObject\nNSCoding是归档协议\nUIView继承自UIResponder，UIResponder继承自NSObject",
    "optionB" : "NSDate",
    "type" : "1",
    "optionA" : "NSObject",
    "question" : "OC中,所有类的根类是："
  },
  {
    "ID" : "5629f9dfe4b05e6f47b0e9a2",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "[[NSMutableDictionary alloc] init];",
    "optionC" : "[[NSArray arrayWithArray: arr1];",
    "optionAnswer" : "C",
    "answer" : "c选项，没有使用alloc、new、retian。所以不需要release",
    "optionB" : "[[NSString alloc] initWithString:@”hehe”];",
    "type" : "1",
    "optionA" : "[[NSString alloc]init];",
    "question" : "下列哪个选项不需要release方法："
  },
  {
    "ID" : "55b5a5cee4b0ef2b575583b9",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "静态局部变量",
    "optionC" : "自动变量（局部变量）",
    "optionAnswer" : "C",
    "answer" : "在函数的多次调用之间能够传递值的变量有：静态局部变量、静态全局变量、全局变量",
    "optionB" : "全局变量",
    "type" : "1",
    "optionA" : "静态全局变量",
    "question" : "在函数的多次调用之间不能够传递值的变量有"
  },
  {
    "answer" : "多继承在这里是用protocol委托代理来实现的，不用去考虑繁琐的多继承，虚基类的概念。ood的多态特性在obj-c中通过委托来实现的",
    "ID" : "5629f9e1e4b05e6f47b0ea26",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "OC有多继承吗？没有的话用什么代替？cocoa 中所有的类都是NSObject 的子类"
  },
  {
    "answer" : "MVC模式考虑三种对象：模型对象、视图对象和控制器对象。 模型对象负责应用程序的数据和定义操作数据的逻辑； 视图对象知道如何显示应用程序的模型数据； 控制器对象是M与V之间的协调者。",
    "ID" : "5602715de4b043d0cb1d399f",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "MVC的理解？"
  },
  {
    "answer" : "objective-c – 类里面的方法只有两种, 静态方法和实例方法. 这似乎就不是完整的面向对象了,按照OO的原则就是一个对象只暴露有用的东西. 如果没有了私有方法的话, 对于一些小范围的代码重用就不那么顺手了. 在类里面声名一个私有方法\n\n@interfaceController : NSObject { NSString *something; }\n\n+(void)thisIsAStaticMethod;\n\n-(void)thisIsAnInstanceMethod;\n\n@end\n\n@interfaceController (private)\n\n-(void)thisIsAPrivateMethod;\n\n@end\n\n@private可以用来修饰私有变量\n\n在Objective‐C中，所有实例变量默认都是私有的，所有实例方法默认都是公有的",
    "ID" : "5602715de4b043d0cb1d39a0",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "在Obj-c中有没有私有方法？私有变量？一般采用什么方法实现？"
  },
  {
    "answer" : "OC的类不可以多重继承;可以实现多个接口，通过实现多个接口可以完成C++的多重继承;Category是类别，一般情况用分类好，用Category去重写类的方法，仅对本Category有效，不会影响到其他类与原有类的关系。",
    "ID" : "5602715ee4b043d0cb1d39e8",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "OC的类可以多重继承么?可以实现多个接口么?Category是什么?重写一个类的方式用继承好还是分类好?为什么?"
  },
  {
    "answer" : "int find(char *_str)\n\n{\n\nchar *p = _str;\n\ninti = 1;\n\nwhile (*p)\n\n{\n\nchar *temp = _str;\n\nwhile (*temp)\n\n{\n\nif ((*p ==*temp)&&(p != temp))\n\n{\n\nbreak;\n\n}\n\ntemp++;\n\nif (*temp == 0) {\n\nreturni;\n\n}\n\n}\n\ni++;\n\np++;\n\n}\n\nreturn-1;\n\n}\n\n#include<stdio.h>\n\n#include<stdlib.h>\n\n#include<string.h>\n\nintfind_char(constchar* str)\n\n{\n\nstaticintpos[256];\n\nconst unsigned char* p =(const unsigned char*)str;\n\ninti = 0;\n\nif( (!str) || (!(*str)) )return -1;\n\nmemset(pos,-1,sizeof(pos));\n\nwhile(*p){\n\nif(pos[*p] == -1){\n\npos[*p] = p-(const unsigned char*)str;\n\n}else{\n\npos[*p] = -2;\n\n}\n\np++;\n\n}\n\nfor(i=0;i<sizeof(pos)\/sizeof(pos[0]);i++){\n\nif(pos[i]>=0)returnpos[i];\n\n}\n\nreturn -1;\n\n}\n\nint main()\n\n{\n\nconstchar* p =”abaccddeeef”;\n\nintpos = find_char(p);\n\nprintf(“%d, it is’%c’\\n”,pos,pos!=-1?p[pos]:’ ‘);\n\np =”abcdefghijklmnopqrstuvwxyz “\n\n“abcdefghijklmnopqrstuwxyz”;\n\npos = find_char(p);\n\nprintf(“%d, it is’%c’\\n”,pos,pos!=-1?p[pos]:’ ‘);\n\nreturn0;\n\n}",
    "ID" : "5602715de4b043d0cb1d39ce",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "给定一个字符串，输出本字符串中只出现一次并且最靠前的那个字符的位置？\n\n比如”abaccddeeef” 则是b，输出2"
  },
  {
    "ID" : "55b5a5cee4b0ef2b575583d8",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "以上都可以",
    "optionC" : "该类的超类型、子类型",
    "optionAnswer" : "D",
    "answer" : "init方法返回的对象应为id类型、该方法声明类的对象类型、该类的超类型、子类型",
    "optionB" : "该方法声明类的对象类型",
    "type" : "1",
    "optionA" : "id类型",
    "question" : "init方法返回的对象可以为"
  },
  {
    "answer" : "以 DOM 方式解析 XML 文件；以 SAX 方式解析 XML 文件；\n\n",
    "ID" : "5629f9e2e4b05e6f47b0ea59",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "解析XML文件有哪几种方式?"
  },
  {
    "ID" : "55b5a5cde4b0ef2b5755833e",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "FTP ",
    "optionC" : "Http ",
    "optionAnswer" : "D",
    "answer" : "即时聊天类软件采用的是传输方式是TCP、UDP、Http",
    "optionB" : "TCP ",
    "type" : "1",
    "optionA" : "UDP ",
    "question" : "及时聊天app不会采用的网络传输方式是"
  },
  {
    "ID" : "55b5a5cee4b0ef2b575583bb",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "程序在进入main()函数前干了许多事情",
    "optionC" : "如果前缀头文件(prefix header)里其中一个头文件 发生了变化,所有代码将会重新编译。",
    "optionAnswer" : "A",
    "answer" : "iOS的主函数main()中创建了一个NSAutoreleasePool(自动释放池)",
    "optionB" : "添加到前缀头文件(prefix header)中的框架代码会被预先编译,所有的类都将可以使用这些 头文件。",
    "type" : "1",
    "optionA" : "在ARC程序中，main()函数中不需要创建自动释放池",
    "question" : "下列说法错误的是"
  },
  {
    "ID" : "55b5a5cde4b0ef2b57558339",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "data",
    "optionC" : "MP4 ",
    "optionAnswer" : "A",
    "answer" : "在线播放视频一般访问服务器中的M3U8类型文件",
    "optionB" : "flv ",
    "type" : "1",
    "optionA" : "M3U8",
    "question" : "在线播放视频一般访问服务器中的哪类型文件"
  },
  {
    "ID" : "55b5a5cee4b0ef2b5755838e",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "以上三项",
    "optionC" : "释放自动释放池。一般来说，开发者不需要修改main()函数",
    "optionAnswer" : "D",
    "answer" : "MAIN函数主要完成的是ABC三项的工作",
    "optionB" : "调用UIApplication（）函数",
    "type" : "1",
    "optionA" : "创建一个自动释放池",
    "question" : "main（）函数主要完成什么工作"
  },
  {
    "ID" : "55b5a5cde4b0ef2b5755836a",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "如果指定了 nonatomic ，那么访问器只是简单地返回这个值",
    "optionC" : "non-atomic:在自己管理内存的环境中，解析的访问器不保留并不自动释放返回的值",
    "optionAnswer" : "C",
    "answer" : "non-atomic:在自己管理内存的环境中，解析的访问器保留并自动释放返回的值",
    "optionB" : "atomic是防止在写未完成的时候被另外一个线程读取，造成数据错误",
    "type" : "1",
    "optionA" : "atomic提供多线程安全",
    "question" : "下列关于原子（atomic）跟非原子（non-atomic）属性叙述错误的是？"
  },
  {
    "ID" : "55b5a5cee4b0ef2b575583d9",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "只有附有__block说明符的自动变量才可在Block中赋值",
    "optionC" : "Blocks中，Block表达式会截获所使用的自动变量的值，即保存该自动变量的瞬间值。",
    "optionAnswer" : "A",
    "answer" : "在函数的多次调用之间能够传递值的变量有：静态局部变量、静态全局变量、全局变量。函数的参数不能再函数的多次调用之间传值。",
    "optionB" : "自动变量再函数的多次调用之间不能传递值",
    "type" : "1",
    "optionA" : "在函数的多次调用之间能够传递值的变量有：静态局部变量、静态全局变量、全局变量、函数的参数",
    "question" : "下列说法错误的是"
  },
  {
    "ID" : "55b5a5cee4b0ef2b57558385",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "当引用计数为0的时候，对象自己就会销毁。",
    "optionC" : "将对象添加到任何类型的集合中都会使该对象的引用计数增加。从任何集合中删除对象都能够使其引用计数减少",
    "optionAnswer" : "D",
    "answer" : "当引用计数为0的时候，系统就会释放它的内存，通过向对象发送dealloc消息",
    "optionB" : "不再需要对象时，可以通过发送release消息，使对象的引用次数减1。",
    "type" : "1",
    "optionA" : "创建对象时，将它的引用次数设置为1，每一次必须保持该对象时，就发送一条retain消息，使其引用次数加1",
    "question" : "下列关于引用计数错误的是"
  },
  {
    "ID" : "5629f9e0e4b05e6f47b0e9c3",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "0,3,2,3",
    "optionC" : "1,3,3,0",
    "optionAnswer" : "B",
    "answer" : "第一行代码执行后arr1为1 2 3 \n第二行代码执行后arr1为 1 2 3 0\n第三行代码执行后arr1为1 2 3 0\n",
    "optionB" : "1,2,3,0",
    "type" : "1",
    "optionA" : "0,1,2,3",
    "question" : "下面程序段的输出结果是什么：\nNSMutableArray * arr1 = [[NSMutableArray alloc] initWithObjects:@\"1\",@\"2\",@\"3\", nil];\n[arr1 addObject:@\"0\"];\n[arr1 replaceObjectAtIndex:2 withObject:@\"3\"];\nNSLog(@\"%@\",arr1);"
  },
  {
    "ID" : "55b5a5cde4b0ef2b57558340",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : ".m",
    "optionC" : ".mm",
    "optionAnswer" : "C",
    "answer" : "编译混合Objective-C和C++的源码文件需要将文件格式的后缀改为.mm",
    "optionB" : ".cpp",
    "type" : "1",
    "optionA" : ".c",
    "question" : "在Xcode中，需要编译混合Objective-C和C++的源码文件，需要将文件格式的后缀改为"
  },
  {
    "ID" : "5629f9e0e4b05e6f47b0e9b2",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "@property(nonatomic,retain)int mynumber;",
    "optionC" : "@property(nonatomic,assign)int mynumber;",
    "optionAnswer" : "C",
    "answer" : "字符串的正式声明为：@property(nonatomic,copy)NSString *myString;\n基本数据类型的声明为：@property(nonatomic,assign)int mynumber;",
    "optionB" : "@property(nonatomic,assign)NSString * myString;",
    "type" : "1",
    "optionA" : "@property(nonatomic,retain)NSString myString;",
    "question" : "下面哪些选项是属性的正确声明方式："
  },
  {
    "ID" : "5629f9dfe4b05e6f47b0e99c",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "[peoples removeAllObjects];",
    "optionC" : "[peoples removeObjectAtIndex:0];",
    "optionAnswer" : "A",
    "answer" : "“张三”对应的key是“左护法”，通过该key可以删除“张三”",
    "optionB" : "[peoples removeObject:@\"张三\"];",
    "type" : "1",
    "optionA" : "[peoples removeObjectForKey:@\"左护法\"];",
    "question" : "现有如下集合，能准确删除“张三”的代码是：\nNSMutableDictionary * peoples=[NSMutableDictionary dictionaryWithObjectsAndKeys:@\"张三\",@\"左护法\",@\"李四\",@\"右使\",@\"唐sir\",@\"老大哥\", nil];"
  },
  {
    "ID" : "55b5a5cfe4b0ef2b575583e1",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "UILongPressGestureRecognizer",
    "optionC" : "Motion",
    "optionAnswer" : "C",
    "answer" : "typedef enum {\n    UIEventTypeTouches,\n    UIEventTypeMotion,\n    UIEventTypeRemoteControl,\n} UIEventType;",
    "optionB" : "UIRotationGestureRecognizer",
    "type" : "1",
    "optionA" : "UIPanGestureRecognizer",
    "question" : "下列属于UIEventType事件类型的是"
  },
  {
    "answer" : "1). readwrite 是可读可写特性;需要生成getter方法和setter方法时\n\n2). readonly 是只读特性 只会生成getter方法 不会生成setter方法 ;不希望属性在类外改变\n\n3). assign 是赋值特性，setter方法将传入参数赋值给实例变量;仅设置变量时;\n\n4). retain 表示持有特性，setter方法将传入参数先保留，再赋值，传入参数的retaincount会+1;\n\n5). copy 表示赋值特性，setter方法将传入对象复制一份;需要完全一份新的变量时。\n\n6).nonatomic 非原子操作，决定编译器生成的setter getter是否是原子操作，atomic表示多线程安全，一般使用nonatomic",
    "ID" : "5629f9e0e4b05e6f47b0e9eb",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "属性readwrite，readonly，assign，retain，copy，nonatomic 各是什么作用，在那种情况下用?"
  },
  {
    "ID" : "55b5a5cee4b0ef2b575583d2",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "__weak修饰符可以避免循环引用",
    "optionC" : "循环引用是指两个或两个以上对象之间互相强引用",
    "optionAnswer" : "C",
    "answer" : "当某一对象持有其自身时，即自引用，也会发生循环引用。",
    "optionB" : "循环引用容易发生内存泄露。",
    "type" : "1",
    "optionA" : "内存泄露是指应当废弃的对象在超出其生命周期后仍然存在。",
    "question" : "下列说法错误的是"
  },
  {
    "answer" : "ASIHTTPRequest与NSURLConnection",
    "ID" : "5602715ee4b043d0cb1d3a19",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "做过的项目是否涉及网络访问功能，使用什么对象完成网络功能?"
  },
  {
    "ID" : "55b5a5cde4b0ef2b5755833d",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "程序的可移植性",
    "optionC" : "程序的执行效率",
    "optionAnswer" : "B",
    "answer" : "结构化程序设计主要强调的是结构化程序清晰易读，可理解性好，程序员能够进行逐步求精、程序证明和测试，以保证程序的正确性。\n",
    "optionB" : "程序的易读性",
    "type" : "1",
    "optionA" : "程序的规模",
    "question" : "结构化程序设计主要强调的是"
  },
  {
    "answer" : "谓词是通过NSPredicate，是通过给定的逻辑条件作为约束条件，完成对数据的筛选。\npredicate = [NSPredicate predicateWithFormat:@\"customerID == %d\",n];\na = [customers filteredArrayUsingPredicate:predicate];\n",
    "ID" : "5629f9e1e4b05e6f47b0ea18",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "什么是谓词?"
  },
  {
    "ID" : "55b5a5cee4b0ef2b575583d1",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "__unsafe_unretained",
    "optionC" : "__autoreleasing",
    "optionAnswer" : "D",
    "answer" : "附有这些修饰符的自动变量初始化时自动赋值为nil：__strong、__weak、__autoreleasing",
    "optionB" : "__weak",
    "type" : "1",
    "optionA" : "__strong",
    "question" : "下列这些修饰符的自动变量初始化时不会自动赋值为nil的是"
  },
  {
    "answer" : "简便构造方法一般由CocoaTouch框架提供，如NSNumber的 + numberWithBool: + numberWithChar: + numberWithDouble: + numberWithFloat: + numberWithInt:\n\nFoundation下大部分类均有简便构造方法，我们可以通过简便构造方法，获得系统给我们创建好的对象，并且不需要手动释放",
    "ID" : "5629f9e1e4b05e6f47b0ea11",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "什么是简便构造方法?"
  },
  {
    "ID" : "55b5a5cee4b0ef2b57558380",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "以上全部正确",
    "optionC" : "CGPoint类型是由CoreGraphics框架提供的",
    "optionAnswer" : "D",
    "answer" : "CoreGraphics框架中的数据类型大都采用了C的struct结构体类型，原因在于性能，程序(尤其是GUI程序)会用到许多临时的坐标，大小和矩形区域来完成工作，因为所有的Objective-C对象都是动态分配的，而动态分配是一个代价较大的操作，会消耗大量的时间。",
    "optionB" : "CGPoint是一个结构体",
    "type" : "1",
    "optionA" : "CGPoint表示的是笛卡尔平面中的一个坐标(x,y)",
    "question" : "下列关于CGPoint说法正确的是"
  },
  {
    "answer" : "UITableView *my = [[UITableView alloc]initWithFrame:<(CGRect)frame> style:<(UITableViewStyle)style>];\n\nmy.delegate = self;\n\nmy.dataSource = self;\n\n首先需要分配空间设置表格类型\n\n然后需要设置两个必须的委托对象。",
    "ID" : "5602715de4b043d0cb1d3996",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "实例化一个UITableView对象，要求写出关键语句？"
  },
  {
    "ID" : "55b5a5cee4b0ef2b57558381",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "物理层",
    "optionC" : "会话层",
    "optionAnswer" : "C",
    "answer" : "Tcp\/Ip协议\n      主要层次结构为： 应用层\/传输层\/网络层\/数据链路层\/物理层",
    "optionB" : "传输层",
    "type" : "1",
    "optionA" : "应用层",
    "question" : "TCP\/IP协议不包括下列哪个层次结构"
  },
  {
    "answer" : " @class一般用于头文件中需要声明该类的某个实例变量的时候用到，在m文 件中还是需要使用#import\n\n而#import比起#include的好处就是不会引起交叉编译",
    "ID" : "5602715de4b043d0cb1d3991",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "#import和#include的区别 @class？"
  },
  {
    "ID" : "55b5a5cde4b0ef2b5755835e",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "取消观察不需要在viewDidUnload 跟dealloc中都注销",
    "optionC" : "每个观察者都要等当前的某个观察者的操作做完才能轮到他来操作，可以用NotificationQueue的方式安排观察者的反应顺序",
    "optionAnswer" : "D",
    "answer" : "要取消观察需要在viewDidUnload和dealloc中都注销",
    "optionB" : "多观察者默认随机顺序发通知给观察者们",
    "type" : "1",
    "optionA" : "观察者模式，controller向defaultNotificationCenter添加自己的notification，其他类注册这个notification就可以收到通知",
    "question" : "下列关于Notification错误的是"
  },
  {
    "ID" : "55b5a5cee4b0ef2b57558391",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "在Xcode中创建项目是需要手动创建UIWindow",
    "optionC" : "窗口是视图的父类",
    "optionAnswer" : "B",
    "answer" : "一个iOS应用通常只有一个窗口，但是也有例外，比如一个iPhone应用中加载一个电影播放器，这个应用本身有一个窗口，而电影播放器还有另外一个窗口。窗口是视图的一个子类。Xcode中会自动创建一个UIWindow。",
    "optionB" : "窗口的主要功能是提供一个区域来显示视图，并将事件分发给视图",
    "type" : "1",
    "optionA" : "一个iOS应用只能有一个窗口",
    "question" : "关于UIWindow窗口说法正确的是"
  },
  {
    "answer" : "id 声明的对象具有运行时的特性，即可以指向任意类型的objcetive-c的对象;",
    "ID" : "5629f9e0e4b05e6f47b0e9ef",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "id 声明的对象有什么特性?"
  },
  {
    "ID" : "55b5a5cde4b0ef2b57558331",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "以上全部",
    "optionC" : "SQLite和CoreData",
    "optionAnswer" : "D",
    "answer" : "IOS中的数据持久化方式，基本上有以下四种：属性列表、对象归档、SQLite3和Core Data\n属性列表\n涉及到的主要类：NSUserDefaults，用于存储配置信息\nSQLite：用于存储查询需求较多的数据\nCoreData：用于规划应用中的对象，Core Data本质上是使用SQLite保存数据，但是它不需要编写任何SQL语句。\n对象归档：使要使用对象归档,对象必须实现NSCoding协议.大部分Object C对象都符合NSCoding协议,也可以在自定义对象中实现NSCoding协议，用基本对象类型定制的个性化缓存方案",
    "optionB" : "对象归档",
    "type" : "1",
    "optionA" : "属性列表",
    "question" : "iOS中的数据持久化方式"
  },
  {
    "ID" : "5629f9e0e4b05e6f47b0e9ad",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "@optional",
    "optionC" : "@private",
    "optionAnswer" : "D",
    "answer" : " @optional表示可选",
    "optionB" : "@protected",
    "type" : "1",
    "optionA" : "@public",
    "question" : "在OC中，类中成员变量的可见度(访问权限)不包括："
  },
  {
    "answer" : "鸵鸟策略、预防策略、避免策略、检测与解除死锁",
    "ID" : "5629f9e1e4b05e6f47b0ea37",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "死锁的处理"
  },
  {
    "ID" : "55b5a5cee4b0ef2b575583a1",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "单例",
    "optionC" : "协议",
    "optionAnswer" : "C",
    "answer" : "View和View之间可以通过：属性、delegate、单例、消息通知、Block传值",
    "optionB" : "Delegate",
    "type" : "1",
    "optionA" : "属性",
    "question" : "下列哪种方法不是View和View之间传值的"
  },
  {
    "answer" : "Block是可以获取其他函数局部变量的匿名函数，其不但方便开发，并且可以大幅提高应用的执行效率(多核心CPU可直接处理Block指令)\n[UIView transitionWithView:self.view\nduration:0.2\noptions:UIViewAnimationOptionTransitionFlipFromLeft\nanimations:^{ [[blueViewController view] removeFromSuperview]; [[self view] \ninsertSubview:yellowViewController.view atIndex:0]; }\ncompletion:NULL];",
    "ID" : "5602715ee4b043d0cb1d3a17",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "谈谈对Block 的理解?并写出一个使用Block执行UIVew动画?"
  },
  {
    "answer" : "使用MVC模式设计应用，其中Model层完成脱离界面，即在Model层，其是可运行在任何设备上，在controller层，根据iPhone与iPad(独有UISplitViewController)的不同特点选择不同的viewController对象。在View层，可根据现实要求，来设计，其中以xib文件设计时，其设置其为universal。",
    "ID" : "5629f9e1e4b05e6f47b0ea12",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "如何使用Xcode设计通用应用?"
  },
  {
    "ID" : "5629f9e0e4b05e6f47b0e9d8",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "2",
    "optionC" : "整型最大值",
    "optionAnswer" : "C",
    "answer" : "因为“123”为字符串常量，系统不会收回，也不会对其作引用计数，即使我们对name如何retain或release。都是打印-1或2137483647",
    "optionB" : "0",
    "type" : "1",
    "optionA" : "1",
    "question" : "写出下面程序段的输出结果：\nNSString * aString = [[NSString alloc] initWithString:@\"123\"]; \n[aString autorelease];\nNSMutableArray * arr = [NSMutableArray array];\n[arr addObject:aString];\nNSLog(@\"string = %lu\",[aString retainCount]);"
  },
  {
    "answer" : "viewDidLoad在view 从nib文件初始化时调用，loadView在controller的view为nil时调用。此方法在编程实现view时调用,view 控制器默认会注册memory warning notification,当view controller的任何view 没有用的时候，viewDidUnload会被调用，在这里实现将retain 的view release,如果是retain的IBOutlet view 属性则不要在这里release,IBOutlet会负责release 。",
    "ID" : "5602715de4b043d0cb1d39a4",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "ViewController 的 loadView, viewDidLoad,viewDidUnload 分别是在什么时候调用的？在自定义ViewController的时候这几个函数里面应该做什么工作？"
  },
  {
    "answer" : "frame指的是：该view在父view坐标系统中的位置和大小。(参照点是父亲的坐标系统)\n\nbounds指的是：该view在本身坐标系统中 的位置和大小。(参照点是本身坐标系统)",
    "ID" : "5629f9e1e4b05e6f47b0ea04",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "frame和bounds有什么不同?"
  },
  {
    "answer" : "Foundation 和 Application Kit 框架中的一些 类 只允 许创 建 单 件 对 象，即 这 些 类 在当前 进 程中的唯一 实 例。 举 例来 说 ，NSFileManager 和NSWorkspace 类 在使用时 都是基于 进 程 进 行 单 件 对 象的 实 例化。当向 这 些 类请 求 实 例的 时 候，它 们会向您 传递单 一 实 例的一个引用，如果 该实 例 还 不存在， 则 首先 进 行 实 例的分配 和初始化。 单 件 对 象充当控制中心的角色， 负责 指引或 协调类 的各种服 务 。如果 类 在概念上只有一个 实 例（比如\nNSWorkspace ），就 应该产 生 一个 单 件 实 例，而不是多个 实 例；如果将来某一天可能有多个 实 例，您可以使用 单 件 实 例机制，而不是工厂方法或函数。",
    "ID" : "5602715de4b043d0cb1d39d2",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "单件实例是什么"
  },
  {
    "answer" : "用途：\n\n1）NSString、NSArray、NSDictionary 等等经常使用copy关键字，是因为他们有对应的可变类型：NSMutableString、NSMutableArray、NSMutableDictionary；\n\n2）block也经常使用copy关键字，具体原因见官方文档：Objects Use Properties to Keep Track of Blocks：\n\nblock使用copy是从MRC遗留下来的“传统”,在MRC中,方法内部的block是在栈区的,使用copy可以把它放到堆区.在ARC中写不写都行：对于block使用copy还是strong效果是一样的，但写上copy也无伤大雅，还能时刻提醒我们：编译器自动对block进行了copy操作。",
    "ID" : "55f2e4eee4b0152a611431b8",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "怎么用 copy 关键字？"
  },
  {
    "answer" : "一共有三种可见级别：public,protected,private。默认的是protected。Public可见度很高，所有类可见。protected本类以及子类可见。private只有本类里的实例方法可以访问。",
    "ID" : "5629f9e0e4b05e6f47b0e9e2",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "实例变量有几种可见级别？分别描述下他们的可见范围，默认的可见级别是哪一种？"
  },
  {
    "ID" : "5629f9e0e4b05e6f47b0e9dc",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "4=1",
    "optionC" : "1=4",
    "optionAnswer" : "C",
    "answer" : "数组arr1中的元素为2 3  4\n数组arr2中的元素为1 1 1\n当数组arr2作为字典的key时，key都是一样的所以会后添加的value替换之前的value，所以dic2的打印结果为1=4",
    "optionB" : "2=1 3=1 4=1",
    "type" : "1",
    "optionA" : "1=2 1=3 1=4",
    "question" : "下面程序段的输出结果是什么：\nNSMutableDictionary * dic = [[NSMutableDictionary alloc] initWithObjectsAndKeys:@\"1\",@\"2\",@\"1\",@\"3\",@\"1\",@\"4\", nil];\nNSArray *arr1 = [[NSArray alloc] initWithArray:[dic allKeys]];\nNSArray *arr2 = [[NSArray alloc] initWithArray:[dic allValues]];\nNSMutableDictionary *dic2 = [[NSMutableDictionary alloc] initWithObjects:arr1 forKeys:arr2];\nNSLog(@\"%@\",dic2);"
  },
  {
    "ID" : "5629f9e0e4b05e6f47b0e9d0",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "@friendly",
    "optionC" : "@protected",
    "optionAnswer" : "C",
    "answer" : " @public是公开，都可以访问\n@private是私有的，本类访问\n@protected是保护，本类和子类可访问",
    "optionB" : "@private",
    "type" : "1",
    "optionA" : "@public",
    "question" : "Objective-C 语言中类的实例变量如果只可以被本类和其子类访问，需要下列哪个修饰符"
  },
  {
    "ID" : "55b5a5cee4b0ef2b57558373",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "使用动态运行时类型，所有的方法都是函数调用，所以很多编译时优化方法都用不到。",
    "optionC" : "支持运算符重载",
    "optionAnswer" : "D",
    "answer" : "OC是动态语言，不支持命名空间、多继承、和运算符重载。",
    "optionB" : "支持多重继承",
    "type" : "1",
    "optionA" : "支援命名空间",
    "question" : "下列属于OC语言特点的一项是？"
  },
  {
    "ID" : "55b5a5cde4b0ef2b57558334",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "isMemberOfClass",
    "optionC" : "responseToSelector",
    "optionAnswer" : "A",
    "answer" : "内省（Introspection）是面向对象语言和环境的一个强大特性，Objective-C和Cocoa在这个方面尤其的丰富。内省是对象揭示自己作为一个运行时对象的详细信息的一种能力。这些详细信息包括对象在继承树上的位置，对象是否遵循特定的协议，以及是否可以响应特定的消息。NSObject协议和类定义了很多内省方法，用于查询运行时信息，以便根据对象的特征进行识别。\n1、isKindOfClass:Class  检查对象是否是那个类或者其继承类实例化的对象\n2、isMemberOfClass:Class  检查对象是否是那个类但不包括继承类而实例化的对象\n3、respondToSelector:selector   检查对象是否包含这个方法\n4、conformsToProtocol:protocol    检查对象是否符合协议，是否实现了协议中所有的必选方法。",
    "optionB" : "isKindOfClass",
    "type" : "1",
    "optionA" : "init",
    "question" : "下面那个方法不属于NSObject的内省（Introspection）方法"
  },
  {
    "ID" : "55b5a5cde4b0ef2b57558325",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "图层动画（路径）",
    "optionC" : "NSTimer",
    "optionAnswer" : "B",
    "answer" : "B选项应该是线程，其他都可以移动。",
    "optionB" : "进程",
    "type" : "1",
    "optionA" : "beginAnimation",
    "question" : "下列不是让一个物体从界面中的一点运动到另外一点的是"
  },
  {
    "answer" : " -(void)touchesBegan:(NSSet*)touchedwithEvent:(UIEvent*)event;\n\n-(void)touchesMoved:(NSSet*)touched withEvent:(UIEvent*)event;\n\n-(void)touchesEnded:(NSSet*)touchedwithEvent:(UIEvent*)event;\n\n-(void)touchesCanceled:(NSSet*)touchedwithEvent:(UIEvent*)event;",
    "ID" : "5629f9e2e4b05e6f47b0ea56",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "有哪几种手势通知方法、写清楚方法名？"
  },
  {
    "answer" : "代理的目的是改变或传递控制链。允许一个类在某些特定时刻通知到其他类，而不需要获取到那些类的指针。可以减少框架复杂度。\n另外一点，代理可以理解为java中的回调监听机制的一种类似。",
    "ID" : "5602715ee4b043d0cb1d39fb",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "代理的作用?"
  },
  {
    "answer" : "“属性” (property)作为 Objective-C 的一项特性，主要的作用就在于封装对象中的数据。 Objective-C 对象通常会把其所需要的数据保存为各种实例变量。实例变量一般通过“存取方法”(access method)来访问。其中，“获取方法” (getter)用于读取变量值，而“设置方法” (setter)用于写入变量值。这个概念已经定型，并且经由“属性”这一特性而成为Objective-C 2.0的一部分。 而在正规的 Objective-C 编码风格中，存取方法有着严格的命名规范。 正因为有了这种严格的命名规范，所以 Objective-C 这门语言才能根据名称自动创建出存取方法。其实也可以把属性当做一种关键字，其表示:\n\n编译器会自动写出一套存取方法，用以访问给定类型中具有给定名称的变量。",
    "ID" : "55f2e4eee4b0152a611431bb",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "@property 的本质是什么？ivar、getter、setter 是如何生成并添加到这个类中的。"
  },
  {
    "ID" : "55b5a5cee4b0ef2b575583c3",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "NSInteger与int\/long等价",
    "optionC" : "NSIteger 自动返回最大的类型",
    "optionAnswer" : "D",
    "answer" : "32位系统NSInteger是一个int，即32位；但当时64位系统时，NSInteger便是64位的。",
    "optionB" : "NSInteger会识别当前操作系统的位数",
    "type" : "1",
    "optionA" : "NSInteger是一个封装",
    "question" : "下列说法错误的是"
  },
  {
    "ID" : "55b5a5cee4b0ef2b5755839c",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "  协议就相当于是C++中的纯虚基类，它只能定义函数并且只能由其他类来实现",
    "optionC" : "代理是一对一传递。",
    "optionAnswer" : "A",
    "answer" : "协议都有控制链(has-a)的关系，通知没有",
    "optionB" : "通知可以一对多，一条消息可以发送给多个消息接受者。",
    "type" : "1",
    "optionA" : "协议和通知都有控制链(has-a)的关系。",
    "question" : "下列说法不正确的是"
  },
  {
    "answer" : " - (void) setName:(NSString*) str\n{\n[str retain];\n[name release];\nname = str;\n}\n- (void)setName:(NSString *)str\n{\nid t = [str copy];\n[name release];\nname = t;\n}",
    "ID" : "5629f9e0e4b05e6f47b0e9ec",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "写一个setter方法用于完成@property (nonatomic,retain)NSString *name,写一个setter方法用于完成@property(nonatomic，copy)NSString *name"
  },
  {
    "answer" : "使用id<NSObject>来声明一个对象，相当于告诉编译我们并不知道这个对象的类型，但是它实现NSObject protocol。一个这种类型的指针，即可以用来指向NSObject*对象，也可以用来指向NSProxy*对象（NSProxy并不继承于NSObject），因为NSObject对象与NSProxy对象都是现了NSObject protocol。",
    "ID" : "56380f6600b0bf37d7820d34",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "id<NSObject>与NSObject＊的区别？"
  },
  {
    "ID" : "55b5a5cde4b0ef2b57558330",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "二叉树是线性结构\n",
    "optionC" : "线性链表是非线性结构",
    "optionAnswer" : "A",
    "answer" : "一般将数据结构分为两大类型：线性结构与非线性结构。线性表、栈与队列、线性链表都是线性结构，而二叉树是非线性结构。",
    "optionB" : "栈与队列是非线性结构",
    "type" : "1",
    "optionA" : "线性表是线性结构",
    "question" : "下列叙述中正确的是"
  },
  {
    "ID" : "55b5a5cee4b0ef2b5755839a",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "内存池",
    "optionC" : "MRC",
    "optionAnswer" : "B",
    "answer" : "iPhone不支持垃圾回收",
    "optionB" : "垃圾回收",
    "type" : "1",
    "optionA" : "ARC",
    "question" : "下列不属于iOS中内存管理方式的是"
  },
  {
    "ID" : "55b5a5cde4b0ef2b57558342",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "Block",
    "optionC" : "通告机制",
    "optionAnswer" : "B",
    "answer" : "iOS中回调机制：目标动作对、代理、通告机制、Block",
    "optionB" : "协议",
    "type" : "1",
    "optionA" : "代理",
    "question" : "下列不属于iOS中回调机制的是"
  },
  {
    "answer" : "访问了野指针，比如对一个已经释放的对象执行了release、访问已经释放对象的成员变量或者发消息。 死循环",
    "ID" : "55f2e4eee4b0152a611431d6",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "BAD_ACCESS在什么情况下出现？"
  },
  {
    "ID" : "55b5a5cee4b0ef2b5755838b",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "signed",
    "optionC" : "short",
    "optionAnswer" : "A",
    "answer" : "Objective-C中的限定词有：long、longlong、short、unsigned、signed。     const是C语言中得。",
    "optionB" : "long",
    "type" : "1",
    "optionA" : "const",
    "question" : "下列不属于Objective-C 中限定词的是"
  },
  {
    "ID" : "55b5a5cee4b0ef2b575583c7",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "生成并持有对象new",
    "optionC" : "废弃对象的方法:dealloc",
    "optionAnswer" : "A",
    "answer" : "持有对象的方法:retain",
    "optionB" : "释放对象的方法:release",
    "type" : "1",
    "optionA" : "生成对象的方法:retain",
    "question" : "下列说法错误的是"
  },
  {
    "ID" : "5629f9e0e4b05e6f47b0e9d3",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "iLa123",
    "optionC" : "iLaios",
    "optionAnswer" : "D",
    "answer" : "str为iLa,str2为123，所以newStr为iLa123",
    "optionB" : "iL123",
    "type" : "1",
    "optionA" : "iLanou",
    "question" : "读代码\nNSString * str =[[NSString alloc]initWithFormat:@\"%@\",@\"iLanou123ios\"];\nNSString * str1=[str substringToIndex:3];\nNSString * str2=[str substringWithRange:NSMakeRange(6, 3)];\nNSString * newStr=[str1 stringByAppendingString:str2];\nNSLog(@\"newStr=%@\",newStr);则newStr的值为："
  },
  {
    "ID" : "55b5a5cde4b0ef2b57558337",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "程序需要某些机制来进行事件和指令的翻译。这个机制就是目标-动作机制。",
    "optionC" : "动作是控件发送给目标的消息，或者从目标的角度看，它是目标为了响应动作而实现的方法",
    "optionAnswer" : "A",
    "answer" : "目标是动作消息的接收者",
    "optionB" : "一个控件，或者更为常见的是它的单元，以插座变量（参见\"插座变量\"部分） 的形式保有其动作消息的目标",
    "type" : "1",
    "optionA" : "目标是动作消息的发送者",
    "question" : "下列关于目标-动作机制错误的是"
  },
  {
    "ID" : "55b5a5cee4b0ef2b57558398",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "copy 表示赋值特性，setter方法将传入对象复制一份;会复制指针变量",
    "optionC" : "atomic表示多线程安全，一般使用nonatomic",
    "optionAnswer" : "D",
    "answer" : "copy 表示赋值特性，setter方法将传入对象复制一份;需要完全一份新的变量时",
    "optionB" : "readonly 是只读特性 只会生成getter方法 不会生成setter方法",
    "type" : "1",
    "optionA" : "readwrite 是可读可写特性;需要生成getter方法和setter方法",
    "question" : "下列说法错误的是"
  },
  {
    "ID" : "55b5a5cee4b0ef2b575583a0",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "以上都是",
    "optionC" : "多态",
    "optionAnswer" : "D",
    "answer" : "面向对象的三大特征：封装、继承、多态。",
    "optionB" : "继承",
    "type" : "1",
    "optionA" : "封装",
    "question" : "下面是面向对象的特征的是"
  },
  {
    "ID" : "55b5a5cde4b0ef2b5755833a",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "将一个一个类实例组合起来",
    "optionC" : "向对象添加非正式协议",
    "optionAnswer" : "D",
    "answer" : "D选项是复合",
    "optionB" : "创建对私有方法的前向引用",
    "type" : "1",
    "optionA" : "将类的实现分散到多个不同文件或多个不同框架中",
    "question" : "下列不属于类别的主要作用的是"
  },
  {
    "ID" : "55b5a5cde4b0ef2b5755835c",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "NSTimer可手动添加到新建的NSRunLoop中",
    "optionC" : "线程是默认启动run loop的",
    "optionAnswer" : "C",
    "answer" : "只有主线程默认启动run loop，子线程等需要手动启动，且在特定的场景下需要启动：需要使用NSTimer等。",
    "optionB" : "有3类对象可以被run loop监控：sources，timers，observers",
    "type" : "1",
    "optionA" : "Runloop并不是由系统自动控制的",
    "question" : "NSRunLoop的以下描述错误的是"
  },
  {
    "answer" : "extern\n     可以用引用头文件的方式，也可以用extern关键字，如果用引用头文件方式来引用某个在头文件中声明的全局变理，假定你将那个变写错了，那么在编译期间 会报错，如果你用extern方式引用时，假定你犯了同样的错误，那么在编译期间不会报错，而在连接期间报错。",
    "ID" : "5602715ee4b043d0cb1d39e4",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "如何引用一个已经定义过的全局变量？"
  },
  {
    "answer" : "1). 基于触摸的事件 ;  2). 基于值的事件 ;  3).基于编辑的事件。",
    "ID" : "5629f9e1e4b05e6f47b0ea4c",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "控件主要响应3种事件"
  },
  {
    "answer" : "因为编译后的类已经注册在 runtime 中，类结构体中的 objc_ivar_list 实例变量的链表 和 instance_size 实例变量的内存大小已经确定，同时runtime 会调用 class_setIvarLayout 或 class_setWeakIvarLayout 来处理 strong weak 引用。所以不能向存在的类中添加实例变量， 运行时创建的类是可以添加实例变量，调用 class_addIvar 函数。但是得在调用 objc_allocateClassPair 之后，objc_registerClassPair 之前，原因同上。",
    "ID" : "a3ffac40ea7a11e5b65200163e0021c8",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "能否向编译后得到的类中增加实例变量？能否向运行时创建的类中添加实例变量？为什么？"
  },
  {
    "ID" : "55b5a5cfe4b0ef2b575583e3",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "因为obj0被赋值，所以原先持有的对对象A的强引用失效。",
    "optionC" : "此时obj0持有obj1赋值的对象B的强引用。",
    "optionAnswer" : "A",
    "answer" : "此时，持有对象B的强引用的变量为obj0和obj1。",
    "optionB" : "对象A的所有者不存在，因此对象A被废弃。",
    "type" : "1",
    "optionA" : "此时，只有obj0持有对象B的强引用",
    "question" : "id __strong obj0 = [[NSObject alloc] init]; \/*obj0持有对象A的强引用*\/\nid __strong obj1 = [[NSObject alloc] init]; \/*obj1持有对象B的强引用*\/\nobj0 = obj1下列说法错误的是\n"
  },
  {
    "answer" : "model 主要是用来指定时间在运行循环中的优先级的 苹果公开提供的 Mode 有两个： kCFRunLoopDefaultMode kCFRunLoopCommonModes 如果我们把一个NSTimer对象以kCFRunLoopDefaultMode添加到主运行循环中的时候,当一直有用户事件处理的时候,NSTimer将不再被调度 如果我们把一个NSTimer对象以kCFRunLoopCommonModes添加到主运行循环中的时候,当一直有用户事件处理的时候,NSTimer还能正常的调度,互不影响.",
    "ID" : "03a9b58aea7d11e5b65200163e0021c8",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "runloop的mode作用是什么？"
  },
  {
    "ID" : "5602715de4b043d0cb1d3990",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "#import 和 #include 的使用效果完全相同 ",
    "optionC" : "#import 只用于引用 Objective-C的文件， #include 只用于引用C和C++的文件 ",
    "optionAnswer" : "A",
    "answer" : "#import 确定一个文件只能被导入一次，这使你在递归包含中不会出现问题 @class一般用于头文件中需要声明该类的某个实例变量的时候用到，在m文件中还是需要使用#import @class就是告诉编译器有这么一个类，至于类的定义是啥不知道 @class一般用于头文件中需要声明该类的某个实例变量的时候用到，在m文件中还是需要使用#import ＃import<> 跟 #import\"\"又什么区别？“”的意思是自己创建的文件，用这个首先会在当前的目录中寻找，如果找不到就到其他的位置寻找，“”和<>是相对的一个是自己创建的文件一个是系统的文件",
    "optionB" : "#import 和 #include 不可以混合使用 ",
    "type" : "1",
    "optionA" : "#import 是 #include 的替代指令，防止重复引用 ",
    "question" : "下面关于#import和#include的描述正确的是 "
  },
  {
    "answer" : "Objective-C的内存管理主要有三种方式ARC(自动内存计数)、手动内存计数、内存池。\n1. (Garbage Collection)自动内存计数：这种方式和java类似，在你的程序的执行过程中。始终有一个高人在背后准确地帮你收拾垃圾，你不用考虑它什么时候开始工作，怎样工作。你只需要明白，我申请了一段内存空间，当我不再使用从而这段内存成为垃圾的时候，我就彻底的把它忘记掉，反正那个高人会帮我收拾垃圾。遗憾的是，那个高人需要消耗一定的资源，在携带设备里面，资源是紧俏商品所以iPhone不支持这个功能。所以“Garbage Collection”不是本入门指南的范围，对“Garbage Collection”内部机制感兴趣的同学可以参考一些其他的资料，不过说老实话“Garbage Collection”不大适合适初学者研究。\n解决: 通过alloc – initial方式创建的, 创建后引用计数+1,此后每retain一次引用计数+1,那么在程序中做相应次数的release就好了.\n2. (Reference \nCounted)手动内存计数：就是说，从一段内存被申请之后，就存在一个变量用于保存这段内存被使用的次数，我们暂时把它称为计数器，当计数器变为0的时候，那么就是释放这段内存的时候。比如说，当在程序A里面一段内存被成功申请完成之后，那么这个计数器就从0变成1(我们把这个过程叫做alloc)，然后程序B也需要使用这个内存，那么计数器就从1变成了2(我们把这个过程叫做retain)。紧接着程序A不再需要这段内存了，那么程序A就把这个计数器减1(我们把这个过程叫做release);程序B也不再需要这段内存的时候，那么也把计数器减1(这个过程还是release)。当系统(也就是Foundation)发现这个计数器变成了0，那么就会调用内存回收程序把这段内存回收(我们把这个过程叫做dealloc)。顺便提一句，如果没有Foundation，那么维护计数器，释放内存等等工作需要你手工来完成。\n解决:一般是由类的静态方法创建的, 函数名中不会出现alloc或init字样, 如[NSString string]和[NSArray \narrayWithObject:], 创建后引用计数+0, 在函数出栈后释放, 即相当于一个栈上的局部变量. \n当然也可以通过retain延长对象的生存期.\n3. (NSAutoRealeasePool)内存池：可以通过创建和释放内存池控制内存申请和回收的时机.\n解决:是由autorelease加入系统内存池, 内存池是可以嵌套的, 每个内存池都需要有一个创建释放对, 就像main函数中写的一样. 使用也很简单, \n比如[[[NSString alloc]initialWithFormat:@”Hey you!”] autorelease], \n即将一个NSString对象加入到最内层的系统内存池, 当我们释放这个内存池时, 其中的对象都会被释放.",
    "ID" : "5602715ee4b043d0cb1d39ef",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "Objective-C如何对内存管理的,说说你的看法和解决方法?"
  },
  {
    "answer" : "select＊fromcitys where postcode＝436001 and province＝’湖％’；",
    "ID" : "5602715de4b043d0cb1d3997",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : ".使用sql语句查询出省名以湖开头，邮编为436001所在的市区？（表名及字段名自定义）"
  },
  {
    "ID" : "55b5a5cee4b0ef2b57558390",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "UIWindow",
    "optionC" : "UIApplication",
    "optionAnswer" : "A",
    "answer" : "Cocoa中常见的核心类：根类（NSObject）、应用程序类（UIApplication）、窗口类（UIWindow）、视图（UIView）",
    "optionB" : "NSObject",
    "type" : "1",
    "optionA" : "UITableView",
    "question" : "下列不属于Cocoa核心类的是"
  },
  {
    "ID" : "55b5a5cde4b0ef2b5755836b",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "“-dynamic”",
    "optionC" : "“-fobjc-arc ”",
    "optionAnswer" : "C",
    "answer" : "不同于XCode4可以在创建工程时选择关闭ARC，XCode5以后在创建的工程是默认开启ARC，没有可以关闭ARC的选项。\n如果需要对特定文件开启或关闭ARC，可以在工程选项中选择Targets -> Compile Phases -> Compile Sources，在里面找到对应文件，添加flag:\n打开ARC：-fobjc-arc\n关闭ARC：-fno-objc-arc",
    "optionB" : "“-fno-objc-arc”",
    "type" : "1",
    "optionA" : "“ -shared ”",
    "question" : "需要在手动管理内存分配和释放的Xcode项目中引入和编译用ARC风格编写的文件，需要在文件的Compiler Flags上添加参数： "
  },
  {
    "ID" : "55b5a5cde4b0ef2b5755832b",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "有私有方法，没有私有变量",
    "optionC" : "没有私有方法，有私有变量 ",
    "optionAnswer" : "C",
    "answer" : "Objective-C没有私有方法，有私有变量",
    "optionB" : "没有私有方法也没有私有变量 ",
    "type" : "1",
    "optionA" : "有私有方法和私有变量 ",
    "question" : "Objective-C有私有方法吗？有私有变量吗？"
  },
  {
    "ID" : "55b5a5cee4b0ef2b57558396",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "34",
    "optionC" : "14",
    "optionAnswer" : "A",
    "answer" : "UINavigationController主要是由Navigation bar  、Navigation View 、Navigation toobar 组成",
    "optionB" : "124",
    "type" : "1",
    "optionA" : "123",
    "question" : " UINavigationController是由下列哪些组成的：\n （1）.Navigation bar  \n （2）.Navigation View \n （3）.Navigation toobar \n （4）.Navigation button"
  },
  {
    "answer" : "Objective-C是对C语言的扩展，block的实现是基于指针和函数指针。\n\n从计算语言的发展，最早的goto，高级语言的指针，到面向对象语言的block，从机器的思维，一步步接近人的思维，以方便开发人员更为高效、直接的描述出现实的逻辑(需求)。\n\n使用实例\n\ncocoaTouch框架下动画效果的Block的调用\n\n使用typed声明block\ntypedef void(^didFinishBlock) (NSObject *ob);\n这就声明了一个didFinishBlock类型的block，\n然后便可用\n@property (nonatomic,copy) didFinishBlock finishBlock;\n声明一个blokc对象，注意对象属性设置为copy，接到block 参数时，便会自动复制一份。\n\n__block是一种特殊类型，\n\n使用该关键字声明的局部变",
    "ID" : "5629f9e1e4b05e6f47b0ea22",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "block 实现原理"
  },
  {
    "answer" : "1).是的。一个例子是只读的状态寄存器。它是volatile因为它可能被意想不到地改变。它是const因为程序不应该试图去修改它。\n\n2).是的。尽管这并不很常见。一个例子是当一个中服务子程序修该一个指向一个buffer的指针时。",
    "ID" : "5629f9e1e4b05e6f47b0ea30",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "一个参数既可以是const还可以是volatile吗？ 一个指针可以是volatile 吗？解释为什么。"
  },
  {
    "ID" : "5629f9e0e4b05e6f47b0e9d2",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "（4）",
    "optionC" : "（3）",
    "optionAnswer" : "C",
    "answer" : "不能向数组中加入一个对象",
    "optionB" : "（2）",
    "type" : "1",
    "optionA" : "（1）",
    "question" : "现要求声明一个集合，并将字符串添加到集合中，编写了如下代码，其中错误的是第几行：\nNSString * aString = [[NSString alloc] initWithString:@\"iLanou\"]; \n（1）[aString autorelease]; \n（2）NSArray * arr = [NSArray array]; \n（3）[arr addObject:aString]; \n（4）NSLog(@\"string = %lu\",[aString retainCount]);"
  },
  {
    "ID" : "5629f9e0e4b05e6f47b0e9c7",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "strong",
    "optionC" : "atomic",
    "optionAnswer" : "A",
    "answer" : "alloc是初始化对象时使用",
    "optionB" : "retain",
    "type" : "1",
    "optionA" : "alloc",
    "question" : "下列哪个选项不能作为property的可选属性："
  },
  {
    "ID" : "55b5a5cde4b0ef2b5755835a",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "NSString *str=@\"hi\";NSString *str2=[str substringFromIndex:3];",
    "optionC" : "NSString *str=nil;NSString *str2=[str substringFromIndex:3];",
    "optionAnswer" : "C",
    "answer" : " OC可以给一个nil对象发送消息",
    "optionB" : "NSDictionary *dict=@{@\"key\":nil};",
    "type" : "1",
    "optionA" : "NSArray *array=@[1，2，3];NSNumber * number=array[3];",
    "question" : "以下哪一段代码不会抛出异常"
  },
  {
    "ID" : "55b5a5cee4b0ef2b575583c8",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "NSZone对内存分配的区域本身进行多重化管理，根据适用对象的目的、对象的大小分配内存，从而提高了内存管理的效率。",
    "optionC" : "NSZone是为了防止内存碎片化而引入的结构",
    "optionAnswer" : "B",
    "answer" : "OC的内存管理方法不包括在该语言中，而是Cocoa框架中Foundation框架类库的NSObject类担负内存管理的职责。",
    "optionB" : "OC的内存管理方法包括在该语言中",
    "type" : "1",
    "optionA" : "现在运行时系统已简单地忽略了区域的概念，因为运行时系统中的内存管理本身已极具效率，使用区域来管理内存反而会引起内存使用效率低下以及源代码复杂化等问题。",
    "question" : "下列说法错误的是"
  },
  {
    "answer" : "MVC是模型、试图、控制开发模式，对于iOS SDK，所有的View都是视图层的，它应该独立于模型层，由视图控制层来控制。所有的用户数据都是模型层，它应该独立于视图。所有的ViewController都是控制层，由它负责控制视图，访问模型数据。",
    "ID" : "5602715ee4b043d0cb1d39f5",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "描述一下iOS SDK中如何实现MVC的开发模式"
  },
  {
    "answer" : "默认情况下，在block中访问的外部变量是复制过去的，即：写操作不对原变量生效。但是你可以加上__block来让其写操作生效",
    "ID" : "55f2e4eee4b0152a611431d9",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "在block内如何修改block外部变量？"
  },
  {
    "ID" : "55b5a5cde4b0ef2b57558370",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "单例模式的主要作用是保证在程序中，一个类只有一个实例存在。",
    "optionC" : "如果某个类需要不仅提供单例访问接口，还需要创建一个新的对象，那么一定要重写allocWithZone:方法。",
    "optionAnswer" : "C",
    "answer" : "重写allocWithZone：方法将会控制内存的分配，永远只分配一次存储空间，从而无法再创建新对象。",
    "optionB" : "GCD中的dispatch_once方法就可以确保单例只被实例化一次，并且是线程安全的。",
    "type" : "1",
    "optionA" : "使用@synchronized创建互斥锁的方法并不能解决单例的线程安全问题。",
    "question" : "下列有关单例的说法错误的一项是？"
  },
  {
    "ID" : "55b5a5cee4b0ef2b575583b0",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "编译错误",
    "optionC" : "val = 2",
    "optionAnswer" : "D",
    "answer" : "在block语法的表达式中将值赋给在block语法外声明的自动变量，需要在该自动变量上附加__block说明符。\n",
    "optionB" : "val = 1",
    "type" : "1",
    "optionA" : "val = 0",
    "question" : "请选择下列代码执行的结果：\nint main(){\n int val = 0;\n void (^blk)(void) = ^{val=1;};\n val = 2;\n blk();\n printf(“val = %d\\n”,val);\n return 0;\n}\n"
  },
  {
    "ID" : "5602715de4b043d0cb1d3983",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "32",
    "optionC" : "16",
    "optionAnswer" : "C",
    "answer" : "如果从第一层算起第i层最多有  max(i)=2^(i-1)个节点",
    "optionB" : "8",
    "type" : "1",
    "optionA" : "2",
    "question" : "在一个二叉树上，第5层最多可以有的节点数是"
  },
  {
    "answer" : "因为视图已经对它有一个强引用了",
    "ID" : "84828d7cea8111e5b65200163e0021c8",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "IBOutlet连出来的视图属性为什么可以被设置成weak?"
  },
  {
    "ID" : "5629f9e0e4b05e6f47b0e9c8",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : "指针",
    "optionC" : "结构体",
    "optionAnswer" : "C",
    "answer" : "结构体，包含location和length",
    "optionB" : "字典",
    "type" : "1",
    "optionA" : "数组",
    "question" : "NSRange是什么数据类型："
  },
  {
    "answer" : "1. UIView 是 iOS 系统中界面元素的基础，所有的界面元素都是继承自它。它本身完全是由 CoreAnimation 来实现的。它真正的绘图部分，是由一个 CALayer 类来管理。 UIView 本身更像是一个 CALayer 的管理器，访问它的跟绘图和跟坐标有关的属性。\n\n2. UIView 有个重要属性 layer ，可以返回它的主 CALayer 实例。\n\n3. UIView 的 CALayer 类似 UIView 的子 View 树形结构，也可以向它的 layer 上添加子layer ，来完成某些特殊的表示。即 CALayer 层是可以嵌套的。\n\n4. UIView 的 layer 树形在系统内部，被维护着三份 copy 。分别是逻辑树，这里是代码可以操纵的；动画树，是一个中间层，系统就在这一层上更改属性，进行各种渲染操作；显示树，其内容就是当前正被显示在屏幕上得内容。\n\n5. 动画的运作：对 UIView 的 subLayer （非主 Layer ）属性进行更改，系统将自动进行动画生成，动画持续时间的缺省值似乎是 0.5 秒。\n\n6. 坐标系统： CALayer 的坐标系统比 UIView 多了一个 anchorPoint 属性，使用CGPoint 结构表示，值域是 0~1 ，是个比例值。这个点是各种图形变换的坐标原点，同时会更改 layer 的 position 的位置，它的缺省值是 {0.5,0.5} ，即在 layer 的中央。\n\n7. 渲染：当更新层，改变不能立即显示在屏幕上。当所有的层都准备好时，可以调用setNeedsDisplay 方法来重绘显示。\n\n8. 变换：要在一个层中添加一个 3D 或仿射变换，可以分别设置层的 transform 或affineTransform 属性。\n\n9. 变形： Quartz Core 的渲染能力，使二维图像可以被自由操纵，就好像是三维的。图像可以在一个三维坐标系中以任意角度被旋转，缩放和倾斜。 CATransform3D 的一套方法提供了一些魔术般的变换效果。",
    "ID" : "5602715de4b043d0cb1d39b0",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "UIView与CLayer有什么区别"
  },
  {
    "answer" : "Profile-> Instruments ->Time Profiler",
    "ID" : "5629f9e0e4b05e6f47b0e9f4",
    "typeID" : "549936f7e4b06783458bde67",
    "type" : "2",
    "question" : "如何对iOS设备进行性能测试?"
  },
  {
    "ID" : "5629f9dfe4b05e6f47b0e9a1",
    "typeID" : "549936f7e4b06783458bde67",
    "optionD" : " +(int)compareWithNumberForAscendSort:(Student*)otherStudent",
    "optionC" : "- (BOOL))compareWithNumberForAscendSort:(Student*)otherStudent",
    "optionAnswer" : "A",
    "answer" : "应该是返回枚举值的实例方法",
    "optionB" : "-(NSInteger)compareWithNumberForAscendSort:(Student*)otherStudent",
    "type" : "1",
    "optionA" : "-(NSComparisonResult)compareWithNumberForAscendSort:(Student*)otherStudent",
    "question" : "声明一个方法：提供Student对象数组按照学号升序排列的判断条件："
  },{"ID":"1377","typeID":"10","question":"\u4e24\u4e2aAPP\u4e4b\u95f4\u5982\u4f55\u4e92\u8c03\u4f20\u503c\uff1f","answer":"\u4e24\u4e2aAPP\u4e4b\u95f4\u7684\u8df3\u8f6c\u662f\u901a\u8fc7[[UIApplication sharedApplication] openURL:url]\u8fd9\u79cd\u65b9\u5f0f\u6765\u5b9e\u73b0\u7684\u3002\r\n1.\u9996\u5148\u8bbe\u7f6e\u7b2c\u4e00\u4e2aAPP\u7684url\u5730\u5740\r\n2.\u63a5\u7740\u8bbe\u7f6e\u7b2c\u4e8c\u4e2aAPP\u7684url\u5730\u5740\r\n3.\u8df3\u8f6c\u4ee3\u7801\uff1a\r\nNSString *urlString = [NSString stringWithFormat:@\"AppJumpSecond:\/\/%@\",textField.text]; [[UIApplication sharedApplication] openURL:[NSURL URLWithString:urlString]];\r\n\u4f8b\u5982\uff1a\u5c06textField\u7684\u6587\u5b57\u4e5f\u4f20\u8fc7\u53bb\uff0c\u540c\u6837\u7684\uff0c\u5728\u7b2c\u4e8c\u4e2a\u9875\u9762\u4e5f\u662f\u5982\u6b64\r\nNSString *urlString = [NSString stringWithFormat:@\"AppJumpFirst:\/\/%@\",textField.text]; \r\n[[UIApplication sharedApplication] openURL:[NSURL URLWithString:urlString]];\r\n4.\u5904\u7406\u4f20\u8fc7\u53bb\u7684\u6570\u636e\uff0c\u4f8b\u5982\u4f20\u4e86textField\u7684\u6570\u636e\uff0c\u63a5\u6536\u65f6\u5728AppDelegate\u7684\r\n- (BOOL)application:(UIApplication *)application openURL:(NSURL *)url sourceApplication:(NSString *)sourceApplication annotation:(id)annotation\u65b9\u6cd5\u91cc\u3002\r\n\u5728AppDelegate\u91cc\u8bbe\u7f6e\u5c5e\u6027\r\n@property (nonatomic, strong) RootViewController *rvc;\r\n\u5728didFinishLaunchingWithOptions\u65b9\u6cd5\u91cc\u6dfb\u52a0\r\nself.rvc = [[RootViewController alloc] init]; \r\nUINavigationController *nc = [[UINavigationController alloc] initWithRootViewController:self.rvc]; \r\nself.window.rootViewController = nc;\r\n\u6dfb\u52a0\u4ee3\u7801\u5757\r\n- (BOOL)application:(UIApplication *)application openURL:(NSURL *)url sourceApplication:(NSString *)sourceApplication annotation:(id)annotation {\r\n self.rvc.textField.text = [[url host]  stringByReplacingPercentEscapesUsingEncoding:NSUTF8StringEncoding]; \r\nreturn YES; \r\n}\r\n\u4f7f\u5f97textField\u663e\u793a\u53e6\u4e00\u4e2a\u9875\u9762\u4f20\u8fc7\u6765\u7684\u6570\u636e\u3002"},{"ID":"1365","typeID":"10","question":"\u5982\u4f55\u7528objective-c \u5b9e\u73b0\u5e38\u7528\u7b97\u6cd5\uff08\u5192\u6ce1\u3001\u9009\u62e9\u3001\u5feb\u901f\u3001\u63d2\u5165\uff09\uff1f","answer":"\u524d\u7f6e\u6761\u4ef6\uff1a\r\n- (void)initArr\r\n{  \r\n    for (int i = 0; i < arr.count; i++) {  \r\n        for (int j = 0; j < arr.count - i - 1;j++) {  \r\n            if ([arr[j+1]integerValue] < [arr[j] integerValue]) {  \r\n                int temp = [arr[j] integerValue];  \r\n                arr[j] = arr[j + 1];  \r\n                arr[j + 1] = [NSNumber numberWithInt:temp];  \r\n            }  \r\n        }  \r\n    }  \r\n    NSLog(@\"\u5192\u6ce1\u6392\u5e8f\u540e\uff1a%@\",arr);  \r\n} \r\n\r\n\r\n\u4e00.\u5192\u6ce1\u6392\u5e8f\r\n- (void)sort:(NSMutableArray *)arr  \r\n{  \r\n    for (int i = 0; i < arr.count; i++) {  \r\n        for (int j = 0; j < arr.count - i - 1;j++) {  \r\n            if ([arr[j+1]integerValue] < [arr[j] integerValue]) {  \r\n                int temp = [arr[j] integerValue];  \r\n                arr[j] = arr[j + 1];  \r\n                arr[j + 1] = [NSNumber numberWithInt:temp];  \r\n            }  \r\n        }  \r\n    }  \r\n    NSLog(@\"\u5192\u6ce1\u6392\u5e8f\u540e\uff1a%@\",arr);  \r\n}  \r\n\u4e8c.\u9009\u62e9\u6392\u5e8f\r\n- (void)sort:(NSMutableArray *)arr  \r\n{  \r\n    for (int i = 0; i < arr.count; i ++) {  \r\n        for (int j = i + 1; j < arr.count; j ++) {  \r\n            if ([arr[i] integerValue] > [arr[j] integerValue]) {  \r\n                int temp = [arr[i] integerValue];  \r\n                arr[i] = arr[j];  \r\n                arr[j] = [NSNumber numberWithInt:temp];  \r\n            }  \r\n        }  \r\n    }  \r\n      \r\n    NSLog(@\"\u9009\u62e9\u6392\u5e8f\u540e\uff1a%@\",arr);  \r\n}  \r\n\r\n\u4e09.\u5feb\u901f\u6392\u5e8f\r\n- (void)quickSort:(NSMutableArray *)arr leftIndex:(int)left rightIndex:(int)right  \r\n{  \r\n    if (left < right) {  \r\n        int temp = [self getMiddleIndex:arr leftIndex:left rightIndex:right];  \r\n        [self quickSort:arr leftIndex:left rightIndex:temp - 1];  \r\n        [self quickSort:arr leftIndex:temp + 1 rightIndex:right];  \r\n    }  \r\n}  \r\n  \r\n- (int)getMiddleIndex:(NSMutableArray *)arr leftIndex:(int)left rightIndex:(int)right  \r\n{  \r\n    int tempValue = [arr[left] integerValue];  \r\n    while (left < right) {  \r\n        while (left < right && tempValue <= [arr[right] integerValue]) {  \r\n            right --;  \r\n        }  \r\n        if (left < right) {  \r\n            arr[left] = arr[right];  \r\n        }  \r\n          \r\n        while (left < right && [arr[left] integerValue] <= tempValue) {  \r\n            left ++;  \r\n        }  \r\n        if (left < right) {  \r\n            arr[right] = arr[left];  \r\n        }  \r\n    }  \r\n    arr[left] = [NSNumber numberWithInt:tempValue];  \r\n    return left;  \r\n}  \r\n\r\n\u56db.\u63d2\u5165\u6392\u5e8f\r\n- (void)sort:(NSMutableArray *)arr  \r\n{  \r\n    for (int i = 1; i < arr.count; i ++) {  \r\n        int temp = [arr[i] integerValue];  \r\n          \r\n        for (int j = i - 1; j >= 0 && temp < [arr[j] integerValue]; j --) {  \r\n            arr[j + 1] = arr[j];  \r\n             arr[j] = [NSNumber numberWithInt:temp];  \r\n        }  \r\n         \r\n          \r\n    }  \r\n    NSLog(@\"\u63d2\u5165\u6392\u5e8f\u540e\uff1a%@\",arr);  \r\n}  "},{"ID":"1364","typeID":"10","question":"SDWebImage\u5185\u90e8\u5b9e\u73b0\u8fc7\u7a0b\u662f\u4ec0\u4e48\uff1f","answer":"1.\u5165\u53e3 setImageWithURL:placeholderImage:options:\u4f1a\u5148\u628a placeholderImage \u663e\u793a\uff0c\u7136\u540e SDWebImageManager \u6839\u636e URL \u5f00\u59cb\u5904\u7406\u56fe\u7247\u3002\r\n\r\n2.\u8fdb\u5165 SDWebImageManager-downloadWithURL:delegate:options:userInfo:\uff0c\u4ea4\u7ed9 SDImageCache \u4ece\u7f13\u5b58\u67e5\u627e\u56fe\u7247\u662f\u5426\u5df2\u7ecf\u4e0b\u8f7d queryDiskCacheForKey:delegate:userInfo:.\r\n\r\n3.\u5148\u4ece\u5185\u5b58\u56fe\u7247\u7f13\u5b58\u67e5\u627e\u662f\u5426\u6709\u56fe\u7247\uff0c\u5982\u679c\u5185\u5b58\u4e2d\u5df2\u7ecf\u6709\u56fe\u7247\u7f13\u5b58\uff0cSDImageCacheDelegate \u56de\u8c03 imageCache:didFindImage:forKey:userInfo: \u5230 SDWebImageManager\u3002\r\n\r\n4.SDWebImageManagerDelegate \u56de\u8c03 webImageManager:didFinishWithImage:\u5230 UIImageView+WebCache \u7b49\u524d\u7aef\u5c55\u793a\u56fe\u7247\u3002\r\n\r\n5.\u5982\u679c\u5185\u5b58\u7f13\u5b58\u4e2d\u6ca1\u6709\uff0c\u751f\u6210 NSInvocationOperation \u6dfb\u52a0\u5230\u961f\u5217\u5f00\u59cb\u4ece\u786c\u76d8\u67e5\u627e\u56fe\u7247\u662f\u5426\u5df2\u7ecf\u7f13\u5b58\u3002\r\n\r\n6.\u6839\u636e URLKey \u5728\u786c\u76d8\u7f13\u5b58\u76ee\u5f55\u4e0b\u5c1d\u8bd5\u8bfb\u53d6\u56fe\u7247\u6587\u4ef6\u3002\u8fd9\u4e00\u6b65\u662f\u5728 NSOperation \u8fdb\u884c\u7684\u64cd\u4f5c\uff0c\u6240\u4ee5\u56de\u4e3b\u7ebf\u7a0b\u8fdb\u884c\u7ed3\u679c\u56de\u8c03 notifyDelegate:\u3002\r\n\r\n7.\u5982\u679c\u4e0a\u4e00\u64cd\u4f5c\u4ece\u786c\u76d8\u8bfb\u53d6\u5230\u4e86\u56fe\u7247\uff0c\u5c06\u56fe\u7247\u6dfb\u52a0\u5230\u5185\u5b58\u7f13\u5b58\u4e2d\uff08\u5982\u679c\u7a7a\u95f2\u5185\u5b58\u8fc7\u5c0f\uff0c\u4f1a\u5148\u6e05\u7a7a\u5185\u5b58\u7f13\u5b58\uff09\u3002SDImageCacheDelegate \u56de\u8c03 imageCache:didFindImage:forKey:userInfo:\u3002\u8fdb\u800c\u56de\u8c03\u5c55\u793a\u56fe\u7247\u3002\r\n\r\n8.\u5982\u679c\u4ece\u786c\u76d8\u7f13\u5b58\u76ee\u5f55\u8bfb\u53d6\u4e0d\u5230\u56fe\u7247\uff0c\u8bf4\u660e\u6240\u6709\u7f13\u5b58\u90fd\u4e0d\u5b58\u5728\u8be5\u56fe\u7247\uff0c\u9700\u8981\u4e0b\u8f7d\u56fe\u7247\uff0c\u56de\u8c03 imageCache:didNotFindImageForKey:userInfo:\u3002\r\n\r\n9.\u5171\u4eab\u6216\u91cd\u65b0\u751f\u6210\u4e00\u4e2a\u4e0b\u8f7d\u5668 SDWebImageDownloader \u5f00\u59cb\u4e0b\u8f7d\u56fe\u7247\u3002\r\n\r\n10.\u56fe\u7247\u4e0b\u8f7d\u7531 NSURLConnection \u6765\u505a\uff0c\u5b9e\u73b0\u76f8\u5173 delegate \u6765\u5224\u65ad\u56fe\u7247\u4e0b\u8f7d\u4e2d\u3001\u4e0b\u8f7d\u5b8c\u6210\u548c\u4e0b\u8f7d\u5931\u8d25\u3002\r\n\r\n11.connection:didReceiveData:\u4e2d\u5229\u7528 ImageIO \u505a\u4e86\u6309\u56fe\u7247\u4e0b\u8f7d\u8fdb\u5ea6\u52a0\u8f7d\u6548\u679c\u3002\r\n\r\n12.connectionDidFinishLoading:\u6570\u636e\u4e0b\u8f7d\u5b8c\u6210\u540e\u4ea4\u7ed9 SDWebImageDecoder \u505a\u56fe\u7247\u89e3\u7801\u5904\u7406\u3002\r\n\r\n13.\u56fe\u7247\u89e3\u7801\u5904\u7406\u5728\u4e00\u4e2a NSOperationQueue \u5b8c\u6210\uff0c\u4e0d\u4f1a\u62d6\u6162\u4e3b\u7ebf\u7a0b UI\u3002\u5982\u679c\u6709\u9700\u8981\u5bf9\u4e0b\u8f7d\u7684\u56fe\u7247\u8fdb\u884c\u4e8c\u6b21\u5904\u7406\uff0c\u6700\u597d\u4e5f\u5728\u8fd9\u91cc\u5b8c\u6210\uff0c\u6548\u7387\u4f1a\u597d\u5f88\u591a\u3002\r\n\r\n14.\u5728\u4e3b\u7ebf\u7a0b notifyDelegateOnMainThreadWithInfo: \u5ba3\u544a\u89e3\u7801\u5b8c\u6210\uff0cimageDecoder:didFinishDecodingImage:userInfo: \u56de\u8c03\u7ed9 SDWebImageDownloader\u3002\r\n\r\n15.imageDownloader:didFinishWithImage: \u56de\u8c03\u7ed9 SDWebImageManager \u544a\u77e5\u56fe\u7247\u4e0b\u8f7d\u5b8c\u6210\u3002\r\n\r\n16.\u901a\u77e5\u6240\u6709\u7684 downloadDelegates \u4e0b\u8f7d\u5b8c\u6210\uff0c\u56de\u8c03\u7ed9\u9700\u8981\u7684\u5730\u65b9\u5c55\u793a\u56fe\u7247\u3002\r\n\r\n17.\u5c06\u56fe\u7247\u4fdd\u5b58\u5230 SDImageCache \u4e2d\uff0c\u5185\u5b58\u7f13\u5b58\u548c\u786c\u76d8\u7f13\u5b58\u540c\u65f6\u4fdd\u5b58\u3002\u5199\u6587\u4ef6\u5230\u786c\u76d8\u4e5f\u5728\u4ee5\u5355\u72ec NSInvocationOperation \u5b8c\u6210\uff0c\u907f\u514d\u62d6\u6162\u4e3b\u7ebf\u7a0b\u3002\r\n\r\n18.SDImageCache \u5728\u521d\u59cb\u5316\u7684\u65f6\u5019\u4f1a\u6ce8\u518c\u4e00\u4e9b\u6d88\u606f\u901a\u77e5\uff0c\u5728\u5185\u5b58\u8b66\u544a\u6216\u9000\u5230\u540e\u53f0\u7684\u65f6\u5019\u6e05\u7406\u5185\u5b58\u56fe\u7247\u7f13\u5b58\uff0c\u5e94\u7528\u7ed3\u675f\u7684\u65f6\u5019\u6e05\u7406\u8fc7\u671f\u56fe\u7247\u3002\r\n\r\n19.SDWI \u4e5f\u63d0\u4f9b\u4e86 UIButton+WebCache \u548c MKAnnotationView+WebCache\uff0c\u65b9\u4fbf\u4f7f\u7528\u3002\r\n\r\n20.SDWebImagePrefetcher \u53ef\u4ee5\u9884\u5148\u4e0b\u8f7d\u56fe\u7247\uff0c\u65b9\u4fbf\u540e\u7eed\u4f7f\u7528\u3002"},{"ID":"1363","typeID":"10","question":"__block\u548c__weak\u4fee\u9970\u7b26\u7684\u533a\u522b\u662f\u4ec0\u4e48\uff1f","answer":"1.__block\u4e0d\u7ba1\u662fARC\u8fd8\u662fMRC\u6a21\u5f0f\u4e0b\u90fd\u53ef\u4ee5\u4f7f\u7528\uff0c\u53ef\u4ee5\u4fee\u9970\u5bf9\u8c61\uff0c\u8fd8\u53ef\u4ee5\u4fee\u9970\u57fa\u672c\u6570\u636e\u7c7b\u578b\u3002 \r\n2.__weak\u53ea\u80fd\u5728ARC\u6a21\u5f0f\u4e0b\u4f7f\u7528\uff0c\u4e5f\u53ea\u80fd\u4fee\u9970\u5bf9\u8c61\uff08NSString\uff09\uff0c\u4e0d\u80fd\u4fee\u9970\u57fa\u672c\u6570\u636e\u7c7b\u578b\uff08int\uff09\u3002 \r\n3.__block\u5bf9\u8c61\u53ef\u4ee5\u5728block\u4e2d\u88ab\u91cd\u65b0\u8d4b\u503c\uff0c__weak\u4e0d\u53ef\u4ee5\u3002 "},{"ID":"1017","typeID":"10","question":"Object-c\u7684\u7c7b\u53ef\u4ee5\u591a\u91cd\u7ee7\u627f\u4e48?\u53ef\u4ee5\u5b9e\u73b0\u591a\u4e2a\u63a5\u53e3\u4e48?Category\u662f\u4ec0\u4e48?\u91cd\u5199\u4e00\u4e2a\u7c7b\u7684\u65b9\u5f0f\u7528\u7ee7\u627f\u597d\u8fd8\u662f\u5206\u7c7b\u597d?\u4e3a\u4ec0\u4e48?","answer":"Object-c\u7684\u7c7b\u4e0d\u53ef\u4ee5\u591a\u91cd\u7ee7\u627f;\u53ef\u4ee5\u5b9e\u73b0\u591a\u4e2a\u63a5\u53e3\uff0c\u901a\u8fc7\u5b9e\u73b0\u591a\u4e2a\u63a5\u53e3\u53ef\u4ee5\u5b8c\u6210C++\u7684\u591a\u91cd\u7ee7\u627f;Category\u662f\u7c7b\u522b\uff0c\u4e00\u822c\u60c5\u51b5\u7528\u5206\u7c7b\u597d\uff0c\u7528Category\u53bb\u91cd\u5199\u7c7b\u7684\u65b9\u6cd5\uff0c\u4ec5\u5bf9\u672cCategory\u6709\u6548\uff0c\u4e0d\u4f1a\u5f71\u54cd\u5230\u5176\u4ed6\u7c7b\u4e0e\u539f\u6709\u7c7b\u7684\u5173\u7cfb\u3002"},{"ID":"1016","typeID":"10","question":"#import \u8ddf#include \u53c8\u4ec0\u4e48\u533a\u522b\uff0c@class\u5462, #import<> \u8ddf #import\u201d\u201d\u53c8\u4ec0\u4e48\u533a\u522b?","answer":"#import\u662fObjective-C\u5bfc\u5165\u5934\u6587\u4ef6\u7684\u5173\u952e\u5b57\uff0c#include\u662fC\/C++\u5bfc\u5165\u5934\u6587\u4ef6\u7684\u5173\u952e\u5b57,\u4f7f\u7528#import\u5934\u6587\u4ef6\u4f1a\u81ea\u52a8\u53ea\u5bfc\u5165\u4e00\u6b21\uff0c\u4e0d\u4f1a\u91cd\u590d\u5bfc\u5165\uff0c\u76f8\u5f53\u4e8e#include\u548c#pragma once;@class\u544a\u8bc9\u7f16\u8bd1\u5668\u67d0\u4e2a\u7c7b\u7684\u58f0\u660e\uff0c\u5f53\u6267\u884c\u65f6\uff0c\u624d\u53bb\u67e5\u770b\u7c7b\u7684\u5b9e\u73b0\u6587\u4ef6\uff0c\u53ef\u4ee5\u89e3\u51b3\u5934\u6587\u4ef6\u7684\u76f8\u4e92\u5305\u542b;#import<>\u7528\u6765\u5305\u542b\u7cfb\u7edf\u7684\u5934\u6587\u4ef6\uff0c#import\u201d\u201d\u7528\u6765\u5305\u542b\u7528\u6237\u5934\u6587\u4ef6\u3002"},{"ID":"1015","typeID":"10","question":"\u5c5e\u6027readwrite\uff0creadonly\uff0cassign\uff0cretain\uff0ccopy\uff0cnonatomic \u5404\u662f\u4ec0\u4e48\u4f5c\u7528\uff0c\u5728\u90a3\u79cd\u60c5\u51b5\u4e0b\u7528?","answer":"1). readwrite \u662f\u53ef\u8bfb\u53ef\u5199\u7279\u6027;\u9700\u8981\u751f\u6210getter\u65b9\u6cd5\u548csetter\u65b9\u6cd5\u65f6\r\n\r\n2). readonly \u662f\u53ea\u8bfb\u7279\u6027 \u53ea\u4f1a\u751f\u6210getter\u65b9\u6cd5 \u4e0d\u4f1a\u751f\u6210setter\u65b9\u6cd5 ;\u4e0d\u5e0c\u671b\u5c5e\u6027\u5728\u7c7b\u5916\u6539\u53d8\r\n\r\n3). assign \u662f\u8d4b\u503c\u7279\u6027\uff0csetter\u65b9\u6cd5\u5c06\u4f20\u5165\u53c2\u6570\u8d4b\u503c\u7ed9\u5b9e\u4f8b\u53d8\u91cf;\u4ec5\u8bbe\u7f6e\u53d8\u91cf\u65f6;\r\n\r\n4). retain \u8868\u793a\u6301\u6709\u7279\u6027\uff0csetter\u65b9\u6cd5\u5c06\u4f20\u5165\u53c2\u6570\u5148\u4fdd\u7559\uff0c\u518d\u8d4b\u503c\uff0c\u4f20\u5165\u53c2\u6570\u7684retaincount\u4f1a+1;\r\n\r\n5). copy \u8868\u793a\u8d4b\u503c\u7279\u6027\uff0csetter\u65b9\u6cd5\u5c06\u4f20\u5165\u5bf9\u8c61\u590d\u5236\u4e00\u4efd;\u9700\u8981\u5b8c\u5168\u4e00\u4efd\u65b0\u7684\u53d8\u91cf\u65f6\u3002\r\n\r\n6).nonatomic \u975e\u539f\u5b50\u64cd\u4f5c\uff0c\u51b3\u5b9a\u7f16\u8bd1\u5668\u751f\u6210\u7684setter getter\u662f\u5426\u662f\u539f\u5b50\u64cd\u4f5c\uff0catomic\u8868\u793a\u591a\u7ebf\u7a0b\u5b89\u5168\uff0c\u4e00\u822c\u4f7f\u7528nonatomic"},{"ID":"1014","typeID":"10","question":"\u5199\u4e00\u4e2asetter\u65b9\u6cd5\u7528\u4e8e\u5b8c\u6210@property (nonatomic,retain)NSString *name,\u5199\u4e00\u4e2asetter\u65b9\u6cd5\u7528\u4e8e\u5b8c\u6210@property(nonatomic\uff0ccopy)NSString *name","answer":"- (void) setName:(NSString*) str\r\n{\r\n[str retain];\r\n[name release];\r\nname = str;\r\n}\r\n- (void)setName:(NSString *)str\r\n{\r\nid t = [str copy];\r\n[name release];\r\nname = t;\r\n}"},{"ID":"1013","typeID":"10","question":"\u5bf9\u4e8e\u8bed\u53e5NSString*obj = [[NSData alloc] init]; obj\u5728\u7f16\u8bd1\u65f6\u548c\u8fd0\u884c\u65f6\u5206\u522b\u65f6\u4ec0\u4e48\u7c7b\u578b\u7684\u5bf9\u8c61?","answer":"\u7f16\u8bd1\u65f6\u662fNSString\u7684\u7c7b\u578b;\u8fd0\u884c\u65f6\u662fNSData\u7c7b\u578b\u7684\u5bf9\u8c61"},{"ID":"1012","typeID":"10","question":"\u5e38\u89c1\u7684object-c\u7684\u6570\u636e\u7c7b\u578b\u6709\u90a3\u4e9b\uff0c \u548cC\u7684\u57fa\u672c\u6570\u636e\u7c7b\u578b\u6709\u4ec0\u4e48\u533a\u522b?\u5982\uff1aNSInteger\u548cint","answer":"object-c\u7684\u6570\u636e\u7c7b\u578b\u6709NSString\uff0cNSNumber\uff0cNSArray\uff0cNSMutableArray\uff0cNSData\u7b49\u7b49\uff0c\u8fd9\u4e9b\u90fd\u662fclass\uff0c\u521b\u5efa\u540e\u4fbf\u662f\u5bf9\u8c61\uff0c\u800cC\u8bed\u8a00\u7684\u57fa\u672c\u6570\u636e\u7c7b\u578bint\uff0c\u53ea\u662f\u4e00\u5b9a\u5b57\u8282\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u7528\u4e8e\u5b58\u653e\u6570\u503c;NSInteger\u662f\u57fa\u672c\u6570\u636e\u7c7b\u578b\uff0c\u5e76\u4e0d\u662fNSNumber\u7684\u5b50\u7c7b\uff0c\u5f53\u7136\u4e5f\u4e0d\u662fNSObject\u7684\u5b50\u7c7b\u3002NSInteger\u662f\u57fa\u672c\u6570\u636e\u7c7b\u578bInt\u6216\u8005Long\u7684\u522b\u540d(NSInteger\u7684\u5b9a\u4e49typedef long NSInteger)\uff0c\u5b83\u7684\u533a\u522b\u5728\u4e8e\uff0cNSInteger\u4f1a\u6839\u636e\u7cfb\u7edf\u662f32\u4f4d\u8fd8\u662f64\u4f4d\u6765\u51b3\u5b9a\u662f\u672c\u8eab\u662fint\u8fd8\u662fLong\u3002\r\n"},{"ID":"1011","typeID":"10","question":"id \u58f0\u660e\u7684\u5bf9\u8c61\u6709\u4ec0\u4e48\u7279\u6027?","answer":"Id \u58f0\u660e\u7684\u5bf9\u8c61\u5177\u6709\u8fd0\u884c\u65f6\u7684\u7279\u6027\uff0c\u5373\u53ef\u4ee5\u6307\u5411\u4efb\u610f\u7c7b\u578b\u7684objcetive-c\u7684\u5bf9\u8c61;"},{"ID":"1010","typeID":"10","question":"Objective-C\u5982\u4f55\u5bf9\u5185\u5b58\u7ba1\u7406\u7684,\u8bf4\u8bf4\u4f60\u7684\u770b\u6cd5\u548c\u89e3\u51b3\u65b9\u6cd5?","answer":"Objective-C\u7684\u5185\u5b58\u7ba1\u7406\u4e3b\u8981\u6709\u4e09\u79cd\u65b9\u5f0fARC(\u81ea\u52a8\u5185\u5b58\u8ba1\u6570)\u3001\u624b\u52a8\u5185\u5b58\u8ba1\u6570\u3001\u5185\u5b58\u6c60\u3002\r\n\r\n1). (Garbage Collection)\u81ea\u52a8\u5185\u5b58\u8ba1\u6570\uff1a\u8fd9\u79cd\u65b9\u5f0f\u548cjava\u7c7b\u4f3c\uff0c\u5728\u4f60\u7684\u7a0b\u5e8f\u7684\u6267\u884c\u8fc7\u7a0b\u4e2d\u3002\u59cb\u7ec8\u6709\u4e00\u4e2a\u9ad8\u4eba\u5728\u80cc\u540e\u51c6\u786e\u5730\u5e2e\u4f60\u6536\u62fe\u5783\u573e\uff0c\u4f60\u4e0d\u7528\u8003\u8651\u5b83\u4ec0\u4e48\u65f6\u5019\u5f00\u59cb\u5de5\u4f5c\uff0c\u600e\u6837\u5de5\u4f5c\u3002\u4f60\u53ea\u9700\u8981\u660e\u767d\uff0c\u6211\u7533\u8bf7\u4e86\u4e00\u6bb5\u5185\u5b58\u7a7a\u95f4\uff0c\u5f53\u6211\u4e0d\u518d\u4f7f\u7528\u4ece\u800c\u8fd9\u6bb5\u5185\u5b58\u6210\u4e3a\u5783\u573e\u7684\u65f6\u5019\uff0c\u6211\u5c31\u5f7b\u5e95\u7684\u628a\u5b83\u5fd8\u8bb0\u6389\uff0c\u53cd\u6b63\u90a3\u4e2a\u9ad8\u4eba\u4f1a\u5e2e\u6211\u6536\u62fe\u5783\u573e\u3002\u9057\u61be\u7684\u662f\uff0c\u90a3\u4e2a\u9ad8\u4eba\u9700\u8981\u6d88\u8017\u4e00\u5b9a\u7684\u8d44\u6e90\uff0c\u5728\u643a\u5e26\u8bbe\u5907\u91cc\u9762\uff0c\u8d44\u6e90\u662f\u7d27\u4fcf\u5546\u54c1\u6240\u4ee5iPhone\u4e0d\u652f\u6301\u8fd9\u4e2a\u529f\u80fd\u3002\u6240\u4ee5\u201cGarbage Collection\u201d\u4e0d\u662f\u672c\u5165\u95e8\u6307\u5357\u7684\u8303\u56f4\uff0c\u5bf9\u201cGarbage Collection\u201d\u5185\u90e8\u673a\u5236\u611f\u5174\u8da3\u7684\u540c\u5b66\u53ef\u4ee5\u53c2\u8003\u4e00\u4e9b\u5176\u4ed6\u7684\u8d44\u6599\uff0c\u4e0d\u8fc7\u8bf4\u8001\u5b9e\u8bdd\u201cGarbage Collection\u201d\u4e0d\u5927\u9002\u5408\u9002\u521d\u5b66\u8005\u7814\u7a76\u3002\r\n\r\n\u89e3\u51b3: \u901a\u8fc7alloc \u2013 initial\u65b9\u5f0f\u521b\u5efa\u7684, \u521b\u5efa\u540e\u5f15\u7528\u8ba1\u6570+1, \u6b64\u540e\u6bcfretain\u4e00\u6b21\u5f15\u7528\u8ba1\u6570+1, \u90a3\u4e48\u5728\u7a0b\u5e8f\u4e2d\u505a\u76f8\u5e94\u6b21\u6570\u7684release\u5c31\u597d\u4e86.\r\n\r\n2). (Reference Counted)\u624b\u52a8\u5185\u5b58\u8ba1\u6570\uff1a\u5c31\u662f\u8bf4\uff0c\u4ece\u4e00\u6bb5\u5185\u5b58\u88ab\u7533\u8bf7\u4e4b\u540e\uff0c\u5c31\u5b58\u5728\u4e00\u4e2a\u53d8\u91cf\u7528\u4e8e\u4fdd\u5b58\u8fd9\u6bb5\u5185\u5b58\u88ab\u4f7f\u7528\u7684\u6b21\u6570\uff0c\u6211\u4eec\u6682\u65f6\u628a\u5b83\u79f0\u4e3a\u8ba1\u6570\u5668\uff0c\u5f53\u8ba1\u6570\u5668\u53d8\u4e3a0\u7684\u65f6\u5019\uff0c\u90a3\u4e48\u5c31\u662f\u91ca\u653e\u8fd9\u6bb5\u5185\u5b58\u7684\u65f6\u5019\u3002\u6bd4\u5982\u8bf4\uff0c\u5f53\u5728\u7a0b\u5e8fA\u91cc\u9762\u4e00\u6bb5\u5185\u5b58\u88ab\u6210\u529f\u7533\u8bf7\u5b8c\u6210\u4e4b\u540e\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8ba1\u6570\u5668\u5c31\u4ece0\u53d8\u62101(\u6211\u4eec\u628a\u8fd9\u4e2a\u8fc7\u7a0b\u53eb\u505aalloc)\uff0c\u7136\u540e\u7a0b\u5e8fB\u4e5f\u9700\u8981\u4f7f\u7528\u8fd9\u4e2a\u5185\u5b58\uff0c\u90a3\u4e48\u8ba1\u6570\u5668\u5c31\u4ece1\u53d8\u6210\u4e862(\u6211\u4eec\u628a\u8fd9\u4e2a\u8fc7\u7a0b\u53eb\u505aretain)\u3002\u7d27\u63a5\u7740\u7a0b\u5e8fA\u4e0d\u518d\u9700\u8981\u8fd9\u6bb5\u5185\u5b58\u4e86\uff0c\u90a3\u4e48\u7a0b\u5e8fA\u5c31\u628a\u8fd9\u4e2a\u8ba1\u6570\u5668\u51cf1(\u6211\u4eec\u628a\u8fd9\u4e2a\u8fc7\u7a0b\u53eb\u505arelease);\u7a0b\u5e8fB\u4e5f\u4e0d\u518d\u9700\u8981\u8fd9\u6bb5\u5185\u5b58\u7684\u65f6\u5019\uff0c\u90a3\u4e48\u4e5f\u628a\u8ba1\u6570\u5668\u51cf1(\u8fd9\u4e2a\u8fc7\u7a0b\u8fd8\u662frelease)\u3002\u5f53\u7cfb\u7edf(\u4e5f\u5c31\u662fFoundation)\u53d1\u73b0\u8fd9\u4e2a\u8ba1\u6570\u5668\u53d8 \u6210\u5458\u4e860\uff0c\u90a3\u4e48\u5c31\u4f1a\u8c03\u7528\u5185\u5b58\u56de\u6536\u7a0b\u5e8f\u628a\u8fd9\u6bb5\u5185\u5b58\u56de\u6536(\u6211\u4eec\u628a\u8fd9\u4e2a\u8fc7\u7a0b\u53eb\u505adealloc)\u3002\u987a\u4fbf\u63d0\u4e00\u53e5\uff0c\u5982\u679c\u6ca1\u6709Foundation\uff0c\u90a3\u4e48\u7ef4\u62a4\u8ba1\u6570\u5668\uff0c\u91ca\u653e\u5185\u5b58\u7b49\u7b49\u5de5\u4f5c\u9700\u8981\u4f60\u624b\u5de5\u6765\u5b8c\u6210\u3002\r\n\r\n\u89e3\u51b3:\u4e00\u822c\u662f\u7531\u7c7b\u7684\u9759\u6001\u65b9\u6cd5\u521b\u5efa\u7684, \u51fd\u6570\u540d\u4e2d\u4e0d\u4f1a\u51fa\u73b0alloc\u6216init\u5b57\u6837, \u5982[NSString string]\u548c[NSArray arrayWithObject:], \u521b\u5efa\u540e\u5f15\u7528\u8ba1\u6570+0, \u5728\u51fd\u6570\u51fa\u6808\u540e\u91ca\u653e, \u5373\u76f8\u5f53\u4e8e\u4e00\u4e2a\u6808\u4e0a\u7684\u5c40\u90e8\u53d8\u91cf. \u5f53\u7136\u4e5f\u53ef\u4ee5\u901a\u8fc7retain\u5ef6\u957f\u5bf9\u8c61\u7684\u751f\u5b58\u671f.\r\n\r\n3). (NSAutoRealeasePool)\u5185\u5b58\u6c60\uff1a\u53ef\u4ee5\u901a\u8fc7\u521b\u5efa\u548c\u91ca\u653e\u5185\u5b58\u6c60\u63a7\u5236\u5185\u5b58\u7533\u8bf7\u548c\u56de\u6536\u7684\u65f6\u673a.\r\n\r\n\u89e3\u51b3:\u662f\u7531autorelease\u52a0\u5165\u7cfb\u7edf\u5185\u5b58\u6c60, \u5185\u5b58\u6c60\u662f\u53ef\u4ee5\u5d4c\u5957\u7684, \u6bcf\u4e2a\u5185\u5b58\u6c60\u90fd\u9700\u8981\u6709\u4e00\u4e2a\u521b\u5efa\u91ca\u653e\u5bf9, \u5c31\u50cfmain\u51fd\u6570\u4e2d\u5199\u7684\u4e00\u6837. \u4f7f\u7528\u4e5f\u5f88\u7b80\u5355, \u6bd4\u5982[[[NSString alloc]initialWithFormat:@\u201dHey you!\u201d] autorelease], \u5373\u5c06\u4e00\u4e2aNSString\u5bf9\u8c61\u52a0\u5165\u5230\u6700\u5185\u5c42\u7684\u7cfb\u7edf\u5185\u5b58\u6c60, \u5f53\u6211\u4eec\u91ca\u653e\u8fd9\u4e2a\u5185\u5b58\u6c60\u65f6, \u5176\u4e2d\u7684\u5bf9\u8c61\u90fd\u4f1a\u88ab\u91ca\u653e."},{"ID":"1009","typeID":"10","question":"\u539f\u5b50(atomic)\u8ddf\u975e\u539f\u5b50(non-atomic)\u5c5e\u6027\u6709\u4ec0\u4e48\u533a\u522b?","answer":"1). atomic\u63d0\u4f9b\u591a\u7ebf\u7a0b\u5b89\u5168\u3002\u662f\u9632\u6b62\u5728\u5199\u672a\u5b8c\u6210\u7684\u65f6\u5019\u88ab\u53e6\u5916\u4e00\u4e2a\u7ebf\u7a0b\u8bfb\u53d6\uff0c\u9020\u6210\u6570\u636e\u9519\u8bef\r\n\r\n2). non-atomic:\u5728\u81ea\u5df1\u7ba1\u7406\u5185\u5b58\u7684\u73af\u5883\u4e2d\uff0c\u89e3\u6790\u7684\u8bbf\u95ee\u5668\u4fdd\u7559\u5e76\u81ea\u52a8\u91ca\u653e\u8fd4\u56de\u7684\u503c\uff0c\u5982\u679c\u6307\u5b9a\u4e86 nonatomic \uff0c\u90a3\u4e48\u8bbf\u95ee\u5668\u53ea\u662f\u7b80\u5355\u5730\u8fd4\u56de\u8fd9\u4e2a\u503c\u3002"},{"ID":"1008","typeID":"10","question":"\u770b\u4e0b\u9762\u7684\u7a0b\u5e8f,\u7b2c\u4e00\u4e2aNSLog\u4f1a\u8f93\u51fa\u4ec0\u4e48?\u8fd9\u65f6str\u7684retainCount\u662f\u591a\u5c11?\u7b2c\u4e8c\u4e2a\u548c\u7b2c\u4e09\u4e2a\u5462? \u4e3a\u4ec0\u4e48?","answer":"NSMutableArray* ary = [[NSMutableArray array] retain];\r\nNSString *str = [NSString stringWithFormat:@\"test\"];\r\n[str retain];\r\n[aryaddObject:str];\r\nNSLog(@\u201d%@%d\u201d,str,[str retainCount]);\r\n[str retain];\r\n[str release];\r\n[str release];\r\nNSLog(@\u201d%@%d\u201d,str,[str retainCount]);\r\n[aryremoveAllObjects];\r\nNSLog(@\u201d%@%d\u201d,str,[str retainCount]);\r\nstr\u7684retainCount\u521b\u5efa+1\uff0cretain+1\uff0c\u52a0\u5165\u6570\u7ec4\u81ea\u52a8+1 3\r\n\r\nretain+1\uff0crelease-1\uff0crelease-1 2\r\n\r\n\u6570\u7ec4\u5220\u9664\u6240\u6709\u5bf9\u8c61\uff0c\u6240\u6709\u6570\u7ec4\u5185\u7684\u5bf9\u8c61\u81ea\u52a8-1 1"},{"ID":"1007","typeID":"10","question":"\u5185\u5b58\u7ba1\u7406\u7684\u51e0\u6761\u539f\u5219\u65f6\u4ec0\u4e48?\u6309\u7167\u9ed8\u8ba4\u6cd5\u5219.\u90a3\u4e9b\u5173\u952e\u5b57\u751f\u6210\u7684\u5bf9\u8c61\u9700\u8981\u624b\u52a8\u91ca\u653e?\u5728\u548cproperty\u7ed3\u5408\u7684\u65f6\u5019\u600e\u6837\u6709\u6548\u7684\u907f\u514d\u5185\u5b58\u6cc4\u9732?","answer":"\u8c01\u7533\u8bf7\uff0c\u8c01\u91ca\u653e\r\n\r\n\u9075\u5faaCocoa Touch\u7684\u4f7f\u7528\u539f\u5219;\r\n\r\n\u5185\u5b58\u7ba1\u7406\u4e3b\u8981\u8981\u907f\u514d\u201c\u8fc7\u65e9\u91ca\u653e\u201d\u548c\u201c\u5185\u5b58\u6cc4\u6f0f\u201d\uff0c\u5bf9\u4e8e\u201c\u8fc7\u65e9\u91ca\u653e\u201d\u9700\u8981\u6ce8\u610f@property\u8bbe\u7f6e\u7279\u6027\u65f6\uff0c\u4e00\u5b9a\u8981\u7528\u5bf9\u7279\u6027\u5173\u952e\u5b57\uff0c\u5bf9\u4e8e\u201c\u5185\u5b58\u6cc4\u6f0f\u201d\uff0c\u4e00\u5b9a\u8981\u7533\u8bf7\u4e86\u8981\u8d1f\u8d23\u91ca\u653e\uff0c\u8981\u7ec6\u5fc3\u3002\r\n\r\n\u5173\u952e\u5b57alloc \u6216new \u751f\u6210\u7684\u5bf9\u8c61\u9700\u8981\u624b\u52a8\u91ca\u653e;\r\n\r\n\u8bbe\u7f6e\u6b63\u786e\u7684property\u5c5e\u6027\uff0c\u5bf9\u4e8eretain\u9700\u8981\u5728\u5408\u9002\u7684\u5730\u65b9\u91ca\u653e\uff0c\r\n"},{"ID":"1006","typeID":"10","question":"\u5982\u4f55\u5bf9iOS\u8bbe\u5907\u8fdb\u884c\u6027\u80fd\u6d4b\u8bd5?","answer":"Profile-> Instruments ->Time Profiler"},{"ID":"1005","typeID":"10","question":"Object C\u4e2d\u521b\u5efa\u7ebf\u7a0b\u7684\u65b9\u6cd5\u662f\u4ec0\u4e48?\u5982\u679c\u5728\u4e3b\u7ebf\u7a0b\u4e2d\u6267\u884c\u4ee3\u7801\uff0c\u65b9\u6cd5\u662f\u4ec0\u4e48?\u5982\u679c\u60f3\u5ef6\u65f6\u6267\u884c\u4ee3\u7801\u3001\u65b9\u6cd5\u53c8\u662f\u4ec0\u4e48?","answer":"\u7ebf\u7a0b\u521b\u5efa\u6709\u4e09\u79cd\u65b9\u6cd5\uff1a\u4f7f\u7528NSThread\u521b\u5efa\u3001\u4f7f\u7528GCD\u7684dispatch\u3001\u4f7f\u7528\u5b50\u7c7b\u5316\u7684NSOperation,\u7136\u540e\u5c06\u5176\u52a0\u5165NSOperationQueue;\u5728\u4e3b\u7ebf\u7a0b\u6267\u884c\u4ee3\u7801\uff0c\u65b9\u6cd5\u662fperformSelectorOnMainThread\uff0c\u5982\u679c\u60f3\u5ef6\u65f6\u6267\u884c\u4ee3\u7801\u53ef\u4ee5\u7528performSelector:onThread:withObject:waitUntilDone:\r\n"},{"ID":"1004","typeID":"10","question":"MVC\u8bbe\u8ba1\u6a21\u5f0f\u662f\u4ec0\u4e48\uff1f \u4f60\u8fd8\u719f\u6089\u4ec0\u4e48\u8bbe\u8ba1\u6a21\u5f0f\uff1f","answer":"\u8bbe\u8ba1\u6a21\u5f0f\uff1a\u5e76\u4e0d\u662f\u4e00\u79cd\u65b0\u6280\u672f\uff0c\u800c\u662f\u4e00\u79cd\u7f16\u7801\u7ecf\u9a8c\uff0c\u4f7f\u7528\u6bd4\u5982java\u4e2d\u7684\u63a5\u53e3\uff0ciphone\u4e2d\u7684\u534f\u8bae\uff0c\u7ee7\u627f\u5173\u7cfb\u7b49\u57fa\u672c\u624b\u6bb5\uff0c\u7528\u6bd4\u8f83\u6210\u719f\u7684\u903b\u8f91\u53bb\u5904\u7406\u67d0\u4e00\u79cd\u7c7b\u578b\u7684\u4e8b\u60c5\uff0c\u603b\u7ed3\u4e3a\u6240\u8c13\u8bbe\u8ba1\u6a21\u5f0f\u3002\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u4e2d\uff0cjava\u5df2\u7ecf\u5f52\u7eb3\u4e8623\u79cd\u8bbe\u8ba1\u6a21\u5f0f\u3002\r\n\r\nmvc\u8bbe\u8ba1\u6a21\u5f0f \uff1a\u6a21\u578b\uff0c\u89c6\u56fe\uff0c\u63a7\u5236\u5668\uff0c\u53ef\u4ee5\u5c06\u6574\u4e2a\u5e94\u7528\u7a0b\u5e8f\u5728\u601d\u60f3\u4e0a\u5206\u6210\u4e09\u5927\u5757\uff0c\u5bf9\u5e94\u662f\u7684\u6570\u636e\u7684\u5b58\u50a8\u6216\u5904\u7406\uff0c\u524d\u53f0\u7684\u663e\u793a\uff0c\u4e1a\u52a1\u903b\u8f91\u7684\u63a7\u5236\u3002 Iphone\u672c\u8eab\u7684\u8bbe\u8ba1\u601d\u60f3\u5c31\u662f\u9075\u5faamvc\u8bbe\u8ba1\u6a21\u5f0f\u3002\u5176\u4e0d\u5c5e\u4e8e23\u79cd\u8bbe\u8ba1\u6a21\u5f0f\u8303\u7574\u3002\r\n\r\n\u4ee3\u7406\u6a21\u5f0f\uff1a\u4ee3\u7406\u6a21\u5f0f\u7ed9\u67d0\u4e00\u4e2a\u5bf9\u8c61\u63d0\u4f9b\u4e00\u4e2a\u4ee3\u7406\u5bf9\u8c61\uff0c\u5e76\u7531\u4ee3\u7406\u5bf9\u8c61\u63a7\u5236\u5bf9\u6e90\u5bf9\u8c61\u7684\u5f15\u7528.\u6bd4\u5982\u4e00\u4e2a\u5de5\u5382\u751f\u4ea7\u4e86\u4ea7\u54c1\uff0c\u5e76\u4e0d\u60f3\u76f4\u63a5\u5356\u7ed9\u7528\u6237\uff0c\u800c\u662f\u641e\u4e86\u5f88\u591a\u4ee3\u7406\u5546\uff0c\u7528\u6237\u53ef\u4ee5\u76f4\u63a5\u627e\u4ee3\u7406\u5546\u4e70\u4e1c\u897f\uff0c\u4ee3\u7406\u5546\u4ece\u5de5\u5382\u8fdb\u8d27.\u5e38\u89c1\u7684\u5982QQ\u7684\u81ea\u52a8\u56de\u590d\u5c31\u5c5e\u4e8e\u4ee3\u7406\u62e6\u622a\uff0c\u4ee3\u7406\u6a21\u5f0f\u5728iphone\u4e2d\u5f97\u5230\u5e7f\u6cdb\u5e94\u7528.\r\n\r\n\u5355\u4f8b\u6a21\u5f0f\uff1a\u8bf4\u767d\u4e86\u5c31\u662f\u4e00\u4e2a\u7c7b\u4e0d\u901a\u8fc7alloc\u65b9\u5f0f\u521b\u5efa\u5bf9\u8c61\uff0c\u800c\u662f\u7528\u4e00\u4e2a\u9759\u6001\u65b9\u6cd5\u8fd4\u56de\u8fd9\u4e2a\u7c7b\u7684\u5bf9\u8c61\u3002\u7cfb\u7edf\u53ea\u9700\u8981\u62e5\u6709\u4e00\u4e2a\u7684\u5168\u5c40\u5bf9\u8c61\uff0c\u8fd9\u6837\u6709\u5229\u4e8e\u6211\u4eec\u534f\u8c03\u7cfb\u7edf\u6574\u4f53\u7684\u884c\u4e3a\uff0c\u6bd4\u5982\u60f3\u83b7\u5f97[UIApplication sharedApplication];\u4efb\u4f55\u5730\u65b9\u8c03\u7528\u90fd\u53ef\u4ee5\u5f97\u5230 UIApplication\u7684\u5bf9\u8c61\uff0c\u8fd9\u4e2a\u5bf9\u8c61\u662f\u5168\u5c40\u552f\u4e00\u7684\u3002\r\n\r\n\u89c2\u5bdf\u8005\u6a21\u5f0f\uff1a \u5f53\u4e00\u4e2a\u7269\u4f53\u53d1\u751f\u53d8\u5316\u65f6\uff0c\u4f1a\u901a\u77e5\u6240\u6709\u89c2\u5bdf\u8fd9\u4e2a\u7269\u4f53\u7684\u89c2\u5bdf\u8005\u8ba9\u5176\u505a\u51fa\u53cd\u5e94\u3002\u5b9e\u73b0\u8d77\u6765\u65e0\u975e\u5c31\u662f\u628a\u6240\u6709\u89c2\u5bdf\u8005\u7684\u5bf9\u8c61\u7ed9\u8fd9\u4e2a\u7269\u4f53\uff0c\u5f53\u8fd9\u4e2a\u7269\u4f53\u7684\u53d1\u751f\u6539\u53d8\uff0c\u5c31\u4f1a\u8c03\u7528\u904d\u5386\u6240\u6709\u89c2\u5bdf\u8005\u7684\u5bf9\u8c61\u8c03\u7528\u89c2\u5bdf\u8005\u7684\u65b9\u6cd5\u4ece\u800c\u8fbe\u5230\u901a\u77e5\u89c2\u5bdf\u8005\u7684\u76ee\u7684\u3002\r\n\r\n\u5de5\u5382\u6a21\u5f0f\uff1a\r\npublic class Factory{\r\npublic static Sample creator(int which){\r\nif (which==1)\r\nreturn new SampleA();\r\nelse if (which==2)\r\nreturn new SampleB();\r\n}\r\n}"},{"ID":"1003","typeID":"10","question":"\u6d45\u590d\u5236\u548c\u6df1\u590d\u5236\u7684\u533a\u522b?","answer":"\u6d45\u5c42\u590d\u5236\uff1a\u53ea\u590d\u5236\u6307\u5411\u5bf9\u8c61\u7684\u6307\u9488\uff0c\u800c\u4e0d\u590d\u5236\u5f15\u7528\u5bf9\u8c61\u672c\u8eab\u3002\r\n\r\n\u6df1\u5c42\u590d\u5236\uff1a\u590d\u5236\u5f15\u7528\u5bf9\u8c61\u672c\u8eab\u3002\r\n\r\n\u610f\u601d\u5c31\u662f\u8bf4\u6211\u6709\u4e2aA\u5bf9\u8c61\uff0c\u590d\u5236\u4e00\u4efd\u540e\u5f97\u5230A_copy\u5bf9\u8c61\u540e\uff0c\u5bf9\u4e8e\u6d45\u590d\u5236\u6765\u8bf4\uff0cA\u548cA_copy\u6307\u5411\u7684\u662f\u540c\u4e00\u4e2a\u5185\u5b58\u8d44\u6e90\uff0c\u590d\u5236\u7684\u53ea\u4e0d\u8fc7\u662f\u662f\u4e00\u4e2a\u6307\u9488\uff0c\u5bf9\u8c61\u672c\u8eab\u8d44\u6e90\r\n\r\n\u8fd8\u662f\u53ea\u6709\u4e00\u4efd\uff0c\u90a3\u5982\u679c\u6211\u4eec\u5bf9A_copy\u6267\u884c\u4e86\u4fee\u6539\u64cd\u4f5c,\u90a3\u4e48\u53d1\u73b0A\u5f15\u7528\u7684\u5bf9\u8c61\u540c\u6837\u88ab\u4fee\u6539\uff0c\u8fd9\u5176\u5b9e\u8fdd\u80cc\u4e86\u6211\u4eec\u590d\u5236\u62f7\u8d1d\u7684\u4e00\u4e2a\u601d\u60f3\u3002\u6df1\u590d\u5236\u5c31\u597d\u7406\u89e3\u4e86,\u5185\u5b58\u4e2d\u5b58\u5728\u4e86\r\n\r\n\u4e24\u4efd\u72ec\u7acb\u5bf9\u8c61\u672c\u8eab\u3002\r\n\r\n\u7528\u7f51\u4e0a\u4e00\u54e5\u4eec\u901a\u4fd7\u7684\u8bdd\u5c06\u5c31\u662f\uff1a\r\n\r\n\u6d45\u590d\u5236\u597d\u6bd4\u4f60\u548c\u4f60\u7684\u5f71\u5b50\uff0c\u4f60\u5b8c\u86cb\uff0c\u4f60\u7684\u5f71\u5b50\u4e5f\u5b8c\u86cb\r\n\r\n\u6df1\u590d\u5236\u597d\u6bd4\u4f60\u548c\u4f60\u7684\u514b\u9686\u4eba\uff0c\u4f60\u5b8c\u86cb\uff0c\u4f60\u7684\u514b\u9686\u4eba\u8fd8\u6d3b\u7740\u3002"},{"ID":"1002","typeID":"10","question":"\u7c7b\u522b\u7684\u4f5c\u7528?\u7ee7\u627f\u548c\u7c7b\u522b\u5728\u5b9e\u73b0\u4e2d\u6709\u4f55\u533a\u522b?","answer":"category \u53ef\u4ee5\u5728\u4e0d\u83b7\u6089\uff0c\u4e0d\u6539\u53d8\u539f\u6765\u4ee3\u7801\u7684\u60c5\u51b5\u4e0b\u5f80\u91cc\u9762\u6dfb\u52a0\u65b0\u7684\u65b9\u6cd5\uff0c\u53ea\u80fd\u6dfb\u52a0\uff0c\u4e0d\u80fd\u5220\u9664\u4fee\u6539\uff0c\u5e76\u4e14\u5982\u679c\u7c7b\u522b\u548c\u539f\u6765\u7c7b\u4e2d\u7684\u65b9\u6cd5\u4ea7\u751f\u540d\u79f0\u51b2\u7a81\uff0c\u5219\u7c7b\u522b\u5c06\u8986\u76d6\u539f\u6765\u7684\u65b9\u6cd5\uff0c\u56e0\u4e3a\u7c7b\u522b\u5177\u6709\u66f4\u9ad8\u7684\u4f18\u5148\u7ea7\u3002\r\n\r\n\u7c7b\u522b\u4e3b\u8981\u67093\u4e2a\u4f5c\u7528\uff1a\r\n\r\n1).\u5c06\u7c7b\u7684\u5b9e\u73b0\u5206\u6563\u5230\u591a\u4e2a\u4e0d\u540c\u6587\u4ef6\u6216\u591a\u4e2a\u4e0d\u540c\u6846\u67b6\u4e2d\u3002\r\n\r\n2).\u521b\u5efa\u5bf9\u79c1\u6709\u65b9\u6cd5\u7684\u524d\u5411\u5f15\u7528\u3002\r\n\r\n3).\u5411\u5bf9\u8c61\u6dfb\u52a0\u975e\u6b63\u5f0f\u534f\u8bae\u3002\r\n\r\n\u7ee7\u627f\u53ef\u4ee5\u589e\u52a0\uff0c\u4fee\u6539\u6216\u8005\u5220\u9664\u65b9\u6cd5\uff0c\u5e76\u4e14\u53ef\u4ee5\u589e\u52a0\u5c5e\u6027\u3002"},{"ID":"1001","typeID":"10","question":"\u7c7b\u522b\u548c\u7c7b\u6269\u5c55\u7684\u533a\u522b\uff1f","answer":"category\u548cextensions\u7684\u4e0d\u540c\u5728\u4e8e \u540e\u8005\u53ef\u4ee5\u6dfb\u52a0\u5c5e\u6027\u3002\u53e6\u5916\u540e\u8005\u6dfb\u52a0\u7684\u65b9\u6cd5\u662f\u5fc5\u987b\u8981\u5b9e\u73b0\u7684\u3002\r\n\r\nextensions\u53ef\u4ee5\u8ba4\u4e3a\u662f\u4e00\u4e2a\u79c1\u6709\u7684Category\u3002"},{"ID":"1000","typeID":"10","question":"oc\u4e2d\u7684\u534f\u8bae\u548cjava\u4e2d\u7684\u63a5\u53e3\u6982\u5ff5\u6709\u4f55\u4e0d\u540c?","answer":"OC\u4e2d\u7684\u4ee3\u7406\u67092\u5c42\u542b\u4e49\uff0c\u5b98\u65b9\u5b9a\u4e49\u4e3a formal\u548cinformal protocol\u3002\u524d\u8005\u548cJava\u63a5\u53e3\u4e00\u6837\u3002\r\n\r\ninformal protocol\u4e2d\u7684\u65b9\u6cd5\u5c5e\u4e8e\u8bbe\u8ba1\u6a21\u5f0f\u8003\u8651\u8303\u7574\uff0c\u4e0d\u662f\u5fc5\u987b\u5b9e\u73b0\u7684\uff0c\u4f46\u662f\u5982\u679c\u6709\u5b9e\u73b0\uff0c\u5c31\u4f1a\u6539\u53d8\u7c7b\u7684\u5c5e\u6027\u3002\r\n\r\n\u5176\u5b9e\u5173\u4e8e\u6b63\u5f0f\u534f\u8bae\uff0c\u7c7b\u522b\u548c\u975e\u6b63\u5f0f\u534f\u8bae\u6211\u5f88\u65e9\u524d\u5b66\u4e60\u7684\u65f6\u5019\u5927\u81f4\u770b\u8fc7\uff0c\u4e5f\u5199\u5728\u4e86\u5b66\u4e60\u6559\u7a0b\u91cc\r\n\r\n\u201c\u975e\u6b63\u5f0f\u534f\u8bae\u6982\u5ff5\u5176\u5b9e\u5c31\u662f\u7c7b\u522b\u7684\u53e6\u4e00\u79cd\u8868\u8fbe\u65b9\u5f0f\u201c\u8fd9\u91cc\u6709\u4e00\u4e9b\u4f60\u53ef\u80fd\u5e0c\u671b\u5b9e\u73b0\u7684\u65b9\u6cd5\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u4ed6\u4eec\u66f4\u597d\u7684\u5b8c\u6210\u5de5\u4f5c\u201d\u3002\r\n\r\n\u8fd9\u4e2a\u610f\u601d\u662f\uff0c\u8fd9\u4e9b\u662f\u53ef\u9009\u7684\u3002\u6bd4\u5982\u6211\u95e8\u8981\u4e00\u4e2a\u66f4\u597d\u7684\u65b9\u6cd5\uff0c\u6211\u4eec\u5c31\u4f1a\u7533\u660e\u4e00\u4e2a\u8fd9\u6837\u7684\u7c7b\u522b\u53bb\u5b9e\u73b0\u3002\u7136\u540e\u4f60\u5728\u540e\u671f\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u8fd9\u4e9b\u66f4\u597d\u7684\u65b9\u6cd5\u3002\r\n\r\n\u8fd9\u4e48\u770b\uff0c\u603b\u89c9\u5f97\u7c7b\u522b\u8fd9\u73a9\u610f\u513f\u6709\u70b9\u50cf\u534f\u8bae\u7684\u53ef\u9009\u534f\u8bae\u3002\u201d\r\n\r\n\u73b0\u5728\u6765\u770b\uff0c\u5176\u5b9eprotocal\u5df2\u7ecf\u5f00\u59cb\u5bf9\u4e24\u8005\u90fd\u7edf\u4e00\u548c\u89c4\u8303\u8d77\u6765\u64cd\u4f5c\uff0c\u56e0\u4e3a\u8d44\u6599\u4e2d\u8bf4\u201c\u975e\u6b63\u5f0f\u534f\u8bae\u4f7f\u7528interface\u4fee\u9970\u201c\uff0c\r\n\r\n\u73b0\u5728\u6211\u4eec\u770b\u5230\u534f\u8bae\u4e2d\u4e24\u4e2a\u4fee\u9970\u8bcd\uff1a\u201c\u5fc5\u987b\u5b9e\u73b0(@requied)\u201d\u548c\u201c\u53ef\u9009\u5b9e\u73b0(@optional)\u201d\u3002"},{"ID":"999","typeID":"10","question":"\u4ec0\u4e48\u662fKVO\u548cKVC?","answer":"KVC:\u952e \u2013 \u503c\u7f16\u7801\u662f\u4e00\u79cd\u95f4\u63a5\u8bbf\u95ee\u5bf9\u8c61\u7684\u5c5e\u6027\u4f7f\u7528\u5b57\u7b26\u4e32\u6765\u6807\u8bc6\u5c5e\u6027\uff0c\u800c\u4e0d\u662f\u901a\u8fc7\u8c03\u7528\u5b58\u53d6\u65b9\u6cd5\uff0c\u76f4\u63a5\u6216\u901a\u8fc7\u5b9e\u4f8b\u53d8\u91cf\u8bbf\u95ee\u7684\u673a\u5236\u3002\r\n\r\n\u5f88\u591a\u60c5\u51b5\u4e0b\u53ef\u4ee5\u7b80\u5316\u7a0b\u5e8f\u4ee3\u7801\u3002apple\u6587\u6863\u5176\u5b9e\u7ed9\u4e86\u4e00\u4e2a\u5f88\u597d\u7684\u4f8b\u5b50\u3002\r\n\r\nKVO:\u952e\u503c\u89c2\u5bdf\u673a\u5236\uff0c\u4ed6\u63d0\u4f9b\u4e86\u89c2\u5bdf\u67d0\u4e00\u5c5e\u6027\u53d8\u5316\u7684\u65b9\u6cd5\uff0c\u6781\u5927\u7684\u7b80\u5316\u4e86\u4ee3\u7801\u3002\r\n\r\n\u5177\u4f53\u7528\u770b\u5230\u55ef\u54fc\u7528\u5230\u8fc7\u7684\u4e00\u4e2a\u5730\u65b9\u662f\u5bf9\u4e8e\u6309\u94ae\u70b9\u51fb\u53d8\u5316\u72b6\u6001\u7684\u7684\u76d1\u63a7\u3002\r\n\r\n\u6bd4\u5982\u6211\u81ea\u5b9a\u4e49\u7684\u4e00\u4e2abutton\r\n\r\n[self addObserver:self forKeyPath:@\"highlighted\" options:0 context:nil];\r\n#pragma mark KVO\r\n- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary *)change context:(void *)context\r\n{\r\nif ([keyPath isEqualToString:@\"highlighted\"] ) {\r\n[self setNeedsDisplay];\r\n}\r\n}\r\n\u5bf9\u4e8e\u7cfb\u7edf\u662f\u6839\u636ekeypath\u53bb\u53d6\u7684\u5230\u76f8\u5e94\u7684\u503c\u53d1\u751f\u6539\u53d8\uff0c\u7406\u8bba\u4e0a\u6765\u8bf4\u662f\u548ckvc\u673a\u5236\u7684\u9053\u7406\u662f\u4e00\u6837\u7684\u3002\r\n\r\n\u5bf9\u4e8ekvc\u673a\u5236\u5982\u4f55\u901a\u8fc7key\u5bfb\u627e\u5230value\uff1a\r\n\r\n\u201c\u5f53\u901a\u8fc7KVC\u8c03\u7528\u5bf9\u8c61\u65f6\uff0c\u6bd4\u5982\uff1a[self valueForKey:@\u201dsomeKey\u201d]\u65f6\uff0c\u7a0b\u5e8f\u4f1a\u81ea\u52a8\u8bd5\u56fe\u901a\u8fc7\u51e0\u79cd\u4e0d\u540c\u7684\u65b9\u5f0f\u89e3\u6790\u8fd9\u4e2a\u8c03\u7528\u3002\u9996\u5148\u67e5\u627e\u5bf9\u8c61\u662f\u5426\u5e26\u6709 someKey \u8fd9\u4e2a\u65b9\u6cd5\uff0c\u5982\u679c\u6ca1\u627e\u5230\uff0c\u4f1a\u7ee7\u7eed\u67e5\u627e\u5bf9\u8c61\u662f\u5426\u5e26\u6709someKey\u8fd9\u4e2a\u5b9e\u4f8b\u53d8\u91cf(iVar)\uff0c\u5982\u679c\u8fd8\u6ca1\u6709\u627e\u5230\uff0c\u7a0b\u5e8f\u4f1a\u7ee7\u7eed\u8bd5\u56fe\u8c03\u7528 -(id) valueForUndefinedKey:\u8fd9\u4e2a\u65b9\u6cd5\u3002\u5982\u679c\u8fd9\u4e2a\u65b9\u6cd5\u8fd8\u662f\u6ca1\u6709\u88ab\u5b9e\u73b0\u7684\u8bdd\uff0c\u7a0b\u5e8f\u4f1a\u629b\u51fa\u4e00\u4e2aNSUndefinedKeyException\u5f02\u5e38\u9519\u8bef\u3002\r\n\r\n(cocoachina.com\u6ce8\uff1aKey-Value Coding\u67e5\u627e\u65b9\u6cd5\u7684\u65f6\u5019\uff0c\u4e0d\u4ec5\u4ec5\u4f1a\u67e5\u627esomeKey\u8fd9\u4e2a\u65b9\u6cd5\uff0c\u8fd8\u4f1a\u67e5\u627egetsomeKey\u8fd9\u4e2a\u65b9\u6cd5\uff0c\u524d\u9762\u52a0\u4e00\u4e2aget\uff0c\u6216\u8005_someKey\u4ee5\u53ca_getsomeKey\u8fd9\u51e0\u79cd\u5f62\u5f0f\u3002\u540c\u65f6\uff0c\u67e5\u627e\u5b9e\u4f8b\u53d8\u91cf\u7684\u65f6\u5019\u4e5f\u4f1a\u4e0d\u4ec5\u4ec5\u67e5\u627esomeKey\u8fd9\u4e2a\u53d8\u91cf\uff0c\u4e5f\u4f1a\u67e5\u627e_someKey\u8fd9\u4e2a\u53d8\u91cf\u662f\u5426\u5b58\u5728\u3002)\r\n\r\n\u8bbe\u8ba1valueForUndefinedKey:\u65b9\u6cd5\u7684\u4e3b\u8981\u76ee\u7684\u662f\u5f53\u4f60\u4f7f\u7528-(id)valueForKey\u65b9\u6cd5\u4ece\u5bf9\u8c61\u4e2d\u8bf7\u6c42\u503c\u65f6\uff0c\u5bf9\u8c61\u80fd\u591f\u5728\u9519\u8bef\u53d1\u751f\u524d\uff0c\u6709\u6700\u540e\u7684\u673a\u4f1a\u54cd\u5e94\u8fd9\u4e2a\u8bf7\u6c42\u3002\u8fd9\u6837\u505a\u6709\u5f88\u591a\u597d\u5904\uff0c\u4e0b\u9762\u7684\u4e24\u4e2a\u4f8b\u5b50\u8bf4\u660e\u4e86\u8fd9\u6837\u505a\u7684\u597d\u5904\u3002\u201c\r\n\r\n\u6765\u81f3cocoa\uff0c\u8fd9\u4e2a\u8bf4\u6cd5\u5e94\u8be5\u633a\u6709\u9053\u7406\u3002\r\n\r\n\u56e0\u4e3a\u6211\u4eec\u77e5\u9053button\u5374\u662f\u5b58\u5728\u4e00\u4e2ahighlighted\u5b9e\u4f8b\u53d8\u91cf.\u56e0\u6b64\u4e3a\u4f55\u4e0a\u9762\u6211\u4eec\u53ea\u662fadd\u4e00\u4e2a\u76f8\u5173\u7684keypath\u5c31\u884c\u4e86\uff0c\r\n\r\n\u53ef\u4ee5\u6309\u7167kvc\u67e5\u627e\u7684\u903b\u8f91\u7406\u89e3\uff0c\u5c31\u8bf4\u7684\u8fc7\u53bb\u4e86\u3002"},{"ID":"998","typeID":"10","question":"\u4ee3\u7406\u7684\u4f5c\u7528?","answer":"\u4ee3\u7406\u7684\u76ee\u7684\u662f\u6539\u53d8\u6216\u4f20\u9012\u63a7\u5236\u94fe\u3002\u5141\u8bb8\u4e00\u4e2a\u7c7b\u5728\u67d0\u4e9b\u7279\u5b9a\u65f6\u523b\u901a\u77e5\u5230\u5176\u4ed6\u7c7b\uff0c\u800c\u4e0d\u9700\u8981\u83b7\u53d6\u5230\u90a3\u4e9b\u7c7b\u7684\u6307\u9488\u3002\u53ef\u4ee5\u51cf\u5c11\u6846\u67b6\u590d\u6742\u5ea6\u3002\r\n\r\n\u53e6\u5916\u4e00\u70b9\uff0c\u4ee3\u7406\u53ef\u4ee5\u7406\u89e3\u4e3ajava\u4e2d\u7684\u56de\u8c03\u76d1\u542c\u673a\u5236\u7684\u4e00\u79cd\u7c7b\u4f3c\u3002"},{"ID":"997","typeID":"10","question":"oc\u4e2d\u53ef\u4fee\u6539\u548c\u4e0d\u53ef\u4ee5\u4fee\u6539\u7c7b\u578b\u3002","answer":"\u53ef\u4fee\u6539\u4e0d\u53ef\u4fee\u6539\u7684\u96c6\u5408\u7c7b\u3002\u8fd9\u4e2a\u6211\u4e2a\u4eba\u7b80\u5355\u7406\u89e3\u5c31\u662f\u53ef\u52a8\u6001\u6dfb\u52a0\u4fee\u6539\u548c\u4e0d\u53ef\u52a8\u6001\u6dfb\u52a0\u4fee\u6539\u4e00\u6837\u3002\r\n\r\n\u6bd4\u5982NSArray\u548cNSMutableArray\u3002\u524d\u8005\u5728\u521d\u59cb\u5316\u540e\u7684\u5185\u5b58\u63a7\u4ef6\u5c31\u662f\u56fa\u5b9a\u4e0d\u53ef\u53d8\u7684\uff0c\u540e\u8005\u53ef\u4ee5\u6dfb\u52a0\u7b49\uff0c\u53ef\u4ee5\u52a8\u6001\u7533\u8bf7\u65b0\u7684\u5185\u5b58\u7a7a\u95f4\u3002"},{"ID":"996","typeID":"10","question":"\u6211\u4eec\u8bf4\u7684oc\u662f\u52a8\u6001\u8fd0\u884c\u65f6\u8bed\u8a00\u662f\u4ec0\u4e48\u610f\u601d?","answer":"\u591a\u6001\u3002 \u4e3b\u8981\u662f\u5c06\u6570\u636e\u7c7b\u578b\u7684\u786e\u5b9a\u7531\u7f16\u8bd1\u65f6\uff0c\u63a8\u8fdf\u5230\u4e86\u8fd0\u884c\u65f6\u3002\r\n\r\n\u8fd9\u4e2a\u95ee\u9898\u5176\u5b9e\u6d45\u6d89\u53ca\u5230\u4e24\u4e2a\u6982\u5ff5\uff0c\u8fd0\u884c\u65f6\u548c\u591a\u6001\u3002\r\n\r\n\u7b80\u5355\u6765\u8bf4\uff0c\u8fd0\u884c\u65f6\u673a\u5236\u4f7f\u6211\u4eec\u76f4\u5230\u8fd0\u884c\u65f6\u624d\u53bb\u51b3\u5b9a\u4e00\u4e2a\u5bf9\u8c61\u7684\u7c7b\u522b\uff0c\u4ee5\u53ca\u8c03\u7528\u8be5\u7c7b\u522b\u5bf9\u8c61\u6307\u5b9a\u65b9\u6cd5\u3002\r\n\r\n\u591a\u6001\uff1a\u4e0d\u540c\u5bf9\u8c61\u4ee5\u81ea\u5df1\u7684\u65b9\u5f0f\u54cd\u5e94\u76f8\u540c\u7684\u6d88\u606f\u7684\u80fd\u529b\u53eb\u505a\u591a\u6001\u3002\u610f\u601d\u5c31\u662f\u5047\u8bbe\u751f\u7269\u7c7b(life)\u90fd\u7528\u6709\u4e00\u4e2a\u76f8\u540c\u7684\u65b9\u6cd5-eat;\r\n\r\n\u90a3\u4eba\u7c7b\u5c5e\u4e8e\u751f\u7269\uff0c\u732a\u4e5f\u5c5e\u4e8e\u751f\u7269\uff0c\u90fd\u7ee7\u627f\u4e86life\u540e\uff0c\u5b9e\u73b0\u5404\u81ea\u7684eat\uff0c\u4f46\u662f\u8c03\u7528\u662f\u6211\u4eec\u53ea\u9700\u8c03\u7528\u5404\u81ea\u7684eat\u65b9\u6cd5\u3002\r\n\r\n\u4e5f\u5c31\u662f\u4e0d\u540c\u7684\u5bf9\u8c61\u4ee5\u81ea\u5df1\u7684\u65b9\u5f0f\u54cd\u5e94\u4e86\u76f8\u540c\u7684\u6d88\u606f(\u54cd\u5e94\u4e86eat\u8fd9\u4e2a\u9009\u62e9\u5668)\u3002"},{"ID":"995","typeID":"10","question":"\u901a\u77e5\u548c\u534f\u8bae\u7684\u4e0d\u540c\u4e4b\u5904?","answer":"\u534f\u8bae\u6709\u63a7\u5236\u94fe(has-a)\u7684\u5173\u7cfb\uff0c\u901a\u77e5\u6ca1\u6709\u3002\r\n\r\n\u9996\u5148\u6211\u4e00\u5f00\u59cb\u4e5f\u4e0d\u592a\u660e\u767d\uff0c\u4ec0\u4e48\u53eb\u63a7\u5236\u94fe(\u4e13\u4e1a\u672f\u8bed\u4e86~)\u3002\u4f46\u662f\u7b80\u5355\u5206\u6790\u4e0b\u901a\u77e5\u548c\u4ee3\u7406\u7684\u884c\u4e3a\u6a21\u5f0f\uff0c\u6211\u4eec\u5927\u81f4\u53ef\u4ee5\u6709\u81ea\u5df1\u7684\u7406\u89e3\r\n\r\n\u7b80\u5355\u6765\u8bf4\uff0c\u901a\u77e5\u7684\u8bdd\uff0c\u5b83\u53ef\u4ee5\u4e00\u5bf9\u591a\uff0c\u4e00\u6761\u6d88\u606f\u53ef\u4ee5\u53d1\u9001\u7ed9\u591a\u4e2a\u6d88\u606f\u63a5\u53d7\u8005\u3002\r\n\r\n\u4ee3\u7406\u6309\u6211\u4eec\u7684\u7406\u89e3\uff0c\u5230\u4e0d\u662f\u76f4\u63a5\u8bf4\u4e0d\u80fd\u4e00\u5bf9\u591a\uff0c\u6bd4\u5982\u6211\u4eec\u77e5\u9053\u7684\u660e\u661f\u7ecf\u6d4e\u4ee3\u7406\u4eba\uff0c\u5f88\u591a\u65f6\u5019\u4e00\u4e2a\u7ecf\u6d4e\u4eba\u8d1f\u8d23\u597d\u51e0\u4e2a\u660e\u661f\u7684\u4e8b\u52a1\u3002\r\n\r\n\u53ea\u662f\u5bf9\u4e8e\u4e0d\u540c\u660e\u661f\u95f4\uff0c\u4ee3\u7406\u7684\u4e8b\u7269\u5bf9\u8c61\u90fd\u662f\u4e0d\u4e00\u6837\u7684\uff0c\u4e00\u4e00\u5bf9\u5e94\uff0c\u4e0d\u53ef\u80fd\u8bf4\u660e\u5929\u8981\u5904\u7406A\u660e\u661f\u8981\u4e00\u4e2a\u53d1\u5e03\u4f1a\uff0c\u4ee3\u7406\u4eba\u53d1\u51fa\u5904\u7406\u53d1\u5e03\u4f1a\u7684\u6d88\u606f\u540e\uff0c\u522b\u79f0B\u7684\r\n\r\n\u53d1\u5e03\u4f1a\u4e86\u3002\u4f46\u662f\u901a\u77e5\u5c31\u4e0d\u4e00\u6837\uff0c\u4ed6\u53ea\u5173\u5fc3\u53d1\u51fa\u901a\u77e5\uff0c\u800c\u4e0d\u5173\u5fc3\u591a\u5c11\u63a5\u6536\u5230\u611f\u5174\u8da3\u8981\u5904\u7406\u3002\r\n\r\n\u56e0\u6b64\u63a7\u5236\u94fe(has-a\u4ece\u82f1\u8bed\u5355\u8bcd\u5927\u81f4\u53ef\u4ee5\u770b\u51fa\uff0c\u5355\u4e00\u62e5\u6709\u548c\u53ef\u63a7\u5236\u7684\u5bf9\u5e94\u5173\u7cfb\u3002\r\n"},{"ID":"994","typeID":"10","question":"\u4ec0\u4e48\u662f\u63a8\u9001\u6d88\u606f?","answer":"\u63a8\u9001\u901a\u77e5\u66f4\u662f\u4e00\u79cd\u6280\u672f\u3002\r\n\r\n\u7b80\u5355\u70b9\u5c31\u662f\u5ba2\u6237\u7aef\u83b7\u53d6\u8d44\u6e90\u7684\u4e00\u79cd\u624b\u6bb5\u3002\r\n\r\n\u666e\u901a\u60c5\u51b5\u4e0b\uff0c\u90fd\u662f\u5ba2\u6237\u7aef\u4e3b\u52a8\u7684pull\u3002\r\n\r\n\u63a8\u9001\u5219\u662f\u670d\u52a1\u5668\u7aef\u4e3b\u52a8push\u3002"},{"ID":"993","typeID":"10","question":"\u5173\u4e8e\u591a\u6001\u6027","answer":"\u591a\u6001\uff0c\u5b50\u7c7b\u6307\u9488\u53ef\u4ee5\u8d4b\u503c\u7ed9\u7236\u7c7b\u3002\r\n"},{"ID":"992","typeID":"10","question":"\u5bf9\u4e8e\u5355\u4f8b\u7684\u7406\u89e3","answer":"\u5728objective-c\u4e2d\u8981\u5b9e\u73b0\u4e00\u4e2a\u5355\u4f8b\u7c7b\uff0c\u81f3\u5c11\u9700\u8981\u505a\u4ee5\u4e0b\u56db\u4e2a\u6b65\u9aa4\uff1a\r\n\r\n1).\u4e3a\u5355\u4f8b\u5bf9\u8c61\u5b9e\u73b0\u4e00\u4e2a\u9759\u6001\u5b9e\u4f8b\uff0c\u5e76\u521d\u59cb\u5316\uff0c\u7136\u540e\u8bbe\u7f6e\u6210nil\uff0c\r\n\r\n2).\u5b9e\u73b0\u4e00\u4e2a\u5b9e\u4f8b\u6784\u9020\u65b9\u6cd5\u68c0\u67e5\u4e0a\u9762\u58f0\u660e\u7684\u9759\u6001\u5b9e\u4f8b\u662f\u5426\u4e3anil\uff0c\u5982\u679c\u662f\u5219\u65b0\u5efa\u5e76\u8fd4\u56de\u4e00\u4e2a\u672c\u7c7b\u7684\u5b9e\u4f8b\uff0c\r\n\r\n3).\u91cd\u5199allocWithZone\u65b9\u6cd5\uff0c\u7528\u6765\u4fdd\u8bc1\u5176\u4ed6\u4eba\u76f4\u63a5\u4f7f\u7528alloc\u548cinit\u8bd5\u56fe\u83b7\u5f97\u4e00\u4e2a\u65b0\u5b9e\u529b\u7684\u65f6\u5019\u4e0d\u4ea7\u751f\u4e00\u4e2a\u65b0\u5b9e\u4f8b\uff0c\r\n\r\n4).\u9002\u5f53\u5b9e\u73b0allocWitheZone\uff0ccopyWithZone\uff0crelease\u548cautorelease\u3002"},{"ID":"991","typeID":"10","question":"\u8bf4\u8bf4\u54cd\u5e94\u94fe","answer":"\u4e8b\u4ef6\u54cd\u5e94\u94fe\u3002\u5305\u62ec\u70b9\u51fb\u4e8b\u4ef6\uff0c\u753b\u9762\u5237\u65b0\u4e8b\u4ef6\u7b49\u3002\u5728\u89c6\u56fe\u6808\u5185\u4ece\u4e0a\u81f3\u4e0b\uff0c\u6216\u8005\u4ece\u4e0b\u4e4b\u4e0a\u4f20\u64ad\u3002\r\n\r\n\u53ef\u4ee5\u8bf4\u70b9\u4e8b\u4ef6\u7684\u5206\u53d1\uff0c\u4f20\u9012\u4ee5\u53ca\u5904\u7406\u3002\u5177\u4f53\u53ef\u4ee5\u53bb\u770b\u4e0btouch\u4e8b\u4ef6\u8fd9\u5757\u3002\u56e0\u4e3a\u95ee\u7684\u592a\u62bd\u8c61\u5316\u4e86\r\n\r\n\u4e25\u91cd\u6000\u7591\u9898\u76ee\u51fa\u5230\u8d8a\u540e\u9762\u5c31\u8d8a\u7b3c\u7edf\u3002\r\n\r\n\u53ef\u4ee5\u4ece\u8d23\u4efb\u94fe\u6a21\u5f0f\uff0c\u6765\u8bb2\u901a\u8fc7\u4e8b\u4ef6\u54cd\u5e94\u94fe\u5904\u7406\uff0c\u5176\u62e5\u6709\u7684\u6269\u5c55\u6027"},{"ID":"990","typeID":"10","question":"rame\u548cbounds\u6709\u4ec0\u4e48\u4e0d\u540c?","answer":"frame\u6307\u7684\u662f\uff1a\u8be5view\u5728\u7236view\u5750\u6807\u7cfb\u7edf\u4e2d\u7684\u4f4d\u7f6e\u548c\u5927\u5c0f\u3002(\u53c2\u7167\u70b9\u662f\u7236\u4eb2\u7684\u5750\u6807\u7cfb\u7edf)\r\n\r\nbounds\u6307\u7684\u662f\uff1a\u8be5view\u5728\u672c\u8eab\u5750\u6807\u7cfb\u7edf\u4e2d \u7684\u4f4d\u7f6e\u548c\u5927\u5c0f\u3002(\u53c2\u7167\u70b9\u662f\u672c\u8eab\u5750\u6807\u7cfb\u7edf)"},{"ID":"989","typeID":"10","question":"\u65b9\u6cd5\u548c\u9009\u62e9\u5668\u6709\u4f55\u4e0d\u540c?","answer":"selector\u662f\u4e00\u4e2a\u65b9\u6cd5\u7684\u540d\u5b57\uff0cmethod\u662f\u4e00\u4e2a\u7ec4\u5408\u4f53\uff0c\u5305\u542b\u4e86\u540d\u5b57\u548c\u5b9e\u73b0."},{"ID":"988","typeID":"10","question":"OC\u7684\u5783\u573e\u56de\u6536\u673a\u5236?","answer":"OC2.0\u6709Garbage collection\uff0c\u4f46\u662fiOS\u5e73\u53f0\u4e0d\u63d0\u4f9b\u3002\r\n\r\n\u4e00\u822c\u6211\u4eec\u4e86\u89e3\u7684objective-c\u5bf9\u4e8e\u5185\u5b58\u7ba1\u7406\u90fd\u662f\u624b\u52a8\u64cd\u4f5c\u7684\uff0c\u4f46\u662f\u4e5f\u6709\u81ea\u52a8\u91ca\u653e\u6c60\u3002\r\n\r\n"},{"ID":"987","typeID":"10","question":"NSOperation queue?","answer":"\u5b58\u653eNSOperation\u7684\u96c6\u5408\u7c7b\u3002\r\n\r\n\u64cd\u4f5c\u548c\u64cd\u4f5c\u961f\u5217\uff0c\u57fa\u672c\u53ef\u4ee5\u770b\u6210java\u4e2d\u7684\u7ebf\u7a0b\u548c\u7ebf\u7a0b\u6c60\u7684\u6982\u5ff5\u3002\u7528\u4e8e\u5904\u7406ios\u591a\u7ebf\u7a0b\u5f00\u53d1\u7684\u95ee\u9898\u3002\r\n\r\n\u7f51\u4e0a\u90e8\u5206\u8d44\u6599\u63d0\u5230\u4e00\u70b9\u662f\uff0c\u867d\u7136\u662fqueue\uff0c\u4f46\u662f\u5374\u5e76\u4e0d\u662f\u5e26\u6709\u961f\u5217\u7684\u6982\u5ff5\uff0c\u653e\u5165\u7684\u64cd\u4f5c\u5e76\u975e\u662f\u6309\u7167\u4e25\u683c\u7684\u5148\u8fdb\u73b0\u51fa\u3002\r\n\r\n\u8fd9\u8fb9\u53c8\u6709\u4e2a\u7591\u70b9\u662f\uff0c\u5bf9\u4e8e\u961f\u5217\u6765\u8bf4\uff0c\u5148\u8fdb\u5148\u51fa\u7684\u6982\u5ff5\u662fAfunc\u6dfb\u52a0\u8fdb\u961f\u5217\uff0cBfunc\u7d27\u8ddf\u7740\u4e5f\u8fdb\u5165\u961f\u5217\uff0cAfunc\u5148\u6267\u884c\u8fd9\u4e2a\u662f\u5fc5\u7136\u7684\uff0c\r\n\r\n\u4f46\u662fBfunc\u662f\u7b49Afunc\u5b8c\u5168\u64cd\u4f5c\u5b8c\u4ee5\u540e\uff0cB\u624d\u5f00\u59cb\u542f\u52a8\u5e76\u4e14\u6267\u884c\uff0c\u56e0\u6b64\u961f\u5217\u7684\u6982\u5ff5\u79bb\u4e71\u4e0a\u6709\u70b9\u8fdd\u80cc\u4e86\u591a\u7ebf\u7a0b\u5904\u7406\u8fd9\u4e2a\u6982\u5ff5\u3002\r\n\r\n\u4f46\u662f\u8f6c\u5ff5\u4e00\u60f3\u5176\u5b9e\u53ef\u4ee5\u53c2\u8003\u94f6\u884c\u7684\u53d6\u7968\u548c\u53eb\u53f7\u7cfb\u7edf\u3002\r\n\r\n\u56e0\u6b64\u5bf9\u4e8eA\u6bd4B\u5148\u6392\u961f\u53d6\u7968\u4f46\u662fB\u7387\u5148\u6267\u884c\u5b8c\u64cd\u4f5c\uff0c\u6211\u4eec\u4ea6\u7136\u53ef\u4ee5\u611f\u6027\u8ba4\u4e3a\u8fd9\u8fd8\u662f\u4e00\u4e2a\u961f\u5217\u3002\r\n\r\n\u4f46\u662f\u540e\u6765\u770b\u5230\u4e00\u7968\u5173\u4e8e\u8fd9\u64cd\u4f5c\u961f\u5217\u8bdd\u9898\u7684\u6587\u7ae0\uff0c\u5176\u4e2d\u6709\u4e00\u53e5\u63d0\u5230\r\n\r\n\u201c\u56e0\u4e3a\u4e24\u4e2a\u64cd\u4f5c\u63d0\u4ea4\u7684\u65f6\u95f4\u95f4\u9694\u5f88\u8fd1\uff0c\u7ebf\u7a0b\u6c60\u4e2d\u7684\u7ebf\u7a0b\uff0c\u8c01\u5148\u542f\u52a8\u662f\u4e0d\u5b9a\u7684\u3002\u201d\r\n\r\n\u77ac\u95f4\u89c9\u5f97\u8fd9\u4e2aqueue\u540d\u5b57\u6709\u70b9\u5ffd\u60a0\u4eba\u4e86\uff0c\u8fd8\u4e0d\u5982pool~\r\n\r\n\u7efc\u5408\u4e00\u70b9\uff0c\u6211\u4eec\u77e5\u9053\u4ed6\u53ef\u4ee5\u6bd4\u8f83\u5927\u7684\u7528\u5904\u5728\u4e8e\u53ef\u4ee5\u5e2e\u7ec4\u591a\u7ebf\u7a0b\u7f16\u7a0b\u5c31\u597d\u4e86\u3002\r\n"},{"ID":"986","typeID":"10","question":"\u4ec0\u4e48\u662f\u5ef6\u8fdf\u52a0\u8f7d?","answer":"\u61d2\u6c49\u6a21\u5f0f\uff0c\u53ea\u5728\u7528\u5230\u7684\u65f6\u5019\u624d\u53bb\u521d\u59cb\u5316\u3002\r\n\r\n\u4e5f\u53ef\u4ee5\u7406\u89e3\u6210\u5ef6\u65f6\u52a0\u8f7d\u3002\r\n\r\n\u6211\u89c9\u5f97\u6700\u597d\u4e5f\u6700\u7b80\u5355\u7684\u4e00\u4e2a\u5217\u5b50\u5c31\u662ftableView\u4e2d\u56fe\u7247\u7684\u52a0\u8f7d\u663e\u793a\u4e86\u3002\r\n\r\n\u4e00\u4e2a\u5ef6\u65f6\u8f7d\uff0c\u907f\u514d\u5185\u5b58\u8fc7\u9ad8\uff0c\u4e00\u4e2a\u5f02\u6b65\u52a0\u8f7d\uff0c\u907f\u514d\u7ebf\u7a0b\u5835\u585e\u3002"},{"ID":"985","typeID":"10","question":" \u662f\u5426\u5728\u4e00\u4e2a\u89c6\u56fe\u63a7\u5236\u5668\u4e2d\u5d4c\u5165\u4e24\u4e2atableview\u63a7\u5236\u5668?","answer":"\u4e00\u4e2a\u89c6\u56fe\u63a7\u5236\u53ea\u63d0\u4f9b\u4e86\u4e00\u4e2aView\u89c6\u56fe\uff0c\u7406\u8bba\u4e0a\u4e00\u4e2atableViewController\u4e5f\u4e0d\u80fd\u653e\u5427\uff0c\r\n\r\n\u53ea\u80fd\u8bf4\u53ef\u4ee5\u5d4c\u5165\u4e00\u4e2atableview\u89c6\u56fe\u3002\u5f53\u7136\uff0c\u9898\u76ee\u672c\u8eab\u4e5f\u6709\u6b67\u4e49\uff0c\u5982\u679c\u4e0d\u662f\u6211\u4eec\u5b9a\u6027\u601d\u7ef4\u8ba4\u4e3a\u7684UIViewController\uff0c\u800c\u662f\u5b8f\u89c2\u7684\u8868\u793a\u89c6\u56fe\u63a7\u5236\u8005\uff0c\u90a3\u6211\u4eec\u5012\u662f\u53ef\u4ee5\u628a\u5176\u770b\u6210\u4e00\u4e2a\u89c6\u56fe\u63a7\u5236\u8005\uff0c\u5b83\u53ef\u4ee5\u63a7\u5236\u591a\u4e2a\u89c6\u56fe\u63a7\u5236\u5668\uff0c\u6bd4\u5982TabbarController\u90a3\u6837\u7684\u611f\u89c9\u3002"},{"ID":"984","typeID":"10","question":"\u4e00\u4e2atableView\u662f\u5426\u53ef\u4ee5\u5173\u8054\u4e24\u4e2a\u4e0d\u540c\u7684\u6570\u636e\u6e90?\u4f60\u4f1a\u600e\u4e48\u5904\u7406?","answer":"\u9996\u5148\u6211\u4eec\u4ece\u4ee3\u7801\u6765\u770b\uff0c\u6570\u636e\u6e90\u5982\u4f55\u5173\u8054\u4e0a\u7684\uff0c\u5176\u5b9e\u662f\u5728\u6570\u636e\u6e90\u5173\u8054\u7684\u4ee3\u7406\u65b9\u6cd5\u91cc\u5b9e\u73b0\u7684\u3002\r\n\r\n\u56e0\u6b64\u6211\u4eec\u5e76\u4e0d\u5173\u5fc3\u5982\u4f55\u53bb\u5173\u8054\u4ed6\uff0c\u4ed6\u600e\u4e48\u5173\u8054\u4e0a\uff0c\u65b9\u6cd5\u53ea\u662f\u8ba9\u6211\u8fd4\u56de\u6839\u636e\u81ea\u5df1\u7684\u9700\u8981\u53bb\u8bbe\u7f6e\u5982\u76f8\u5173\u7684\u6570\u636e\u6e90\u3002\r\n\r\n\u56e0\u6b64\uff0c\u6211\u89c9\u5f97\u53ef\u4ee5\u8bbe\u7f6e\u591a\u4e2a\u6570\u636e\u6e90\u554a\uff0c\u4f46\u662f\u6709\u4e2a\u95ee\u9898\u662f\uff0c\u4f60\u8fd9\u662f\u60f3\u5e72\u561b\u5462?\u60f3\u8ba9\u5217\u8868\u5982\u4f55\u663e\u793a\uff0c\u4e0d\u540c\u7684\u6570\u636e\u6e90\u5206\u533a\u5757\u663e\u793a?"},{"ID":"983","typeID":"10","question":"\u4ec0\u4e48\u65f6\u5019\u4f7f\u7528NSMutableArray\uff0c\u4ec0\u4e48\u65f6\u5019\u4f7f\u7528NSArray?","answer":"\u5f53\u6570\u7ec4\u5728\u7a0b\u5e8f\u8fd0\u884c\u65f6\uff0c\u9700\u8981\u4e0d\u65ad\u53d8\u5316\u7684\uff0c\u4f7f\u7528NSMutableArray\uff0c\u5f53\u6570\u7ec4\u5728\u521d\u59cb\u5316\u540e\uff0c\u4fbf\u4e0d\u518d\u6539\u53d8\u7684\uff0c\u4f7f\u7528NSArray\u3002\u9700\u8981\u6307\u51fa\u7684\u662f\uff0c\u4f7f\u7528NSArray\u53ea\u8868\u660e\u7684\u662f\u8be5\u6570\u7ec4\u5728\u8fd0\u884c\u65f6\u4e0d\u53d1\u751f\u6539\u53d8\uff0c\u5373\u4e0d\u80fd\u5f80NSAarry\u7684\u6570\u7ec4\u91cc\u65b0\u589e\u548c\u5220\u9664\u5143\u7d20\uff0c\u4f46\u4e0d\u8868\u660e\u5176\u6570\u7ec4\u5167\u7684\u5143\u7d20\u7684\u5185\u5bb9\u4e0d\u80fd\u53d1\u751f\u6539\u53d8\u3002NSArray\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\uff0cNSMutableArray\u4e0d\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\uff0c\u591a\u7ebf\u7a0b\u4f7f\u7528\u5230NSMutableArray\u9700\u8981\u6ce8\u610f\u3002"},{"ID":"982","typeID":"10","question":"\u7ed9\u51fa\u59d4\u6258\u65b9\u6cd5\u7684\u5b9e\u4f8b\uff0c\u5e76\u4e14\u8bf4\u51faUITableVIew\u7684Data Source\u65b9\u6cd5","answer":"CocoaTouch\u6846\u67b6\u4e2d\u7528\u5230\u4e86\u5927\u91cf\u59d4\u6258\uff0c\u5176\u4e2dUITableViewDelegate\u5c31\u662f\u59d4\u6258\u673a\u5236\u7684\u5178\u578b\u5e94\u7528\uff0c\u662f\u4e00\u4e2a\u5178\u578b\u7684\u4f7f\u7528\u59d4\u6258\u6765\u5b9e\u73b0\u9002\u914d\u5668\u6a21\u5f0f\uff0c\u5176\u4e2dUITableViewDelegate\u534f\u8bae\u662f\u76ee\u6807\uff0ctableview\u662f\u9002\u914d\u5668\uff0c\u5b9e\u73b0UITableViewDelegate\u534f\u8bae\uff0c\u5e76\u5c06\u81ea\u8eab\u8bbe\u7f6e\u4e3atalbeview\u7684delegate\u7684\u5bf9\u8c61\uff0c\u662f\u88ab\u9002\u914d\u5668\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\u8be5\u5bf9\u8c61\u662fUITableViewController\u3002\r\n\r\nUITableVIew\u7684Data Source\u65b9\u6cd5\u6709- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section;\r\n\r\n- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath;\r\n"},{"ID":"981","typeID":"10","question":"\u5982\u679c\u6211\u4eec\u4e0d\u521b\u5efa\u5185\u5b58\u6c60\uff0c\u662f\u5426\u6709\u5185\u5b58\u6c60\u63d0\u4f9b\u7ed9\u6211\u4eec?","answer":"\u754c\u9762\u7ebf\u7a0b\u7ef4\u62a4\u7740\u81ea\u5df1\u7684\u5185\u5b58\u6c60\uff0c\u7528\u6237\u81ea\u5df1\u521b\u5efa\u7684\u6570\u636e\u7ebf\u7a0b\uff0c\u5219\u9700\u8981\u521b\u5efa\u8be5\u7ebf\u7a0b\u7684\u5185\u5b58\u6c60"},{"ID":"980","typeID":"10","question":"\u4ec0\u4e48\u65f6\u5019\u9700\u8981\u5728\u7a0b\u5e8f\u4e2d\u521b\u5efa\u5185\u5b58\u6c60?","answer":"\u7528\u6237\u81ea\u5df1\u521b\u5efa\u7684\u6570\u636e\u7ebf\u7a0b\uff0c\u5219\u9700\u8981\u521b\u5efa\u8be5\u7ebf\u7a0b\u7684\u5185\u5b58\u6c60"},{"ID":"979","typeID":"10","question":"\u7c7bNSObject\u7684\u90a3\u4e9b\u65b9\u6cd5\u7ecf\u5e38\u88ab\u4f7f\u7528?","answer":"NSObject\u662fObjetive-C\u7684\u57fa\u7c7b\uff0c\u5176\u7531NSObject\u7c7b\u53ca\u4e00\u7cfb\u5217\u534f\u8bae\u6784\u6210\u3002\r\n\r\n\u5176\u4e2d\u7c7b\u65b9\u6cd5alloc\u3001class\u3001 description \u5bf9\u8c61\u65b9\u6cd5init\u3001dealloc\u3001\u2013 performSelector:withObject:afterDelay:\u7b49\u7ecf\u5e38\u88ab\u4f7f\u7528"},{"ID":"978","typeID":"10","question":"\u4ec0\u4e48\u662f\u7b80\u4fbf\u6784\u9020\u65b9\u6cd5?","answer":"\u7b80\u4fbf\u6784\u9020\u65b9\u6cd5\u4e00\u822c\u7531CocoaTouch\u6846\u67b6\u63d0\u4f9b\uff0c\u5982NSNumber\u7684 + numberWithBool: + numberWithChar: + numberWithDouble: + numberWithFloat: + numberWithInt:\r\n\r\nFoundation\u4e0b\u5927\u90e8\u5206\u7c7b\u5747\u6709\u7b80\u4fbf\u6784\u9020\u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7b80\u4fbf\u6784\u9020\u65b9\u6cd5\uff0c\u83b7\u5f97\u7cfb\u7edf\u7ed9\u6211\u4eec\u521b\u5efa\u597d\u7684\u5bf9\u8c61\uff0c\u5e76\u4e14\u4e0d\u9700\u8981\u624b\u52a8\u91ca\u653e\u3002"},{"ID":"977","typeID":"10","question":"\u5982\u4f55\u4f7f\u7528Xcode\u8bbe\u8ba1\u901a\u7528\u5e94\u7528?","answer":"\u4f7f\u7528MVC\u6a21\u5f0f\u8bbe\u8ba1\u5e94\u7528\uff0c\u5176\u4e2dModel\u5c42\u5b8c\u6210\u8131\u79bb\u754c\u9762\uff0c\u5373\u5728Model\u5c42\uff0c\u5176\u662f\u53ef\u8fd0\u884c\u5728\u4efb\u4f55\u8bbe\u5907\u4e0a\uff0c\u5728controller\u5c42\uff0c\u6839\u636eiPhone\u4e0eiPad(\u72ec\u6709UISplitViewController)\u7684\u4e0d\u540c\u7279\u70b9\u9009\u62e9\u4e0d\u540c\u7684viewController\u5bf9\u8c61\u3002\u5728View\u5c42\uff0c\u53ef\u6839\u636e\u73b0\u5b9e\u8981\u6c42\uff0c\u6765\u8bbe\u8ba1\uff0c\u5176\u4e2d\u4ee5xib\u6587\u4ef6\u8bbe\u8ba1\u65f6\uff0c\u5176\u8bbe\u7f6e\u5176\u4e3auniversal\u3002"},{"ID":"976","typeID":"10","question":"UIView\u7684\u52a8\u753b\u6548\u679c\u6709\u90a3\u4e9b?","answer":"\u6709\u5f88\u591a\uff0c\u5982 UIViewAnimationOptionCurveEaseInOut UIViewAnimationOptionCurveEaseIn UIViewAnimationOptionCurveEaseOut UIViewAnimationOptionTransitionFlipFromLeft UIViewAnimationOptionTransitionFlipFromRight UIViewAnimationOptionTransitionCurlUpUIViewAnimationOptionTransitionCurlDown"},{"ID":"975","typeID":"10","question":"\u5728iPhone\u5e94\u7528\u4e2d\u5982\u4f55\u4fdd\u5b58\u6570\u636e?","answer":"\u6709\u4ee5\u4e0b\u51e0\u79cd\u4fdd\u5b58\u673a\u5236\uff1a\r\n\r\n1).\u901a\u8fc7web\u670d\u52a1\uff0c\u4fdd\u5b58\u5728\u670d\u52a1\u5668\u4e0a\r\n\r\n2).\u901a\u8fc7NSCoder\u56fa\u5316\u673a\u5236\uff0c\u5c06\u5bf9\u8c61\u4fdd\u5b58\u5728\u6587\u4ef6\u4e2d\r\n\r\n3).\u901a\u8fc7SQlite\u6216CoreData\u4fdd\u5b58\u5728\u6587\u4ef6\u6570\u636e\u5e93\u4e2d"},{"ID":"974","typeID":"10","question":"\u4ec0\u4e48\u662fNSManagedObject\u6a21\u578b?","answer":"NSManagedObject\u662fNSObject\u7684\u5b50\u7c7b \uff0c\u4e5f\u662fcoredata\u7684\u91cd\u8981\u7ec4\u6210\u90e8\u5206\uff0c\u5b83\u662f\u4e00\u4e2a\u901a\u7528\u7684\u7c7b,\u5b9e\u73b0\u4e86core data \u6a21\u578b\u5c42\u6240\u9700\u7684\u57fa\u672c\u529f\u80fd\uff0c\u7528\u6237\u53ef\u901a\u8fc7\u5b50\u7c7b\u5316NSManagedObject\uff0c\u5efa\u7acb\u81ea\u5df1\u7684\u6570\u636e\u6a21\u578b"},{"ID":"973","typeID":"10","question":"\u4ec0\u4e48\u662fcoredata?","answer":"coredata\u662f\u82f9\u679c\u63d0\u4f9b\u4e00\u5957\u6570\u636e\u4fdd\u5b58\u6846\u67b6\uff0c\u5176\u57fa\u4e8eSQlite"},{"ID":"972","typeID":"10","question":"\u4ec0\u4e48\u662fNSManagedobjectContext?","answer":"NSManagedobjectContext\u5bf9\u8c61\u8d1f\u8d23\u5e94\u7528\u548c\u6570\u636e\u5e93\u4e4b\u95f4\u7684\u4ea4\u4e92\u3002"},{"ID":"971","typeID":"10","question":"\u4ec0\u4e48\u662f\u8c13\u8bcd?","answer":"\u8c13\u8bcd\u662f\u901a\u8fc7NSPredicate\uff0c\u662f\u901a\u8fc7\u7ed9\u5b9a\u7684\u903b\u8f91\u6761\u4ef6\u4f5c\u4e3a\u7ea6\u675f\u6761\u4ef6\uff0c\u5b8c\u6210\u5bf9\u6570\u636e\u7684\u7b5b\u9009\u3002\r\n\r\n\r\npredicate = [NSPredicate predicateWithFormat:@\"customerID == %d\",n];\r\na = [customers filteredArrayUsingPredicate:predicate];"},{"ID":"970","typeID":"10","question":"\u548ccoredata\u4e00\u8d77\u6709\u54ea\u51e0\u79cd\u6301\u4e45\u5316\u5b58\u50a8\u673a\u5236?","answer":"\u5b58\u5165\u5230\u6587\u4ef6\u3001 \u5b58\u5165\u5230NSUserDefaults(\u7cfb\u7edfplist\u6587\u4ef6\u4e2d)\u3001\u5b58\u5165\u5230Sqlite\u6587\u4ef6\u6570\u636e\u5e93"},{"ID":"969","typeID":"10","question":"\u8c08\u8c08\u5bf9Block \u7684\u7406\u89e3?\u5e76\u5199\u51fa\u4e00\u4e2a\u4f7f\u7528Block\u6267\u884cUIVew\u52a8\u753b?","answer":"Block\u662f\u53ef\u4ee5\u83b7\u53d6\u5176\u4ed6\u51fd\u6570\u5c40\u90e8\u53d8\u91cf\u7684\u533f\u540d\u51fd\u6570\uff0c\u5176\u4e0d\u4f46\u65b9\u4fbf\u5f00\u53d1\uff0c\u5e76\u4e14\u53ef\u4ee5\u5927\u5e45\u63d0\u9ad8\u5e94\u7528\u7684\u6267\u884c\u6548\u7387(\u591a\u6838\u5fc3CPU\u53ef\u76f4\u63a5\u5904\u7406Block\u6307\u4ee4)\r\n\r\n[UIView transitionWithView:self.view\r\nduration:0.2\r\noptions:UIViewAnimationOptionTransitionFlipFromLeft\r\nanimations:^{ [[blueViewController view] removeFromSuperview]; [[self view] insertSubview:yellowViewController.view atIndex:0]; }\r\ncompletion:NULL];"},{"ID":"968","typeID":"10","question":"\u505a\u8fc7\u7684\u9879\u76ee\u662f\u5426\u6d89\u53ca\u7f51\u7edc\u8bbf\u95ee\u529f\u80fd\uff0c\u4f7f\u7528\u4ec0\u4e48\u5bf9\u8c61\u5b8c\u6210\u7f51\u7edc\u529f\u80fd?","answer":"ASIHTTPRequest\u4e0eNSURLConnection"},{"ID":"967","typeID":"10","question":"\u7b80\u5355\u4ecb\u7ecd\u4e0bNSURLConnection\u7c7b\u53ca+ sendSynchronousRequest:returningResponse:error:\u4e0e\u2013 initWithRequest:delegate:\u4e24\u4e2a\u65b9\u6cd5\u7684\u533a\u522b?","answer":"NSURLConnection\u4e3b\u8981\u7528\u4e8e\u7f51\u7edc\u8bbf\u95ee\uff0c\u5176\u4e2d+ sendSynchronousRequest:returningResponse:error:\u662f\u540c\u6b65\u8bbf\u95ee\u6570\u636e\uff0c\u5373\u5f53\u524d\u7ebf\u7a0b\u4f1a\u963b\u585e\uff0c\u5e76\u7b49\u5f85request\u7684\u8fd4\u56de\u7684response\uff0c\u800c\u2013 initWithRequest:delegate:\u4f7f\u7528\u7684\u662f\u5f02\u6b65\u52a0\u8f7d\uff0c\u5f53\u5176\u5b8c\u6210\u7f51\u7edc\u8bbf\u95ee\u540e\uff0c\u4f1a\u901a\u8fc7delegate\u56de\u5230\u4e3b\u7ebf\u7a0b\uff0c\u5e76\u5176\u59d4\u6258\u7684\u5bf9\u8c61\u3002"},{"ID":"966","typeID":"10","question":"\u591a\u7ebf\u7a0b\u662f\u4ec0\u4e48\uff1f","answer":"\u591a\u7ebf\u7a0b\u662f\u4e2a\u590d\u6742\u7684\u6982\u5ff5\uff0c\u6309\u5b57\u9762\u610f\u601d\u662f\u540c\u6b65\u5b8c\u6210\u591a\u9879\u4efb\u52a1\uff0c\u63d0\u9ad8\u4e86\u8d44\u6e90\u7684\u4f7f\u7528\u6548\u7387\uff0c\u4ece\u786c\u4ef6\u3001\u64cd\u4f5c\u7cfb\u7edf\u3001\u5e94\u7528\u8f6f\u4ef6\u4e0d\u540c\u7684\u89d2\u5ea6\u53bb\u770b\uff0c\u591a\u7ebf\u7a0b\u88ab\u8d4b\u4e88\u4e0d\u540c\u7684\u5185\u6db5\uff0c\u5bf9\u4e8e\u786c\u4ef6\uff0c\u73b0\u5728\u5e02\u9762\u4e0a\u591a\u6570\u7684CPU\u90fd\u662f\u591a\u6838\u7684\uff0c\u591a\u6838\u7684CPU\u8fd0\u7b97\u591a\u7ebf\u7a0b\u66f4\u4e3a\u51fa\u8272;\u4ece\u64cd\u4f5c\u7cfb\u7edf\u89d2\u5ea6\uff0c\u662f\u591a\u4efb\u52a1\uff0c\u73b0\u5728\u7528\u7684\u4e3b\u6d41\u64cd\u4f5c\u7cfb\u7edf\u90fd\u662f\u591a\u4efb\u52a1\u7684\uff0c\u53ef\u4ee5\u4e00\u8fb9\u542c\u6b4c\u3001\u4e00\u8fb9\u5199\u535a\u5ba2;\u5bf9\u4e8e\u5e94\u7528\u6765\u8bf4\uff0c\u591a\u7ebf\u7a0b\u53ef\u4ee5\u8ba9\u5e94\u7528\u6709\u66f4\u5feb\u7684\u56de\u5e94\uff0c\u53ef\u4ee5\u5728\u7f51\u7edc\u4e0b\u8f7d\u65f6\uff0c\u540c\u65f6\u54cd\u5e94\u7528\u6237\u7684\u89e6\u6478\u64cd\u4f5c\u3002\u5728iOS\u5e94\u7528\u4e2d\uff0c\u5bf9\u591a\u7ebf\u7a0b\u6700\u521d\u7684\u7406\u89e3\uff0c\u5c31\u662f\u5e76\u53d1\uff0c\u5b83\u7684\u542b\u4e49\u662f\u539f\u6765\u5148\u505a\u70e7\u6c34\uff0c\u518d\u6458\u83dc\uff0c\u518d\u7092\u83dc\u7684\u5de5\u4f5c\uff0c\u4f1a\u53d8\u6210\u70e7\u6c34\u7684\u540c\u65f6\u53bb\u6458\u83dc\uff0c\u6700\u540e\u53bb\u7092\u83dc\u3002"},{"ID":"965","typeID":"10","question":"iOS \u4e2d\u7684\u591a\u7ebf\u7a0b\u6709\u54ea\u4e9b\uff1f","answer":"iOS\u4e2d\u7684\u591a\u7ebf\u7a0b\uff0c\u662fCocoa\u6846\u67b6\u4e0b\u7684\u591a\u7ebf\u7a0b\uff0c\u901a\u8fc7Cocoa\u7684\u5c01\u88c5\uff0c\u53ef\u4ee5\u8ba9\u6211\u4eec\u66f4\u4e3a\u65b9\u4fbf\u7684\u4f7f\u7528\u7ebf\u7a0b\uff0c\u505a\u8fc7C++\u7684\u540c\u5b66\u53ef\u80fd\u4f1a\u5bf9\u7ebf\u7a0b\u6709\u66f4\u591a\u7684\u7406\u89e3\uff0c\u6bd4\u5982\u7ebf\u7a0b\u7684\u521b\u7acb\uff0c\u4fe1\u53f7\u91cf\u3001\u5171\u4eab\u53d8\u91cf\u6709\u8ba4\u8bc6\uff0cCocoa\u6846\u67b6\u4e0b\u4f1a\u65b9\u4fbf\u5f88\u591a\uff0c\u5b83\u5bf9\u7ebf\u7a0b\u505a\u4e86\u5c01\u88c5\uff0c\u6709\u4e9b\u5c01\u88c5\uff0c\u53ef\u4ee5\u8ba9\u6211\u4eec\u521b\u5efa\u7684\u5bf9\u8c61\uff0c\u672c\u8eab\u4fbf\u62e5\u6709\u7ebf\u7a0b\uff0c\u4e5f\u5c31\u662f\u7ebf\u7a0b\u7684\u5bf9\u8c61\u5316\u62bd\u8c61\uff0c\u4ece\u800c\u51cf\u5c11\u6211\u4eec\u7684\u5de5\u7a0b\uff0c\u63d0\u4f9b\u7a0b\u5e8f\u7684\u5065\u58ee\u6027\u3002\r\n\r\nGCD\u662f(Grand Central Dispatch)\u7684\u7f29\u5199 \uff0c\u4ece\u7cfb\u7edf\u7ea7\u522b\u63d0\u4f9b\u7684\u4e00\u4e2a\u6613\u7528\u5730\u591a\u7ebf\u7a0b\u7c7b\u5e93\uff0c\u5177\u6709\u8fd0\u884c\u65f6\u7684\u7279\u70b9\uff0c\u80fd\u5145\u5206\u5229\u7528\u591a\u6838\u5fc3\u786c\u4ef6\u3002GCD\u7684API\u63a5\u53e3\u4e3aC\u8bed\u8a00\u7684\u51fd\u6570\uff0c\u51fd\u6570\u53c2\u6570\u4e2d\u591a\u6570\u6709Block\uff0c\u5173\u4e8eBlock\u7684\u4f7f\u7528\u53c2\u770b\u8fd9\u91cc\uff0c\u4e3a\u6211\u4eec\u63d0\u4f9b\u5f3a\u5927\u7684\u201c\u63a5\u53e3\u201d\uff0c\u5bf9\u4e8eGCD\u7684\u4f7f\u7528\u53c2\u89c1\u672c\u6587\r\n\r\nNSOperation\u4e0eQueue\r\n\r\nNSOperation\u662f\u4e00\u4e2a\u62bd\u8c61\u7c7b\uff0c\u5b83\u5c01\u88c5\u4e86\u7ebf\u7a0b\u7684\u7ec6\u8282\u5b9e\u73b0\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5b50\u7c7b\u5316\u8be5\u5bf9\u8c61\uff0c\u52a0\u4e0aNSQueue\u6765\u540c\u9762\u5411\u5bf9\u8c61\u7684\u601d\u7ef4\uff0c\u7ba1\u7406\u591a\u7ebf\u7a0b\u7a0b\u5e8f\u3002\u5177\u4f53\u53ef\u53c2\u770b\u8fd9\u91cc\uff1a\u4e00\u4e2a\u57fa\u4e8eNSOperation\u7684\u591a\u7ebf\u7a0b\u7f51\u7edc\u8bbf\u95ee\u7684\u9879\u76ee\u3002\r\n\r\nNSThread\r\n\r\nNSThread\u662f\u4e00\u4e2a\u63a7\u5236\u7ebf\u7a0b\u6267\u884c\u7684\u5bf9\u8c61\uff0c\u5b83\u4e0d\u5982NSOperation\u62bd\u8c61\uff0c\u901a\u8fc7\u5b83\u6211\u4eec\u53ef\u4ee5\u65b9\u4fbf\u7684\u5f97\u5230\u4e00\u4e2a\u7ebf\u7a0b\uff0c\u5e76\u63a7\u5236\u5b83\u3002\u4f46NSThread\u7684\u7ebf\u7a0b\u4e4b\u95f4\u7684\u5e76\u53d1\u63a7\u5236\uff0c\u662f\u9700\u8981\u6211\u4eec\u81ea\u5df1\u6765\u63a7\u5236\u7684\uff0c\u53ef\u4ee5\u901a\u8fc7NSCondition\u5b9e\u73b0\u3002\r\n\r\n\u53c2\u770b iOS\u591a\u7ebf\u7a0b\u7f16\u7a0b\u4e4bNSThread\u7684\u4f7f\u7528\r\n\r\n\u5176\u4ed6\u591a\u7ebf\u7a0b\r\n\r\n\u5728Cocoa\u7684\u6846\u67b6\u4e0b\uff0c\u901a\u77e5\u3001Timer\u548c\u5f02\u6b65\u51fd\u6570\u7b49\u90fd\u6709\u4f7f\u7528\u591a\u7ebf\u7a0b)."},{"ID":"964","typeID":"10","question":"\u5728\u9879\u76ee\u4ec0\u4e48\u65f6\u5019\u9009\u62e9\u4f7f\u7528GCD\uff0c\u4ec0\u4e48\u65f6\u5019\u9009\u62e9NSOperation?","answer":"\u9879\u76ee\u4e2d\u4f7f\u7528NSOperation\u7684\u4f18\u70b9\u662fNSOperation\u662f\u5bf9\u7ebf\u7a0b\u7684\u9ad8\u5ea6\u62bd\u8c61\uff0c\u5728\u9879\u76ee\u4e2d\u4f7f\u7528\u5b83\uff0c\u4f1a\u4f7f\u9879\u76ee\u7684\u7a0b\u5e8f\u7ed3\u6784\u66f4\u597d\uff0c\u5b50\u7c7b\u5316NSOperation\u7684\u8bbe\u8ba1\u601d\u8def\uff0c\u662f\u5177\u6709\u9762\u5411\u5bf9\u8c61\u7684\u4f18\u70b9(\u590d\u7528\u3001\u5c01\u88c5)\uff0c\u4f7f\u5f97\u5b9e\u73b0\u662f\u591a\u7ebf\u7a0b\u652f\u6301\uff0c\u800c\u63a5\u53e3\u7b80\u5355\uff0c\u5efa\u8bae\u5728\u590d\u6742\u9879\u76ee\u4e2d\u4f7f\u7528\u3002\r\n\r\n\u9879\u76ee\u4e2d\u4f7f\u7528GCD\u7684\u4f18\u70b9\u662fGCD\u672c\u8eab\u975e\u5e38\u7b80\u5355\u3001\u6613\u7528\uff0c\u5bf9\u4e8e\u4e0d\u590d\u6742\u7684\u591a\u7ebf\u7a0b\u64cd\u4f5c\uff0c\u4f1a\u8282\u7701\u4ee3\u7801\u91cf\uff0c\u800cBlock\u53c2\u6570\u7684\u4f7f\u7528\uff0c\u4f1a\u662f\u4ee3\u7801\u66f4\u4e3a\u6613\u8bfb\uff0c\u5efa\u8bae\u5728\u7b80\u5355\u9879\u76ee\u4e2d\u4f7f\u7528\u3002"},{"ID":"963","typeID":"10","question":"\u4ec0\u4e48\u662fblock?","answer":"\u5bf9\u4e8e\u95ed\u5305(block),\u6709\u5f88\u591a\u5b9a\u4e49\uff0c\u5176\u4e2d\u95ed\u5305\u5c31\u662f\u80fd\u591f\u8bfb\u53d6\u5176\u5b83\u51fd\u6570\u5185\u90e8\u53d8\u91cf\u7684\u51fd\u6570\uff0c\u8fd9\u4e2a\u5b9a\u4e49\u5373\u63a5\u8fd1\u672c\u8d28\u53c8\u8f83\u597d\u7406\u89e3\u3002\u5bf9\u4e8e\u521a\u63a5\u89e6Block\u7684\u540c\u5b66\uff0c\u4f1a\u89c9\u5f97\u6709\u4e9b\u7ed5\uff0c\u56e0\u4e3a\u6211\u4eec\u4e60\u60ef\u5199\u8fd9\u6837\u7684\u7a0b\u5e8fmain(){ funA();} funA(){funB();} funB(){\u2026..}; \u5c31\u662f\u51fd\u6570main\u8c03\u7528\u51fd\u6570A\uff0c\u51fd\u6570A\u8c03\u7528\u51fd\u6570B\u2026 \u51fd\u6570\u4eec\u4f9d\u6b21\u987a\u5e8f\u6267\u884c\uff0c\u4f46\u73b0\u5b9e\u4e2d\u4e0d\u5168\u662f\u8fd9\u6837\u7684\uff0c\u4f8b\u5982\u9879\u76ee\u7ecf\u7406M\uff0c\u624b\u4e0b\u67093\u4e2a\u7a0b\u5e8f\u5458A\u3001B\u3001C\uff0c\u5f53\u4ed6\u7ed9\u7a0b\u5e8f\u5458A\u5b89\u6392\u5b9e\u73b0\u529f\u80fdF1\u65f6\uff0c\u4ed6\u5e76\u4e0d\u7b49\u7740A\u5b8c\u6210\u4e4b\u540e\uff0c\u518d\u53bb\u5b89\u6392B\u53bb\u5b9e\u73b0F2\uff0c\u800c\u662f\u5b89\u6392\u7ed9A\u529f\u80fdF1\uff0cB\u529f\u80fdF2\uff0cC\u529f\u80fdF3\uff0c\u7136\u540e\u53ef\u80fd\u53bb\u5199\u6280\u672f\u6587\u6863\uff0c\u800c\u5f53A\u9047\u5230\u95ee\u9898\u65f6\uff0c\u4ed6\u4f1a\u6765\u627e\u9879\u76ee\u7ecf\u7406M\uff0c\u5f53B\u505a\u5b8c\u65f6\uff0c\u4f1a\u901a\u77e5M\uff0c\u8fd9\u5c31\u662f\u4e00\u4e2a\u5f02\u6b65\u6267\u884c\u7684\u4f8b\u5b50\u3002\u5728\u8fd9\u79cd\u60c5\u5f62\u4e0b\uff0cBlock\u4fbf\u53ef\u5927\u663e\u8eab\u624b\uff0c\u56e0\u4e3a\u5728\u9879\u76ee\u7ecf\u7406M\uff0c\u7ed9A\u5b89\u6392\u5de5\u4f5c\u65f6\uff0c\u540c\u65f6\u4f1a\u544a\u8bc9A\u82e5\u679c\u9047\u5230\u56f0\u96be\uff0c\u5982\u4f55\u80fd\u627e\u5230\u4ed6\u62a5\u544a\u95ee\u9898(\u4f8b\u5982\u6253\u4ed6\u624b\u673a\u53f7)\uff0c\u8fd9\u5c31\u662f\u9879\u76ee\u7ecf\u7406M\u7ed9A\u7684\u4e00\u4e2a\u56de\u8c03\u63a5\u53e3\uff0c\u8981\u56de\u6389\u7684\u64cd\u4f5c\uff0c\u6bd4\u5982\u63a5\u5230\u7535\u8bdd\uff0c\u767e\u5ea6\u67e5\u8be2\u540e\uff0c\u8fd4\u56de\u7f51\u9875\u5185\u5bb9\u7ed9A\uff0c\u8fd9\u5c31\u662f\u4e00\u4e2aBlock\uff0c\u5728M\u4ea4\u5f85\u5de5\u4f5c\u65f6\uff0c\u5df2\u7ecf\u5b9a\u4e49\u597d\uff0c\u5e76\u4e14\u53d6\u5f97\u4e86F1\u7684\u4efb\u52a1\u53f7(\u5c40\u90e8\u53d8\u91cf)\uff0c\u5374\u662f\u5728\u5f53A\u9047\u5230\u95ee\u9898\u65f6\uff0c\u624d\u8c03\u7528\u6267\u884c\uff0c\u8de8\u51fd\u6570\u5728\u9879\u76ee\u7ecf\u7406M\u67e5\u8be2\u767e\u5ea6\uff0c\u83b7\u5f97\u7ed3\u679c\u540e\u56de\u8c03\u8be5block\u3002"},{"ID":"962","typeID":"10","question":"\u591a\u7ebf\u7a0b\u4e0eblock","answer":"GCD\u4e0eBlock\r\n\r\n\u4f7f\u7528 dispatch_async \u7cfb\u5217\u65b9\u6cd5\uff0c\u53ef\u4ee5\u4ee5\u6307\u5b9a\u7684\u65b9\u5f0f\u6267\u884cblock\r\n\r\nGCD\u7f16\u7a0b\u5b9e\u4f8b\r\n\r\ndispatch_async\u7684\u5b8c\u6574\u5b9a\u4e49\r\n\r\n\r\nvoid dispatch_async(\r\ndispatch_queue_t queue,\r\ndispatch_block_t block);\r\n\u529f\u80fd\uff1a\u5728\u6307\u5b9a\u7684\u961f\u5217\u91cc\u63d0\u4ea4\u4e00\u4e2a\u5f02\u6b65\u6267\u884c\u7684block\uff0c\u4e0d\u963b\u585e\u5f53\u524d\u7ebf\u7a0b\r\n\r\n\u901a\u8fc7queue\u6765\u63a7\u5236block\u6267\u884c\u7684\u7ebf\u7a0b\u3002\u4e3b\u7ebf\u7a0b\u6267\u884c\u524d\u6587\u5b9a\u4e49\u7684 finishBlock\u5bf9\u8c61\r\n\r\n\r\ndispatch_async(dispatch_get_main_queue(),^(void){finishBlock();});"},{"ID":"961","typeID":"10","question":"\u4f7f\u7528block\u548c\u4f7f\u7528delegate\u5b8c\u6210\u59d4\u6258\u6a21\u5f0f\u6709\u4ec0\u4e48\u4f18\u70b9?","answer":"\u9996\u5148\u8981\u4e86\u89e3\u4ec0\u4e48\u662f\u59d4\u6258\u6a21\u5f0f\uff0c\u59d4\u6258\u6a21\u5f0f\u5728iOS\u4e2d\u5927\u91cf\u5e94\u7528\uff0c\u5176\u5728\u8bbe\u8ba1\u6a21\u5f0f\u4e2d\u662f\u9002\u914d\u5668\u6a21\u5f0f\u4e2d\u7684\u5bf9\u8c61\u9002\u914d\u5668\uff0cObjective-C\u4e2d\u4f7f\u7528id\u7c7b\u578b\u6307\u5411\u4e00\u5207\u5bf9\u8c61\uff0c\u4f7f\u59d4\u6258\u6a21\u5f0f\u66f4\u4e3a\u7b80\u6d01\u3002\u4e86\u89e3\u59d4\u6258\u6a21\u5f0f\u7684\u7ec6\u8282\uff1a\r\n\r\niOS\u8bbe\u8ba1\u6a21\u5f0f\u2014-\u59d4\u6258\u6a21\u5f0f\r\n\r\n\u4f7f\u7528block\u5b9e\u73b0\u59d4\u6258\u6a21\u5f0f\uff0c\u5176\u4f18\u70b9\u662f\u56de\u8c03\u7684block\u4ee3\u7801\u5757\u5b9a\u4e49\u5728\u59d4\u6258\u5bf9\u8c61\u51fd\u6570\u5185\u90e8\uff0c\u4f7f\u4ee3\u7801\u66f4\u4e3a\u7d27\u51d1;\r\n\r\n\u9002\u914d\u5bf9\u8c61\u4e0d\u518d\u9700\u8981\u5b9e\u73b0\u5177\u4f53\u67d0\u4e2aprotocol\uff0c\u4ee3\u7801\u66f4\u4e3a\u7b80\u6d01\u3002"},{"ID":"960","typeID":"10","question":"block \u5b9e\u73b0\u539f\u7406?","answer":"Objective-C\u662f\u5bf9C\u8bed\u8a00\u7684\u6269\u5c55\uff0cblock\u7684\u5b9e\u73b0\u662f\u57fa\u4e8e\u6307\u9488\u548c\u51fd\u6570\u6307\u9488\u3002\r\n\r\n\u4ece\u8ba1\u7b97\u8bed\u8a00\u7684\u53d1\u5c55\uff0c\u6700\u65e9\u7684goto\uff0c\u9ad8\u7ea7\u8bed\u8a00\u7684\u6307\u9488\uff0c\u5230\u9762\u5411\u5bf9\u8c61\u8bed\u8a00\u7684block\uff0c\u4ece\u673a\u5668\u7684\u601d\u7ef4\uff0c\u4e00\u6b65\u6b65\u63a5\u8fd1\u4eba\u7684\u601d\u7ef4\uff0c\u4ee5\u65b9\u4fbf\u5f00\u53d1\u4eba\u5458\u66f4\u4e3a\u9ad8\u6548\u3001\u76f4\u63a5\u7684\u63cf\u8ff0\u51fa\u73b0\u5b9e\u7684\u903b\u8f91(\u9700\u6c42)\u3002\r\n\r\n\u4f7f\u7528\u5b9e\u4f8b\r\n\r\ncocoaTouch\u6846\u67b6\u4e0b\u52a8\u753b\u6548\u679c\u7684Block\u7684\u8c03\u7528\r\n\r\n\u4f7f\u7528typed\u58f0\u660eblock\r\n\r\ntypedef void(^didFinishBlock) (NSObject *ob);\r\n\u8fd9\u5c31\u58f0\u660e\u4e86\u4e00\u4e2adidFinishBlock\u7c7b\u578b\u7684block\uff0c\r\n\u7136\u540e\u4fbf\u53ef\u7528\r\n\r\n@property (nonatomic,copy) didFinishBlock finishBlock;\r\n\u58f0\u660e\u4e00\u4e2ablokc\u5bf9\u8c61\uff0c\u6ce8\u610f\u5bf9\u8c61\u5c5e\u6027\u8bbe\u7f6e\u4e3acopy\uff0c\u63a5\u5230block \u53c2\u6570\u65f6\uff0c\u4fbf\u4f1a\u81ea\u52a8\u590d\u5236\u4e00\u4efd\u3002\r\n\r\n__block\u662f\u4e00\u79cd\u7279\u6b8a\u7c7b\u578b\uff0c\r\n\r\n\u4f7f\u7528\u8be5\u5173\u952e\u5b57\u58f0\u660e\u7684\u5c40\u90e8\u53d8\u91cf\uff0c\u53ef\u4ee5\u88abblock\u6240\u6539\u53d8\uff0c\u5e76\u4e14\u5176\u5728\u539f\u51fd\u6570\u4e2d\u7684\u503c\u4f1a\u88ab\u6539\u53d8\u3002"},{"ID":"959","typeID":"10","question":"\u8c08\u8c08Object-C\u7684\u5185\u5b58\u7ba1\u7406\u65b9\u5f0f\u53ca\u8fc7\u7a0b\uff1f","answer":"1).\u5f53\u4f60\u4f7f\u7528new,alloc\u548ccopy\u65b9\u6cd5\u521b\u5efa\u4e00\u4e2a\u5bf9\u8c61\u65f6,\u8be5\u5bf9\u8c61\u7684\u4fdd\u7559\u8ba1\u6570\u5668\u503c\u4e3a1.\u5f53\u4f60\u4e0d\u518d\u4f7f\u7528\u8be5\u5bf9\u8c61\u65f6,\u4f60\u8981\u8d1f\u8d23\u5411\u8be5\u5bf9\u8c61\u53d1\u9001\u4e00\u6761release\u6216autorelease\u6d88\u606f.\u8fd9\u6837,\u8be5\u5bf9\u8c61\u5c06\u5728\u4f7f\u7528\u5bff\u547d\u7ed3\u675f\u65f6\u88ab\u9500\u6bc1.\r\n\r\n2).\u5f53\u4f60\u901a\u8fc7\u4efb\u4f55\u5176\u4ed6\u65b9\u6cd5\u83b7\u5f97\u4e00\u4e2a\u5bf9\u8c61\u65f6,\u5219\u5047\u8bbe\u8be5\u5bf9\u8c61\u7684\u4fdd\u7559\u8ba1\u6570\u5668\u503c\u4e3a1,\u800c\u4e14\u5df2\u7ecf\u88ab\u8bbe\u7f6e\u4e3a\u81ea\u52a8\u91ca\u653e,\u4f60\u4e0d\u9700\u8981\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\u6765\u786e\u4fdd\u8be5\u5bf9\u8c61\u88ab\u6e05\u7406.\u5982\u679c\u4f60\u6253\u7b97\u5728\u4e00\u6bb5\u65f6\u95f4\u5185\u62e5\u6709\u8be5\u5bf9\u8c61,\u5219\u9700\u8981\u4fdd\u7559\u5b83\u5e76\u786e\u4fdd\u5728\u64cd\u4f5c\u5b8c\u6210\u65f6\u91ca\u653e\u5b83.\r\n\r\n3).\u5982\u679c\u4f60\u4fdd\u7559\u4e86\u67d0\u4e2a\u5bf9\u8c61,\u4f60\u9700\u8981(\u6700\u7ec8)\u91ca\u653e\u6216\u81ea\u52a8\u91ca\u653e\u8be5\u5bf9\u8c61.\u5fc5\u987b\u4fdd\u6301retain\u65b9\u6cd5\u548crelease\u65b9\u6cd5\u7684\u4f7f\u7528\u6b21\u6570\u76f8\u7b49."},{"ID":"958","typeID":"10","question":"Object-C\u6709\u79c1\u6709\u65b9\u6cd5\u5417\uff1f\u79c1\u6709\u53d8\u91cf\u5462\uff1f","answer":"objective-c \u2013 \u7c7b\u91cc\u9762\u7684\u65b9\u6cd5\u53ea\u6709\u4e24\u79cd, \u9759\u6001\u65b9\u6cd5\u548c\u5b9e\u4f8b\u65b9\u6cd5. \u8fd9\u4f3c\u4e4e\u5c31\u4e0d\u662f\u5b8c\u6574\u7684\u9762\u5411\u5bf9\u8c61\u4e86,\u6309\u7167OO\u7684\u539f\u5219\u5c31\u662f\u4e00\u4e2a\u5bf9\u8c61\u53ea\u66b4\u9732\u6709\u7528\u7684\u4e1c\u897f. \u5982\u679c\u6ca1\u6709\u4e86\u79c1\u6709\u65b9\u6cd5\u7684\u8bdd, \u5bf9\u4e8e\u4e00\u4e9b\u5c0f\u8303\u56f4\u7684\u4ee3\u7801\u91cd\u7528\u5c31\u4e0d\u90a3\u4e48\u987a\u624b\u4e86. \u5728\u7c7b\u91cc\u9762\u58f0\u540d\u4e00\u4e2a\u79c1\u6709\u65b9\u6cd5\r\n\r\n@interface Controller : NSObject { NSString *something; }\r\n+ (void)thisIsAStaticMethod;\r\n\u2013 (void)thisIsAnInstanceMethod;\r\n@end\r\n@interface Controller (private) -\r\n(void)thisIsAPrivateMethod;\r\n@end\r\n@private\u53ef\u4ee5\u7528\u6765\u4fee\u9970\u79c1\u6709\u53d8\u91cf\r\n\r\n\u5728Objective\u2010C\u4e2d\uff0c\u6240\u6709\u5b9e\u4f8b\u53d8\u91cf\u9ed8\u8ba4\u90fd\u662f\u79c1\u6709\u7684\uff0c\u6240\u6709\u5b9e\u4f8b\u65b9\u6cd5\u9ed8\u8ba4\u90fd\u662f\u516c\u6709\u7684"},{"ID":"957","typeID":"10","question":"\u5185\u5b58\u7ba1\u7406 Autorelease\u3001retain\u3001copy\u3001assign\u7684set\u65b9\u6cd5\u548c\u542b\u4e49\uff1f","answer":"1).\u4f60\u521d\u59cb\u5316(alloc\/init)\u7684\u5bf9\u8c61\uff0c\u4f60\u9700\u8981\u91ca\u653e(release)\u5b83\u3002\u4f8b\u5982\uff1a\r\n\r\nNSMutableArray aArray = [[NSArray alloc] init]; \u540e\uff0c\u9700\u8981 [aArray release];\r\n\r\n2).\u4f60retain\u6216copy\u7684\uff0c\u4f60\u9700\u8981\u91ca\u653e\u5b83\u3002\u4f8b\u5982\uff1a\r\n\r\n[aArray retain] \u540e\uff0c\u9700\u8981 [aArray release];\r\n\r\n3).\u88ab\u4f20\u9012(assign)\u7684\u5bf9\u8c61\uff0c\u4f60\u9700\u8981\u659f\u914c\u7684retain\u548crelease\u3002\u4f8b\u5982\uff1a\r\n\r\nobj2 = [[obj1 someMethod] autorelease];\r\n\r\n\u5bf9\u8c612\u63a5\u6536\u5bf9\u8c611\u7684\u4e00\u4e2a\u81ea\u52a8\u91ca\u653e\u7684\u503c\uff0c\u6216\u4f20\u9012\u4e00\u4e2a\u57fa\u672c\u6570\u636e\u7c7b\u578b(NSInteger\uff0cNSString)\u65f6\uff1a\u4f60\u6216\u5e0c\u671b\u5c06\u5bf9\u8c612\u8fdb\u884cretain\uff0c\u4ee5\u9632\u6b62\u5b83\u5728\u88ab\u4f7f\u7528\u4e4b\u524d\u5c31\u88ab\u81ea\u52a8\u91ca\u653e\u6389\u3002\u4f46\u662f\u5728retain\u540e\uff0c\u4e00\u5b9a\u8981\u5728\u9002\u5f53\u7684\u65f6\u5019\u8fdb\u884c\u91ca\u653e\u3002\r\n\r\n\u5173\u4e8e\u7d22\u5f15\u8ba1\u6570(Reference Counting)\u7684\u95ee\u9898\r\n\r\nretain\u503c = \u7d22\u5f15\u8ba1\u6570(Reference Counting)\r\n\r\nNSArray\u5bf9\u8c61\u4f1aretain(retain\u503c\u52a0\u4e00)\u4efb\u4f55\u6570\u7ec4\u4e2d\u7684\u5bf9\u8c61\u3002\u5f53NSArray\u88ab\u5378\u8f7d(dealloc)\u7684\u65f6\u5019\uff0c\u6240\u6709\u6570\u7ec4\u4e2d\u7684\u5bf9\u8c61\u4f1a \u88ab \u6267\u884c\u4e00\u6b21\u91ca\u653e(retain\u503c\u51cf\u4e00)\u3002\u4e0d\u4ec5\u4ec5\u662fNSArray\uff0c\u4efb\u4f55\u6536\u96c6\u7c7b(Collection Classes)\u90fd\u6267\u884c\u7c7b\u4f3c\u64cd\u4f5c\u3002\u4f8b\u5982 NSDictionary\uff0c\u751a\u81f3UINavigationController\u3002\r\n\r\nAlloc\/init\u5efa\u7acb\u7684\u5bf9\u8c61\uff0c\u7d22\u5f15\u8ba1\u6570\u4e3a1\u3002\u65e0\u9700\u5c06\u5176\u518d\u6b21retain\u3002\r\n\r\n[NSArray array]\u548c[NSDate date]\u7b49\u201c\u65b9\u6cd5\u201d\u5efa\u7acb\u4e00\u4e2a\u7d22\u5f15\u8ba1\u6570\u4e3a1\u7684\u5bf9\u8c61\uff0c\u4f46\u662f\u4e5f\u662f\u4e00\u4e2a\u81ea\u52a8\u91ca\u653e\u5bf9\u8c61\u3002\u6240\u4ee5\u662f\u672c\u5730\u4e34\u65f6\u5bf9\u8c61\uff0c\u90a3\u4e48\u65e0\u6240\u8c13\u4e86\u3002\u5982\u679c\u662f\u6253\u7b97\u5728\u5168Class\u4e2d\u4f7f\u7528\u7684\u53d8\u91cf(iVar)\uff0c\u5219\u5fc5\u987bretain\u5b83\u3002\r\n\r\n\u7f3a\u7701\u7684\u7c7b\u65b9\u6cd5\u8fd4\u56de\u503c\u90fd\u88ab\u6267\u884c\u4e86\u201c\u81ea\u52a8\u91ca\u653e\u201d\u65b9\u6cd5\u3002(*\u5982\u4e0a\u4e2d\u7684NSArray)\r\n\r\n\u5728\u7c7b\u4e2d\u7684\u5378\u8f7d\u65b9\u6cd5\u201cdealloc\u201d\u4e2d\uff0crelease\u6240\u6709\u672a\u88ab\u5e73\u8861\u7684NS\u5bf9\u8c61\u3002(*\u6240\u6709\u672a\u88abautorelease\uff0c\u800cretain\u503c\u4e3a1\u7684)"},{"ID":"956","typeID":"10","question":"Object-C\u6709\u591a\u7ee7\u627f\u5417\uff1f\u6ca1\u6709\u7684\u8bdd\u7528\u4ec0\u4e48\u4ee3\u66ff\uff1fcocoa \u4e2d\u6240\u6709\u7684\u7c7b\u90fd\u662fNSObject \u7684\u5b50\u7c7b","answer":"\u591a\u7ee7\u627f\u5728\u8fd9\u91cc\u662f\u7528protocol \u59d4\u6258\u4ee3\u7406 \u6765\u5b9e\u73b0\u7684\r\n\r\n\u4f60\u4e0d\u7528\u53bb\u8003\u8651\u7e41\u7410\u7684\u591a\u7ee7\u627f ,\u865a\u57fa\u7c7b\u7684\u6982\u5ff5.\r\n\r\nood\u7684\u591a\u6001\u7279\u6027 \u5728 obj-c \u4e2d\u901a\u8fc7\u59d4\u6258\u6765\u5b9e\u73b0."},{"ID":"955","typeID":"10","question":"C\u548cobj-c \u5982\u4f55\u6df7\u7528?","answer":"1).obj-c\u7684\u7f16\u8bd1\u5668\u5904\u7406\u540e\u7f00\u4e3am\u7684\u6587\u4ef6\u65f6\uff0c\u53ef\u4ee5\u8bc6\u522bobj-c\u548cc\u7684\u4ee3\u7801\uff0c\u5904\u7406mm\u6587\u4ef6\u53ef\u4ee5\u8bc6\u522bobj-c,c,c++\u4ee3\u7801\uff0c\u4f46cpp\u6587\u4ef6\u5fc5\u987b\u53ea\u80fd\u7528c\/c++\u4ee3\u7801\uff0c\u800c\u4e14cpp\u6587\u4ef6include\u7684\u5934\u6587\u4ef6\u4e2d\uff0c\u4e5f\u4e0d\u80fd\u51fa\u73b0obj-c\u7684\u4ee3\u7801\uff0c\u56e0\u4e3acpp\u53ea\u662fcpp\r\n\r\n2).\u5728mm\u6587\u4ef6\u4e2d\u6df7\u7528cpp\u76f4\u63a5\u4f7f\u7528\u5373\u53ef\uff0c\u6240\u4ee5obj-c\u6df7cpp\u4e0d\u662f\u95ee\u9898\r\n\r\n3).\u5728cpp\u4e2d\u6df7\u7528obj-c\u5176\u5b9e\u5c31\u662f\u4f7f\u7528obj-c\u7f16\u5199\u7684\u6a21\u5757\u662f\u6211\u4eec\u60f3\u8981\u7684\u3002\r\n\r\n\u5982\u679c\u6a21\u5757\u4ee5\u7c7b\u5b9e\u73b0\uff0c\u90a3\u4e48\u8981\u6309\u7167cpp class\u7684\u6807\u51c6\u5199\u7c7b\u7684\u5b9a\u4e49\uff0c\u5934\u6587\u4ef6\u4e2d\u4e0d\u80fd\u51fa\u73b0obj-c\u7684\u4e1c\u897f\uff0c\u5305\u62ec#import cocoa\u7684\u3002\u5b9e\u73b0\u6587\u4ef6\u4e2d\uff0c\u5373\u7c7b\u7684\u5b9e\u73b0\u4ee3\u7801\u4e2d\u53ef\u4ee5\u4f7f\u7528obj-c\u7684\u4e1c\u897f\uff0c\u53ef\u4ee5import,\u53ea\u662f\u540e\u7f00\u662fmm\u3002\r\n\r\n\u5982\u679c\u6a21\u5757\u4ee5\u51fd\u6570\u5b9e\u73b0\uff0c\u90a3\u4e48\u5934\u6587\u4ef6\u8981\u6309c\u7684\u683c\u5f0f\u58f0\u660e\u51fd\u6570\uff0c\u5b9e\u73b0\u6587\u4ef6\u4e2d\uff0cc++\u51fd\u6570\u5185\u90e8\u53ef\u4ee5\u7528obj-c\uff0c\u4f46\u540e\u7f00\u8fd8\u662fmm\u6216m\u3002\r\n\r\n\u603b\u7ed3\uff1a\u53ea\u8981cpp\u6587\u4ef6\u548ccpp include\u7684\u6587\u4ef6\u4e2d\u4e0d\u5305\u542bobj-c\u7684\u4e1c\u897f\u5c31\u53ef\u4ee5\u7528\u4e86\uff0ccpp\u6df7\u7528obj-c\u7684\u5173\u952e\u662f\u4f7f\u7528\u63a5\u53e3\uff0c\u800c\u4e0d\u80fd\u76f4\u63a5\u4f7f\u7528 \u5b9e\u73b0\u4ee3 \u7801\uff0c\u5b9e\u9645\u4e0acpp\u6df7\u7528\u7684\u662fobj-c\u7f16\u8bd1\u540e\u7684o\u6587\u4ef6\uff0c\u8fd9\u4e2a\u4e1c\u897f\u5176\u5b9e\u662f\u65e0\u5dee\u522b\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528\u3002obj-c\u7684\u7f16\u8bd1\u5668\u652f\u6301cpp"},{"ID":"954","typeID":"10","question":"Objective-C\u5806\u548c\u6808\u7684\u533a\u522b\uff1f","answer":"\u7ba1\u7406\u65b9\u5f0f\uff1a\u5bf9\u4e8e\u6808\u6765\u8bb2\uff0c\u662f\u7531\u7f16\u8bd1\u5668\u81ea\u52a8\u7ba1\u7406\uff0c\u65e0\u9700\u6211\u4eec\u624b\u5de5\u63a7\u5236\uff1b\u5bf9\u4e8e\u5806\u6765\u8bf4\uff0c\u91ca\u653e\u5de5\u4f5c\u7531\u7a0b\u5e8f\u5458\u63a7\u5236\uff0c\u5bb9\u6613\u4ea7\u751fmemory leak\u3002\r\n\r\n\u7533\u8bf7\u5927\u5c0f\uff1a\r\n\r\n\u6808\uff1a\u5728Windows\u4e0b,\u6808\u662f\u5411\u4f4e\u5730\u5740\u6269\u5c55\u7684\u6570\u636e\u7ed3\u6784\uff0c\u662f\u4e00\u5757\u8fde\u7eed\u7684\u5185\u5b58\u7684\u533a\u57df\u3002\u8fd9\u53e5\u8bdd\u7684\u610f\u601d\u662f\u6808\u9876\u7684\u5730\u5740\u548c\u6808\u7684\u6700\u5927\u5bb9\u91cf\u662f\u7cfb\u7edf\u9884\u5148\u89c4\u5b9a\u597d\u7684\uff0c\u5728 WINDOWS\u4e0b\uff0c\u6808\u7684\u5927\u5c0f\u662f2M\uff08\u4e5f\u6709\u7684\u8bf4\u662f1M\uff0c\u603b\u4e4b\u662f\u4e00\u4e2a\u7f16\u8bd1\u65f6\u5c31\u786e\u5b9a\u7684\u5e38\u6570\uff09\uff0c\u5982\u679c\u7533\u8bf7\u7684\u7a7a\u95f4\u8d85\u8fc7\u6808\u7684\u5269\u4f59\u7a7a\u95f4\u65f6\uff0c\u5c06\u63d0\u793aoverflow\u3002\u56e0 \u6b64\uff0c\u80fd\u4ece\u6808\u83b7\u5f97\u7684\u7a7a\u95f4\u8f83\u5c0f\u3002\r\n\r\n\u5806\uff1a\u5806\u662f\u5411\u9ad8\u5730\u5740\u6269\u5c55\u7684\u6570\u636e\u7ed3\u6784\uff0c\u662f\u4e0d\u8fde\u7eed\u7684\u5185\u5b58\u533a\u57df\u3002\u8fd9\u662f\u7531\u4e8e\u7cfb\u7edf\u662f\u7528\u94fe\u8868\u6765\u5b58\u50a8\u7684\u7a7a\u95f2\u5185\u5b58\u5730\u5740\u7684\uff0c\u81ea\u7136\u662f\u4e0d\u8fde\u7eed\u7684\uff0c\u800c\u94fe\u8868\u7684\u904d\u5386\u65b9\u5411\u662f\u7531\u4f4e\u5730\u5740\u5411\u9ad8\u5730\u5740\u3002\u5806\u7684\u5927\u5c0f\u53d7\u9650\u4e8e\u8ba1\u7b97\u673a\u7cfb\u7edf\u4e2d\u6709\u6548\u7684\u865a\u62df\u5185\u5b58\u3002\u7531\u6b64\u53ef\u89c1\uff0c\u5806\u83b7\u5f97\u7684\u7a7a\u95f4\u6bd4\u8f83\u7075\u6d3b\uff0c\u4e5f\u6bd4\u8f83\u5927\u3002\r\n\r\n\u788e\u7247\u95ee\u9898\uff1a\u5bf9\u4e8e\u5806\u6765\u8bb2\uff0c\u9891\u7e41\u7684new\/delete\u52bf\u5fc5\u4f1a\u9020\u6210\u5185\u5b58\u7a7a\u95f4\u7684\u4e0d\u8fde\u7eed\uff0c\u4ece\u800c\u9020\u6210\u5927\u91cf\u7684\u788e\u7247\uff0c\u4f7f\u7a0b\u5e8f\u6548\u7387\u964d\u4f4e\u3002\u5bf9\u4e8e\u6808\u6765\u8bb2\uff0c\u5219\u4e0d\u4f1a\u5b58\u5728\u8fd9\u4e2a\u95ee\u9898\uff0c\u56e0\u4e3a\u6808\u662f\u5148\u8fdb\u540e\u51fa\u7684\u961f\u5217\uff0c\u4ed6\u4eec\u662f\u5982\u6b64\u7684\u4e00\u4e00\u5bf9\u5e94\uff0c\u4ee5\u81f3\u4e8e\u6c38\u8fdc\u90fd\u4e0d\u53ef\u80fd\u6709\u4e00\u4e2a\u5185\u5b58\u5757\u4ece\u6808\u4e2d\u95f4\u5f39\u51fa\r\n\r\n\u5206\u914d\u65b9\u5f0f\uff1a\u5806\u90fd\u662f\u52a8\u6001\u5206\u914d\u7684\uff0c\u6ca1\u6709\u9759\u6001\u5206\u914d\u7684\u5806\u3002\u6808\u67092\u79cd\u5206\u914d\u65b9\u5f0f\uff1a\u9759\u6001\u5206\u914d\u548c\u52a8\u6001\u5206\u914d\u3002\u9759\u6001\u5206\u914d\u662f\u7f16\u8bd1\u5668\u5b8c\u6210\u7684\uff0c\u6bd4\u5982\u5c40\u90e8\u53d8\u91cf\u7684\u5206\u914d\u3002\u52a8\u6001\u5206\u914d\u7531alloca\u51fd\u6570\u8fdb\u884c\u5206\u914d\uff0c\u4f46\u662f\u6808\u7684\u52a8\u6001\u5206\u914d\u548c\u5806\u662f\u4e0d\u540c\u7684\uff0c\u4ed6\u7684\u52a8\u6001\u5206\u914d\u662f\u7531\u7f16\u8bd1\u5668\u8fdb\u884c\u91ca\u653e\uff0c\u65e0\u9700\u6211\u4eec\u624b\u5de5\u5b9e\u73b0\u3002\r\n\r\n\u5206\u914d\u6548\u7387\uff1a\u6808\u662f\u673a\u5668\u7cfb\u7edf\u63d0\u4f9b\u7684\u6570\u636e\u7ed3\u6784\uff0c\u8ba1\u7b97\u673a\u4f1a\u5728\u5e95\u5c42\u5bf9\u6808\u63d0\u4f9b\u652f\u6301\uff1a\u5206\u914d\u4e13\u95e8\u7684\u5bc4\u5b58\u5668\u5b58\u653e\u6808\u7684\u5730\u5740\uff0c\u538b\u6808\u51fa\u6808\u90fd\u6709\u4e13\u95e8\u7684\u6307\u4ee4\u6267\u884c\uff0c\u8fd9\u5c31\u51b3\u5b9a\u4e86\u6808\u7684\u6548\u7387\u6bd4\u8f83\u9ad8\u3002\u5806\u5219\u662fC\/C++\u51fd\u6570\u5e93\u63d0\u4f9b\u7684\uff0c\u5b83\u7684\u673a\u5236\u662f\u5f88\u590d\u6742\u7684\u3002"},{"ID":"953","typeID":"10","question":"ViewController\u7684didReceiveMemoryWarning\u600e\u4e48\u88ab\u8c03\u7528?","answer":"[supper didReceiveMemoryWarning];"},{"ID":"952","typeID":"10","question":"\u4ec0\u4e48\u65f6\u5019\u7528delegate,\u4ec0\u4e48\u65f6\u5019\u7528Notification?","answer":"delegate\u9488\u5bf9one-to-one\u5173\u7cfb\uff0c\u7528\u4e8esender\u63a5\u53d7\u5230reciever\u7684\u67d0\u4e2a\u529f\u80fd\u53cd\u9988\u503c\u3002\r\n\r\nnotification\u9488\u5bf9one-to-one\/many\/none,reciver,\u7528\u4e8e\u901a\u77e5\u591a\u4e2aobject\u67d0\u4e2a\u4e8b\u4ef6\u3002\r\n"},{"ID":"951","typeID":"10","question":"\u7528\u9884\u5904\u7406\u6307\u4ee4#define\u58f0\u660e\u4e00\u4e2a\u5e38\u6570\uff0c\u7528\u4ee5\u8868\u660e1\u5e74\u4e2d\u6709\u591a\u5c11\u79d2\uff08\u5ffd\u7565\u95f0\u5e74\u95ee\u9898\uff09","answer":"#define SECONDS_PER_YEAR (60 * 60 * 24 * 365)UL\r\n\r\n\u6211\u5728\u8fd9\u60f3\u770b\u5230\u51e0\u4ef6\u4e8b\u60c5\uff1a\r\n\r\n#define \u8bed\u6cd5\u7684\u57fa\u672c\u77e5\u8bc6\uff08\u4f8b\u5982\uff1a\u4e0d\u80fd\u4ee5\u5206\u53f7\u7ed3\u675f\uff0c\u62ec\u53f7\u7684\u4f7f\u7528\uff0c\u7b49\u7b49\uff09\r\n\r\n\u61c2\u5f97\u9884\u5904\u7406\u5668\u5c06\u4e3a\u4f60\u8ba1\u7b97\u5e38\u6570\u8868\u8fbe\u5f0f\u7684\u503c\uff0c\u56e0\u6b64\uff0c\u76f4\u63a5\u5199\u51fa\u4f60\u662f\u5982\u4f55\u8ba1\u7b97\u4e00\u5e74\u4e2d\u6709\u591a\u5c11\u79d2\u800c\u4e0d\u662f\u8ba1\u7b97\u51fa\u5b9e\u9645\u7684\u503c\uff0c\u662f\u66f4\u6e05\u6670\u800c\u6ca1\u6709\u4ee3\u4ef7\u7684\u3002\r\n\r\n\u610f\u8bc6\u5230\u8fd9\u4e2a\u8868\u8fbe\u5f0f\u5c06\u4f7f\u4e00\u4e2a16\u4f4d\u673a\u7684\u6574\u578b\u6570\u6ea2\u51fa-\u56e0\u6b64\u8981\u7528\u5230\u957f\u6574\u578b\u7b26\u53f7L,\u544a\u8bc9\u7f16\u8bd1\u5668\u8fd9\u4e2a\u5e38\u6570\u662f\u7684\u957f\u6574\u578b\u6570\u3002\r\n\r\n\u5982\u679c\u4f60\u5728\u4f60\u7684\u8868\u8fbe\u5f0f\u4e2d\u7528\u5230UL\uff08\u8868\u793a\u65e0\u7b26\u53f7\u957f\u6574\u578b\uff09\uff0c\u90a3\u4e48\u4f60\u6709\u4e86\u4e00\u4e2a\u597d\u7684\u8d77\u70b9\u3002\u8bb0\u4f4f\uff0c\u7b2c\u4e00\u5370\u8c61\u5f88\u91cd\u8981\u3002"},{"ID":"950","typeID":"10","question":"\u5199\u4e00\u4e2a\u201d\u6807\u51c6\"\u5b8fMIN \uff0c\u8fd9\u4e2a\u5b8f\u8f93\u5165\u4e24\u4e2a\u53c2\u6570\u5e76\u8fd4\u56de\u8f83\u5c0f\u7684\u4e00\u4e2a\u3002","answer":"#define MIN(A,B) \uff08\uff08A\uff09 <= (B) ? (A) : (B))\r\n\u8fd9\u4e2a\u6d4b\u8bd5\u662f\u4e3a\u4e0b\u9762\u7684\u76ee\u7684\u800c\u8bbe\u7684\uff1a\r\n\r\n\u6807\u8bc6#define\u5728\u5b8f\u4e2d\u5e94\u7528\u7684\u57fa\u672c\u77e5\u8bc6\u3002\u8fd9\u662f\u5f88\u91cd\u8981\u7684\uff0c\u56e0\u4e3a\u76f4\u5230\u5d4c\u5165(inline)\u64cd\u4f5c\u7b26\u53d8\u4e3a\u6807\u51c6C\u7684\u4e00\u90e8\u5206\uff0c\u5b8f\u662f\u65b9\u4fbf\u4ea7\u751f\u5d4c\u5165\u4ee3\u7801\u7684\u552f\u4e00\u65b9\r\n\r\n\u6cd5\uff0c\r\n\r\n\u5bf9\u4e8e\u5d4c\u5165\u5f0f\u7cfb\u7edf\u6765\u8bf4\uff0c\u4e3a\u4e86\u80fd\u8fbe\u5230\u8981\u6c42\u7684\u6027\u80fd\uff0c\u5d4c\u5165\u4ee3\u7801\u7ecf\u5e38\u662f\u5fc5\u987b\u7684\u65b9\u6cd5\u3002\r\n\r\n\u4e09\u91cd\u6761\u4ef6\u64cd\u4f5c\u7b26\u7684\u77e5\u8bc6\u3002\u8fd9\u4e2a\u64cd\u4f5c\u7b26\u5b58\u5728C\u8bed\u8a00\u4e2d\u7684\u539f\u56e0\u662f\u5b83\u4f7f\u5f97\u7f16\u8bd1\u5668\u80fd\u4ea7\u751f\u6bd4 if-then-else \u66f4\u4f18\u5316\u7684\u4ee3\u7801\uff0c\u4e86\u89e3\u8fd9\u4e2a\u7528\u6cd5\u662f\u5f88\u91cd\u8981\u7684\u3002\r\n\r\n\u61c2\u5f97\u5728\u5b8f\u4e2d\u5c0f\u5fc3\u5730\u628a\u53c2\u6570\u7528\u62ec\u53f7\u62ec\u8d77\u6765\r\n\r\n\u6211\u4e5f\u7528\u8fd9\u4e2a\u95ee\u9898\u5f00\u59cb\u8ba8\u8bba\u5b8f\u7684\u526f\u4f5c\u7528\uff0c\u4f8b\u5982\uff1a\u5f53\u4f60\u5199\u4e0b\u9762\u7684\u4ee3\u7801\u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\u4e8b\uff1f\r\n\r\nleast = MIN(*p++, b);\r\n\u7ed3\u679c\u662f\uff1a\r\n\r\n((*p++) <= (b) ? (*p++) : (*p++))\r\n\u8fd9\u4e2a\u8868\u8fbe\u5f0f\u4f1a\u4ea7\u751f\u526f\u4f5c\u7528\uff0c\u6307\u9488p\u4f1a\u4f5c\u4e09\u6b21++\u81ea\u589e\u64cd\u4f5c\u3002"},{"ID":"949","typeID":"10","question":"\u5173\u952e\u5b57const\u6709\u4ec0\u4e48\u542b\u610f\uff1f\u4fee\u9970\u7c7b\u5462?static\u7684\u4f5c\u7528,\u7528\u4e8e\u7c7b\u5462?\u8fd8\u6709extern c\u7684\u4f5c\u7528","answer":"const \u610f\u5473\u7740\"\u53ea\u8bfb\"\uff0c\u4e0b\u9762\u7684\u58f0\u660e\u90fd\u662f\u4ec0\u4e48\u610f\u601d\uff1f\r\nconst int a;\r\nint const a;\r\nconst int *a;\r\nint * const a;\r\nint const * a const;\r\n\u524d\u4e24\u4e2a\u7684\u4f5c\u7528\u662f\u4e00\u6837\uff0ca\u662f\u4e00\u4e2a\u5e38\u6574\u578b\u6570\u3002\r\n\r\n\u7b2c\u4e09\u4e2a\u610f\u5473\u7740a\u662f\u4e00\u4e2a\u6307\u5411\u5e38\u6574\u578b\u6570\u7684\u6307\u9488\uff08\u4e5f\u5c31\u662f\uff0c\u6574\u578b\u6570\u662f\u4e0d\u53ef\u4fee\u6539\u7684\uff0c\u4f46\u6307\u9488\u53ef\u4ee5\uff09\u3002\r\n\r\n\u7b2c\u56db\u4e2a\u610f\u601da\u662f\u4e00\u4e2a\u6307\u5411\u6574\u578b\u6570\u7684\u5e38\u6307\u9488\uff08\u4e5f\u5c31\u662f\u8bf4\uff0c\u6307\u9488\u6307\u5411\u7684\u6574\u578b\u6570\u662f\u53ef\u4ee5\u4fee\u6539\u7684\uff0c\u4f46\u6307\u9488\u662f\u4e0d\u53ef\u4fee\u6539\u7684\uff09\u3002\r\n\r\n\u6700\u540e\u4e00\u4e2a\u610f\u5473\u7740a\u662f\u4e00\u4e2a\u6307\u5411\u5e38\u6574\u578b\u6570\u7684\u5e38\u6307\u9488\uff08\u4e5f\u5c31\u662f\u8bf4\uff0c\u6307\u9488\u6307\u5411\u7684\u6574\u578b\u6570\u662f\u4e0d\u53ef\u4fee\u6539\u7684\uff0c\u540c\u65f6\u6307\u9488\u4e5f\u662f\u4e0d\u53ef\u4fee\u6539\u7684\uff09\u3002\r\n\r\n\u7ed3\u8bba\uff1a\r\n\r\n\u5173\u952e\u5b57const\u7684\u4f5c\u7528\u662f\u4e3a\u7ed9\u8bfb\u4f60\u4ee3\u7801\u7684\u4eba\u4f20\u8fbe\u975e\u5e38\u6709\u7528\u7684\u4fe1\u606f\uff0c\u5b9e\u9645\u4e0a\uff0c\u58f0\u660e\u4e00\u4e2a\u53c2\u6570\u4e3a\u5e38\u91cf\u662f\u4e3a\u4e86\u544a\u8bc9\u4e86\u7528\u6237\u8fd9\u4e2a\u53c2\u6570\u7684\u5e94\u7528\u76ee\u7684\u3002\r\n\r\n\u5982\u679c\u4f60\u66fe\u82b1\u5f88\u591a\u65f6\u95f4\u6e05\u7406\u5176\u5b83\u4eba\u7559\u4e0b\u7684\u5783\u573e\uff0c\u4f60\u5c31\u4f1a\u5f88\u5feb\u5b66\u4f1a\u611f\u8c22\u8fd9\u70b9\u591a\u4f59\u7684\u4fe1\u606f\u3002\uff08\u5f53\u7136\uff0c\u61c2\u5f97\u7528const\u7684\u7a0b\u5e8f\u5458\u5f88\u5c11\u4f1a\u7559\u4e0b\u7684\u5783\u573e\u8ba9\u522b\u4eba\u6765\u6e05\u7406\u7684\uff09  \u901a\u8fc7\u7ed9\u4f18\u5316\u5668\u4e00\u4e9b\u9644\u52a0\u7684\u4fe1\u606f\uff0c\u4f7f\u7528\u5173\u952e\u5b57const\u4e5f\u8bb8\u80fd\u4ea7\u751f\u66f4\u7d27\u51d1\u7684\u4ee3\u7801\u3002\u5408\u7406\u5730\u4f7f\u7528\u5173\u952e\u5b57const\u53ef\u4ee5\u4f7f\u7f16\u8bd1\u5668\u5f88\u81ea\u7136\u5730\u4fdd\u62a4\u90a3\u4e9b\u4e0d\u5e0c\u671b\u88ab\u6539\u53d8\u7684\u53c2\u6570\uff0c\u9632\u6b62\u5176\u88ab\u65e0\u610f\u7684\u4ee3\u7801\u4fee\u6539\u3002\u7b80\u800c\u8a00\u4e4b\uff0c\u8fd9\u6837\u53ef\u4ee5\u51cf\u5c11bug\u7684\u51fa\u73b0\u3002\r\n\r\n1).\u6b32\u963b\u6b62\u4e00\u4e2a\u53d8\u91cf\u88ab\u6539\u53d8\uff0c\u53ef\u4ee5\u4f7f\u7528 const \u5173\u952e\u5b57\u3002\u5728\u5b9a\u4e49\u8be5 const \u53d8\u91cf\u65f6\uff0c\u901a\u5e38\u9700\u8981\u5bf9\u5b83\u8fdb\u884c\u521d\r\n\r\n\u59cb\u5316\uff0c\u56e0\u4e3a\u4ee5\u540e\u5c31\u6ca1\u6709\u673a\u4f1a\u518d\u53bb\u6539\u53d8\u5b83\u4e86\uff1b\r\n\r\n2).\u5bf9\u6307\u9488\u6765\u8bf4\uff0c\u53ef\u4ee5\u6307\u5b9a\u6307\u9488\u672c\u8eab\u4e3a const\uff0c\u4e5f\u53ef\u4ee5\u6307\u5b9a\u6307\u9488\u6240\u6307\u7684\u6570\u636e\u4e3a const\uff0c\u6216\u4e8c\u8005\u540c\u65f6\u6307\r\n\r\n\u5b9a\u4e3a const\uff1b\r\n\r\n3).\u5728\u4e00\u4e2a\u51fd\u6570\u58f0\u660e\u4e2d\uff0cconst \u53ef\u4ee5\u4fee\u9970\u5f62\u53c2\uff0c\u8868\u660e\u5b83\u662f\u4e00\u4e2a\u8f93\u5165\u53c2\u6570\uff0c\u5728\u51fd\u6570\u5185\u90e8\u4e0d\u80fd\u6539\u53d8\u5176\u503c\uff1b\r\n\r\n4).\u5bf9\u4e8e\u7c7b\u7684\u6210\u5458\u51fd\u6570\uff0c\u82e5\u6307\u5b9a\u5176\u4e3a const \u7c7b\u578b\uff0c\u5219\u8868\u660e\u5176\u662f\u4e00\u4e2a\u5e38\u51fd\u6570\uff0c\u4e0d\u80fd\u4fee\u6539\u7c7b\u7684\u6210\u5458\u53d8\u91cf\uff1b\r\n\r\n5).\u5bf9\u4e8e\u7c7b\u7684\u6210\u5458\u51fd\u6570\uff0c\u6709\u65f6\u5019\u5fc5\u987b\u6307\u5b9a\u5176\u8fd4\u56de\u503c\u4e3a const \u7c7b\u578b\uff0c\u4ee5\u4f7f\u5f97\u5176\u8fd4\u56de\u503c\u4e0d\u4e3a\u201c\u5de6\u503c\u201d\u3002"},{"ID":"948","typeID":"10","question":"\u5173\u952e\u5b57volatile\u6709\u4ec0\u4e48\u542b\u610f?\u5e76\u7ed9\u51fa\u4e09\u4e2a\u4e0d\u540c\u7684\u4f8b\u5b50?","answer":"\u4e00\u4e2a\u5b9a\u4e49\u4e3a volatile\u7684\u53d8\u91cf\u662f\u8bf4\u8fd9\u53d8\u91cf\u53ef\u80fd\u4f1a\u88ab\u610f\u60f3\u4e0d\u5230\u5730\u6539\u53d8\uff0c\u8fd9\u6837\uff0c\u7f16\u8bd1\u5668\u5c31\u4e0d\u4f1a\u53bb\u5047\u8bbe\u8fd9\u4e2a\u53d8\u91cf\u7684\u503c\u4e86\u3002\u7cbe\u786e\u5730\u8bf4\u5c31\u662f\uff0c\u4f18\u5316\u5668\u5728\u7528\u5230\u8fd9\u4e2a\u53d8\u91cf\u65f6\u5fc5\u987b\u6bcf\u6b21\u90fd\u5c0f\u5fc3\u5730\u91cd\u65b0\u8bfb\u53d6\u8fd9\u4e2a\u53d8\u91cf\u7684\u503c\uff0c\u800c\u4e0d\u662f\u4f7f\u7528\u4fdd\u5b58\u5728\u5bc4\u5b58\u5668\u91cc\u7684\u5907\u4efd\u3002\r\n\r\n\u4e0b\u9762\u662fvolatile\u53d8\u91cf\u7684\u51e0\u4e2a\u4f8b\u5b50\uff1a\r\n\r\n\u5e76\u884c\u8bbe\u5907\u7684\u786c\u4ef6\u5bc4\u5b58\u5668\uff08\u5982\uff1a\u72b6\u6001\u5bc4\u5b58\u5668\uff09\r\n\r\n\u4e00\u4e2a\u4e2d\u65ad\u670d\u52a1\u5b50\u7a0b\u5e8f\u4e2d\u4f1a\u8bbf\u95ee\u5230\u7684\u975e\u81ea\u52a8\u53d8\u91cf(Non-automatic variables)\r\n\r\n\u591a\u7ebf\u7a0b\u5e94\u7528\u4e2d\u88ab\u51e0\u4e2a\u4efb\u52a1\u5171\u4eab\u7684\u53d8\u91cf"},{"ID":"947","typeID":"10","question":"\u4e00\u4e2a\u53c2\u6570\u65e2\u53ef\u4ee5\u662fconst\u8fd8\u53ef\u4ee5\u662fvolatile\u5417\uff1f \u4e00\u4e2a\u6307\u9488\u53ef\u4ee5\u662fvolatile \u5417\uff1f\u89e3\u91ca\u4e3a\u4ec0\u4e48","answer":"1).\u662f\u7684\u3002\u4e00\u4e2a\u4f8b\u5b50\u662f\u53ea\u8bfb\u7684\u72b6\u6001\u5bc4\u5b58\u5668\u3002\u5b83\u662fvolatile\u56e0\u4e3a\u5b83\u53ef\u80fd\u88ab\u610f\u60f3\u4e0d\u5230\u5730\u6539\u53d8\u3002\u5b83\u662fconst\u56e0\u4e3a\u7a0b\u5e8f\u4e0d\u5e94\u8be5\u8bd5\u56fe\u53bb\u4fee\u6539\u5b83\u3002\r\n\r\n2).\u662f\u7684\u3002\u5c3d\u7ba1\u8fd9\u5e76\u4e0d\u5f88\u5e38\u89c1\u3002\u4e00\u4e2a\u4f8b\u5b50\u662f\u5f53\u4e00\u4e2a\u4e2d\u670d\u52a1\u5b50\u7a0b\u5e8f\u4fee\u8be5\u4e00\u4e2a\u6307\u5411\u4e00\u4e2abuffer\u7684\u6307\u9488\u65f6\u3002"},{"ID":"946","typeID":"10","question":"static \u5173\u952e\u5b57\u7684\u4f5c\u7528?","answer":"1).\u51fd\u6570\u4f53\u5185 static \u53d8\u91cf\u7684\u4f5c\u7528\u8303\u56f4\u4e3a\u8be5\u51fd\u6570\u4f53\uff0c\u4e0d\u540c\u4e8e auto \u53d8\u91cf\uff0c\u8be5\u53d8\u91cf\u7684\u5185\u5b58\u53ea\u88ab\u5206\u914d\u4e00\u6b21\uff0c\r\n\r\n\u56e0\u6b64\u5176\u503c\u5728\u4e0b\u6b21\u8c03\u7528\u65f6\u4ecd\u7ef4\u6301\u4e0a\u6b21\u7684\u503c\uff1b\r\n\r\n2).\u5728\u6a21\u5757\u5185\u7684 static \u5168\u5c40\u53d8\u91cf\u53ef\u4ee5\u88ab\u6a21\u5757\u5185\u6240\u7528\u51fd\u6570\u8bbf\u95ee\uff0c\u4f46\u4e0d\u80fd\u88ab\u6a21\u5757\u5916\u5176\u5b83\u51fd\u6570\u8bbf\u95ee\uff1b\r\n\r\n3).\u5728\u6a21\u5757\u5185\u7684 static \u51fd\u6570\u53ea\u53ef\u88ab\u8fd9\u4e00\u6a21\u5757\u5185\u7684\u5176\u5b83\u51fd\u6570\u8c03\u7528\uff0c\u8fd9\u4e2a\u51fd\u6570\u7684\u4f7f\u7528\u8303\u56f4\u88ab\u9650\u5236\u5728\u58f0\u660e\r\n\r\n\u5b83\u7684\u6a21\u5757\u5185\uff1b\r\n\r\n4).\u5728\u7c7b\u4e2d\u7684 static \u6210\u5458\u53d8\u91cf\u5c5e\u4e8e\u6574\u4e2a\u7c7b\u6240\u62e5\u6709\uff0c\u5bf9\u7c7b\u7684\u6240\u6709\u5bf9\u8c61\u53ea\u6709\u4e00\u4efd\u62f7\u8d1d\uff1b\r\n\r\n5).\u5728\u7c7b\u4e2d\u7684 static \u6210\u5458\u51fd\u6570\u5c5e\u4e8e\u6574\u4e2a\u7c7b\u6240\u62e5\u6709\uff0c\u8fd9\u4e2a\u51fd\u6570\u4e0d\u63a5\u6536 this \u6307\u9488\uff0c\u56e0\u800c\u53ea\u80fd\u8bbf\u95ee\u7c7b\u7684static \u6210\u5458\u53d8\u91cf\u3002"},{"ID":"945","typeID":"10","question":"\u7ebf\u7a0b\u4e0e\u8fdb\u7a0b\u7684\u533a\u522b\u548c\u8054\u7cfb?","answer":"1). \u8fdb\u7a0b\u548c\u7ebf\u7a0b\u90fd\u662f\u7531\u64cd\u4f5c\u7cfb\u7edf\u6240\u4f53\u4f1a\u7684\u7a0b\u5e8f\u8fd0\u884c\u7684\u57fa\u672c\u5355\u5143\uff0c\u7cfb\u7edf\u5229\u7528\u8be5\u57fa\u672c\u5355\u5143\u5b9e\u73b0\u7cfb\u7edf\u5bf9\u5e94\u7528\u7684\u5e76\u53d1\u6027\r\n\r\n2). \u8fdb\u7a0b\u548c\u7ebf\u7a0b\u7684\u4e3b\u8981\u5dee\u522b\u5728\u4e8e\u5b83\u4eec\u662f\u4e0d\u540c\u7684\u64cd\u4f5c\u7cfb\u7edf\u8d44\u6e90\u7ba1\u7406\u65b9\u5f0f\u3002\r\n\r\n3). \u8fdb\u7a0b\u6709\u72ec\u7acb\u7684\u5730\u5740\u7a7a\u95f4\uff0c\u4e00\u4e2a\u8fdb\u7a0b\u5d29\u6e83\u540e\uff0c\u5728\u4fdd\u62a4\u6a21\u5f0f\u4e0b\u4e0d\u4f1a\u5bf9\u5176\u5b83\u8fdb\u7a0b\u4ea7\u751f\u5f71\u54cd\uff0c\u800c\u7ebf\u7a0b\u53ea\u662f\u4e00\u4e2a\u8fdb\u7a0b\u4e2d\u7684\u4e0d\u540c\u6267\u884c\u8def\u5f84\u3002\r\n\r\n4.)\u7ebf\u7a0b\u6709\u81ea\u5df1\u7684\u5806\u6808\u548c\u5c40\u90e8\u53d8\u91cf\uff0c\u4f46\u7ebf\u7a0b\u4e4b\u95f4\u6ca1\u6709\u5355\u72ec\u7684\u5730\u5740\u7a7a\u95f4\uff0c\u4e00\u4e2a\u7ebf\u7a0b\u6b7b\u6389\u5c31\u7b49\u4e8e\u6574\u4e2a\u8fdb\u7a0b\u6b7b\u6389\u3002\u6240\u4ee5\u591a\u8fdb\u7a0b\u7684\u7a0b\u5e8f\u8981\u6bd4\u591a\u7ebf\u7a0b\u7684\u7a0b\u5e8f\u5065\u58ee\uff0c\u4f46\u5728\u8fdb\u7a0b\u5207\u6362\u65f6\uff0c\u8017\u8d39\u8d44\u6e90\u8f83\u5927\uff0c\u6548\u7387\u8981\u5dee\u4e00\u4e9b\u3002\r\n\r\n5). \u4f46\u5bf9\u4e8e\u4e00\u4e9b\u8981\u6c42\u540c\u65f6\u8fdb\u884c\u5e76\u4e14\u53c8\u8981\u5171\u4eab\u67d0\u4e9b\u53d8\u91cf\u7684\u5e76\u53d1\u64cd\u4f5c\uff0c\u53ea\u80fd\u7528\u7ebf\u7a0b\uff0c\u4e0d\u80fd\u7528\u8fdb\u7a0b\u3002"},{"ID":"944","typeID":"10","question":"\u5217\u4e3e\u51e0\u79cd\u8fdb\u7a0b\u7684\u540c\u6b65\u673a\u5236\uff0c\u5e76\u6bd4\u8f83\u5176\u4f18\u7f3a\u70b9","answer":"\u539f\u5b50\u64cd\u4f5c  \u4fe1\u53f7\u91cf\u673a\u5236    \u81ea\u65cb\u9501    \u7ba1\u7a0b\uff0c\u4f1a\u5408\uff0c\u5206\u5e03\u5f0f\u7cfb\u7edf"},{"ID":"943","typeID":"10","question":"\u8fdb\u7a0b\u4e4b\u95f4\u901a\u4fe1\u7684\u9014\u5f84","answer":"\u5171\u4eab\u5b58\u50a8\u7cfb\u7edf\u6d88\u606f\u4f20\u9012\u7cfb\u7edf\u7ba1\u9053\uff1a\u4ee5\u6587\u4ef6\u7cfb\u7edf\u4e3a\u57fa\u7840"},{"ID":"942","typeID":"10","question":"\u8fdb\u7a0b\u6b7b\u9501\u7684\u539f\u56e0?","answer":"\u8d44\u6e90\u7ade\u4e89\u53ca\u8fdb\u7a0b\u63a8\u8fdb\u987a\u5e8f\u975e\u6cd5"},{"ID":"941","typeID":"10","question":"\u6b7b\u9501\u76844\u4e2a\u5fc5\u8981\u6761\u4ef6?","answer":"\u4e92\u65a5\u3001\u8bf7\u6c42\u4fdd\u6301\u3001\u4e0d\u53ef\u5265\u593a\u3001\u73af\u8def"},{"ID":"940","typeID":"10","question":"\u6b7b\u9501\u7684\u5904\u7406\uff1f","answer":"\u9e35\u9e1f\u7b56\u7565\u3001\u9884\u9632\u7b56\u7565\u3001\u907f\u514d\u7b56\u7565\u3001\u68c0\u6d4b\u4e0e\u89e3\u9664\u6b7b\u9501"},{"ID":"939","typeID":"10","question":"cocoa touch\u6846\u67b6\uff1f","answer":"iPhone OS \u5e94\u7528\u7a0b\u5e8f\u7684\u57fa\u7840 Cocoa Touch \u6846\u67b6\u91cd\u7528\u4e86\u8bb8\u591a Mac \u7cfb\u7edf\u7684\u6210\u719f\u6a21\u5f0f\uff0c\u4f46\u662f\u5b83\u66f4\u591a\u5730\u4e13\u6ce8\u4e8e\u89e6\u6478\u7684\u63a5\u53e3\u548c\u4f18\u5316\u3002\r\n\r\nUIKit \u4e3a\u60a8\u63d0\u4f9b\u4e86\u5728 iPhone OS \u4e0a\u5b9e\u73b0\u56fe\u5f62\uff0c\u4e8b\u4ef6\u9a71\u52a8\u7a0b\u5e8f\u7684\u57fa\u672c\u5de5\u5177\uff0c\u5176\u5efa\u7acb\u5728\u548c Mac OS X \u4e2d\u4e00\u6837\u7684 Foundation \u6846\u67b6\u4e0a\uff0c\u5305\u62ec\u6587\u4ef6\u5904\u7406\uff0c\u7f51\u7edc\uff0c\u5b57\u7b26\u4e32\u64cd\u4f5c\u7b49\u3002\r\n\r\nCocoa Touch \u5177\u6709\u548c iPhone \u7528\u6237\u63a5\u53e3\u4e00\u81f4\u7684\u7279\u6b8a\u8bbe\u8ba1\u3002\u6709\u4e86 UIKit\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 iPhone OS \u4e0a\u7684\u72ec\u7279\u7684\u56fe\u5f62\u63a5\u53e3\u63a7\u4ef6\uff0c\u6309\u94ae\uff0c\u4ee5\u53ca\u5168\u5c4f\u89c6\u56fe\u7684\u529f\u80fd\uff0c\u60a8\u8fd8\u53ef\u4ee5\u4f7f\u7528\u52a0\u901f\u4eea\u548c\u591a\u70b9\u89e6\u6478\u624b\u52bf\u6765\u63a7\u5236\u60a8\u7684\u5e94\u7528\u3002\r\n\r\n\u5404\u8272\u4ff1\u5168\u7684\u6846\u67b6 \u9664\u4e86UIKit \u5916\uff0cCocoa Touch \u5305\u542b\u4e86\u521b\u5efa\u4e16\u754c\u4e00\u6d41 iPhone \u5e94\u7528\u7a0b\u5e8f\u9700\u8981\u7684\u6240\u6709\u6846\u67b6\uff0c\u4ece\u4e09\u7ef4\u56fe\u5f62\uff0c\u5230\u4e13\u4e1a\u97f3\u6548\uff0c\u751a\u81f3\u63d0\u4f9b\u8bbe\u5907\u8bbf\u95ee API \u4ee5\u63a7\u5236\u6444\u50cf\u5934\uff0c\u6216\u901a\u8fc7 GPS \u83b7\u77e5\u5f53\u524d\u4f4d\u7f6e\u3002\r\n\r\nCocoa Touch \u65e2\u5305\u542b\u53ea\u9700\u8981\u51e0\u884c\u4ee3\u7801\u5c31\u53ef\u4ee5\u5b8c\u6210\u5168\u90e8\u4efb\u52a1\u7684\u5f3a\u5927\u7684 Objective-C \u6846\u67b6\uff0c\u4e5f\u5728\u9700\u8981\u65f6\u63d0\u4f9b\u57fa\u7840\u7684 C \u8bed\u8a00 API \u6765\u76f4\u63a5\u8bbf\u95ee\u7cfb\u7edf\u3002\u8fd9\u4e9b\u6846\u67b6\u5305\u62ec\uff1a\r\n\r\nCore Animation\uff1a\u901a\u8fc7 Core Animation\uff0c\u60a8\u5c31\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e2a\u57fa\u4e8e\u7ec4\u5408\u72ec\u7acb\u56fe\u5c42\u7684\u7b80\u5355\u7684\u7f16\u7a0b\u6a21\u578b\u6765\u521b\u5efa\u4e30\u5bcc\u7684\u7528\u6237\u4f53\u9a8c\u3002\r\n\r\nCore Audio\uff1aCore Audio \u662f\u64ad\u653e\uff0c\u5904\u7406\u548c\u5f55\u5236\u97f3\u9891\u7684\u4e13\u4e1a\u6280\u672f\uff0c\u80fd\u591f\u8f7b\u677e\u4e3a\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u6dfb\u52a0\u5f3a\u5927\u7684\u97f3\u9891\u529f\u80fd\u3002\r\n\r\nCore Data\uff1a\u63d0\u4f9b\u4e86\u4e00\u4e2a\u9762\u5411\u5bf9\u8c61\u7684\u6570\u636e\u7ba1\u7406\u89e3\u51b3\u65b9\u6848\uff0c\u5b83\u6613\u4e8e\u4f7f\u7528\u548c\u7406\u89e3\uff0c\u751a\u81f3\u53ef\u5904\u7406\u4efb\u4f55\u5e94\u7528\u6216\u5927\u6216\u5c0f\u7684\u6570\u636e\u6a21\u578b\u3002\r\n\r\n\u529f\u80fd\u5217\u8868\uff1a\u6846\u67b6\u5206\u7c7b\r\n\r\n\u4e0b\u9762\u662f Cocoa Touch \u4e2d\u4e00\u5c0f\u90e8\u5206\u53ef\u7528\u7684\u6846\u67b6\uff1a\r\n\r\n\u97f3\u9891\u548c\u89c6\u9891\uff1aCore Audio \uff0cOpenAL \uff0cMedia Library \uff0cAV Foundation\r\n\r\n\u6570\u636e\u7ba1\u7406 \uff1aCore Data \uff0cSQLite\r\n\r\n\u56fe\u5f62\u548c\u52a8\u753b \uff1aCore Animation \uff0cOpenGL ES \uff0cQuartz 2D\r\n\r\n\u7f51\u7edc\uff1aBonjour \uff0cWebKit \uff0cBSD Sockets\r\n\r\n\u7528\u6237\u5e94\u7528\uff1aAddress Book \uff0cCore Location \uff0cMap Kit \uff0cStore Kit"},{"ID":"938","typeID":"10","question":"\u81ea\u52a8\u91ca\u653e\u6c60\u662f\u4ec0\u4e48,\u5982\u4f55\u5de5\u4f5c\uff1f","answer":"\u5f53\u60a8\u5411\u4e00\u4e2a\u5bf9\u8c61\u53d1\u9001\u4e00\u4e2aautorelease\u6d88\u606f\u65f6\uff0cCocoa\u5c31\u4f1a\u5c06\u8be5\u5bf9\u8c61\u7684\u4e00\u4e2a\u5f15\u7528\u653e\u5165\u5230\u6700\u65b0\u7684\u81ea\u52a8\u91ca\u653e.\u5b83\u4ecd\u7136\u662f\u4e2a\u6b63\u5f53\u7684\u5bf9\u8c61\uff0c\u56e0\u6b64\u81ea\u52a8\u91ca\u653e\u6c60\u5b9a\u4e49\u7684\u4f5c\u7528\u57df\u5185\u7684\u5176\u5b83\u5bf9\u8c61\u53ef\u4ee5\u5411\u5b83\u53d1\u9001\u6d88\u606f\u3002\u5f53\u7a0b\u5e8f\u6267\u884c\u5230\u4f5c\u7528\u57df\u7ed3\u675f\u7684\u4f4d\u7f6e\u65f6\uff0c\u81ea\u52a8\u91ca\u653e\u6c60\u5c31\u4f1a\u88ab\u91ca\u653e\uff0c\u6c60\u4e2d\u7684\u6240\u6709\u5bf9\u8c61\u4e5f\u5c31\u88ab\u91ca\u653e\u3002"},{"ID":"937","typeID":"10","question":"sprintf,strcpy,memcpy\u4f7f\u7528\u4e0a\u6709\u4ec0\u4e48\u8981\u6ce8\u610f\u7684\u5730\u65b9\uff1f","answer":"1). sprintf\u662f\u683c\u5f0f\u5316\u51fd\u6570\u3002\u5c06\u4e00\u6bb5\u6570\u636e\u901a\u8fc7\u7279\u5b9a\u7684\u683c\u5f0f\uff0c\u683c\u5f0f\u5316\u5230\u4e00\u4e2a\u5b57\u7b26\u4e32\u7f13\u51b2\u533a\u4e2d\u53bb\u3002sprintf\u683c\u5f0f\u5316\u7684\u51fd\u6570\u7684\u957f\u5ea6\u4e0d\u53ef\u63a7\uff0c\u6709\u53ef\u80fd\u683c\u5f0f\u5316\u540e\u7684\u5b57\u7b26\u4e32\u4f1a\u8d85\u51fa\u7f13\u51b2\u533a\u7684\u5927\u5c0f\uff0c\u9020\u6210\u6ea2\u51fa\u3002\r\n\r\n2).strcpy\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u62f7\u8d1d\u7684\u51fd\u6570\uff0c\u5b83\u7684\u51fd\u6570\u539f\u578b\u4e3astrcpy(char *dst, const char *src\uff09\r\n\u5c06src\u5f00\u59cb\u7684\u4e00\u6bb5\u5b57\u7b26\u4e32\u62f7\u8d1d\u5230dst\u5f00\u59cb\u7684\u5185\u5b58\u4e2d\u53bb\uff0c\u7ed3\u675f\u7684\u6807\u5fd7\u7b26\u53f7\u4e3a  \u0000 \uff0c\u7531\u4e8e\u62f7\u8d1d\u7684\u957f\u5ea6\u4e0d\u662f\u7531\u6211\u4eec\u81ea\u5df1\u63a7\u5236\u7684\uff0c\u6240\u4ee5\u8fd9\u4e2a\u5b57\u7b26\u4e32\u62f7\u8d1d\u5f88\u5bb9\u6613\u51fa\u9519\u3002\r\n\r\n3). memcpy\u662f\u5177\u5907\u5b57\u7b26\u4e32\u62f7\u8d1d\u529f\u80fd\u7684\u51fd\u6570\uff0c\u8fd9\u662f\u4e00\u4e2a\u5185\u5b58\u62f7\u8d1d\u51fd\u6570\uff0c\u5b83\u7684\u51fd\u6570\u539f\u578b\u4e3amemcpy(char *dst, const char* src, unsigned int len);\u5c06\u957f\u5ea6\u4e3alen\u7684\u4e00\u6bb5\u5185\u5b58\uff0c\u4ecesrc\u62f7\u8d1d\u5230dst\u4e2d\u53bb\uff0c\u8fd9\u4e2a\u51fd\u6570\u7684\u957f\u5ea6\u53ef\u63a7\u3002\u4f46\u662f\u4f1a\u6709\u5185\u5b58\u53e0\u52a0\u7684\u95ee\u9898\u3002"},{"ID":"936","typeID":"10","question":"Objective-C\u7684\u4f18\u7f3a\u70b9\uff1f","answer":"objc\u4f18\u70b9\uff1a\r\n\r\n1).  Cateogies\r\n\r\n2).  Posing\r\n\r\n3). \u52a8\u6001\u8bc6\u522b\r\n\r\n4).\u6307\u6807\u8ba1\u7b97\r\n\r\n5).\u5f39\u6027\u8baf\u606f\u4f20\u9012\r\n\r\n6).\u4e0d\u662f\u4e00\u4e2a\u8fc7\u5ea6\u590d\u6742\u7684 C \u884d\u751f\u8bed\u8a00\r\n\r\n7).Objective-C \u4e0e C++ \u53ef\u6df7\u5408\u7f16\u7a0b\r\n\r\nobjc\u7f3a\u70b9:\r\n\r\n1).\u4e0d\u652f\u63f4\u547d\u540d\u7a7a\u95f4\r\n\r\n2).\u4e0d\u652f\u6301\u8fd0\u7b97\u7b26\u91cd\u8f7d\r\n\r\n3).\u4e0d\u652f\u6301\u591a\u91cd\u7ee7\u627f\r\n\r\n4).\u4f7f\u7528\u52a8\u6001\u8fd0\u884c\u65f6\u7c7b\u578b\uff0c\u6240\u6709\u7684\u65b9\u6cd5\u90fd\u662f\u51fd\u6570\u8c03\u7528\uff0c\u6240\u4ee5\u5f88\u591a\u7f16\u8bd1\u65f6\u4f18\u5316\u65b9\u6cd5\u90fd\u7528\u4e0d\u5230\u3002\uff08\u5982\u5185\u8054\u51fd\u6570\u7b49\uff09\uff0c\u6027\u80fd\u4f4e\u52a3\u3002"},{"ID":"935","typeID":"10","question":" readwrite\uff0creadonly\uff0cassign\uff0cretain\uff0ccopy\uff0cnonatomic \u5c5e\u6027\u7684\u4f5c\u7528\uff1f","answer":"@property\u662f\u4e00\u4e2a\u5c5e\u6027\u8bbf\u95ee\u58f0\u660e\uff0c\u6269\u53f7\u5185\u652f\u6301\u4ee5\u4e0b\u51e0\u4e2a\u5c5e\u6027\uff1a\r\n\r\n1).getter=getterName\uff0csetter=setterName\uff0c\u8bbe\u7f6esetter\u4e0e getter\u7684\u65b9\u6cd5\u540d\r\n\r\n2).readwrite,readonly\uff0c\u8bbe\u7f6e\u53ef\u4f9b\u8bbf\u95ee\u7ea7\u522b\r\n\r\n2).assign\uff0csetter\u65b9\u6cd5\u76f4\u63a5\u8d4b\u503c\uff0c\u4e0d\u8fdb\u884c\u4efb\u4f55retain\u64cd\u4f5c\uff0c\u4e3a\u4e86\u89e3\u51b3\u539f\u7c7b\u578b\u4e0e\u73af\u5faa\u5f15\u7528\u95ee\u9898\r\n\r\n3).retain\uff0csetter\u65b9\u6cd5\u5bf9\u53c2\u6570\u8fdb\u884crelease\u65e7\u503c\u518dretain\u65b0\u503c\uff0c\u6240\u6709\u5b9e\u73b0\u90fd\u662f\u8fd9\u4e2a\u987a\u5e8f(CC\u4e0a\u6709\u76f8\u5173\u8d44\u6599)\r\n\r\n4).copy\uff0csetter\u65b9\u6cd5\u8fdb\u884cCopy\u64cd\u4f5c\uff0c\u4e0eretain\u5904\u7406\u6d41\u7a0b\u4e00\u6837\uff0c\u5148\u65e7\u503crelease\uff0c\u518d Copy\u51fa\u65b0\u7684\u5bf9\u8c61\uff0cretainCount\u4e3a1\u3002\u8fd9\u662f\u4e3a\u4e86\u51cf\u5c11\u5bf9\u4e0a\u4e0b\u6587\u7684\u4f9d\u8d56\u800c\u5f15\u5165\u7684\u673a\u5236\u3002\r\n\r\n5).nonatomic\uff0c\u975e\u539f\u5b50\u6027\u8bbf\u95ee\uff0c\u4e0d\u52a0\u540c\u6b65\uff0c\u591a\u7ebf\u7a0b\u5e76\u53d1\u8bbf\u95ee\u4f1a\u63d0\u9ad8\u6027\u80fd\u3002\u6ce8\u610f\uff0c\u5982\u679c\u4e0d\u52a0\u6b64\u5c5e\u6027\uff0c\u5219\u9ed8\u8ba4\u662f\u4e24\u4e2a\u8bbf\u95ee\u65b9\u6cd5\u90fd\u4e3a\u539f\u5b50\u578b\u4e8b\u52a1\u8bbf\u95ee\u3002\u9501\u88ab\u52a0\u5230\u6240\u5c5e\u5bf9\u8c61\u5b9e\u4f8b\u7ea7\u3002"},{"ID":"934","typeID":"10","question":" http\u548cscoket\u901a\u4fe1\u7684\u533a\u522b\uff1f","answer":"http\u662f\u5ba2\u6237\u7aef\u7528http\u534f\u8bae\u8fdb\u884c\u8bf7\u6c42\uff0c\u53d1\u9001\u8bf7\u6c42\u65f6\u5019\u9700\u8981\u5c01\u88c5http\u8bf7\u6c42\u5934\uff0c\u5e76\u7ed1\u5b9a\u8bf7\u6c42\u7684\u6570\u636e\uff0c\u670d\u52a1\u5668\u4e00\u822c\u6709web\u670d\u52a1\u5668\u914d\u5408\uff08\u5f53\u7136\u4e5f\u975e\u7edd\u5bf9\uff09\u3002 http\u8bf7\u6c42\u65b9\u5f0f\u4e3a\u5ba2\u6237\u7aef\u4e3b\u52a8\u53d1\u8d77\u8bf7\u6c42\uff0c\u670d\u52a1\u5668\u624d\u80fd\u7ed9\u54cd\u5e94\uff0c\u4e00\u6b21\u8bf7\u6c42\u5b8c\u6bd5\u540e\u5219\u65ad\u5f00\u8fde\u63a5\uff0c\u4ee5\u8282\u7701\u8d44\u6e90\u3002\u670d\u52a1\u5668\u4e0d\u80fd\u4e3b\u52a8\u7ed9\u5ba2\u6237\u7aef\u54cd\u5e94\uff08\u9664\u975e\u91c7\u53d6http\u957f\u8fde\u63a5 \u6280\u672f\uff09\u3002iphone\u4e3b\u8981\u4f7f\u7528\u7c7b\u662fNSUrlConnection\u3002\r\n\r\nscoket\u662f\u5ba2\u6237\u7aef\u8ddf\u670d\u52a1\u5668\u76f4\u63a5\u4f7f\u7528socket\u201c\u5957\u63a5\u5b57\u201d\u8fdb\u884c\u8fde\u63a5\uff0c\u5e76\u6ca1\u6709\u89c4\u5b9a\u8fde\u63a5\u540e\u65ad\u5f00\uff0c\u6240\u4ee5\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u53ef\u4ee5\u4fdd\u6301\u8fde\u63a5\u901a\u9053\uff0c\u53cc\u65b9 \u90fd\u53ef\u4ee5\u4e3b\u52a8\u53d1\u9001\u6570\u636e\u3002\u4e00\u822c\u5728\u6e38\u620f\u5f00\u53d1\u6216\u80a1\u7968\u5f00\u53d1\u8fd9\u79cd\u8981\u6c42\u5373\u65f6\u6027\u5f88\u5f3a\u5e76\u4e14\u4fdd\u6301\u53d1\u9001\u6570\u636e\u91cf\u6bd4\u8f83\u5927\u7684\u573a\u5408\u4f7f\u7528\u3002\u4e3b\u8981\u4f7f\u7528\u7c7b\u662fCFSocketRef\u3002"},{"ID":"933","typeID":"10","question":"TCP\u548cUDP\u7684\u533a\u522b\uff1f","answer":"TCP\u5168\u79f0\u662fTransmission Control Protocol\uff0c\u4e2d\u6587\u540d\u4e3a\u4f20\u8f93\u63a7\u5236\u534f\u8bae\uff0c\u5b83\u53ef\u4ee5\u63d0\u4f9b\u53ef\u9760\u7684\u3001\u9762\u5411\u8fde\u63a5\u7684\u7f51\u7edc\u6570\u636e\u4f20\u9012\u670d\u52a1\u3002\u4f20\u8f93\u63a7\u5236\u534f\u8bae\u4e3b\u8981\u5305\u542b\u4e0b\u5217\u4efb\u52a1\u548c\u529f\u80fd\uff1a\r\n\r\n* \u786e\u4fddIP\u6570\u636e\u62a5\u7684\u6210\u529f\u4f20\u9012\u3002\r\n\r\n* \u5bf9\u7a0b\u5e8f\u53d1\u9001\u7684\u5927\u5757\u6570\u636e\u8fdb\u884c\u5206\u6bb5\u548c\u91cd\u7ec4\u3002\r\n\r\n* \u786e\u4fdd\u6b63\u786e\u6392\u5e8f\u53ca\u6309\u987a\u5e8f\u4f20\u9012\u5206\u6bb5\u7684\u6570\u636e\u3002\r\n\r\n* \u901a\u8fc7\u8ba1\u7b97\u6821\u9a8c\u548c\uff0c\u8fdb\u884c\u4f20\u8f93\u6570\u636e\u7684\u5b8c\u6574\u6027\u68c0\u67e5\u3002\r\n\r\nTCP\u63d0\u4f9b\u7684\u662f\u9762\u5411\u8fde\u63a5\u7684\u3001\u53ef\u9760\u7684\u6570\u636e\u6d41\u4f20\u8f93\uff0c\u800cUDP\u63d0\u4f9b\u7684\u662f\u975e\u9762\u5411\u8fde\u63a5\u7684\u3001\u4e0d\u53ef\u9760\u7684\u6570\u636e\u6d41\u4f20\u8f93\u3002\r\n\r\n\u7b80\u5355\u7684\u8bf4\uff0cTCP\u6ce8\u91cd\u6570\u636e\u5b89\u5168\uff0c\u800cUDP\u6570\u636e\u4f20\u8f93\u5feb\u70b9\uff0c\u4f46\u5b89\u5168\u6027\u4e00\u822c"},{"ID":"932","typeID":"10","question":"\u4f60\u4e86\u89e3svn,cvs\u7b49\u7248\u672c\u63a7\u5236\u5de5\u5177\u4e48\uff1f","answer":"\u7248\u672c\u63a7\u5236 svn,cvs \u662f\u4e24\u79cd\u7248\u63a7\u5236\u7684\u5668,\u9700\u8981\u914d\u5957\u76f8\u5173\u7684svn\uff0ccvs\u670d\u52a1\u5668\u3002\r\n\r\nscm\u662fxcode\u91cc\u914d\u7f6e\u7248\u672c\u63a7\u5236\u7684\u5730\u65b9\u3002\u7248\u672c\u63a7\u5236\u7684\u539f\u7406\u5c31\u662fa\u548cb\u540c\u65f6\u5f00\u53d1\u4e00\u4e2a\u9879\u76ee\uff0ca\u5199\u5b8c\u5f53\u5929\u7684\u4ee3\u7801\u4e4b\u540e\u628a\u4ee3\u7801\u63d0\u4ea4\u7ed9\u670d\u52a1\u5668\uff0cb\u8981\u505a\u7684\u65f6\u5019\u5148\u4ece\u670d\u52a1\u5668\u5f97\u5230\u6700\u65b0\u7248\u672c\uff0c\u5c31\u53ef\u4ee5\u63a5\u7740\u505a\u3002 \u5982\u679ca\u548cb\u90fd\u8981\u63d0\u4ea4\u7ed9\u670d\u52a1\u5668\uff0c\u5e76\u4e14\u540c\u65f6\u4fee\u6539\u4e86\u540c\u4e00\u4e2a\u65b9\u6cd5\uff0c\u5c31\u4f1a\u4ea7\u751f\u4ee3\u7801\u51b2\u7a81\uff0c\u5982\u679ca\u5148\u63d0\u4ea4\uff0c\u90a3\u4e48b\u63d0\u4ea4\u65f6\uff0c\u670d\u52a1\u5668\u53ef\u4ee5\u63d0\u793a\u51b2\u7a81\u7684\u4ee3\u7801\uff0cb\u53ef\u4ee5\u6e05\u6670\u7684\u770b\u5230\uff0c\u5e76\u505a\u51fa\u76f8\u5e94\u7684\u4fee\u6539\u6216\u878d\u5408\u540e\u518d\u63d0\u4ea4\u5230\u670d\u52a1\u5668\u3002"},{"ID":"931","typeID":"10","question":"\u4ec0\u4e48\u662fpush\uff1f","answer":"\u5ba2\u6237\u7aef\u7a0b\u5e8f\u7559\u4e0b\u540e\u95e8\u7aef\u53e3\uff0c\u5ba2\u6237\u7aef\u603b\u662f\u76d1\u542c\u9488\u5bf9\u8fd9\u4e2a\u540e\u95e8\u7684\u8bf7\u6c42\uff0c\u4e8e\u662f \u670d\u52a1\u5668\u53ef\u4ee5\u4e3b\u52a8\u50cf\u8fd9\u4e2a\u7aef\u53e3\u63a8\u9001\u6d88\u606f\u3002"},{"ID":"930","typeID":"10","question":"\u9759\u6001\u94fe\u63a5\u5e93","answer":"\u6b64\u4e3a.a\u6587\u4ef6\uff0c\u76f8\u5f53\u4e8ejava\u91cc\u7684jar\u5305\uff0c\u628a\u4e00\u4e9b\u7c7b\u7f16\u8bd1\u5230\u4e00\u4e2a\u5305\u4e2d\uff0c\u5728\u4e0d\u540c\u7684\u5de5\u7a0b\u4e2d\u5982\u679c\u5bfc\u5165\u6b64\u6587\u4ef6\u5c31\u53ef\u4ee5\u4f7f\u7528\u91cc\u9762\u7684\u7c7b\uff0c\u5177\u4f53\u4f7f\u7528\u4f9d\u7136\u662f#import \u201c xx.h\u201d\u3002"},{"ID":"929","typeID":"10","question":"fmdb\u6846\u67b6","answer":"\u97f3\u89c6\u9891\u7f16\u89e3\u7801\u6846\u67b6\uff0c\u5185\u90e8\u4f7f\u7528UDP\u534f\u8bae\u9488\u5bf9\u6d41\u5a92\u4f53\u5f00\u53d1\uff0c\u5185\u90e8\u5f00\u8f9f\u4e86\u516d\u4e2a\u7aef\u53e3\u6765\u63a5\u53d7\u6d41\u5a92\u4f53\u6570\u636e\uff0c\u5b8c\u6210\u5feb\u901f\u63a5\u53d7\u4e4b\u76ee\u7684\u3002"},{"ID":"928","typeID":"10","question":"320\u6846\u67b6\u662f\u4ec0\u4e48\uff1f","answer":"ui\u6846\u67b6\uff0c\u5bfc\u5165320\u5de5\u7a0b\u4f5c\u4e3a\u6846\u67b6\u5305\u5982\u540c\u6dfb\u52a0\u4e00\u4e2a\u666e\u901a\u6846\u67b6\u4e00\u6837\u3002cover(open)  flower\u6846\u67b6 (2d \u4eff\u5c04\u6280\u672f)\uff0c\u5185\u90e8\u6838\u5fc3\u7c7b\u662fCATransform3D.\r\n"},{"ID":"927","typeID":"10","question":"\u4ec0\u4e48\u662f\u6c99\u76d2\u6a21\u578b\uff1f\u54ea\u4e9b\u64cd\u4f5c\u662f\u5c5e\u4e8e\u79c1\u6709api\u8303\u7574?","answer":"\u67d0\u4e2aiphone\u5de5\u7a0b\u8fdb\u884c\u6587\u4ef6\u64cd\u4f5c\u6709\u6b64\u5de5\u7a0b\u5bf9\u5e94\u7684\u6307\u5b9a\u7684\u4f4d\u7f6e\uff0c\u4e0d\u80fd\u903e\u8d8a\u3002\r\n\r\niphone\u6c99\u7bb1\u6a21\u578b\u7684\u6709\u56db\u4e2a\u6587\u4ef6\u5939documents\uff0ctmp\uff0capp\uff0cLibrary\uff0c\u6c38\u4e45\u6570\u636e\u5b58\u50a8\u4e00\u822c\u653edocuments\u6587\u4ef6\u5939\uff0c\u5f97\u5230\u6a21\u62df\u5668\u7684\u8def\u5f84\u7684\u53ef\u4f7f\u7528NSHomeDirectory()\u65b9\u6cd5\u3002Nsuserdefaults\u4fdd\u5b58\u7684\u6587\u4ef6\u5728tmp\u6587\u4ef6\u5939\u91cc\u3002"},{"ID":"926","typeID":"10","question":"\u5728\u4e00\u4e2a\u5bf9\u8c61\u7684\u65b9\u6cd5\u91cc\u9762\uff1aself.name= \u201cobject\u201d\uff1b\u548c name =\u201dobject\u201d \u6709\u4ec0\u4e48\u4e0d\u540c\u5417?","answer":"self.name =\u201dobject\u201d\uff1a\u4f1a\u8c03\u7528\u5bf9\u8c61\u7684setName()\u65b9\u6cd5\uff1b\r\n\r\nname = \u201cobject\u201d\uff1a\u4f1a\u76f4\u63a5\u628aobject\u8d4b\u503c\u7ed9\u5f53\u524d\u5bf9\u8c61\u7684name\u5c5e\u6027\u3002"},{"ID":"925","typeID":"10","question":"\u8bf7\u7b80\u8981\u8bf4\u660eviewDidLoad\u548cviewDidUnload\u4f55\u65f6\u8c03\u7528","answer":"viewDidLoad\u5728view\u4ecenib\u6587\u4ef6\u521d\u59cb\u5316\u65f6\u8c03\u7528\uff0cloadView\u5728controller\u7684view\u4e3anil\u65f6\u8c03\u7528\u3002\u6b64\u65b9\u6cd5\u5728\u7f16\u7a0b\u5b9e\u73b0view\u65f6\u8c03\u7528\uff0cview\u63a7\u5236\u5668\u9ed8\u8ba4\u4f1a\u6ce8\u518cmemory warning notification\uff0c\u5f53view controller\u7684\u4efb\u4f55view\u6ca1\u6709\u7528\u7684\u65f6\u5019\uff0cviewDidUnload\u4f1a\u88ab\u8c03\u7528\uff0c\u5728\u8fd9\u91cc\u5b9e\u73b0\u5c06retain\u7684view release\uff0c\u5982\u679c\u662fretain\u7684IBOutlet view \u5c5e\u6027\u5219\u4e0d\u8981\u5728\u8fd9\u91ccrelease\uff0cIBOutlet\u4f1a\u8d1f\u8d23release \u3002\r\n"},{"ID":"924","typeID":"10","question":"\u7b80\u8ff0\u5185\u5b58\u5206\u533a\u60c5\u51b5","answer":"1).\u4ee3\u7801\u533a\uff1a\u5b58\u653e\u51fd\u6570\u4e8c\u8fdb\u5236\u4ee3\u7801\r\n\r\n2).\u6570\u636e\u533a\uff1a\u7cfb\u7edf\u8fd0\u884c\u65f6\u7533\u8bf7\u5185\u5b58\u5e76\u521d\u59cb\u5316\uff0c\u7cfb\u7edf\u9000\u51fa\u65f6\u7531\u7cfb\u7edf\u91ca\u653e\u3002\u5b58\u653e\u5168\u5c40\u53d8\u91cf\u3001\u9759\u6001\u53d8\u91cf\u3001\u5e38\u91cf\r\n\r\n3).\u5806\u533a\uff1a\u901a\u8fc7malloc\u7b49\u51fd\u6570\u6216new\u7b49\u64cd\u4f5c\u7b26\u52a8\u6001\u7533\u8bf7\u5f97\u5230\uff0c\u9700\u7a0b\u5e8f\u5458\u624b\u52a8\u7533\u8bf7\u548c\u91ca\u653e\r\n\r\n4).\u6808\u533a\uff1a\u51fd\u6570\u6a21\u5757\u5185\u7533\u8bf7\uff0c\u51fd\u6570\u7ed3\u675f\u65f6\u7531\u7cfb\u7edf\u81ea\u52a8\u91ca\u653e\u3002\u5b58\u653e\u5c40\u90e8\u53d8\u91cf\u3001\u51fd\u6570\u53c2\u6570"},{"ID":"923","typeID":"10","question":"\u961f\u5217\u548c\u6808\u6709\u4ec0\u4e48\u533a\u522b?","answer":"\u961f\u5217\u548c\u6808\u662f\u4e24\u79cd\u4e0d\u540c\u7684\u6570\u636e\u5bb9\u5668\u3002\u4ece\u201d\u6570\u636e\u7ed3\u6784\u201d\u7684\u89d2\u5ea6\u770b\uff0c\u5b83\u4eec\u90fd\u662f\u7ebf\u6027\u7ed3\u6784\uff0c\u5373\u6570\u636e\u5143\u7d20\u4e4b\u95f4\u7684\u5173\u7cfb\u76f8\u540c\u3002\r\n\r\n\u961f\u5217\u662f\u4e00\u79cd\u5148\u8fdb\u5148\u51fa\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5b83\u5728\u4e24\u7aef\u8fdb\u884c\u64cd\u4f5c\uff0c\u4e00\u7aef\u8fdb\u884c\u5165\u961f\u5217\u64cd\u4f5c\uff0c\u4e00\u7aef\u8fdb\u884c\u51fa\u5217\u961f\u64cd\u4f5c\u3002\r\n\r\n\u6808\u662f\u4e00\u79cd\u5148\u8fdb\u540e\u51fa\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5b83\u53ea\u80fd\u5728\u6808\u9876\u8fdb\u884c\u64cd\u4f5c\uff0c\u5165\u6808\u548c\u51fa\u6808\u90fd\u5728\u6808\u9876\u64cd\u4f5c\u3002"},{"ID":"922","typeID":"10","question":"HTTP\u534f\u8bae\u4e2d\uff0cPOST\u548cGET\u7684\u533a\u522b\u662f\u4ec0\u4e48\uff1f","answer":"1).GET \u65b9\u6cd5\r\n\r\nGET \u65b9\u6cd5\u63d0\u4ea4\u6570\u636e\u4e0d\u5b89\u5168\uff0c\u6570\u636e\u7f6e\u4e8e\u8bf7\u6c42\u884c\uff0c\u5ba2\u6237\u7aef\u5730\u5740\u680f\u53ef\u89c1;\r\n\r\nGET \u65b9\u6cd5\u63d0\u4ea4\u7684\u6570\u636e\u5927\u5c0f\u6709\u9650\r\n\r\nGET \u65b9\u6cd5\u4e0d\u53ef\u4ee5\u8bbe\u7f6e\u4e66\u7b7e\r\n\r\n2).POST \u65b9\u6cd5\r\n\r\nPOST \u65b9\u6cd5\u63d0\u4ea4\u6570\u636e\u5b89\u5168\uff0c\u6570\u636e\u7f6e\u4e8e\u6d88\u606f\u4e3b\u4f53\u5185\uff0c\u5ba2\u6237\u7aef\u4e0d\u53ef\u89c1\r\n\r\nPOST \u65b9\u6cd5\u63d0\u4ea4\u7684\u6570\u636e\u5927\u5c0f\u6ca1\u6709\u9650\u5236\r\n\r\nPOST \u65b9\u6cd5\u53ef\u4ee5\u8bbe\u7f6e\u4e66\u7b7e"},{"ID":"921","typeID":"10","question":"iOS\u7684\u7cfb\u7edf\u67b6\u6784","answer":" iOS\u7684\u7cfb\u7edf\u67b6\u6784\u5206\u4e3a\uff08 \u6838\u5fc3\u64cd\u4f5c\u7cfb\u7edf\u5c42 theCore OS layer \uff09\u3001\uff08 \u6838\u5fc3\u670d\u52a1\u5c42theCore Services layer \uff09\u3001\uff08 \u5a92\u4f53\u5c42 theMedia layer \uff09\u548c\uff08 Cocoa \u754c\u9762\u670d\u52a1\u5c42 the Cocoa Touch layer \uff09\u56db\u4e2a\u5c42\u6b21\u3002"},{"ID":"920","typeID":"10","question":"\u63a7\u4ef6\u4e3b\u8981\u54cd\u5e943\u79cd\u4e8b\u4ef6","answer":"1). \u57fa\u4e8e\u89e6\u6478\u7684\u4e8b\u4ef6 ;  2). \u57fa\u4e8e\u503c\u7684\u4e8b\u4ef6 ;  3).\u57fa\u4e8e\u7f16\u8f91\u7684\u4e8b\u4ef6\u3002"},{"ID":"919","typeID":"10","question":"xib\u6587\u4ef6\u7684\u6784\u6210\u5206\u4e3a\u54ea3\u4e2a\u56fe\u6807\uff1f\u90fd\u5177\u6709\u4ec0\u4e48\u529f\u80fd","answer":" File\u2019s Owner \u662f\u6240\u6709 nib \u6587\u4ef6\u4e2d\u7684\u6bcf\u4e2a\u56fe\u6807\uff0c\u5b83\u8868\u793a\u4ece\u78c1\u76d8\u52a0\u8f7d nib \u6587\u4ef6\u7684\u5bf9\u8c61\uff1b\r\n\r\nFirst Responder \u5c31\u662f\u7528\u6237\u5f53\u524d\u6b63\u5728\u4e0e\u4e4b\u4ea4\u4e92\u7684\u5bf9\u8c61\uff1b\r\n\r\nView \u663e\u793a\u7528\u6237\u754c\u9762\uff1b\u5b8c\u6210\u7528\u6237\u4ea4\u4e92\uff1b\u662f UIView \u7c7b\u6216\u5176\u5b50\u7c7b\u3002"},{"ID":"918","typeID":"10","question":"\u7b80\u8ff0\u89c6\u56fe\u63a7\u4ef6\u5668\u7684\u751f\u547d\u5468\u671f?","answer":"loadView \u5c3d\u7ba1\u4e0d\u76f4\u63a5\u8c03\u7528\u8be5\u65b9\u6cd5\uff0c\u5982\u591a\u624b\u52a8\u521b\u5efa\u81ea\u5df1\u7684\u89c6\u56fe\uff0c\u90a3\u4e48\u5e94\u8be5\u8986\u76d6\u8fd9\u4e2a\u65b9\u6cd5\u5e76\u5c06\u5b83\u4eec\u8d4b\u503c\u7ed9\u8bd5\u56fe\u63a7\u5236\u5668\u7684 view \u5c5e\u6027\u3002\r\n\r\nviewDidLoad \u53ea\u6709\u5728\u89c6\u56fe\u63a7\u5236\u5668\u5c06\u5176\u89c6\u56fe\u8f7d\u5165\u5230\u5185\u5b58\u4e4b\u540e\u624d\u8c03\u7528\u8be5\u65b9\u6cd5\uff0c\u8fd9\u662f\u6267\u884c\u4efb\u4f55\u5176\u4ed6\u521d\u59cb\u5316\u64cd\u4f5c\u7684\u5165\u53e3\u3002\r\n\r\nviewDidUnload \u5f53\u8bd5\u56fe\u63a7\u5236\u5668\u4ece\u5185\u5b58\u91ca\u653e\u81ea\u5df1\u7684\u65b9\u6cd5\u7684\u65f6\u5019\u8c03\u7528\uff0c\u7528\u4e8e\u6e05\u695a\u90a3\u4e9b\u53ef\u80fd\u5df2\u7ecf\u5728\u8bd5\u56fe\u63a7\u5236\u5668\u4e2d\u521b\u5efa\u7684\u5bf9\u8c61\u3002\r\n\r\nviewVillAppear \u5f53\u8bd5\u56fe\u5c06\u8981\u6dfb\u52a0\u5230\u7a97\u53e3\u4e2d\u5e76\u4e14\u8fd8\u4e0d\u53ef\u89c1\u7684\u65f6\u5019\u6216\u8005\u4e0a\u5c42\u89c6\u56fe\u79fb\u51fa\u56fe\u5c42\u540e\u672c\u89c6\u56fe\u53d8\u6210\u9876\u7ea7\u89c6\u56fe\u65f6\u8c03\u7528\u8be5\u65b9\u6cd5\uff0c\u7528\u4e8e\u6267\u884c\u8bf8\u5982\u6539\u53d8\u89c6\u56fe\u65b9\u5411\u7b49\u7684\u64cd\u4f5c\u3002\u5b9e\u73b0\u8be5\u65b9\u6cd5\u65f6\u786e\u4fdd\u8c03\u7528 [super viewWillAppear:\r\n\r\nviewDidAppear \u5f53\u89c6\u56fe\u6dfb\u52a0\u5230\u7a97\u53e3\u4e2d\u4ee5\u540e\u6216\u8005\u4e0a\u5c42\u89c6\u56fe\u79fb\u51fa\u56fe\u5c42\u540e\u672c\u89c6\u56fe\u53d8\u6210\u9876\u7ea7\u89c6\u56fe\u65f6\u8c03\u7528\uff0c\u7528\u4e8e\u653e\u7f6e\u90a3\u4e9b\u9700\u8981\u5728\u89c6\u56fe\u663e\u793a\u540e\u6267\u884c\u7684\u4ee3\u7801\u3002\u786e\u4fdd\u8c03\u7528 [super viewDidAppear\uff1a] \u3002"},{"ID":"917","typeID":"10","question":" \u52a8\u753b\u6709\u57fa\u672c\u7c7b\u578b\u6709\u54ea\u51e0\u79cd\uff1b\u8868\u89c6\u56fe\u6709\u54ea\u51e0\u79cd\u57fa\u672c\u6837\u5f0f?","answer":"\u52a8\u753b\u6709\u4e24\u79cd\u57fa\u672c\u7c7b\u578b\uff1a\u9690\u5f0f\u52a8\u753b\u548c\u663e\u5f0f\u52a8\u753b\u3002"},{"ID":"916","typeID":"10","question":"\u5b9e\u73b0\u7b80\u5355\u7684\u8868\u683c\u663e\u793a\u9700\u8981\u8bbe\u7f6eUITableView\u7684\u4ec0\u4e48\u5c5e\u6027\u3001\u5b9e\u73b0\u4ec0\u4e48\u534f\u8bae\uff1f","answer":"\u5b9e\u73b0\u7b80\u5355\u7684\u8868\u683c\u663e\u793a\u9700\u8981\u8bbe\u7f6e UITableView \u7684 dataSource \u548c delegate \u5c5e\u6027\uff0c\u5b9e\u73b0UITableViewDataSource \u548c UITableViewDelegate \u534f\u8bae\u3002"},{"ID":"915","typeID":"10","question":"Cocoa Touch\u63d0\u4f9b\u4e86\u54ea\u51e0\u79cdCore Animation\u8fc7\u6e21\u7c7b\u578b\uff1f","answer":"Cocoa Touch \u63d0\u4f9b\u4e86 4 \u79cd Core Animation \u8fc7\u6e21\u7c7b\u578b\uff0c\u5206\u522b\u4e3a\uff1a\u4ea4\u53c9\u6de1\u5316\u3001\u63a8\u6324\u3001\u663e\u793a\u548c\u8986\u76d6\u3002"},{"ID":"914","typeID":"10","question":" UIView\u4e0eCLayer\u6709\u4ec0\u4e48\u533a\u522b\uff1f","answer":"1).UIView \u662f iOS \u7cfb\u7edf\u4e2d\u754c\u9762\u5143\u7d20\u7684\u57fa\u7840\uff0c\u6240\u6709\u7684\u754c\u9762\u5143\u7d20\u90fd\u662f\u7ee7\u627f\u81ea\u5b83\u3002\u5b83\u672c\u8eab\u5b8c\u5168\u662f\u7531 CoreAnimation \u6765\u5b9e\u73b0\u7684\u3002\u5b83\u771f\u6b63\u7684\u7ed8\u56fe\u90e8\u5206\uff0c\u662f\u7531\u4e00\u4e2a CALayer \u7c7b\u6765\u7ba1\u7406\u3002 UIView \u672c\u8eab\u66f4\u50cf\u662f\u4e00\u4e2a CALayer \u7684\u7ba1\u7406\u5668\uff0c\u8bbf\u95ee\u5b83\u7684\u8ddf\u7ed8\u56fe\u548c\u8ddf\u5750\u6807\u6709\u5173\u7684\u5c5e\u6027\u3002\r\n\r\n2).UIView \u6709\u4e2a\u91cd\u8981\u5c5e\u6027 layer \uff0c\u53ef\u4ee5\u8fd4\u56de\u5b83\u7684\u4e3b CALayer \u5b9e\u4f8b\u3002\r\n\r\n3).UIView \u7684 CALayer \u7c7b\u4f3c UIView \u7684\u5b50 View \u6811\u5f62\u7ed3\u6784\uff0c\u4e5f\u53ef\u4ee5\u5411\u5b83\u7684 layer \u4e0a\u6dfb\u52a0\u5b50layer \uff0c\u6765\u5b8c\u6210\u67d0\u4e9b\u7279\u6b8a\u7684\u8868\u793a\u3002\u5373 CALayer \u5c42\u662f\u53ef\u4ee5\u5d4c\u5957\u7684\u3002\r\n\r\n4).UIView \u7684 layer \u6811\u5f62\u5728\u7cfb\u7edf\u5185\u90e8\uff0c\u88ab\u7ef4\u62a4\u7740\u4e09\u4efd copy \u3002\u5206\u522b\u662f\u903b\u8f91\u6811\uff0c\u8fd9\u91cc\u662f\u4ee3\u7801\u53ef\u4ee5\u64cd\u7eb5\u7684\uff1b\u52a8\u753b\u6811\uff0c\u662f\u4e00\u4e2a\u4e2d\u95f4\u5c42\uff0c\u7cfb\u7edf\u5c31\u5728\u8fd9\u4e00\u5c42\u4e0a\u66f4\u6539\u5c5e\u6027\uff0c\u8fdb\u884c\u5404\u79cd\u6e32\u67d3\u64cd\u4f5c\uff1b\u663e\u793a\u6811\uff0c\u5176\u5185\u5bb9\u5c31\u662f\u5f53\u524d\u6b63\u88ab\u663e\u793a\u5728\u5c4f\u5e55\u4e0a\u5f97\u5185\u5bb9\u3002\r\n\r\n5).\u52a8\u753b\u7684\u8fd0\u4f5c\uff1a\u5bf9 UIView \u7684 subLayer \uff08\u975e\u4e3b Layer \uff09\u5c5e\u6027\u8fdb\u884c\u66f4\u6539\uff0c\u7cfb\u7edf\u5c06\u81ea\u52a8\u8fdb\u884c\u52a8\u753b\u751f\u6210\uff0c\u52a8\u753b\u6301\u7eed\u65f6\u95f4\u7684\u7f3a\u7701\u503c\u4f3c\u4e4e\u662f 0.5 \u79d2\u3002\r\n\r\n6).\u5750\u6807\u7cfb\u7edf\uff1a CALayer \u7684\u5750\u6807\u7cfb\u7edf\u6bd4 UIView \u591a\u4e86\u4e00\u4e2a anchorPoint \u5c5e\u6027\uff0c\u4f7f\u7528CGPoint \u7ed3\u6784\u8868\u793a\uff0c\u503c\u57df\u662f 0~1 \uff0c\u662f\u4e2a\u6bd4\u4f8b\u503c\u3002\u8fd9\u4e2a\u70b9\u662f\u5404\u79cd\u56fe\u5f62\u53d8\u6362\u7684\u5750\u6807\u539f\u70b9\uff0c\u540c\u65f6\u4f1a\u66f4\u6539 layer \u7684 position \u7684\u4f4d\u7f6e\uff0c\u5b83\u7684\u7f3a\u7701\u503c\u662f {0.5,0.5} \uff0c\u5373\u5728 layer \u7684\u4e2d\u592e\u3002\r\n\r\n7).\u6e32\u67d3\uff1a\u5f53\u66f4\u65b0\u5c42\uff0c\u6539\u53d8\u4e0d\u80fd\u7acb\u5373\u663e\u793a\u5728\u5c4f\u5e55\u4e0a\u3002\u5f53\u6240\u6709\u7684\u5c42\u90fd\u51c6\u5907\u597d\u65f6\uff0c\u53ef\u4ee5\u8c03\u7528setNeedsDisplay \u65b9\u6cd5\u6765\u91cd\u7ed8\u663e\u793a\u3002\r\n\r\n8).\u53d8\u6362\uff1a\u8981\u5728\u4e00\u4e2a\u5c42\u4e2d\u6dfb\u52a0\u4e00\u4e2a 3D \u6216\u4eff\u5c04\u53d8\u6362\uff0c\u53ef\u4ee5\u5206\u522b\u8bbe\u7f6e\u5c42\u7684 transform \u6216affineTransform \u5c5e\u6027\u3002\r\n\r\n9).\u53d8\u5f62\uff1a Quartz Core \u7684\u6e32\u67d3\u80fd\u529b\uff0c\u4f7f\u4e8c\u7ef4\u56fe\u50cf\u53ef\u4ee5\u88ab\u81ea\u7531\u64cd\u7eb5\uff0c\u5c31\u597d\u50cf\u662f\u4e09\u7ef4\u7684\u3002\u56fe\u50cf\u53ef\u4ee5\u5728\u4e00\u4e2a\u4e09\u7ef4\u5750\u6807\u7cfb\u4e2d\u4ee5\u4efb\u610f\u89d2\u5ea6\u88ab\u65cb\u8f6c\uff0c\u7f29\u653e\u548c\u503e\u659c\u3002 CATransform3D \u7684\u4e00\u5957\u65b9\u6cd5\u63d0\u4f9b\u4e86\u4e00\u4e9b\u9b54\u672f\u822c\u7684\u53d8\u6362\u6548\u679c\u3002"},{"ID":"913","typeID":"10","question":"Quatrz 2D\u7684\u7ed8\u56fe\u529f\u80fd\u7684\u4e09\u4e2a\u6838\u5fc3\u6982\u5ff5\u662f\u4ec0\u4e48\u5e76\u7b80\u8ff0\u5176\u4f5c\u7528","answer":"\u4e0a\u4e0b\u6587\uff1a\u4e3b\u8981\u7528\u4e8e\u63cf\u8ff0\u56fe\u5f62\u5199\u5165\u54ea\u91cc\uff1b\r\n\r\n\u8def\u5f84\uff1a\u662f\u5728\u56fe\u5c42\u4e0a\u7ed8\u5236\u7684\u5185\u5bb9\uff1b\r\n\r\n\u72b6\u6001\uff1a\u7528\u4e8e\u4fdd\u5b58\u914d\u7f6e\u53d8\u6362\u7684\u503c\u3001\u586b\u5145\u548c\u8f6e\u5ed3\uff0c alpha \u503c\u7b49\u3002"},{"ID":"912","typeID":"10","question":"iPhone OS\u4e3b\u8981\u63d0\u4f9b\u4e86\u51e0\u79cd\u64ad\u653e\u97f3\u9891\u7684\u65b9\u6cd5\uff1f","answer":"SystemSound Services\r\n\r\nAVAudioPlayer \u7c7b\r\n\r\nAudio Queue Services\r\n\r\nOpenAL"},{"ID":"911","typeID":"10","question":"\u4f7f\u7528AVAudioPlayer\u7c7b\u8c03\u7528\u54ea\u4e2a\u6846\u67b6\u3001\u4f7f\u7528\u6b65\u9aa4\uff1f","answer":"AVFoundation.framework\r\n\r\n\u6b65\u9aa4\uff1a\u914d\u7f6e AVAudioPlayer \u5bf9\u8c61\uff1b\r\n\r\n\u5b9e\u73b0 AVAudioPlayer \u7c7b\u7684\u59d4\u6258\u65b9\u6cd5\uff1b\r\n\r\n\u63a7\u5236 AVAudioPlayer \u7c7b\u7684\u5bf9\u8c61\uff1b\r\n\r\n\u76d1\u63a7\u97f3\u91cf\u6c34\u5e73\uff1b\r\n\r\n\u56de\u653e\u8fdb\u5ea6\u548c\u62d6\u62fd\u64ad\u653e\u3002"},{"ID":"910","typeID":"10","question":"\u6709\u54ea\u51e0\u79cd\u624b\u52bf\u901a\u77e5\u65b9\u6cd5\u3001\u5199\u6e05\u695a\u65b9\u6cd5\u540d\uff1f","answer":"-(void)touchesBegan:(NSSet*)touchedwithEvent:(UIEvent*)event;\r\n\r\n-(void)touchesMoved:(NSSet*)touched withEvent:(UIEvent*)event;\r\n\r\n-(void)touchesEnded:(NSSet*)touchedwithEvent:(UIEvent*)event;\r\n\r\n-(void)touchesCanceled:(NSSet*)touchedwithEvent:(UIEvent*)event;"},{"ID":"909","typeID":"10","question":" CFSocket\u4f7f\u7528\u6709\u54ea\u51e0\u4e2a\u6b65\u9aa4?","answer":"\u521b\u5efa Socket \u7684\u4e0a\u4e0b\u6587\uff1b\u521b\u5efa Socket \uff1b\u914d\u7f6e\u8981\u8bbf\u95ee\u7684\u670d\u52a1\u5668\u4fe1\u606f\uff1b\u5c01\u88c5\u670d\u52a1\u5668\u4fe1\u606f\uff1b\u8fde\u63a5\u670d\u52a1\u5668\uff1b"},{"ID":"908","typeID":"10","question":" Core Foundation\u4e2d\u63d0\u4f9b\u4e86\u54ea\u51e0\u79cd\u64cd\u4f5cSocket\u7684\u65b9\u6cd5\uff1f","answer":"CFNetwork \u3001 CFSocket \u548c BSD Socket \u3002"},{"ID":"907","typeID":"10","question":"\u89e3\u6790XML\u6587\u4ef6\u6709\u54ea\u51e0\u79cd\u65b9\u5f0f\uff1f","answer":"\u4ee5 DOM \u65b9\u5f0f\u89e3\u6790 XML \u6587\u4ef6\uff1b\r\n\u4ee5 SAX \u65b9\u5f0f\u89e3\u6790 XML \u6587\u4ef6\uff1b"},{"ID":"906","typeID":"10","question":"iOS\u5e73\u53f0\u600e\u4e48\u505a\u6570\u636e\u7684\u6301\u4e45\u5316?coredata \u548csqlite\u6709\u65e0\u5fc5\u7136\u8054\u7cfb\uff1fcoredata\u662f\u4e00\u4e2a\u5173\u7cfb\u578b\u6570\u636e\u5e93\u5417\uff1f","answer":"iOS \u4e2d\u53ef\u4ee5\u6709\u56db\u79cd\u6301\u4e45\u5316\u6570\u636e\u7684\u65b9\u5f0f\uff1a\u5c5e\u6027\u5217\u8868(plist)\u3001\u5bf9\u8c61\u5f52\u6863\u3001 SQLite3 \u548c Core Data\uff1b core data \u53ef\u4ee5\u4f7f\u4f60\u4ee5\u56fe\u5f62\u754c\u9762\u7684\u65b9\u5f0f\u5feb\u901f\u7684\u5b9a\u4e49 app \u7684\u6570\u636e\u6a21\u578b\uff0c\u540c\u65f6\u5728\u4f60\u7684\u4ee3\u7801\u4e2d\u5bb9\u6613\u83b7\u53d6\u5230\u5b83\u3002 coredata \u63d0\u4f9b\u4e86\u57fa\u7840\u7ed3\u6784\u53bb\u5904\u7406\u5e38\u7528\u7684\u529f\u80fd\uff0c\u4f8b\u5982\u4fdd\u5b58\uff0c\u6062\u590d\uff0c\u64a4\u9500\u548c\u91cd\u505a\uff0c\u5141\u8bb8\u4f60\u5728 app \u4e2d\u7ee7\u7eed\u521b\u5efa\u65b0\u7684\u4efb\u52a1\u3002\u5728\u4f7f\u7528 core data \u7684\u65f6\u5019\uff0c\u4f60\u4e0d\u7528\u5b89\u88c5\u989d\u5916\u7684\u6570\u636e\u5e93\u7cfb\u7edf\uff0c\u56e0\u4e3a core data \u4f7f\u7528\u5185\u7f6e\u7684 sqlite \u6570\u636e\u5e93\u3002 core data \u5c06\u4f60 app \u7684\u6a21\u578b\u5c42\u653e\u5165\u5230\u4e00\u7ec4\u5b9a\u4e49\u5728\u5185\u5b58\u4e2d\u7684\u6570\u636e\u5bf9\u8c61\u3002 coredata \u4f1a\u8ffd\u8e2a\u8fd9\u4e9b\u5bf9\u8c61\u7684\u6539\u53d8\uff0c\u540c\u65f6\u53ef\u4ee5\u6839\u636e\u9700\u8981\u505a\u76f8\u53cd\u7684\u6539\u53d8\uff0c\u4f8b\u5982\u7528\u6237\u6267\u884c\u64a4\u9500\u547d\u4ee4\u3002\u5f53 core data \u5728\u5bf9\u4f60 app \u6570\u636e\u7684\u6539\u53d8\u8fdb\u884c\u4fdd\u5b58\u7684\u65f6\u5019\uff0c core data \u4f1a\u628a\u8fd9\u4e9b\u6570\u636e\u5f52\u6863\uff0c\u5e76\u6c38\u4e45\u6027\u4fdd\u5b58\u3002 mac os x \u4e2dsqlite \u5e93\uff0c\u5b83\u662f\u4e00\u4e2a\u8f7b\u91cf\u7ea7\u529f\u80fd\u5f3a\u5927\u7684\u5173\u7cfb\u6570\u636e\u5f15\u64ce\uff0c\u4e5f\u5f88\u5bb9\u6613\u5d4c\u5165\u5230\u5e94\u7528\u7a0b\u5e8f\u3002\u53ef\u4ee5\u5728\u591a\u4e2a\u5e73\u53f0\u4f7f\u7528\uff0c sqlite \u662f\u4e00\u4e2a\u8f7b\u91cf\u7ea7\u7684\u5d4c\u5165\u5f0f sql \u6570\u636e\u5e93\u7f16\u7a0b\u3002\u4e0e core data \u6846\u67b6\u4e0d\u540c\u7684\u662f\uff0c sqlite \u662f\u4f7f\u7528\u7a0b\u5e8f\u5f0f\u7684\uff0c sql \u7684\u4e3b\u8981\u7684 API \u6765\u76f4\u63a5\u64cd\u4f5c\u6570\u636e\u8868\u3002 Core Data \u4e0d\u662f\u4e00\u4e2a\u5173\u7cfb\u578b\u6570\u636e\u5e93\uff0c\u4e5f\u4e0d\u662f\u5173\u7cfb\u578b\u6570\u636e\u5e93\u7ba1\u7406\u7cfb\u7edf (RDBMS) \u3002\u867d\u7136 Core Dta \u652f\u6301SQLite \u4f5c\u4e3a\u4e00\u79cd\u5b58\u50a8\u7c7b\u578b\uff0c\u4f46\u5b83\u4e0d\u80fd\u4f7f\u7528\u4efb\u610f\u7684 SQLite \u6570\u636e\u5e93\u3002 Core Data \u5728\u4f7f\u7528\u7684\u8fc7\u7a0b\u79cd\u81ea\u5df1\u521b\u5efa\u8fd9\u4e2a\u6570\u636e\u5e93\u3002 Core Data \u652f\u6301\u5bf9\u4e00\u3001\u5bf9\u591a\u7684\u5173\u7cfb\u3002"},{"ID":"905","typeID":"10","question":"UITableView \u7684\u91cd\u7528\u673a\u5236\uff1f","answer":"UITableView \u901a\u8fc7\u91cd\u7528\u5355\u5143\u683c\u6765\u8fbe\u5230\u8282\u7701\u5185\u5b58\u7684\u76ee\u7684: \u901a\u8fc7\u4e3a\u6bcf\u4e2a\u5355\u5143\u683c\u6307\u5b9a\u4e00\u4e2a\u91cd\u7528\u6807\u8bc6\u7b26(reuseIdentifier),\u5373\u6307\u5b9a\u4e86\u5355\u5143\u683c\u7684\u79cd\u7c7b,\u4ee5\u53ca\u5f53\u5355\u5143\u683c\u6eda\u51fa\u5c4f\u5e55\u65f6,\u5141\u8bb8\u6062\u590d\u5355\u5143\u683c\u4ee5\u4fbf\u91cd\u7528.\u5bf9\u4e8e\u4e0d\u540c\u79cd\u7c7b\u7684\u5355\u5143\u683c\u4f7f\u7528\u4e0d\u540c\u7684ID,\u5bf9\u4e8e\u7b80\u5355\u7684\u8868\u683c,\u4e00\u4e2a\u6807\u8bc6\u7b26\u5c31\u591f\u4e86.\r\n"},{"ID":"764","typeID":"10","question":"lldb\uff08gdb\uff09\u5e38\u7528\u7684\u8c03\u8bd5\u547d\u4ee4\uff1f","answer":"breakpoint \u8bbe\u7f6e\u65ad\u70b9\u5b9a\u4f4d\u5230\u67d0\u4e00\u4e2a\u51fd\u6570\r\nn \u65ad\u70b9\u6307\u9488\u4e0b\u4e00\u6b65\r\npo\u6253\u5370\u5bf9\u8c61\r\n"},{"ID":"763","typeID":"10","question":"\u5982\u4f55\u8c03\u8bd5BAD_ACCESS\u9519\u8bef\uff1f","answer":"1. \u91cd\u5199object\u7684respondsToSelector\u65b9\u6cd5\uff0c\u73b0\u5b9e\u51fa\u73b0EXEC_BAD_ACCESS\u524d\u8bbf\u95ee\u7684\u6700\u540e\u4e00\u4e2aobject\r\n\r\n2. \u901a\u8fc7 Zombie\r\n\r\n3. \u8bbe\u7f6e\u5168\u5c40\u65ad\u70b9\u5feb\u901f\u5b9a\u4f4d\u95ee\u9898\u4ee3\u7801\u6240\u5728\u884c\r\n\r\n4. Xcode 7 \u5df2\u7ecf\u96c6\u6210\u4e86BAD_ACCESS\u6355\u83b7\u529f\u80fd\uff1aAddress Sanitizer\u3002 \u7528\u6cd5\u5982\u4e0b\uff1a\u5728\u914d\u7f6e\u4e2d\u52fe\u9009\/Enable Address Sanitizer\r\n"},{"ID":"762","typeID":"10","question":"IB\u4e2dUser Defined Runtime Attributes\u5982\u4f55\u4f7f\u7528\uff1f","answer":"\u5b83\u80fd\u591f\u901a\u8fc7KVC\u7684\u65b9\u5f0f\u914d\u7f6e\u4e00\u4e9b\u4f60\u5728interface builder \u4e2d\u4e0d\u80fd\u914d\u7f6e\u7684\u5c5e\u6027\u3002\u5f53\u4f60\u5e0c\u671b\u5728IB\u4e2d\u4f5c\u5c3d\u53ef\u80fd\u591a\u5f97\u4e8b\u60c5\uff0c\u8fd9\u4e2a\u7279\u6027\u80fd\u591f\u5e2e\u52a9\u4f60\u7f16\u5199\u66f4\u52a0\u8f7b\u91cf\u7ea7\u7684viewcontroller"},{"ID":"761","typeID":"10","question":"IBOutlet\u8fde\u51fa\u6765\u7684\u89c6\u56fe\u5c5e\u6027\u4e3a\u4ec0\u4e48\u53ef\u4ee5\u88ab\u8bbe\u7f6e\u6210weak?","answer":"\u56e0\u4e3a\u65e2\u7136\u6709\u5916\u94fe\u90a3\u4e48\u89c6\u56fe\u5728xib\u6216\u8005storyboard\u4e2d\u80af\u5b9a\u5b58\u5728\uff0c\u89c6\u56fe\u5df2\u7ecf\u5bf9\u5b83\u6709\u4e00\u4e2a\u5f3a\u5f15\u7528\u4e86\u3002\r\n\r\n\u4e0d\u8fc7\u8fd9\u4e2a\u56de\u7b54\u6f0f\u4e86\u4e2a\u91cd\u8981\u77e5\u8bc6\uff0c\u4f7f\u7528storyboard\uff08xib\u4e0d\u884c\uff09\u521b\u5efa\u7684vc\uff0c\u4f1a\u6709\u4e00\u4e2a\u53eb_topLevelObjectsToKeepAliveFromStoryboard\u7684\u79c1\u6709\u6570\u7ec4\u5f3a\u5f15\u7528\u6240\u6709top level\u7684\u5bf9\u8c61\uff0c\u6240\u4ee5\u8fd9\u65f6\u5373\u4fbfoutlet\u58f0\u660e\u6210weak\u4e5f\u6ca1\u5173\u7cfb"},{"ID":"760","typeID":"10","question":" apple\u7528\u4ec0\u4e48\u65b9\u5f0f\u5b9e\u73b0\u5bf9\u4e00\u4e2a\u5bf9\u8c61\u7684KVO\uff1f","answer":"\u5f53\u4f60\u89c2\u5bdf\u4e00\u4e2a\u5bf9\u8c61\u65f6\uff0c\u4e00\u4e2a\u65b0\u7684\u7c7b\u4f1a\u88ab\u52a8\u6001\u521b\u5efa\u3002\u8fd9\u4e2a\u7c7b\u7ee7\u627f\u81ea\u8be5\u5bf9\u8c61\u7684\u539f\u672c\u7684\u7c7b\uff0c\u5e76\u91cd\u5199\u4e86\u88ab\u89c2\u5bdf\u5c5e\u6027\u7684 setter \u65b9\u6cd5\u3002\u91cd\u5199\u7684 setter \u65b9\u6cd5\u4f1a\u8d1f\u8d23\u5728\u8c03\u7528\u539f setter \u65b9\u6cd5\u4e4b\u524d\u548c\u4e4b\u540e\uff0c\u901a\u77e5\u6240\u6709\u89c2\u5bdf\u5bf9\u8c61\uff1a\u503c\u7684\u66f4\u6539\u3002\u6700\u540e\u901a\u8fc7 isa \u6df7\u5199\uff08isa-swizzling\uff09 \u628a\u8fd9\u4e2a\u5bf9\u8c61\u7684 isa \u6307\u9488 ( isa \u6307\u9488\u544a\u8bc9 Runtime \u7cfb\u7edf\u8fd9\u4e2a\u5bf9\u8c61\u7684\u7c7b\u662f\u4ec0\u4e48 ) \u6307\u5411\u8fd9\u4e2a\u65b0\u521b\u5efa\u7684\u5b50\u7c7b\uff0c\u5bf9\u8c61\u5c31\u795e\u5947\u7684\u53d8\u6210\u4e86\u65b0\u521b\u5efa\u7684\u5b50\u7c7b\u7684\u5b9e\u4f8b\u3002"},{"ID":"759","typeID":"10","question":"KVC\u548cKVO\u7684keyPath\u4e00\u5b9a\u662f\u5c5e\u6027\u4e48\uff1f","answer":"KVO\u652f\u6301\u5b9e\u4f8b\u53d8\u91cf"},{"ID":"758","typeID":"10","question":"KVC\u7684keyPath\u4e2d\u7684\u96c6\u5408\u8fd0\u7b97\u7b26\u5982\u4f55\u4f7f\u7528\uff1f","answer":"1.\u5fc5\u987b\u7528\u5728\u96c6\u5408\u5bf9\u8c61\u4e0a\u6216\u666e\u901a\u5bf9\u8c61\u7684\u96c6\u5408\u5c5e\u6027\u4e0a\r\n2.\u7b80\u5355\u96c6\u5408\u8fd0\u7b97\u7b26\u6709@avg\uff0c @count \uff0c @max \uff0c @min \uff0c@sum\uff0c\r\n3.\u683c\u5f0f @\"@sum.age\"\u6216 @\"\u96c6\u5408\u5c5e\u6027.@max.age\"\r\n"},{"ID":"757","typeID":"10","question":"\u82e5\u4e00\u4e2a\u7c7b\u6709\u5b9e\u4f8b\u53d8\u91cf NSString *_foo \uff0c\u8c03\u7528setValue:forKey:\u65f6\uff0c\u53ef\u4ee5\u4ee5foo\u8fd8\u662f _foo \u4f5c\u4e3akey\uff1f","answer":"\u90fd\u53ef\u4ee5\u3002"},{"ID":"756","typeID":"10","question":"\u5982\u4f55\u624b\u52a8\u89e6\u53d1\u4e00\u4e2avalue\u7684KVO\uff1f","answer":"\u6240\u8c13\u7684\u201c\u624b\u52a8\u89e6\u53d1\u201d\u662f\u533a\u522b\u4e8e\u201c\u81ea\u52a8\u89e6\u53d1\u201d\uff1a\r\n\r\n\u81ea\u52a8\u89e6\u53d1\u662f\u6307\u7c7b\u4f3c\u8fd9\u79cd\u573a\u666f\uff1a\u5728\u6ce8\u518c KVO \u4e4b\u524d\u8bbe\u7f6e\u4e00\u4e2a\u521d\u59cb\u503c\uff0c\u6ce8\u518c\u4e4b\u540e\uff0c\u8bbe\u7f6e\u4e00\u4e2a\u4e0d\u4e00\u6837\u7684\u503c\uff0c\u5c31\u53ef\u4ee5\u89e6\u53d1\u4e86\u3002\r\n\r\n\u60f3\u77e5\u9053\u5982\u4f55\u624b\u52a8\u89e6\u53d1\uff0c\u5fc5\u987b\u77e5\u9053\u81ea\u52a8\u89e6\u53d1 KVO \u7684\u539f\u7406\uff1a\r\n\r\n\u952e\u503c\u89c2\u5bdf\u901a\u77e5\u4f9d\u8d56\u4e8e NSObject \u7684\u4e24\u4e2a\u65b9\u6cd5: willChangeValueForKey: \u548c didChangevlueForKey: \u3002\u5728\u4e00\u4e2a\u88ab\u89c2\u5bdf\u5c5e\u6027\u53d1\u751f\u6539\u53d8\u4e4b\u524d\uff0c willChangeValueForKey: \u4e00\u5b9a\u4f1a\u88ab\u8c03\u7528\uff0c\u8fd9\u5c31 \u4f1a\u8bb0\u5f55\u65e7\u7684\u503c\u3002\u800c\u5f53\u6539\u53d8\u53d1\u751f\u540e\uff0c didChangeValueForKey: \u4f1a\u88ab\u8c03\u7528\uff0c\u7ee7\u800c observeValueForKey:ofObject:change:context: \u4e5f\u4f1a\u88ab\u8c03\u7528\u3002\u5982\u679c\u53ef\u4ee5\u624b\u52a8\u5b9e\u73b0\u8fd9\u4e9b\u8c03\u7528\uff0c\u5c31\u53ef\u4ee5\u5b9e\u73b0\u201c\u624b\u52a8\u89e6\u53d1\u201d\u4e86\u3002\r\n\r\n\u90a3\u4e48\u201c\u624b\u52a8\u89e6\u53d1\u201d\u7684\u4f7f\u7528\u573a\u666f\u662f\u4ec0\u4e48\uff1f\u4e00\u822c\u6211\u4eec\u53ea\u5728\u5e0c\u671b\u80fd\u63a7\u5236\u201c\u56de\u8c03\u7684\u8c03\u7528\u65f6\u673a\u201d\u65f6\u624d\u4f1a\u8fd9\u4e48\u505a\u3002\r\n\r\n\u5177\u4f53\u505a\u6cd5\u5982\u4e0b\uff1a\r\n\r\n\u5982\u679c\u8fd9\u4e2a value \u662f \u8868\u793a\u65f6\u95f4\u7684 self.now \uff0c\u90a3\u4e48\u4ee3\u7801\u5982\u4e0b\uff1a\u6700\u540e\u4e24\u884c\u4ee3\u7801\u7f3a\u4e00\u4e0d\u53ef\u3002\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n\/\/  .m\u6587\u4ef6\r\n\/\/  Created by https:\/\/github.com\/ChenYilong\r\n\/\/  \u5fae\u535a@iOS\u7a0b\u5e8f\u72ad\u8881(http:\/\/weibo.com\/luohanchenyilong\/).\r\n\/\/  \u624b\u52a8\u89e6\u53d1 value \u7684KVO\uff0c\u6700\u540e\u4e24\u884c\u4ee3\u7801\u7f3a\u4e00\u4e0d\u53ef\u3002\r\n \r\n\/\/@property (nonatomic, strong) NSDate *now;\r\n- (void)viewDidLoad\r\n{\r\n    [super viewDidLoad];\r\n    [self willChangeValueForKey:@\"now\"]; \/\/ \u201c\u624b\u52a8\u89e6\u53d1self.now\u7684KVO\u201d\uff0c\u5fc5\u5199\u3002\r\n    [self didChangeValueForKey:@\"now\"]; \/\/ \u201c\u624b\u52a8\u89e6\u53d1self.now\u7684KVO\u201d\uff0c\u5fc5\u5199\u3002\r\n}\r\n\u4f46\u662f\u5e73\u65f6\u6211\u4eec\u4e00\u822c\u4e0d\u4f1a\u8fd9\u4e48\u5e72\uff0c\u6211\u4eec\u90fd\u662f\u7b49\u7cfb\u7edf\u53bb\u201c\u81ea\u52a8\u89e6\u53d1\u201d\u3002\u201c\u81ea\u52a8\u89e6\u53d1\u201d\u7684\u5b9e\u73b0\u539f\u7406\uff1a\r\n\r\n\u6bd4\u5982\u8c03\u7528 setNow: \u65f6\uff0c\u7cfb\u7edf\u8fd8\u4f1a\u4ee5\u67d0\u79cd\u65b9\u5f0f\u5728\u4e2d\u95f4\u63d2\u5165 wilChangeValueForKey: \u3001 didChangeValueForKey: \u548c observeValueForKeyPath:ofObject:change:context: \u7684\u8c03\u7528\u3002\r\n\r\n\u5927\u5bb6\u53ef\u80fd\u4ee5\u4e3a\u8fd9\u662f\u56e0\u4e3a setNow: \u662f\u5408\u6210\u65b9\u6cd5\uff0c\u6709\u65f6\u5019\u6211\u4eec\u4e5f\u80fd\u770b\u5230\u4eba\u4eec\u8fd9\u4e48\u5199\u4ee3\u7801:\r\n\r\n- (void)setNow:(NSDate *)aDate {\r\n    [self willChangeValueForKey:@\"now\"]; \/\/ \u6ca1\u6709\u5fc5\u8981\r\n    _now = aDate;\r\n    [self didChangeValueForKey:@\"now\"];\/\/ \u6ca1\u6709\u5fc5\u8981\r\n}\r\n\u8fd9\u662f\u5b8c\u5168\u6ca1\u6709\u5fc5\u8981\u7684\u4ee3\u7801\uff0c\u4e0d\u8981\u8fd9\u4e48\u505a\uff0c\u8fd9\u6837\u7684\u8bdd\uff0cKVO\u4ee3\u7801\u4f1a\u88ab\u8c03\u7528\u4e24\u6b21\u3002KVO\u5728\u8c03\u7528\u5b58\u53d6\u65b9\u6cd5\u4e4b\u524d\u603b\u662f\u8c03\u7528 willChangeValueForKey: \uff0c\u4e4b\u540e\u603b\u662f\u8c03\u7528 didChangeValueForkey: \u3002\u600e\u4e48\u505a\u5230\u7684\u5462?\u7b54\u6848\u662f\u901a\u8fc7 isa \u6df7\u5199\uff08isa-swizzling\uff09\u3002"},{"ID":"755","typeID":"10","question":"addObserver:forKeyPath:options:context:\u5404\u4e2a\u53c2\u6570\u7684\u4f5c\u7528\u5206\u522b\u662f\u4ec0\u4e48\uff0cobserver\u4e2d\u9700\u8981\u5b9e\u73b0\u54ea\u4e2a\u65b9\u6cd5\u624d\u80fd\u83b7\u5f97KVO\u56de\u8c03\uff1f","answer":"\/\/ \u6dfb\u52a0\u952e\u503c\u89c2\u5bdf\r\n\/*\r\n1 \u89c2\u5bdf\u8005\uff0c\u8d1f\u8d23\u5904\u7406\u76d1\u542c\u4e8b\u4ef6\u7684\u5bf9\u8c61\r\n2 \u89c2\u5bdf\u7684\u5c5e\u6027\r\n3 \u89c2\u5bdf\u7684\u9009\u9879\r\n4 \u4e0a\u4e0b\u6587\r\n*\/\r\n[self.person addObserver:self forKeyPath:@\"name\" options:NSKeyValueObservingOptionNew | NSKeyValueObservingOptionOld context:@\"Person Name\"];\r\nobserver\u4e2d\u9700\u8981\u5b9e\u73b0\u4e00\u4e0b\u65b9\u6cd5\uff1a\r\n\r\n\r\n\/\/ \u6240\u6709\u7684 kvo \u76d1\u542c\u5230\u4e8b\u4ef6\uff0c\u90fd\u4f1a\u8c03\u7528\u6b64\u65b9\u6cd5\r\n\/*\r\n 1. \u89c2\u5bdf\u7684\u5c5e\u6027\r\n 2. \u89c2\u5bdf\u7684\u5bf9\u8c61\r\n 3. change \u5c5e\u6027\u53d8\u5316\u5b57\u5178\uff08\u65b0\uff0f\u65e7\uff09\r\n 4. \u4e0a\u4e0b\u6587\uff0c\u4e0e\u76d1\u542c\u7684\u65f6\u5019\u4f20\u9012\u7684\u4e00\u81f4\r\n *\/\r\n- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary *)change context:(void *)context;\r\n"},{"ID":"754","typeID":"10","question":"\u4ee5\u4e0b\u4ee3\u7801\u8fd0\u884c\u7ed3\u679c\u5982\u4f55\uff1f","answer":"- (void)viewDidLoad\r\n{\r\n    [super viewDidLoad];\r\n    NSLog(@\"1\");\r\n    dispatch_sync(dispatch_get_main_queue(), ^{\r\n        NSLog(@\"2\");\r\n    });\r\n    NSLog(@\"3\");\r\n}\r\n\u53ea\u8f93\u51fa\uff1a1 \u3002\u53d1\u751f\u4e3b\u7ebf\u7a0b\u9501\u6b7b\u3002"},{"ID":"753","typeID":"10","question":"\u82f9\u679c\u4e3a\u4ec0\u4e48\u8981\u5e9f\u5f03dispatch_get_current_queue\uff1f","answer":"dispatch_get_current_queue\u5bb9\u6613\u9020\u6210\u6b7b\u9501"},{"ID":"752","typeID":"10","question":"dispatch_barrier_async\u7684\u4f5c\u7528\u662f\u4ec0\u4e48\uff1f","answer":"\u5728\u5e76\u884c\u961f\u5217\u4e2d\uff0c\u4e3a\u4e86\u4fdd\u6301\u67d0\u4e9b\u4efb\u52a1\u7684\u987a\u5e8f\uff0c\u9700\u8981\u7b49\u5f85\u4e00\u4e9b\u4efb\u52a1\u5b8c\u6210\u540e\u624d\u80fd\u7ee7\u7eed\u8fdb\u884c\uff0c\u4f7f\u7528 barrier \u6765\u7b49\u5f85\u4e4b\u524d\u4efb\u52a1\u5b8c\u6210\uff0c\u907f\u514d\u6570\u636e\u7ade\u4e89\u7b49\u95ee\u9898\u3002 dispatch_barrier_async \u51fd\u6570\u4f1a\u7b49\u5f85\u8ffd\u52a0\u5230Concurrent Dispatch Queue\u5e76\u884c\u961f\u5217\u4e2d\u7684\u64cd\u4f5c\u5168\u90e8\u6267\u884c\u5b8c\u4e4b\u540e\uff0c\u7136\u540e\u518d\u6267\u884c dispatch_barrier_async \u51fd\u6570\u8ffd\u52a0\u7684\u5904\u7406\uff0c\u7b49 dispatch_barrier_async \u8ffd\u52a0\u7684\u5904\u7406\u6267\u884c\u7ed3\u675f\u4e4b\u540e\uff0cConcurrent Dispatch Queue\u624d\u6062\u590d\u4e4b\u524d\u7684\u52a8\u4f5c\u7ee7\u7eed\u6267\u884c\u3002\r\n\r\n\u6253\u4e2a\u6bd4\u65b9\uff1a\u6bd4\u5982\u4f60\u4eec\u516c\u53f8\u5468\u672b\u8ddf\u56e2\u65c5\u6e38\uff0c\u9ad8\u901f\u4f11\u606f\u7ad9\u4e0a\uff0c\u53f8\u673a\u8bf4\uff1a\u5927\u5bb6\u90fd\u53bb\u4e0a\u5395\u6240\uff0c\u901f\u6218\u901f\u51b3\uff0c\u4e0a\u5b8c\u5395\u6240\u5c31\u4e0a\u9ad8\u901f\u3002\u8d85\u5927\u7684\u516c\u5171\u5395\u6240\uff0c\u5927\u5bb6\u540c\u65f6\u53bb\uff0c\u7a0b\u5e8f\u733f\u5f88\u5feb\u5c31\u7ed3\u675f\u4e86\uff0c\u4f46\u7a0b\u5e8f\u5a9b\u5c31\u53ef\u80fd\u4f1a\u6162\u4e00\u4e9b\uff0c\u5373\u4f7f\u4f60\u7b2c\u4e00\u4e2a\u56de\u6765\uff0c\u53f8\u673a\u4e5f\u4e0d\u4f1a\u51fa\u53d1\uff0c\u53f8\u673a\u8981\u7b49\u5f85\u6240\u6709\u4eba\u90fd\u56de\u6765\u540e\uff0c\u624d\u80fd\u51fa\u53d1\u3002 dispatch_barrier_async \u51fd\u6570\u8ffd\u52a0\u7684\u5185\u5bb9\u5c31\u5982\u540c \u201c\u4e0a\u5b8c\u5395\u6240\u5c31\u4e0a\u9ad8\u901f\u201d\u8fd9\u4e2a\u52a8\u4f5c\u3002"},{"ID":"751","typeID":"10","question":"\u5982\u4f55\u7528GCD\u540c\u6b65\u82e5\u5e72\u4e2a\u5f02\u6b65\u8c03\u7528\uff1f\uff08\u5982\u6839\u636e\u82e5\u5e72\u4e2aurl\u5f02\u6b65\u52a0\u8f7d\u591a\u5f20\u56fe\u7247\uff0c\u7136\u540e\u5728\u90fd\u4e0b\u8f7d\u5b8c\u6210\u540e\u5408\u6210\u4e00\u5f20\u6574\u56fe\uff09","answer":"\u4f7f\u7528Dispatch Group\u8ffd\u52a0block\u5230Global Group Queue,\u8fd9\u4e9bblock\u5982\u679c\u5168\u90e8\u6267\u884c\u5b8c\u6bd5\uff0c\u5c31\u4f1a\u6267\u884cMain Dispatch Queue\u4e2d\u7684\u7ed3\u675f\u5904\u7406\u7684block\u3002\r\n\r\ndispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);\r\ndispatch_group_t group = dispatch_group_create();\r\ndispatch_group_async(group, queue, ^{ \/*\u52a0\u8f7d\u56fe\u72471 *\/ });\r\ndispatch_group_async(group, queue, ^{ \/*\u52a0\u8f7d\u56fe\u72472 *\/ });\r\ndispatch_group_async(group, queue, ^{ \/*\u52a0\u8f7d\u56fe\u72473 *\/ }); \r\ndispatch_group_notify(group, dispatch_get_main_queue(), ^{\r\n        \/\/ \u5408\u5e76\u56fe\u7247\r\n});"},{"ID":"750","typeID":"10","question":"GCD\u7684\u961f\u5217\uff08dispatch_queue_t\uff09\u5206\u54ea\u4e24\u79cd\u7c7b\u578b\uff1f","answer":"1.\u4e32\u884c\u961f\u5217Serial Dispatch Queue\r\n2.\u5e76\u884c\u961f\u5217Concurrent Dispatch Queue"},{"ID":"749","typeID":"10","question":"\u4f7f\u7528\u7cfb\u7edf\u7684\u67d0\u4e9bblock api\uff08\u5982UIView\u7684block\u7248\u672c\u5199\u52a8\u753b\u65f6\uff09\uff0c\u662f\u5426\u4e5f\u8003\u8651\u5f15\u7528\u5faa\u73af\u95ee\u9898\uff1f","answer":"\u7cfb\u7edf\u7684\u67d0\u4e9bblock api\u4e2d\uff0cUIView\u7684block\u7248\u672c\u5199\u52a8\u753b\u65f6\u4e0d\u9700\u8981\u8003\u8651\uff0c\u4f46\u4e5f\u6709\u4e00\u4e9bapi \u9700\u8981\u8003\u8651\uff1a\r\n\r\n\u6240\u8c13\u201c\u5f15\u7528\u5faa\u73af\u201d\u662f\u6307\u53cc\u5411\u7684\u5f3a\u5f15\u7528\uff0c\u6240\u4ee5\u90a3\u4e9b\u201c\u5355\u5411\u7684\u5f3a\u5f15\u7528\u201d\uff08block \u5f3a\u5f15\u7528 self \uff09\u6ca1\u6709\u95ee\u9898\uff0c\u6bd4\u5982\u8fd9\u4e9b\uff1a\r\n\r\n\r\n[UIView animateWithDuration:duration animations:^{ [self.superview layoutIfNeeded]; }]; \r\n[[NSOperationQueue mainQueue] addOperationWithBlock:^{ self.someProperty = xyz; }]; \r\n[[NSNotificationCenter defaultCenter] addObserverForName:@\"someNotification\" \r\n                                                  object:nil \r\n                           queue:[NSOperationQueue mainQueue]                                              usingBlock:^(NSNotification * notification) {\r\n                                                    self.someProperty = xyz; }];\r\n\u8fd9\u4e9b\u60c5\u51b5\u4e0d\u9700\u8981\u8003\u8651\u201c\u5f15\u7528\u5faa\u73af\u201d\u3002\r\n\r\n\u4f46\u5982\u679c\u4f60\u4f7f\u7528\u4e00\u4e9b\u53c2\u6570\u4e2d\u53ef\u80fd\u542b\u6709 ivar \u7684\u7cfb\u7edf api \uff0c\u5982 GCD \u3001NSNotificationCenter\u5c31\u8981\u5c0f\u5fc3\u4e00\u70b9\uff1a\u6bd4\u5982GCD \u5185\u90e8\u5982\u679c\u5f15\u7528\u4e86 self\uff0c\u800c\u4e14 GCD \u7684\u5176\u4ed6\u53c2\u6570\u662f ivar\uff0c\u5219\u8981\u8003\u8651\u5230\u5faa\u73af\u5f15\u7528\uff1a\r\n\r\n__weak __typeof__(self) weakSelf = self;\r\ndispatch_group_async(_operationsGroup, _operationsQueue, ^\r\n{\r\n__typeof__(self) strongSelf = weakSelf;\r\n[strongSelf doSomething];\r\n[strongSelf doSomethingElse];\r\n} );\r\n\u7c7b\u4f3c\u7684\uff1a\r\n\r\n\r\n__weak __typeof__(self) weakSelf = self;\r\n  _observer = [[NSNotificationCenter defaultCenter] addObserverForName:@\"testKey\"\r\n                                                                object:nil\r\n                                                                 queue:nil\r\n                                                            usingBlock:^(NSNotification *note) {\r\n      __typeof__(self) strongSelf = weakSelf;\r\n      [strongSelf dismissModalViewControllerAnimated:YES];\r\n  }];\r\nself --> _observer --> block --> self \u663e\u7136\u8fd9\u4e5f\u662f\u4e00\u4e2a\u5faa\u73af\u5f15\u7528\u3002"},{"ID":"748","typeID":"10","question":"\u5728block\u5185\u5982\u4f55\u4fee\u6539block\u5916\u90e8\u53d8\u91cf\uff1f","answer":"\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5728block\u4e2d\u8bbf\u95ee\u7684\u5916\u90e8\u53d8\u91cf\u662f\u590d\u5236\u8fc7\u53bb\u7684\uff0c\u5373\uff1a\u5199\u64cd\u4f5c\u4e0d\u5bf9\u539f\u53d8\u91cf\u751f\u6548\u3002\u4f46\u662f\u4f60\u53ef\u4ee5\u52a0\u4e0a__block\u6765\u8ba9\u5176\u5199\u64cd\u4f5c\u751f\u6548\uff0c\u793a\u4f8b\u4ee3\u7801\u5982\u4e0b:\r\n\r\nblock int a = 0;\r\nvoid  (^foo)(void) = ^{ \r\n    a = 1; \r\n}\r\nf00(); \r\n\/\/\u8fd9\u91cc\uff0ca\u7684\u503c\u88ab\u4fee\u6539\u4e3a1"},{"ID":"747","typeID":"10","question":"\u4f7f\u7528block\u65f6\u4ec0\u4e48\u60c5\u51b5\u4f1a\u53d1\u751f\u5f15\u7528\u5faa\u73af\uff0c\u5982\u4f55\u89e3\u51b3\uff1f","answer":"\u4e00\u4e2a\u5bf9\u8c61\u4e2d\u5f3a\u5f15\u7528\u4e86block\uff0c\u5728block\u4e2d\u53c8\u4f7f\u7528\u4e86\u8be5\u5bf9\u8c61\uff0c\u5c31\u4f1a\u53d1\u5c04\u5faa\u73af\u5f15\u7528\u3002 \u89e3\u51b3\u65b9\u6cd5\u662f\u5c06\u8be5\u5bf9\u8c61\u4f7f\u7528__weak\u6216\u8005__block\u4fee\u9970\u7b26\u4fee\u9970\u4e4b\u540e\u518d\u5728block\u4e2d\u4f7f\u7528\u3002\r\n\r\nid weak weakSelf = self; \u6216\u8005 weak __typeof(&*self)weakSelf = self\u8be5\u65b9\u6cd5\u53ef\u4ee5\u8bbe\u7f6e\u5b8f\r\nid __block weakSelf = self;"},{"ID":"746","typeID":"10","question":"\u82f9\u679c\u662f\u5982\u4f55\u5b9e\u73b0autoreleasepool\u7684\uff1f","answer":"autoreleasepool\u4ee5\u4e00\u4e2a\u961f\u5217\u6570\u7ec4\u7684\u5f62\u5f0f\u5b9e\u73b0,\u4e3b\u8981\u901a\u8fc7\u4e0b\u5217\u4e09\u4e2a\u51fd\u6570\u5b8c\u6210.\r\n\r\nobjc_autoreleasepoolPush\r\nobjc_autoreleasepoolPop\r\nobjc_aurorelease\r\n\u770b\u51fd\u6570\u540d\u5c31\u53ef\u4ee5\u77e5\u9053\uff0c\u5bf9autorelease\u5206\u522b\u6267\u884cpush\uff0c\u548cpop\u64cd\u4f5c\u3002\u9500\u6bc1\u5bf9\u8c61\u65f6\u6267\u884crelease\u64cd\u4f5c\u3002"},{"ID":"745","typeID":"10","question":"BAD_ACCESS\u5728\u4ec0\u4e48\u60c5\u51b5\u4e0b\u51fa\u73b0\uff1f","answer":"\u8bbf\u95ee\u4e86\u91ce\u6307\u9488\uff0c\u6bd4\u5982\u5bf9\u4e00\u4e2a\u5df2\u7ecf\u91ca\u653e\u7684\u5bf9\u8c61\u6267\u884c\u4e86release\u3001\u8bbf\u95ee\u5df2\u7ecf\u91ca\u653e\u5bf9\u8c61\u7684\u6210\u5458\u53d8\u91cf\u6216\u8005\u53d1\u6d88\u606f\u3002 \u6b7b\u5faa\u73af"},{"ID":"744","typeID":"10","question":"\u4e0d\u624b\u52a8\u6307\u5b9aautoreleasepool\u7684\u524d\u63d0\u4e0b\uff0c\u4e00\u4e2aautorealese\u5bf9\u8c61\u5728\u4ec0\u4e48\u65f6\u523b\u91ca\u653e\uff1f\uff08\u6bd4\u5982\u5728\u4e00\u4e2avc\u7684viewDidLoad\u4e2d\u521b\u5efa\uff09","answer":"\u5206\u4e24\u79cd\u60c5\u51b5\uff1a\u624b\u52a8\u5e72\u9884\u91ca\u653e\u65f6\u673a\u3001\u7cfb\u7edf\u81ea\u52a8\u53bb\u91ca\u653e\u3002\r\n\r\n\u624b\u52a8\u5e72\u9884\u91ca\u653e\u65f6\u673a--\u6307\u5b9aautoreleasepool \u5c31\u662f\u6240\u8c13\u7684\uff1a\u5f53\u524d\u4f5c\u7528\u57df\u5927\u62ec\u53f7\u7ed3\u675f\u65f6\u91ca\u653e\u3002\r\n\u7cfb\u7edf\u81ea\u52a8\u53bb\u91ca\u653e--\u4e0d\u624b\u52a8\u6307\u5b9aautoreleasepool\r\nAutorelease\u5bf9\u8c61\u4f1a\u5728\u5f53\u524d\u7684 runloop \u8fed\u4ee3\u7ed3\u675f\u65f6\u91ca\u653e\u3002\r\n\u5982\u679c\u5728\u4e00\u4e2avc\u7684viewDidLoad\u4e2d\u521b\u5efa\u4e00\u4e2a Autorelease\u5bf9\u8c61\uff0c\u90a3\u4e48\u8be5\u5bf9\u8c61\u4f1a\u5728 viewDidAppear \u65b9\u6cd5\u6267\u884c\u524d\u5c31\u88ab\u9500\u6bc1\u4e86\u3002"},{"ID":"743","typeID":"10","question":"ARC\u901a\u8fc7\u4ec0\u4e48\u65b9\u5f0f\u5e2e\u52a9\u5f00\u53d1\u8005\u7ba1\u7406\u5185\u5b58\uff1f","answer":"\u7f16\u8bd1\u65f6\u6839\u636e\u4ee3\u7801\u4e0a\u4e0b\u6587\uff0c\u63d2\u5165 retain\/release"},{"ID":"742","typeID":"10","question":"objc\u4f7f\u7528\u4ec0\u4e48\u673a\u5236\u7ba1\u7406\u5bf9\u8c61\u5185\u5b58\uff1f","answer":"\u901a\u8fc7 retainCount \u7684\u673a\u5236\u6765\u51b3\u5b9a\u5bf9\u8c61\u662f\u5426\u9700\u8981\u91ca\u653e\u3002 \u6bcf\u6b21 runloop \u7684\u65f6\u5019\uff0c\u90fd\u4f1a\u68c0\u67e5\u5bf9\u8c61\u7684 retainCount\uff0c\u5982\u679cretainCount \u4e3a 0\uff0c\u8bf4\u660e\u8be5\u5bf9\u8c61\u6ca1\u6709\u5730\u65b9\u9700\u8981\u7ee7\u7eed\u4f7f\u7528\u4e86\uff0c\u53ef\u4ee5\u91ca\u653e\u6389\u4e86\u3002"},{"ID":"741","typeID":"10","question":"\u731c\u60f3runloop\u5185\u90e8\u662f\u5982\u4f55\u5b9e\u73b0\u7684\uff1f","answer":"\u4e00\u822c\u6765\u8bb2\uff0c\u4e00\u4e2a\u7ebf\u7a0b\u4e00\u6b21\u53ea\u80fd\u6267\u884c\u4e00\u4e2a\u4efb\u52a1\uff0c\u6267\u884c\u5b8c\u6210\u540e\u7ebf\u7a0b\u5c31\u4f1a\u9000\u51fa\u3002\u5982\u679c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u673a\u5236\uff0c\u8ba9\u7ebf\u7a0b\u80fd\u968f\u65f6\u5904\u7406\u4e8b\u4ef6\u4f46\u5e76\u4e0d\u9000\u51fa\uff0c\u901a\u5e38\u7684\u4ee3\u7801\u903b\u8f91 \u662f\u8fd9\u6837\u7684\uff1a\r\nfunction loop() {\r\n    initialize();\r\n    do {\r\n        var message = get_next_message();\r\n        process_message(message);\r\n    } while (message != quit);\r\n}\r\n\u6216\u4f7f\u7528\u4f2a\u4ee3\u7801\u6765\u5c55\u793a\u4e0b:\r\n\r\n\r\n\/\/ \r\n\/\/ http:\/\/weibo.com\/luohanchenyilong\/ (\u5fae\u535a@iOS\u7a0b\u5e8f\u72ad\u8881)\r\n\/\/ https:\/\/github.com\/ChenYilong\r\nint main(int argc, char * argv[]) {\r\n \/\/\u7a0b\u5e8f\u4e00\u76f4\u8fd0\u884c\u72b6\u6001\r\n while (AppIsRunning) {\r\n      \/\/\u7761\u7720\u72b6\u6001\uff0c\u7b49\u5f85\u5524\u9192\u4e8b\u4ef6\r\n      id whoWakesMe = SleepForWakingUp();\r\n      \/\/\u5f97\u5230\u5524\u9192\u4e8b\u4ef6\r\n      id event = GetEvent(whoWakesMe);\r\n      \/\/\u5f00\u59cb\u5904\u7406\u4e8b\u4ef6\r\n      HandleEvent(event);\r\n }\r\n return 0;\r\n}"},{"ID":"740","typeID":"10","question":"\u4ee5+ scheduledTimerWithTimeInterval...\u7684\u65b9\u5f0f\u89e6\u53d1\u7684timer\uff0c\u5728\u6ed1\u52a8\u9875\u9762\u4e0a\u7684\u5217\u8868\u65f6\uff0ctimer\u4f1a\u6682\u5b9a\u56de\u8c03\uff0c\u4e3a\u4ec0\u4e48\uff1f\u5982\u4f55\u89e3\u51b3\uff1f","answer":"RunLoop\u53ea\u80fd\u8fd0\u884c\u5728\u4e00\u79cdmode\u4e0b\uff0c\u5982\u679c\u8981\u6362mode\uff0c\u5f53\u524d\u7684loop\u4e5f\u9700\u8981\u505c\u4e0b\u91cd\u542f\u6210\u65b0\u7684\u3002\u5229\u7528\u8fd9\u4e2a\u673a\u5236\uff0cScrollView\u6eda\u52a8\u8fc7\u7a0b\u4e2dNSDefaultRunLoopMode\uff08kCFRunLoopDefaultMode\uff09\u7684mode\u4f1a\u5207\u6362\u5230UITrackingRunLoopMode\u6765\u4fdd\u8bc1ScrollView\u7684\u6d41\u7545\u6ed1\u52a8\uff1a\u53ea\u80fd\u5728NSDefaultRunLoopMode\u6a21\u5f0f\u4e0b\u5904\u7406\u7684\u4e8b\u4ef6\u4f1a\u5f71\u54cdscrllView\u7684\u6ed1\u52a8\u3002\r\n\r\n\u5982\u679c\u6211\u4eec\u628a\u4e00\u4e2aNSTimer\u5bf9\u8c61\u4ee5NSDefaultRunLoopMode\uff08kCFRunLoopDefaultMode\uff09\u6dfb\u52a0\u5230\u4e3b\u8fd0\u884c\u5faa\u73af\u4e2d\u7684\u65f6\u5019, ScrollView\u6eda\u52a8\u8fc7\u7a0b\u4e2d\u4f1a\u56e0\u4e3amode\u7684\u5207\u6362\uff0c\u800c\u5bfc\u81f4NSTimer\u5c06\u4e0d\u518d\u88ab\u8c03\u5ea6\u3002\r\n\r\n\u540c\u65f6\u56e0\u4e3amode\u8fd8\u662f\u53ef\u5b9a\u5236\u7684\uff0c\u6240\u4ee5\uff1a\r\n\r\nTimer\u8ba1\u65f6\u4f1a\u88abscrollView\u7684\u6ed1\u52a8\u5f71\u54cd\u7684\u95ee\u9898\u53ef\u4ee5\u901a\u8fc7\u5c06timer\u6dfb\u52a0\u5230NSRunLoopCommonModes\uff08kCFRunLoopCommonModes\uff09\u6765\u89e3\u51b3\u3002\u4ee3\u7801\u5982\u4e0b\uff1a\r\n\r\n\r\n\r\n\/\/ \r\n\/\/ http:\/\/weibo.com\/luohanchenyilong\/ (\u5fae\u535a@iOS\u7a0b\u5e8f\u72ad\u8881)\r\n\/\/ https:\/\/github.com\/ChenYilong\r\n \r\n\/\/\u5c06timer\u6dfb\u52a0\u5230NSDefaultRunLoopMode\u4e2d\r\n[NSTimer scheduledTimerWithTimeInterval:1.0\r\n     target:self\r\n     selector:@selector(timerTick:)\r\n     userInfo:nil\r\n     repeats:YES];\r\n\/\/\u7136\u540e\u518d\u6dfb\u52a0\u5230NSRunLoopCommonModes\u91cc\r\nNSTimer *timer = [NSTimer timerWithTimeInterval:1.0\r\n     target:self\r\n     selector:@selector(timerTick:)\r\n     userInfo:nil\r\n     repeats:YES];\r\n[[NSRunLoop currentRunLoop] addTimer:timer forMode:NSRunLoopCommonModes];\r\n"},{"ID":"739","typeID":"10","question":"runloop\u7684mode\u4f5c\u7528\u662f\u4ec0\u4e48\uff1f","answer":"model \u4e3b\u8981\u662f\u7528\u6765\u6307\u5b9a\u4e8b\u4ef6\u5728\u8fd0\u884c\u5faa\u73af\u4e2d\u7684\u4f18\u5148\u7ea7\u7684\uff0c\u5206\u4e3a\uff1a\r\n\r\nNSDefaultRunLoopMode\uff08kCFRunLoopDefaultMode\uff09\uff1a\u9ed8\u8ba4\uff0c\u7a7a\u95f2\u72b6\u6001\r\nUITrackingRunLoopMode\uff1aScrollView\u6ed1\u52a8\u65f6\r\nUIInitializationRunLoopMode\uff1a\u542f\u52a8\u65f6\r\nNSRunLoopCommonModes\uff08kCFRunLoopCommonModes\uff09\uff1aMode\u96c6\u5408\r\n\u82f9\u679c\u516c\u5f00\u63d0\u4f9b\u7684 Mode \u6709\u4e24\u4e2a\uff1a\r\n\r\nNSDefaultRunLoopMode\uff08kCFRunLoopDefaultMode\uff09\r\nNSRunLoopCommonModes\uff08kCFRunLoopCommonModes\uff09\r\n"},{"ID":"738","typeID":"10","question":"runloop\u548c\u7ebf\u7a0b\u6709\u4ec0\u4e48\u5173\u7cfb\uff1f","answer":"\u603b\u7684\u8bf4\u6765\uff0cRun loop\uff0c\u6b63\u5982\u5176\u540d\uff0cloop\u8868\u793a\u67d0\u79cd\u5faa\u73af\uff0c\u548crun\u653e\u5728\u4e00\u8d77\u5c31\u8868\u793a\u4e00\u76f4\u5728\u8fd0\u884c\u7740\u7684\u5faa\u73af\u3002\u5b9e\u9645\u4e0a\uff0crun loop\u548c\u7ebf\u7a0b\u662f\u7d27\u5bc6\u76f8\u8fde\u7684\uff0c\u53ef\u4ee5\u8fd9\u6837\u8bf4run loop\u662f\u4e3a\u4e86\u7ebf\u7a0b\u800c\u751f\uff0c\u6ca1\u6709\u7ebf\u7a0b\uff0c\u5b83\u5c31\u6ca1\u6709\u5b58\u5728\u7684\u5fc5\u8981\u3002Run loops\u662f\u7ebf\u7a0b\u7684\u57fa\u7840\u67b6\u6784\u90e8\u5206\uff0c Cocoa \u548c CoreFundation \u90fd\u63d0\u4f9b\u4e86 run loop \u5bf9\u8c61\u65b9\u4fbf\u914d\u7f6e\u548c\u7ba1\u7406\u7ebf\u7a0b\u7684 run loop \uff08\u4ee5\u4e0b\u90fd\u4ee5 Cocoa \u4e3a\u4f8b\uff09\u3002\u6bcf\u4e2a\u7ebf\u7a0b\uff0c\u5305\u62ec\u7a0b\u5e8f\u7684\u4e3b\u7ebf\u7a0b\uff08 main thread \uff09\u90fd\u6709\u4e0e\u4e4b\u76f8\u5e94\u7684 run loop \u5bf9\u8c61\u3002\r\n\r\nrunloop \u548c\u7ebf\u7a0b\u7684\u5173\u7cfb\uff1a\r\n\r\n1. \u4e3b\u7ebf\u7a0b\u7684run loop\u9ed8\u8ba4\u662f\u542f\u52a8\u7684\u3002\r\n\r\niOS\u7684\u5e94\u7528\u7a0b\u5e8f\u91cc\u9762\uff0c\u7a0b\u5e8f\u542f\u52a8\u540e\u4f1a\u6709\u4e00\u4e2a\u5982\u4e0b\u7684main()\u51fd\u6570\r\n\r\n\r\nint main(int argc, char * argv[]) {\r\n@autoreleasepool {    return UIApplicationMain(argc, argv, nil, NSStringFromClass([AppDelegate class]));\r\n}\r\n}\r\n\u91cd\u70b9\u662fUIApplicationMain()\u51fd\u6570\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u4f1a\u4e3amain thread\u8bbe\u7f6e\u4e00\u4e2aNSRunLoop\u5bf9\u8c61\uff0c\u8fd9\u5c31\u89e3\u91ca\u4e86\uff1a\u4e3a\u4ec0\u4e48\u6211\u4eec\u7684\u5e94\u7528\u53ef\u4ee5\u5728\u65e0\u4eba\u64cd\u4f5c\u7684\u65f6\u5019\u4f11\u606f\uff0c\u9700\u8981\u8ba9\u5b83\u5e72\u6d3b\u7684\u65f6\u5019\u53c8\u80fd\u7acb\u9a6c\u54cd\u5e94\u3002\r\n\r\n2. \u5bf9\u5176\u5b83\u7ebf\u7a0b\u6765\u8bf4\uff0crun loop\u9ed8\u8ba4\u662f\u6ca1\u6709\u542f\u52a8\u7684\uff0c\u5982\u679c\u4f60\u9700\u8981\u66f4\u591a\u7684\u7ebf\u7a0b\u4ea4\u4e92\u5219\u53ef\u4ee5\u624b\u52a8\u914d\u7f6e\u548c\u542f\u52a8\uff0c\u5982\u679c\u7ebf\u7a0b\u53ea\u662f\u53bb\u6267\u884c\u4e00\u4e2a\u957f\u65f6\u95f4\u7684\u5df2\u786e\u5b9a\u7684\u4efb\u52a1\u5219\u4e0d\u9700\u8981\u3002\r\n\r\n3. \u5728\u4efb\u4f55\u4e00\u4e2a Cocoa \u7a0b\u5e8f\u7684\u7ebf\u7a0b\u4e2d\uff0c\u90fd\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u4ee3\u7801\u6765\u83b7\u53d6\u5230\u5f53\u524d\u7ebf\u7a0b\u7684 run loop \u3002\r\n\r\n\r\nNSRunLoop *runloop = [NSRunLoop currentRunLoop];"},{"ID":"737","typeID":"10","question":"\u80fd\u5426\u5411\u7f16\u8bd1\u540e\u5f97\u5230\u7684\u7c7b\u4e2d\u589e\u52a0\u5b9e\u4f8b\u53d8\u91cf\uff1f\u80fd\u5426\u5411\u8fd0\u884c\u65f6\u521b\u5efa\u7684\u7c7b\u4e2d\u6dfb\u52a0\u5b9e\u4f8b\u53d8\u91cf\uff1f\u4e3a\u4ec0\u4e48\uff1f","answer":"\u4e0d\u80fd\u5411\u7f16\u8bd1\u540e\u5f97\u5230\u7684\u7c7b\u4e2d\u589e\u52a0\u5b9e\u4f8b\u53d8\u91cf\uff1b\r\n\u80fd\u5411\u8fd0\u884c\u65f6\u521b\u5efa\u7684\u7c7b\u4e2d\u6dfb\u52a0\u5b9e\u4f8b\u53d8\u91cf\uff1b\r\n\u89e3\u91ca\u4e0b\uff1a\r\n\r\n\u56e0\u4e3a\u7f16\u8bd1\u540e\u7684\u7c7b\u5df2\u7ecf\u6ce8\u518c\u5728 runtime \u4e2d\uff0c\u7c7b\u7ed3\u6784\u4f53\u4e2d\u7684 objc_ivar_list \u5b9e\u4f8b\u53d8\u91cf\u7684\u94fe\u8868 \u548c instance_size \u5b9e\u4f8b\u53d8\u91cf\u7684\u5185\u5b58\u5927\u5c0f\u5df2\u7ecf\u786e\u5b9a\uff0c\u540c\u65f6runtime \u4f1a\u8c03\u7528 class_setIvarLayout \u6216 class_setWeakIvarLayout \u6765\u5904\u7406 strong weak \u5f15\u7528\u3002\u6240\u4ee5\u4e0d\u80fd\u5411\u5b58\u5728\u7684\u7c7b\u4e2d\u6dfb\u52a0\u5b9e\u4f8b\u53d8\u91cf\uff1b\r\n\u8fd0\u884c\u65f6\u521b\u5efa\u7684\u7c7b\u662f\u53ef\u4ee5\u6dfb\u52a0\u5b9e\u4f8b\u53d8\u91cf\uff0c\u8c03\u7528 class_addIvar \u51fd\u6570\u3002\u4f46\u662f\u5f97\u5728\u8c03\u7528 objc_allocateClassPair \u4e4b\u540e\uff0cobjc_registerClassPair \u4e4b\u524d\uff0c\u539f\u56e0\u540c\u4e0a\u3002"},{"ID":"736","typeID":"10","question":"runtime\u5982\u4f55\u5b9e\u73b0weak\u53d8\u91cf\u7684\u81ea\u52a8\u7f6enil\uff1f","answer":"runtime \u5bf9\u6ce8\u518c\u7684\u7c7b\uff0c \u4f1a\u8fdb\u884c\u5e03\u5c40\uff0c\u5bf9\u4e8e weak \u5bf9\u8c61\u4f1a\u653e\u5165\u4e00\u4e2a hash \u8868\u4e2d\u3002 \u7528 weak \u6307\u5411\u7684\u5bf9\u8c61\u5185\u5b58\u5730\u5740\u4f5c\u4e3a key\uff0c\u5f53\u6b64\u5bf9\u8c61\u7684\u5f15\u7528\u8ba1\u6570\u4e3a0\u7684\u65f6\u5019\u4f1a dealloc\uff0c\u5047\u5982 weak \u6307\u5411\u7684\u5bf9\u8c61\u5185\u5b58\u5730\u5740\u662fa\uff0c\u90a3\u4e48\u5c31\u4f1a\u4ee5a\u4e3a\u952e\uff0c \u5728\u8fd9\u4e2a weak \u8868\u4e2d\u641c\u7d22\uff0c\u627e\u5230\u6240\u6709\u4ee5a\u4e3a\u952e\u7684 weak \u5bf9\u8c61\uff0c\u4ece\u800c\u8bbe\u7f6e\u4e3a nil\u3002"},{"ID":"735","typeID":"10","question":"_objc_msgForward\u51fd\u6570\u662f\u505a\u4ec0\u4e48\u7684\uff0c\u76f4\u63a5\u8c03\u7528\u5b83\u5c06\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1f","answer":"_objc_msgForward\u662f IMP \u7c7b\u578b\uff0c\u7528\u4e8e\u6d88\u606f\u8f6c\u53d1\u7684\uff1a\u5f53\u5411\u4e00\u4e2a\u5bf9\u8c61\u53d1\u9001\u4e00\u6761\u6d88\u606f\uff0c\u4f46\u5b83\u5e76\u6ca1\u6709\u5b9e\u73b0\u7684\u65f6\u5019\uff0c_objc_msgForward\u4f1a\u5c1d\u8bd5\u505a\u6d88\u606f\u8f6c\u53d1\u3002"},{"ID":"734","typeID":"10","question":"objc\u4e2d\u7684\u7c7b\u65b9\u6cd5\u548c\u5b9e\u4f8b\u65b9\u6cd5\u6709\u4ec0\u4e48\u672c\u8d28\u533a\u522b\u548c\u8054\u7cfb\uff1f","answer":"\u7c7b\u65b9\u6cd5\uff1a\r\n\u7c7b\u65b9\u6cd5\u662f\u5c5e\u4e8e\u7c7b\u5bf9\u8c61\u7684\r\n\u7c7b\u65b9\u6cd5\u53ea\u80fd\u901a\u8fc7\u7c7b\u5bf9\u8c61\u8c03\u7528\r\n\u7c7b\u65b9\u6cd5\u4e2d\u7684self\u662f\u7c7b\u5bf9\u8c61\r\n\u7c7b\u65b9\u6cd5\u53ef\u4ee5\u8c03\u7528\u5176\u4ed6\u7684\u7c7b\u65b9\u6cd5\r\n\u7c7b\u65b9\u6cd5\u4e2d\u4e0d\u80fd\u8bbf\u95ee\u6210\u5458\u53d8\u91cf\r\n\u7c7b\u65b9\u6cd5\u4e2d\u4e0d\u5b9a\u76f4\u63a5\u8c03\u7528\u5bf9\u8c61\u65b9\u6cd5\r\n\r\n\r\n\u5b9e\u4f8b\u65b9\u6cd5\uff1a\r\n\u5b9e\u4f8b\u65b9\u6cd5\u662f\u5c5e\u4e8e\u5b9e\u4f8b\u5bf9\u8c61\u7684\r\n\u5b9e\u4f8b\u65b9\u6cd5\u53ea\u80fd\u901a\u8fc7\u5b9e\u4f8b\u5bf9\u8c61\u8c03\u7528\r\n\u5b9e\u4f8b\u65b9\u6cd5\u4e2d\u7684self\u662f\u5b9e\u4f8b\u5bf9\u8c61\r\n\u5b9e\u4f8b\u65b9\u6cd5\u4e2d\u53ef\u4ee5\u8bbf\u95ee\u6210\u5458\u53d8\u91cf\r\n\u5b9e\u4f8b\u65b9\u6cd5\u4e2d\u76f4\u63a5\u8c03\u7528\u5b9e\u4f8b\u65b9\u6cd5\r\n\u5b9e\u4f8b\u65b9\u6cd5\u4e2d\u4e5f\u53ef\u4ee5\u8c03\u7528\u7c7b\u65b9\u6cd5(\u901a\u8fc7\u7c7b\u540d)"},{"ID":"733","typeID":"10","question":"\u4f7f\u7528runtime Associate\u65b9\u6cd5\u5173\u8054\u7684\u5bf9\u8c61\uff0c\u9700\u8981\u5728\u4e3b\u5bf9\u8c61dealloc\u7684\u65f6\u5019\u91ca\u653e\u4e48\uff1f","answer":"\u65e0\u8bba\u5728MRC\u4e0b\u8fd8\u662fARC\u4e0b\u5747\u4e0d\u9700\u8981\r\n\u5bf9\u8c61\u7684\u5185\u5b58\u9500\u6bc1\u65f6\u95f4\u8868\uff0c\u5206\u56db\u4e2a\u6b65\u9aa4\uff1a\r\n\r\n\/\/ \u5bf9\u8c61\u7684\u5185\u5b58\u9500\u6bc1\u65f6\u95f4\u8868\r\n\/\/ http:\/\/weibo.com\/luohanchenyilong\/ (\u5fae\u535a@iOS\u7a0b\u5e8f\u72ad\u8881)\r\n\/\/ https:\/\/github.com\/ChenYilong\r\n\/\/ \u6839\u636e WWDC 2011, Session 322 (36\u520622\u79d2)\u4e2d\u53d1\u5e03\u7684\u5185\u5b58\u9500\u6bc1\u65f6\u95f4\u8868 \r\n \r\n 1. \u8c03\u7528 -release \uff1a\u5f15\u7528\u8ba1\u6570\u53d8\u4e3a\u96f6\r\n     * \u5bf9\u8c61\u6b63\u5728\u88ab\u9500\u6bc1\uff0c\u751f\u547d\u5468\u671f\u5373\u5c06\u7ed3\u675f.\r\n     * \u4e0d\u80fd\u518d\u6709\u65b0\u7684 __weak \u5f31\u5f15\u7528\uff0c \u5426\u5219\u5c06\u6307\u5411 nil.\r\n     * \u8c03\u7528 [self dealloc] \r\n 2. \u7236\u7c7b \u8c03\u7528 -dealloc\r\n     * \u7ee7\u627f\u5173\u7cfb\u4e2d\u6700\u5e95\u5c42\u7684\u7236\u7c7b \u5728\u8c03\u7528 -dealloc\r\n     * \u5982\u679c\u662f MRC \u4ee3\u7801 \u5219\u4f1a\u624b\u52a8\u91ca\u653e\u5b9e\u4f8b\u53d8\u91cf\u4eec\uff08iVars\uff09\r\n     * \u7ee7\u627f\u5173\u7cfb\u4e2d\u6bcf\u4e00\u5c42\u7684\u7236\u7c7b \u90fd\u5728\u8c03\u7528 -dealloc\r\n 3. NSObject \u8c03 -dealloc\r\n     * \u53ea\u505a\u4e00\u4ef6\u4e8b\uff1a\u8c03\u7528 Objective-C runtime \u4e2d\u7684 object_dispose() \u65b9\u6cd5\r\n 4. \u8c03\u7528 object_dispose()\r\n     * \u4e3a C++ \u7684\u5b9e\u4f8b\u53d8\u91cf\u4eec\uff08iVars\uff09\u8c03\u7528 destructors \r\n     * \u4e3a ARC \u72b6\u6001\u4e0b\u7684 \u5b9e\u4f8b\u53d8\u91cf\u4eec\uff08iVars\uff09 \u8c03\u7528 -release \r\n     * \u89e3\u9664\u6240\u6709\u4f7f\u7528 runtime Associate\u65b9\u6cd5\u5173\u8054\u7684\u5bf9\u8c61\r\n     * \u89e3\u9664\u6240\u6709 __weak \u5f15\u7528\r\n     * \u8c03\u7528 free()\r\n"},{"ID":"732","typeID":"10","question":" runtime\u5982\u4f55\u901a\u8fc7selector\u627e\u5230\u5bf9\u5e94\u7684IMP\u5730\u5740\uff1f\uff08\u5206\u522b\u8003\u8651\u7c7b\u65b9\u6cd5\u548c\u5b9e\u4f8b\u65b9\u6cd5\uff09","answer":"\u6bcf\u4e00\u4e2a\u7c7b\u5bf9\u8c61\u4e2d\u90fd\u4e00\u4e2a\u65b9\u6cd5\u5217\u8868,\u65b9\u6cd5\u5217\u8868\u4e2d\u8bb0\u5f55\u7740\u65b9\u6cd5\u7684\u540d\u79f0,\u65b9\u6cd5\u5b9e\u73b0,\u4ee5\u53ca\u53c2\u6570\u7c7b\u578b,\u5176\u5b9eselector\u672c\u8d28\u5c31\u662f\u65b9\u6cd5\u540d\u79f0,\u901a\u8fc7\u8fd9\u4e2a\u65b9\u6cd5\u540d\u79f0\u5c31\u53ef\u4ee5\u5728\u65b9\u6cd5\u5217\u8868\u4e2d\u627e\u5230\u5bf9\u5e94\u7684\u65b9\u6cd5\u5b9e\u73b0."},{"ID":"731","typeID":"10","question":"\u4e00\u4e2aobjc\u5bf9\u8c61\u7684isa\u7684\u6307\u9488\u6307\u5411\u4ec0\u4e48\uff1f\u6709\u4ec0\u4e48\u4f5c\u7528\uff1f","answer":"\u6307\u5411\u4ed6\u7684\u7c7b\u5bf9\u8c61,\u4ece\u800c\u53ef\u4ee5\u627e\u5230\u5bf9\u8c61\u4e0a\u7684\u65b9\u6cd5"},{"ID":"730","typeID":"10","question":"\u4e00\u4e2aobjc\u5bf9\u8c61\u5982\u4f55\u8fdb\u884c\u5185\u5b58\u5e03\u5c40\uff1f\uff08\u8003\u8651\u6709\u7236\u7c7b\u7684\u60c5\u51b5\uff09","answer":"\u6240\u6709\u7236\u7c7b\u7684\u6210\u5458\u53d8\u91cf\u548c\u81ea\u5df1\u7684\u6210\u5458\u53d8\u91cf\u90fd\u4f1a\u5b58\u653e\u5728\u8be5\u5bf9\u8c61\u6240\u5bf9\u5e94\u7684\u5b58\u50a8\u7a7a\u95f4\u4e2d.\r\n\u6bcf\u4e00\u4e2a\u5bf9\u8c61\u5185\u90e8\u90fd\u6709\u4e00\u4e2aisa\u6307\u9488,\u6307\u5411\u4ed6\u7684\u7c7b\u5bf9\u8c61,\u7c7b\u5bf9\u8c61\u4e2d\u5b58\u653e\u7740\u672c\u5bf9\u8c61\u7684\r\n1\uff09\u5bf9\u8c61\u65b9\u6cd5\u5217\u8868\uff08\u5bf9\u8c61\u80fd\u591f\u63a5\u6536\u7684\u6d88\u606f\u5217\u8868\uff0c\u4fdd\u5b58\u5728\u5b83\u6240\u5bf9\u5e94\u7684\u7c7b\u5bf9\u8c61\u4e2d\uff09\r\n\r\n2\uff09\u6210\u5458\u53d8\u91cf\u7684\u5217\u8868\r\n\r\n3\uff09\u5c5e\u6027\u5217\u8868\r\n\r\n\u5b83\u5185\u90e8\u4e5f\u6709\u4e00\u4e2aisa\u6307\u9488\u6307\u5411\u5143\u5bf9\u8c61(meta class),\u5143\u5bf9\u8c61\u5185\u90e8\u5b58\u653e\u7684\u662f\u7c7b\u65b9\u6cd5\u5217\u8868,\u7c7b\u5bf9\u8c61\u5185\u90e8\u8fd8\u6709\u4e00\u4e2asuperclass\u7684\u6307\u9488,\u6307\u5411\u4ed6\u7684\u7236\u7c7b\u5bf9\u8c61\u3002\r\n\r\n\r\n1\uff09\u6839\u5bf9\u8c61\u5c31\u662fNSobject\uff0c\u5b83\u7684superclass\u6307\u9488\u6307\u5411nil\u3002\r\n\r\n2\uff09\u7c7b\u5bf9\u8c61\u65e2\u7136\u79f0\u4e3a\u5bf9\u8c61\uff0c\u90a3\u5b83\u4e5f\u662f\u4e00\u4e2a\u5b9e\u4f8b\u3002\u7c7b\u5bf9\u8c61\u4e2d\u4e5f\u6709\u4e00\u4e2aisa\u6307\u9488\u6307\u5411\u5b83\u7684\u5143\u7c7b(meta class)\uff0c\u5373\u7c7b\u5bf9\u8c61\u662f\u5143\u7c7b\u7684\u5b9e\u4f8b\u3002\u5143\u7c7b\u5185\u90e8\u5b58\u653e\u7684\u662f\u7c7b\u65b9\u6cd5\u5217\u8868\uff0c\u6839\u5143\u7c7b\u7684isa\u6307\u9488\u6307\u5411\u81ea\u5df1\uff0csuperclass\u6307\u9488\u6307\u5411NSObject\u7c7b\u3002\r\n"},{"ID":"729","typeID":"10","question":"\u4ec0\u4e48\u65f6\u5019\u4f1a\u62a5unrecognized selector\u7684\u5f02\u5e38\uff1f","answer":"\u7b80\u5355\u6765\u8bf4\uff1a\u5f53\u8be5\u5bf9\u8c61\u4e0a\u67d0\u4e2a\u65b9\u6cd5,\u800c\u8be5\u5bf9\u8c61\u4e0a\u6ca1\u6709\u5b9e\u73b0\u8fd9\u4e2a\u65b9\u6cd5\u7684\u65f6\u5019\uff0c \u53ef\u4ee5\u901a\u8fc7\u201c\u6d88\u606f\u8f6c\u53d1\u201d\u8fdb\u884c\u89e3\u51b3\u3002\r\n\r\n\u7b80\u5355\u7684\u6d41\u7a0b\u5982\u4e0b\uff0c\u5728\u4e0a\u4e00\u9898\u4e2d\u4e5f\u63d0\u5230\u8fc7\uff1aobjc\u662f\u52a8\u6001\u8bed\u8a00\uff0c\u6bcf\u4e2a\u65b9\u6cd5\u5728\u8fd0\u884c\u65f6\u4f1a\u88ab\u52a8\u6001\u8f6c\u4e3a\u6d88\u606f\u53d1\u9001\uff0c\u5373\uff1aobjc_msgSend(receiver, selector)\u3002\r\n\r\nobjc\u5728\u5411\u4e00\u4e2a\u5bf9\u8c61\u53d1\u9001\u6d88\u606f\u65f6\uff0cruntime\u5e93\u4f1a\u6839\u636e\u5bf9\u8c61\u7684isa\u6307\u9488\u627e\u5230\u8be5\u5bf9\u8c61\u5b9e\u9645\u6240\u5c5e\u7684\u7c7b\uff0c\u7136\u540e\u5728\u8be5\u7c7b\u4e2d\u7684\u65b9\u6cd5\u5217\u8868\u4ee5\u53ca\u5176\u7236\u7c7b\u65b9\u6cd5\u5217\u8868\u4e2d\u5bfb\u627e\u65b9\u6cd5\u8fd0\u884c\uff0c\u5982\u679c\uff0c\u5728\u6700\u9876\u5c42\u7684\u7236\u7c7b\u4e2d\u4f9d\u7136\u627e\u4e0d\u5230\u76f8\u5e94\u7684\u65b9\u6cd5\u65f6\uff0c\u7a0b\u5e8f\u5728\u8fd0\u884c\u65f6\u4f1a\u6302\u6389\u5e76\u629b\u51fa\u5f02\u5e38unrecognized selector sent to XXX \u3002\u4f46\u662f\u5728\u8fd9\u4e4b\u524d\uff0cobjc\u7684\u8fd0\u884c\u65f6\u4f1a\u7ed9\u51fa\u4e09\u6b21\u62ef\u6551\u7a0b\u5e8f\u5d29\u6e83\u7684\u673a\u4f1a\uff1a\r\n\r\nMethod resolution\r\nobjc\u8fd0\u884c\u65f6\u4f1a\u8c03\u7528+resolveInstanceMethod:\u6216\u8005 +resolveClassMethod:\uff0c\u8ba9\u4f60\u6709\u673a\u4f1a\u63d0\u4f9b\u4e00\u4e2a\u51fd\u6570\u5b9e\u73b0\u3002\u5982\u679c\u4f60\u6dfb\u52a0\u4e86\u51fd\u6570\u5e76\u8fd4\u56de YES\uff0c\u90a3\u8fd0\u884c\u65f6\u7cfb\u7edf\u5c31\u4f1a\u91cd\u65b0\u542f\u52a8\u4e00\u6b21\u6d88\u606f\u53d1\u9001\u7684\u8fc7\u7a0b\uff0c\u5982\u679c resolve \u65b9\u6cd5\u8fd4\u56de NO \uff0c\u8fd0\u884c\u65f6\u5c31\u4f1a\u79fb\u5230\u4e0b\u4e00\u6b65\uff0c\u6d88\u606f\u8f6c\u53d1\uff08Message Forwarding\uff09\u3002\r\n\r\nFast forwarding\r\n\u5982\u679c\u76ee\u6807\u5bf9\u8c61\u5b9e\u73b0\u4e86-forwardingTargetForSelector:\uff0cRuntime \u8fd9\u65f6\u5c31\u4f1a\u8c03\u7528\u8fd9\u4e2a\u65b9\u6cd5\uff0c\u7ed9\u4f60\u628a\u8fd9\u4e2a\u6d88\u606f\u8f6c\u53d1\u7ed9\u5176\u4ed6\u5bf9\u8c61\u7684\u673a\u4f1a\u3002 \u53ea\u8981\u8fd9\u4e2a\u65b9\u6cd5\u8fd4\u56de\u7684\u4e0d\u662fnil\u548cself\uff0c\u6574\u4e2a\u6d88\u606f\u53d1\u9001\u7684\u8fc7\u7a0b\u5c31\u4f1a\u88ab\u91cd\u542f\uff0c\u5f53\u7136\u53d1\u9001\u7684\u5bf9\u8c61\u4f1a\u53d8\u6210\u4f60\u8fd4\u56de\u7684\u90a3\u4e2a\u5bf9\u8c61\u3002\u5426\u5219\uff0c\u5c31\u4f1a\u7ee7\u7eedNormal Fowarding\u3002 \u8fd9\u91cc\u53ebFast\uff0c\u53ea\u662f\u4e3a\u4e86\u533a\u522b\u4e0b\u4e00\u6b65\u7684\u8f6c\u53d1\u673a\u5236\u3002\u56e0\u4e3a\u8fd9\u4e00\u6b65\u4e0d\u4f1a\u521b\u5efa\u4efb\u4f55\u65b0\u7684\u5bf9\u8c61\uff0c\u4f46\u4e0b\u4e00\u6b65\u8f6c\u53d1\u4f1a\u521b\u5efa\u4e00\u4e2aNSInvocation\u5bf9\u8c61\uff0c\u6240\u4ee5\u76f8\u5bf9\u66f4\u5feb\u70b9\u3002\r\n\r\nNormal forwarding\r\n\u8fd9\u4e00\u6b65\u662fRuntime\u6700\u540e\u4e00\u6b21\u7ed9\u4f60\u633d\u6551\u7684\u673a\u4f1a\u3002\u9996\u5148\u5b83\u4f1a\u53d1\u9001-methodSignatureForSelector:\u6d88\u606f\u83b7\u5f97\u51fd\u6570\u7684\u53c2\u6570\u548c\u8fd4\u56de\u503c\u7c7b\u578b\u3002\u5982\u679c-methodSignatureForSelector:\u8fd4\u56denil\uff0cRuntime\u5219\u4f1a\u53d1\u51fa-doesNotRecognizeSelector:\u6d88\u606f\uff0c\u7a0b\u5e8f\u8fd9\u65f6\u4e5f\u5c31\u6302\u6389\u4e86\u3002\u5982\u679c\u8fd4\u56de\u4e86\u4e00\u4e2a\u51fd\u6570\u7b7e\u540d\uff0cRuntime\u5c31\u4f1a\u521b\u5efa\u4e00\u4e2aNSInvocation\u5bf9\u8c61\u5e76\u53d1\u9001-forwardInvocation:\u6d88\u606f\u7ed9\u76ee\u6807\u5bf9\u8c61\u3002"},{"ID":"728","typeID":"10","question":"objc\u4e2d\u5411\u4e00\u4e2a\u5bf9\u8c61\u53d1\u9001\u6d88\u606f[obj foo]\u548cobjc_msgSend()\u51fd\u6570\u4e4b\u95f4\u6709\u4ec0\u4e48\u5173\u7cfb\uff1f","answer":"\u5177\u4f53\u539f\u56e0\u540c\u4e0a\u9898\uff1a\u8be5\u65b9\u6cd5\u7f16\u8bd1\u4e4b\u540e\u5c31\u662fobjc_msgSend()\u51fd\u6570\u8c03\u7528.\u5982\u679c\u6211\u6ca1\u6709\u8bb0\u9519\u7684\u5927\u6982\u662f\u8fd9\u6837\u7684\uff1a\r\n\r\n((void ()(id, SEL))(void )objc_msgSend)((id)obj, sel_registerName(\"foo\"));\r\n\u4e5f\u5c31\u662f\u8bf4\uff1a\r\n\r\n[obj foo];\u5728objc\u52a8\u6001\u7f16\u8bd1\u65f6\uff0c\u4f1a\u88ab\u8f6c\u610f\u4e3a\uff1aobjc_msgSend(obj, @selector(foo));\u3002"},{"ID":"727","typeID":"10","question":"objc\u4e2d\u5411\u4e00\u4e2anil\u5bf9\u8c61\u53d1\u9001\u6d88\u606f\u5c06\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1f","answer":"\u5728Objective-C\u4e2d\u5411nil\u53d1\u9001\u6d88\u606f\u662f\u5b8c\u5168\u6709\u6548\u7684\u2014\u2014\u53ea\u662f\u5728\u8fd0\u884c\u65f6\u4e0d\u4f1a\u6709\u4efb\u4f55\u4f5c\u7528:\r\n\r\n\u5982\u679c\u4e00\u4e2a\u65b9\u6cd5\u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u5bf9\u8c61\uff0c\u90a3\u4e48\u53d1\u9001\u7ed9nil\u7684\u6d88\u606f\u5c06\u8fd4\u56de0(nil)\u3002\u4f8b\u5982\uff1a\r\n\r\nPerson * motherInlaw = [[aPerson spouse] mother];\r\n\u5982\u679cspouse\u5bf9\u8c61\u4e3anil\uff0c\u90a3\u4e48\u53d1\u9001\u7ed9nil\u7684\u6d88\u606fmother\u4e5f\u5c06\u8fd4\u56denil\u3002\r\n\r\n1\uff09\u5982\u679c\u65b9\u6cd5\u8fd4\u56de\u503c\u4e3a\u6307\u9488\u7c7b\u578b\uff0c\u5176\u6307\u9488\u5927\u5c0f\u4e3a\u5c0f\u4e8e\u6216\u8005\u7b49\u4e8esizeof(void*)\uff0cfloat\uff0cdouble\uff0clong double \u6216\u8005long long\u7684\u6574\u578b\u6807\u91cf\uff0c\u53d1\u9001\u7ed9nil\u7684\u6d88\u606f\u5c06\u8fd4\u56de0\u3002\r\n\r\n2\uff09\u5982\u679c\u65b9\u6cd5\u8fd4\u56de\u503c\u4e3a\u7ed3\u6784\u4f53,\u53d1\u9001\u7ed9nil\u7684\u6d88\u606f\u5c06\u8fd4\u56de0\u3002\u7ed3\u6784\u4f53\u4e2d\u5404\u4e2a\u5b57\u6bb5\u7684\u503c\u5c06\u90fd\u662f0\u3002\r\n\r\n3\uff09\u5982\u679c\u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u4e0d\u662f\u4e0a\u8ff0\u63d0\u5230\u7684\u51e0\u79cd\u60c5\u51b5\uff0c\u90a3\u4e48\u53d1\u9001\u7ed9nil\u7684\u6d88\u606f\u7684\u8fd4\u56de\u503c\u5c06\u662f\u672a\u5b9a\u4e49\u7684\u3002\r\n\r\n\u5177\u4f53\u539f\u56e0\u5982\u4e0b\uff1a\r\n\r\nobjc\u662f\u52a8\u6001\u8bed\u8a00\uff0c\u6bcf\u4e2a\u65b9\u6cd5\u5728\u8fd0\u884c\u65f6\u4f1a\u88ab\u52a8\u6001\u8f6c\u4e3a\u6d88\u606f\u53d1\u9001\uff0c\u5373\uff1aobjc_msgSend(receiver, selector)\u3002\r\n\r\n\u90a3\u4e48\uff0c\u4e3a\u4e86\u65b9\u4fbf\u7406\u89e3\u8fd9\u4e2a\u5185\u5bb9\uff0c\u8fd8\u662f\u8d34\u4e00\u4e2aobjc\u7684\u6e90\u4ee3\u7801\uff1a\r\n\r\n\r\nstruct objc_class {\r\n  Class isa OBJC_ISA_AVAILABILITY; \/\/isa\u6307\u9488\u6307\u5411Meta Class\uff0c\u56e0\u4e3aObjc\u7684\u7c7b\u7684\u672c\u8eab\u4e5f\u662f\u4e00\u4e2aObject\uff0c\u4e3a\u4e86\u5904\u7406\u8fd9\u4e2a\u5173\u7cfb\uff0cruntime\u5c31\u521b\u9020\u4e86Meta Class\uff0c\u5f53\u7ed9\u7c7b\u53d1\u9001[NSObject alloc]\u8fd9\u6837\u6d88\u606f\u65f6\uff0c\u5b9e\u9645\u4e0a\u662f\u628a\u8fd9\u4e2a\u6d88\u606f\u53d1\u7ed9\u4e86Class Object\r\n  #if !__OBJC2__\r\n  Class super_class OBJC2_UNAVAILABLE; \/\/ \u7236\u7c7b\r\n  const char *name OBJC2_UNAVAILABLE; \/\/ \u7c7b\u540d\r\n  long version OBJC2_UNAVAILABLE; \/\/ \u7c7b\u7684\u7248\u672c\u4fe1\u606f\uff0c\u9ed8\u8ba4\u4e3a0\r\n  long info OBJC2_UNAVAILABLE; \/\/ \u7c7b\u4fe1\u606f\uff0c\u4f9b\u8fd0\u884c\u671f\u4f7f\u7528\u7684\u4e00\u4e9b\u4f4d\u6807\u8bc6\r\n  long instance_size OBJC2_UNAVAILABLE; \/\/ \u8be5\u7c7b\u7684\u5b9e\u4f8b\u53d8\u91cf\u5927\u5c0f\r\n  struct objc_ivar_list *ivars OBJC2_UNAVAILABLE; \/\/ \u8be5\u7c7b\u7684\u6210\u5458\u53d8\u91cf\u94fe\u8868\r\n  struct objc_method_list **methodLists OBJC2_UNAVAILABLE; \/\/ \u65b9\u6cd5\u5b9a\u4e49\u7684\u94fe\u8868\r\n  struct objc_cache *cache OBJC2_UNAVAILABLE; \/\/ \u65b9\u6cd5\u7f13\u5b58\uff0c\u5bf9\u8c61\u63a5\u5230\u4e00\u4e2a\u6d88\u606f\u4f1a\u6839\u636eisa\u6307\u9488\u67e5\u627e\u6d88\u606f\u5bf9\u8c61\uff0c\u8fd9\u65f6\u4f1a\u5728method Lists\u4e2d\u904d\u5386\uff0c\u5982\u679ccache\u4e86\uff0c\u5e38\u7528\u7684\u65b9\u6cd5\u8c03\u7528\u65f6\u5c31\u80fd\u591f\u63d0\u9ad8\u8c03\u7528\u7684\u6548\u7387\u3002\r\n  struct objc_protocol_list *protocols OBJC2_UNAVAILABLE; \/\/ \u534f\u8bae\u94fe\u8868\r\n  #endif\r\n  } OBJC2_UNAVAILABLE;\r\nobjc\u5728\u5411\u4e00\u4e2a\u5bf9\u8c61\u53d1\u9001\u6d88\u606f\u65f6\uff0cruntime\u5e93\u4f1a\u6839\u636e\u5bf9\u8c61\u7684isa\u6307\u9488\u627e\u5230\u8be5\u5bf9\u8c61\u5b9e\u9645\u6240\u5c5e\u7684\u7c7b\uff0c\u7136\u540e\u5728\u8be5\u7c7b\u4e2d\u7684\u65b9\u6cd5\u5217\u8868\u4ee5\u53ca\u5176\u7236\u7c7b\u65b9\u6cd5\u5217\u8868\u4e2d\u5bfb\u627e\u65b9\u6cd5\u8fd0\u884c\uff0c\u7136\u540e\u5728\u53d1\u9001\u6d88\u606f\u7684\u65f6\u5019\uff0cobjc_msgSend\u65b9\u6cd5\u4e0d\u4f1a\u8fd4\u56de\u503c\uff0c\u6240\u8c13\u7684\u8fd4\u56de\u5185\u5bb9\u90fd\u662f\u5177\u4f53\u8c03\u7528\u65f6\u6267\u884c\u7684\u3002 \u90a3\u4e48\uff0c\u56de\u5230\u672c\u9898\uff0c\u5982\u679c\u5411\u4e00\u4e2anil\u5bf9\u8c61\u53d1\u9001\u6d88\u606f\uff0c\u9996\u5148\u5728\u5bfb\u627e\u5bf9\u8c61\u7684isa\u6307\u9488\u65f6\u5c31\u662f0\u5730\u5740\u8fd4\u56de\u4e86\uff0c\u6240\u4ee5\u4e0d\u4f1a\u51fa\u73b0\u4efb\u4f55\u9519\u8bef\u3002"},{"ID":"726","typeID":"10","question":"\u5728\u6709\u4e86\u81ea\u52a8\u5408\u6210\u5c5e\u6027\u5b9e\u4f8b\u53d8\u91cf\u4e4b\u540e\uff0c@synthesize\u8fd8\u6709\u54ea\u4e9b\u4f7f\u7528\u573a\u666f\uff1f","answer":"\u56de\u7b54\u8fd9\u4e2a\u95ee\u9898\u524d\uff0c\u6211\u4eec\u8981\u641e\u6e05\u695a\u4e00\u4e2a\u95ee\u9898\uff0c\u4ec0\u4e48\u60c5\u51b5\u4e0b\u4e0d\u4f1aautosynthesis\uff08\u81ea\u52a8\u5408\u6210\uff09\uff1f\r\n\r\n\u540c\u65f6\u91cd\u5199\u4e86setter\u548cgetter\u65f6\r\n\u91cd\u5199\u4e86\u53ea\u8bfb\u5c5e\u6027\u7684getter\u65f6\r\n\u4f7f\u7528\u4e86@dynamic\u65f6\r\n\u5728 @protocol \u4e2d\u5b9a\u4e49\u7684\u6240\u6709\u5c5e\u6027\r\n\u5728 category \u4e2d\u5b9a\u4e49\u7684\u6240\u6709\u5c5e\u6027\r\n\u91cd\u8f7d\u7684\u5c5e\u6027\r\n\u5f53\u4f60\u5728\u5b50\u7c7b\u4e2d\u91cd\u8f7d\u4e86\u7236\u7c7b\u4e2d\u7684\u5c5e\u6027\uff0c\u4f60\u5fc5\u987b \u4f7f\u7528@synthesize\u6765\u624b\u52a8\u5408\u6210ivar\u3002\r\n\r\n\u9664\u4e86\u540e\u4e09\u6761\uff0c\u5bf9\u5176\u4ed6\u51e0\u4e2a\u6211\u4eec\u53ef\u4ee5\u603b\u7ed3\u51fa\u4e00\u4e2a\u89c4\u5f8b\uff1a\u5f53\u4f60\u60f3\u624b\u52a8\u7ba1\u7406@property\u7684\u6240\u6709\u5185\u5bb9\u65f6\uff0c\u4f60\u5c31\u4f1a\u5c1d\u8bd5\u901a\u8fc7\u5b9e\u73b0@property\u7684\u6240\u6709\u201c\u5b58\u53d6\u65b9\u6cd5\u201d\uff08the accessor methods\uff09\u6216\u8005\u4f7f\u7528@dynamic\u6765\u8fbe\u5230\u8fd9\u4e2a\u76ee\u7684\uff0c\u8fd9\u65f6\u7f16\u8bd1\u5668\u5c31\u4f1a\u8ba4\u4e3a\u4f60\u6253\u7b97\u624b\u52a8\u7ba1\u7406@property\uff0c\u4e8e\u662f\u7f16\u8bd1\u5668\u5c31\u7981\u7528\u4e86autosynthesis\uff08\u81ea\u52a8\u5408\u6210\uff09\u3002\r\n\r\n\u56e0\u4e3a\u6709\u4e86autosynthesis\uff08\u81ea\u52a8\u5408\u6210\uff09\uff0c\u5927\u90e8\u5206\u5f00\u53d1\u8005\u5df2\u7ecf\u4e60\u60ef\u4e0d\u53bb\u624b\u52a8\u5b9a\u4e49ivar\uff0c\u800c\u662f\u4f9d\u8d56\u4e8eautosynthesis\uff08\u81ea\u52a8\u5408\u6210\uff09\uff0c\u4f46\u662f\u4e00\u65e6\u4f60\u9700\u8981\u4f7f\u7528ivar\uff0c\u800cautosynthesis\uff08\u81ea\u52a8\u5408\u6210\uff09\u53c8\u5931\u6548\u4e86\uff0c\u5982\u679c\u4e0d\u53bb\u624b\u52a8\u5b9a\u4e49ivar\uff0c\u90a3\u4e48\u4f60\u5c31\u5f97\u501f\u52a9@synthesize\u6765\u624b\u52a8\u5408\u6210ivar\u3002"},{"ID":"725","typeID":"10","question":"@synthesize\u5408\u6210\u5b9e\u4f8b\u53d8\u91cf\u7684\u89c4\u5219\u662f\u4ec0\u4e48\uff1f\u5047\u5982property\u540d\u4e3afoo\uff0c\u5b58\u5728\u4e00\u4e2a\u540d\u4e3a_foo\u7684\u5b9e\u4f8b\u53d8\u91cf\uff0c\u90a3\u4e48\u8fd8\u4f1a\u81ea\u52a8\u5408\u6210\u65b0\u53d8\u91cf\u4e48\uff1f","answer":"\u5982\u679c\u4f7f\u7528\u4e86\u5c5e\u6027\u7684\u8bdd\uff0c\u90a3\u4e48\u7f16\u8bd1\u5668\u5c31\u4f1a\u81ea\u52a8\u7f16\u5199\u8bbf\u95ee\u5c5e\u6027\u6240\u9700\u7684\u65b9\u6cd5\uff0c\u6b64\u8fc7\u7a0b\u53eb\u505a\u201c\u81ea\u52a8\u5408\u6210\u201d( auto synthesis)\u3002\u9700\u8981\u5f3a\u8c03\u7684\u662f\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u7531\u7f16\u8bd1\u5668\u5728\u7f16\u8bd1\u671f\u6267\u884c\uff0c\u6240\u4ee5\u7f16\u8f91\u5668\u91cc\u770b\u4e0d\u5230\u8fd9\u4e9b\u201c\u5408\u6210\u65b9\u6cd5\u201d (synthesized method)\u7684\u6e90\u4ee3\u7801\u3002\u9664\u4e86\u751f\u6210\u65b9\u6cd5\u4ee3\u7801\u4e4b\u5916\uff0c\u7f16\u8bd1\u5668\u8fd8\u8981\u81ea\u52a8\u5411\u7c7b\u4e2d\u6dfb\u52a0\u9002\u5f53\u7c7b\u578b\u7684\u5b9e\u4f8b\u53d8\u91cf\uff0c\u5e76\u4e14\u5728\u5c5e\u6027\u540d\u524d\u9762\u52a0\u4e0b\u5212\u7ebf\uff0c\u4ee5\u6b64\u4f5c\u4e3a\u5b9e\u4f8b\u53d8\u91cf\u7684\u540d\u5b57\u3002\r\n\r\n@interface CYLPerson : NSObject \r\n@property NSString *firstName; \r\n@property NSString *lastName; \r\n@end\r\n\u5728\u4e0a\u4f8b\u4e2d\uff0c\u4f1a\u751f\u6210\u4e24\u4e2a\u5b9e\u4f8b\u53d8\u91cf\uff0c\u5176\u540d\u79f0\u5206\u522b\u4e3a _firstName\u4e0e_lastName\u3002\u4e5f\u53ef\u4ee5\u5728\u7c7b\u7684\u5b9e\u73b0\u4ee3\u7801\u91cc\u901a\u8fc7@synthesize\u8bed\u6cd5\u6765\u6307\u5b9a\u5b9e\u4f8b\u53d8\u91cf\u7684\u540d\u5b57:\r\n\r\n\r\n@implementation CYLPerson \r\n@synthesize firstName = _myFirstName; \r\n@synthesize lastName = _myLastName; \r\n@end\r\n\u4e0a\u8ff0\u8bed\u6cd5\u4f1a\u5c06\u751f\u6210\u7684\u5b9e\u4f8b\u53d8\u91cf\u547d\u540d\u4e3a_myFirstName\u4e0e_myLastName\uff0c\u800c\u4e0d\u518d\u4f7f\u7528\u9ed8\u8ba4\u7684\u540d\u5b57\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\u65e0\u987b\u4fee\u6539\u9ed8\u8ba4\u7684\u5b9e\u4f8b\u53d8\u91cf\u540d\uff0c\u4f46\u662f\u5982\u679c\u4f60\u4e0d\u559c\u6b22\u4ee5\u4e0b\u5212\u7ebf\u6765\u547d\u540d\u5b9e\u4f8b\u53d8\u91cf\uff0c\u90a3\u4e48\u53ef\u4ee5\u7528\u8fd9\u4e2a\u529e\u6cd5\u5c06\u5176\u6539\u4e3a\u81ea\u5df1\u60f3\u8981\u7684\u540d\u5b57\u3002\u7b14\u8005\u8fd8\u662f\u63a8\u8350\u4f7f\u7528\u9ed8\u8ba4\u7684\u547d\u540d\u65b9\u6848\uff0c\u56e0\u4e3a\u5982\u679c\u6240\u6709\u4eba\u90fd\u575a\u6301\u8fd9\u5957\u65b9\u6848\uff0c\u90a3\u4e48\u5199\u51fa\u6765\u7684\u4ee3\u7801\u5927\u5bb6\u90fd\u80fd\u770b\u5f97\u61c2\u3002\r\n\r\n\u603b\u7ed3\u4e0b@synthesize\u5408\u6210\u5b9e\u4f8b\u53d8\u91cf\u7684\u89c4\u5219\uff0c\u6709\u4ee5\u4e0b\u51e0\u70b9\uff1a\r\n\r\n1\uff09\u5982\u679c\u6307\u5b9a\u4e86\u6210\u5458\u53d8\u91cf\u7684\u540d\u79f0,\u4f1a\u751f\u6210\u4e00\u4e2a\u6307\u5b9a\u7684\u540d\u79f0\u7684\u6210\u5458\u53d8\u91cf,\r\n\r\n2\uff09\u5982\u679c\u8fd9\u4e2a\u6210\u5458\u5df2\u7ecf\u5b58\u5728\u4e86\u5c31\u4e0d\u518d\u751f\u6210\u4e86.\r\n\r\n3\uff09\u5982\u679c\u662f @synthesize foo; \u8fd8\u4f1a\u751f\u6210\u4e00\u4e2a\u540d\u79f0\u4e3afoo\u7684\u6210\u5458\u53d8\u91cf\uff0c\u4e5f\u5c31\u662f\u8bf4\uff1a\u5982\u679c\u6ca1\u6709\u6307\u5b9a\u6210\u5458\u53d8\u91cf\u7684\u540d\u79f0\u4f1a\u81ea\u52a8\u751f\u6210\u4e00\u4e2a\u5c5e\u6027\u540c\u540d\u7684\u6210\u5458\u53d8\u91cf\u3002\r\n\r\n4\uff09\u5982\u679c\u662f @synthesize foo = _foo; \u5c31\u4e0d\u4f1a\u751f\u6210\u6210\u5458\u53d8\u91cf\u4e86.\r\n\r\n\u5047\u5982property\u540d\u4e3afoo\uff0c\u5b58\u5728\u4e00\u4e2a\u540d\u4e3a_foo\u7684\u5b9e\u4f8b\u53d8\u91cf\uff0c\u90a3\u4e48\u8fd8\u4f1a\u81ea\u52a8\u5408\u6210\u65b0\u53d8\u91cf\u4e48\uff1f \u4e0d\u4f1a\u3002"},{"ID":"724","typeID":"10","question":"\u7528@property\u58f0\u660e\u7684NSString\uff08\u6216NSArray\uff0cNSDictionary\uff09\u7ecf\u5e38\u4f7f\u7528copy\u5173\u952e\u5b57\uff0c\u4e3a\u4ec0\u4e48\uff1f\u5982\u679c\u6539\u7528strong\u5173\u952e\u5b57\uff0c\u53ef\u80fd\u9020\u6210\u4ec0\u4e48\u95ee\u9898\uff1f","answer":"1\uff09\u56e0\u4e3a\u7236\u7c7b\u6307\u9488\u53ef\u4ee5\u6307\u5411\u5b50\u7c7b\u5bf9\u8c61,\u4f7f\u7528copy\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u8ba9\u672c\u5bf9\u8c61\u7684\u5c5e\u6027\u4e0d\u53d7\u5916\u754c\u5f71\u54cd,\u4f7f\u7528copy\u65e0\u8bba\u7ed9\u6211\u4f20\u5165\u662f\u4e00\u4e2a\u53ef\u53d8\u5bf9\u8c61\u8fd8\u662f\u4e0d\u53ef\u5bf9\u8c61,\u6211\u672c\u8eab\u6301\u6709\u7684\u5c31\u662f\u4e00\u4e2a\u4e0d\u53ef\u53d8\u7684\u526f\u672c.\r\n\r\n2\uff09\u5982\u679c\u6211\u4eec\u4f7f\u7528\u662fstrong,\u90a3\u4e48\u8fd9\u4e2a\u5c5e\u6027\u5c31\u6709\u53ef\u80fd\u6307\u5411\u4e00\u4e2a\u53ef\u53d8\u5bf9\u8c61,\u5982\u679c\u8fd9\u4e2a\u53ef\u53d8\u5bf9\u8c61\u5728\u5916\u90e8\u88ab\u4fee\u6539\u4e86,\u90a3\u4e48\u4f1a\u5f71\u54cd\u8be5\u5c5e\u6027.\r\n\r\ncopy\u6b64\u7279\u8d28\u6240\u8868\u8fbe\u7684\u6240\u5c5e\u5173\u7cfb\u4e0estrong\u7c7b\u4f3c\u3002\u7136\u800c\u8bbe\u7f6e\u65b9\u6cd5\u5e76\u4e0d\u4fdd\u7559\u65b0\u503c\uff0c\u800c\u662f\u5c06\u5176\u201c\u62f7\u8d1d\u201d (copy)\u3002 \u5f53\u5c5e\u6027\u7c7b\u578b\u4e3aNSString\u65f6\uff0c\u7ecf\u5e38\u7528\u6b64\u7279\u8d28\u6765\u4fdd\u62a4\u5176\u5c01\u88c5\u6027\uff0c\u56e0\u4e3a\u4f20\u9012\u7ed9\u8bbe\u7f6e\u65b9\u6cd5\u7684\u65b0\u503c\u6709\u53ef\u80fd\u6307\u5411\u4e00\u4e2aNSMutableString\u7c7b\u7684\u5b9e\u4f8b\u3002\u8fd9\u4e2a\u7c7b\u662fNSString\u7684\u5b50\u7c7b\uff0c\u8868\u793a\u4e00\u79cd\u53ef\u4fee\u6539\u5176\u503c\u7684\u5b57\u7b26\u4e32\uff0c\u6b64\u65f6\u82e5\u662f\u4e0d\u62f7\u8d1d\u5b57\u7b26\u4e32\uff0c\u90a3\u4e48\u8bbe\u7f6e\u5b8c\u5c5e\u6027\u4e4b\u540e\uff0c\u5b57\u7b26\u4e32\u7684\u503c\u5c31\u53ef\u80fd\u4f1a\u5728\u5bf9\u8c61\u4e0d\u77e5\u60c5\u7684\u60c5\u51b5\u4e0b\u906d\u4eba\u66f4\u6539\u3002\u6240\u4ee5\uff0c\u8fd9\u65f6\u5c31\u8981\u62f7\u8d1d\u4e00\u4efd\u201c\u4e0d\u53ef\u53d8\u201d (immutable)\u7684\u5b57\u7b26\u4e32\uff0c\u786e\u4fdd\u5bf9\u8c61\u4e2d\u7684\u5b57\u7b26\u4e32\u503c\u4e0d\u4f1a\u65e0\u610f\u95f4\u53d8\u52a8\u3002\u53ea\u8981\u5b9e\u73b0\u5c5e\u6027\u6240\u7528\u7684\u5bf9\u8c61\u662f\u201c\u53ef\u53d8\u7684\u201d (mutable)\uff0c\u5c31\u5e94\u8be5\u5728\u8bbe\u7f6e\u65b0\u5c5e\u6027\u503c\u65f6\u62f7\u8d1d\u4e00\u4efd\u3002\r\n\r\n\u4e3a\u4e86\u7406\u89e3\u8fd9\u79cd\u505a\u6cd5\uff0c\u9996\u5148\u8981\u77e5\u9053\uff0c\u5bf9\u975e\u96c6\u5408\u7c7b\u5bf9\u8c61\u7684copy\u64cd\u4f5c\uff1a\r\n\r\n\u5728\u975e\u96c6\u5408\u7c7b\u5bf9\u8c61\u4e2d\uff1a\u5bf9immutable\u5bf9\u8c61\u8fdb\u884ccopy\u64cd\u4f5c\uff0c\u662f\u6307\u9488\u590d\u5236\uff0cmutableCopy\u64cd\u4f5c\u65f6\u5185\u5bb9\u590d\u5236\uff1b\u5bf9mutable\u5bf9\u8c61\u8fdb\u884ccopy\u548cmutableCopy\u90fd\u662f\u5185\u5bb9\u590d\u5236\u3002\u7528\u4ee3\u7801\u7b80\u5355\u8868\u793a\u5982\u4e0b\uff1a\r\n\r\n[immutableObject copy] \/\/ \u6d45\u590d\u5236\r\n[immutableObject mutableCopy] \/\/\u6df1\u590d\u5236\r\n[mutableObject copy] \/\/\u6df1\u590d\u5236\r\n[mutableObject mutableCopy] \/\/\u6df1\u590d\u5236\r\n\u6bd4\u5982\u4ee5\u4e0b\u4ee3\u7801\uff1a\r\n\r\nNSMutableString *string = [NSMutableString stringWithString:@\"origin\"];\/\/copy\r\nNSString *stringCopy = [string copy];\r\n\u67e5\u770b\u5185\u5b58\uff0c\u4f1a\u53d1\u73b0 string\u3001stringCopy \u5185\u5b58\u5730\u5740\u90fd\u4e0d\u4e00\u6837\uff0c\u8bf4\u660e\u6b64\u65f6\u90fd\u662f\u505a\u5185\u5bb9\u62f7\u8d1d\u3001\u6df1\u62f7\u8d1d\u3002\u5373\u4f7f\u4f60\u8fdb\u884c\u5982\u4e0b\u64cd\u4f5c\uff1a\r\n\r\n1\r\n[string appendString:@\"origion!\"]\r\nstringCopy\u7684\u503c\u4e5f\u4e0d\u4f1a\u56e0\u6b64\u6539\u53d8\uff0c\u4f46\u662f\u5982\u679c\u4e0d\u4f7f\u7528copy\uff0cstringCopy\u7684\u503c\u5c31\u4f1a\u88ab\u6539\u53d8\u3002 \u96c6\u5408\u7c7b\u5bf9\u8c61\u4ee5\u6b64\u7c7b\u63a8\u3002 \u6240\u4ee5\uff0c\r\n\u7528@property\u58f0\u660e NSString\u3001NSArray\u3001NSDictionary \u7ecf\u5e38\u4f7f\u7528copy\u5173\u952e\u5b57\uff0c\u662f\u56e0\u4e3a\u4ed6\u4eec\u6709\u5bf9\u5e94\u7684\u53ef\u53d8\u7c7b\u578b\uff1aNSMutableString\u3001NSMutableArray\u3001NSMutableDictionary\uff0c\u4ed6\u4eec\u4e4b\u95f4\u53ef\u80fd\u8fdb\u884c\u8d4b\u503c\u64cd\u4f5c\uff0c\u4e3a\u786e\u4fdd\u5bf9\u8c61\u4e2d\u7684\u5b57\u7b26\u4e32\u503c\u4e0d\u4f1a\u65e0\u610f\u95f4\u53d8\u52a8\uff0c\u5e94\u8be5\u5728\u8bbe\u7f6e\u65b0\u5c5e\u6027\u503c\u65f6\u62f7\u8d1d\u4e00\u4efd\u3002"},{"ID":"723","typeID":"10","question":"ARC\u4e0b\uff0c\u4e0d\u663e\u5f0f\u6307\u5b9a\u4efb\u4f55\u5c5e\u6027\u5173\u952e\u5b57\u65f6\uff0c\u9ed8\u8ba4\u7684\u5173\u952e\u5b57\u90fd\u6709\u54ea\u4e9b\uff1f","answer":"\u5bf9\u5e94\u57fa\u672c\u6570\u636e\u7c7b\u578b\u9ed8\u8ba4\u5173\u952e\u5b57\u662f\r\natomic,readwrite,assign\r\n\r\n\u5bf9\u4e8e\u666e\u901a\u7684OC\u5bf9\u8c61\r\natomic,readwrite,strong"},{"ID":"722","typeID":"10","question":"@synthesize\u548c@dynamic\u5206\u522b\u6709\u4ec0\u4e48\u4f5c\u7528\uff1f","answer":"1\uff09@property\u6709\u4e24\u4e2a\u5bf9\u5e94\u7684\u8bcd\uff0c\u4e00\u4e2a\u662f@synthesize\uff0c\u4e00\u4e2a\u662f@dynamic\u3002\u5982\u679c@synthesize\u548c@dynamic\u90fd\u6ca1\u5199\uff0c\u90a3\u4e48\u9ed8\u8ba4\u7684\u5c31\u662f@syntheszie var = _var;\r\n\r\n2\uff09@synthesize\u7684\u8bed\u4e49\u662f\u5982\u679c\u4f60\u6ca1\u6709\u624b\u52a8\u5b9e\u73b0setter\u65b9\u6cd5\u548cgetter\u65b9\u6cd5\uff0c\u90a3\u4e48\u7f16\u8bd1\u5668\u4f1a\u81ea\u52a8\u4e3a\u4f60\u52a0\u4e0a\u8fd9\u4e24\u4e2a\u65b9\u6cd5\u3002\r\n\r\n3\uff09@dynamic\u544a\u8bc9\u7f16\u8bd1\u5668\uff1a\u5c5e\u6027\u7684setter\u4e0egetter\u65b9\u6cd5\u7531\u7528\u6237\u81ea\u5df1\u5b9e\u73b0\uff0c\u4e0d\u81ea\u52a8\u751f\u6210\u3002\uff08\u5f53\u7136\u5bf9\u4e8ereadonly\u7684\u5c5e\u6027\u53ea\u9700\u63d0\u4f9bgetter\u5373\u53ef\uff09\u3002\u5047\u5982\u4e00\u4e2a\u5c5e\u6027\u88ab\u58f0\u660e\u4e3a@dynamic var\uff0c\u7136\u540e\u4f60\u6ca1\u6709\u63d0\u4f9b@setter\u65b9\u6cd5\u548c@getter\u65b9\u6cd5\uff0c\u7f16\u8bd1\u7684\u65f6\u5019\u6ca1\u95ee\u9898\uff0c\u4f46\u662f\u5f53\u7a0b\u5e8f\u8fd0\u884c\u5230instance.var = someVar\uff0c\u7531\u4e8e\u7f3asetter\u65b9\u6cd5\u4f1a\u5bfc\u81f4\u7a0b\u5e8f\u5d29\u6e83\uff1b\u6216\u8005\u5f53\u8fd0\u884c\u5230 someVar = var\u65f6\uff0c\u7531\u4e8e\u7f3agetter\u65b9\u6cd5\u540c\u6837\u4f1a\u5bfc\u81f4\u5d29\u6e83\u3002\u7f16\u8bd1\u65f6\u6ca1\u95ee\u9898\uff0c\u8fd0\u884c\u65f6\u624d\u6267\u884c\u76f8\u5e94\u7684\u65b9\u6cd5\uff0c\u8fd9\u5c31\u662f\u6240\u8c13\u7684\u52a8\u6001\u7ed1\u5b9a\u3002"},{"ID":"721","typeID":"10","question":"weak\u5c5e\u6027\u9700\u8981\u5728dealloc\u4e2d\u7f6enil\u4e48\uff1f","answer":"\u4e0d\u9700\u8981\u3002\r\n\r\n\u5728ARC\u73af\u5883\u65e0\u8bba\u662f\u5f3a\u6307\u9488\u8fd8\u662f\u5f31\u6307\u9488\u90fd\u65e0\u9700\u5728deallco\u8bbe\u7f6e\u4e3anil\uff0cARC\u4f1a\u81ea\u52a8\u5e2e\u6211\u4eec\u5904\u7406\u3002\r\n\r\n\u5373\u4fbf\u662f\u7f16\u8bd1\u5668\u4e0d\u5e2e\u6211\u4eec\u505a\u8fd9\u4e9b\uff0cweak\u4e5f\u4e0d\u9700\u8981\u5728dealloc\u4e2d\u7f6enil\uff1a\r\n\r\n\u6b63\u5982\u4e0a\u6587\u7684\uff1aruntime \u5982\u4f55\u5b9e\u73b0 weak \u5c5e\u6027 \u4e2d\u63d0\u5230\u7684\uff1a\r\n\r\n\u6211\u4eec\u6a21\u62df\u4e0bweak\u7684setter\u65b9\u6cd5\uff0c\u5e94\u8be5\u5982\u4e0b\uff1a\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n- (void)setObject:(NSObject *)object\r\n{\r\n    objc_setAssociatedObject(self, \"object\", object, OBJC_ASSOCIATION_ASSIGN);\r\n    [object cyl_runAtDealloc:^{\r\n        _object = nil;\r\n    }];\r\n}\r\n\u4e5f\u5373:\u5728\u5c5e\u6027\u6240\u6307\u7684\u5bf9\u8c61\u906d\u5230\u6467\u6bc1\u65f6\uff0c\u5c5e\u6027\u503c\u4e5f\u4f1a\u6e05\u7a7a(nil out)\u3002"},{"ID":"720","typeID":"10","question":"@property\u4e2d\u6709\u54ea\u4e9b\u5c5e\u6027\u5173\u952e\u5b57\uff1f\/ @property \u540e\u9762\u53ef\u4ee5\u6709\u54ea\u4e9b\u4fee\u9970\u7b26\uff1f","answer":"\u5c5e\u6027\u53ef\u4ee5\u62e5\u6709\u7684\u7279\u8d28\u5206\u4e3a\u56db\u7c7b:\r\n\r\n\u539f\u5b50\u6027---nonatomic\u7279\u8d28\r\n\u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u7531\u7f16\u8bd1\u5668\u5408\u6210\u7684\u65b9\u6cd5\u4f1a\u901a\u8fc7\u9501\u5b9a\u673a\u5236\u786e\u4fdd\u5176\u539f\u5b50\u6027(atomicity)\u3002\u5982\u679c\u5c5e\u6027\u5177\u5907nonatomic\u7279\u8d28\uff0c\u5219\u4e0d\u4f7f\u7528\u540c\u6b65\u9501\u3002\u8bf7\u6ce8\u610f\uff0c\u5c3d\u7ba1\u6ca1\u6709\u540d\u4e3a\u201catomic\u201d\u7684\u7279\u8d28(\u5982\u679c\u67d0\u5c5e\u6027\u4e0d\u5177\u5907nonatomic\u7279\u8d28\uff0c\u90a3\u5b83\u5c31\u662f\u201c\u539f\u5b50\u7684\u201d ( atomic) )\uff0c\u4f46\u662f\u4ecd\u7136\u53ef\u4ee5\u5728\u5c5e\u6027\u7279\u8d28\u4e2d\u5199\u660e\u8fd9\u4e00\u70b9\uff0c\u7f16\u8bd1\u5668\u4e0d\u4f1a\u62a5\u9519\u3002\u82e5\u662f\u81ea\u5df1\u5b9a\u4e49\u5b58\u53d6\u65b9\u6cd5\uff0c\u90a3\u4e48\u5c31\u5e94\u8be5\u9075\u4ece\u4e0e\u5c5e\u6027\u7279\u8d28\u76f8\u7b26\u7684\u539f\u5b50\u6027\u3002\r\n\r\n\u8bfb\/\u5199\u6743\u9650---readwrite(\u8bfb\u5199)\u3001readooly (\u53ea\u8bfb)\r\n\u5185\u5b58\u7ba1\u7406\u8bed\u4e49---assign\u3001strong\u3001 weak\u3001unsafe_unretained\u3001copy\r\n\u65b9\u6cd5\u540d---getter=\u3001setter=\r\ngetter=\u7684\u6837\u5f0f\uff1a\r\n\r\n1\r\n  @property (nonatomic, getter=isOn) BOOL on;\r\n\uff08 setter=\u8fd9\u79cd\u4e0d\u5e38\u7528\uff0c\u4e5f\u4e0d\u63a8\u8350\u4f7f\u7528\u3002\u6545\u4e0d\u5728\u8fd9\u91cc\u7ed9\u51fa\u5199\u6cd5\u3002\uff09\r\n\r\n\u4e0d\u5e38\u7528\u7684\uff1anonnull,null_resettable,nullable"},{"ID":"719","typeID":"10","question":"runtime \u5982\u4f55\u5b9e\u73b0 weak \u5c5e\u6027\uff1f","answer":"\u8981\u5b9e\u73b0weak\u5c5e\u6027\uff0c\u9996\u5148\u8981\u641e\u6e05\u695aweak\u5c5e\u6027\u7684\u7279\u70b9\uff1a\r\n\r\nweak \u6b64\u7279\u8d28\u8868\u660e\u8be5\u5c5e\u6027\u5b9a\u4e49\u4e86\u4e00\u79cd\u201c\u975e\u62e5\u6709\u5173\u7cfb\u201d (nonowning relationship)\u3002\u4e3a\u8fd9\u79cd\u5c5e\u6027\u8bbe\u7f6e\u65b0\u503c\u65f6\uff0c\u8bbe\u7f6e\u65b9\u6cd5\u65e2\u4e0d\u4fdd\u7559\u65b0\u503c\uff0c\u4e5f\u4e0d\u91ca\u653e\u65e7\u503c\u3002\u6b64\u7279\u8d28\u540cassign\u7c7b\u4f3c\uff0c \u7136\u800c\u5728\u5c5e\u6027\u6240\u6307\u7684\u5bf9\u8c61\u906d\u5230\u6467\u6bc1\u65f6\uff0c\u5c5e\u6027\u503c\u4e5f\u4f1a\u6e05\u7a7a(nil out)\u3002\r\n\r\n\u90a3\u4e48runtime\u5982\u4f55\u5b9e\u73b0weak\u53d8\u91cf\u7684\u81ea\u52a8\u7f6enil\uff1f\r\n\r\nruntime \u5bf9\u6ce8\u518c\u7684\u7c7b\uff0c \u4f1a\u8fdb\u884c\u5e03\u5c40\uff0c\u5bf9\u4e8e weak \u5bf9\u8c61\u4f1a\u653e\u5165\u4e00\u4e2a hash \u8868\u4e2d\u3002 \u7528 weak \u6307\u5411\u7684\u5bf9\u8c61\u5185\u5b58\u5730\u5740\u4f5c\u4e3a key\uff0c\u5f53\u6b64\u5bf9\u8c61\u7684\u5f15\u7528\u8ba1\u6570\u4e3a0\u7684\u65f6\u5019\u4f1a dealloc\uff0c\u5047\u5982 weak \u6307\u5411\u7684\u5bf9\u8c61\u5185\u5b58\u5730\u5740\u662fa\uff0c\u90a3\u4e48\u5c31\u4f1a\u4ee5a\u4e3a\u952e\uff0c \u5728\u8fd9\u4e2a weak \u8868\u4e2d\u641c\u7d22\uff0c\u627e\u5230\u6240\u6709\u4ee5a\u4e3a\u952e\u7684 weak \u5bf9\u8c61\uff0c\u4ece\u800c\u8bbe\u7f6e\u4e3a nil\u3002"},{"ID":"718","typeID":"10","question":" @protocol \u548c category \u4e2d\u5982\u4f55\u4f7f\u7528 @property\uff1f","answer":"1\uff09\u5728protocol\u4e2d\u4f7f\u7528property\u53ea\u4f1a\u751f\u6210setter\u548cgetter\u65b9\u6cd5\u58f0\u660e,\u6211\u4eec\u4f7f\u7528\u5c5e\u6027\u7684\u76ee\u7684,\u662f\u5e0c\u671b\u9075\u5b88\u6211\u534f\u8bae\u7684\u5bf9\u8c61\u80fd\u5b9e\u73b0\u8be5\u5c5e\u6027\r\n\r\n2\uff09category \u4f7f\u7528 @property \u4e5f\u662f\u53ea\u4f1a\u751f\u6210setter\u548cgetter\u65b9\u6cd5\u7684\u58f0\u660e,\u5982\u679c\u6211\u4eec\u771f\u7684\u9700\u8981\u7ed9category\u589e\u52a0\u5c5e\u6027\u7684\u5b9e\u73b0,\u9700\u8981\u501f\u52a9\u4e8e\u8fd0\u884c\u65f6\u7684\u4e24\u4e2a\u51fd\u6570\uff1a\r\n\r\n\u2460objc_setAssociatedObject\r\n\r\n\u2461objc_getAssociatedObject"},{"ID":"717","typeID":"10","question":"@property \u7684\u672c\u8d28\u662f\u4ec0\u4e48\uff1fivar\u3001getter\u3001setter \u662f\u5982\u4f55\u751f\u6210\u5e76\u6dfb\u52a0\u5230\u8fd9\u4e2a\u7c7b\u4e2d\u7684\uff1f","answer":"@property \u7684\u672c\u8d28\u662f\u4ec0\u4e48\uff1f\r\n\r\n@property = ivar + getter + setter;\r\n\r\n\u4e0b\u9762\u89e3\u91ca\u4e0b\uff1a\r\n\r\n\u201c\u5c5e\u6027\u201d (property)\u6709\u4e24\u5927\u6982\u5ff5\uff1aivar\uff08\u5b9e\u4f8b\u53d8\u91cf\uff09\u3001\u5b58\u53d6\u65b9\u6cd5\uff08access method \uff1d getter + setter\uff09\u3002\r\n\r\n\u201c\u5c5e\u6027\u201d (property)\u4f5c\u4e3a Objective-C \u7684\u4e00\u9879\u7279\u6027\uff0c\u4e3b\u8981\u7684\u4f5c\u7528\u5c31\u5728\u4e8e\u5c01\u88c5\u5bf9\u8c61\u4e2d\u7684\u6570\u636e\u3002 Objective-C \u5bf9\u8c61\u901a\u5e38\u4f1a\u628a\u5176\u6240\u9700\u8981\u7684\u6570\u636e\u4fdd\u5b58\u4e3a\u5404\u79cd\u5b9e\u4f8b\u53d8\u91cf\u3002\u5b9e\u4f8b\u53d8\u91cf\u4e00\u822c\u901a\u8fc7\u201c\u5b58\u53d6\u65b9\u6cd5\u201d(access method)\u6765\u8bbf\u95ee\u3002\u5176\u4e2d\uff0c\u201c\u83b7\u53d6\u65b9\u6cd5\u201d (getter)\u7528\u4e8e\u8bfb\u53d6\u53d8\u91cf\u503c\uff0c\u800c\u201c\u8bbe\u7f6e\u65b9\u6cd5\u201d (setter)\u7528\u4e8e\u5199\u5165\u53d8\u91cf\u503c\u3002\u8fd9\u4e2a\u6982\u5ff5\u5df2\u7ecf\u5b9a\u578b\uff0c\u5e76\u4e14\u7ecf\u7531\u201c\u5c5e\u6027\u201d\u8fd9\u4e00\u7279\u6027\u800c\u6210\u4e3aObjective-C 2.0\u7684\u4e00\u90e8\u5206\u3002 \u800c\u5728\u6b63\u89c4\u7684 Objective-C \u7f16\u7801\u98ce\u683c\u4e2d\uff0c\u5b58\u53d6\u65b9\u6cd5\u6709\u7740\u4e25\u683c\u7684\u547d\u540d\u89c4\u8303\u3002 \u6b63\u56e0\u4e3a\u6709\u4e86\u8fd9\u79cd\u4e25\u683c\u7684\u547d\u540d\u89c4\u8303\uff0c\u6240\u4ee5 Objective-C \u8fd9\u95e8\u8bed\u8a00\u624d\u80fd\u6839\u636e\u540d\u79f0\u81ea\u52a8\u521b\u5efa\u51fa\u5b58\u53d6\u65b9\u6cd5\u3002\u5176\u5b9e\u4e5f\u53ef\u4ee5\u628a\u5c5e\u6027\u5f53\u505a\u4e00\u79cd\u5173\u952e\u5b57\uff0c\u5176\u8868\u793a:\r\n\r\n\u7f16\u8bd1\u5668\u4f1a\u81ea\u52a8\u5199\u51fa\u4e00\u5957\u5b58\u53d6\u65b9\u6cd5\uff0c\u7528\u4ee5\u8bbf\u95ee\u7ed9\u5b9a\u7c7b\u578b\u4e2d\u5177\u6709\u7ed9\u5b9a\u540d\u79f0\u7684\u53d8\u91cf\u3002 \u6240\u4ee5\u4f60\u4e5f\u53ef\u4ee5\u8fd9\u4e48\u8bf4\uff1a\r\n\r\n@property = getter + setter;\r\n\r\n\u4f8b\u5982\u4e0b\u9762\u8fd9\u4e2a\u7c7b\uff1a\r\n\r\n@interface Person : NSObject \r\n@property NSString *firstName; \r\n@property NSString *lastName; \r\n@end\r\n\u4e0a\u8ff0\u4ee3\u7801\u5199\u51fa\u6765\u7684\u7c7b\u4e0e\u4e0b\u9762\u8fd9\u79cd\u5199\u6cd5\u7b49\u6548\uff1a\r\n\r\n@interface Person : NSObject \r\n- (NSString *)firstName; \r\n- (void)setFirstName:(NSString *)firstName; \r\n- (NSString *)lastName; \r\n- (void)setLastName:(NSString *)lastName; \r\n@end\r\nivar\u3001getter\u3001setter \u662f\u5982\u4f55\u751f\u6210\u5e76\u6dfb\u52a0\u5230\u8fd9\u4e2a\u7c7b\u4e2d\u7684?\r\n\r\n\u201c\u81ea\u52a8\u5408\u6210\u201d( autosynthesis)\r\n\r\n\u5b8c\u6210\u5c5e\u6027\u5b9a\u4e49\u540e\uff0c\u7f16\u8bd1\u5668\u4f1a\u81ea\u52a8\u7f16\u5199\u8bbf\u95ee\u8fd9\u4e9b\u5c5e\u6027\u6240\u9700\u7684\u65b9\u6cd5\uff0c\u6b64\u8fc7\u7a0b\u53eb\u505a\u201c\u81ea\u52a8\u5408\u6210\u201d( autosynthesis)\u3002\u9700\u8981\u5f3a\u8c03\u7684\u662f\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u7531\u7f16\u8bd1 \u5668\u5728\u7f16\u8bd1\u671f\u6267\u884c\uff0c\u6240\u4ee5\u7f16\u8f91\u5668\u91cc\u770b\u4e0d\u5230\u8fd9\u4e9b\u201c\u5408\u6210\u65b9\u6cd5\u201d(synthesized method)\u7684\u6e90\u4ee3\u7801\u3002\u9664\u4e86\u751f\u6210\u65b9\u6cd5\u4ee3\u7801 getter\u3001setter \u4e4b\u5916\uff0c\u7f16\u8bd1\u5668\u8fd8\u8981\u81ea\u52a8\u5411\u7c7b\u4e2d\u6dfb\u52a0\u9002\u5f53\u7c7b\u578b\u7684\u5b9e\u4f8b\u53d8\u91cf\uff0c\u5e76\u4e14\u5728\u5c5e\u6027\u540d\u524d\u9762\u52a0\u4e0b\u5212\u7ebf\uff0c\u4ee5\u6b64\u4f5c\u4e3a\u5b9e\u4f8b\u53d8\u91cf\u7684\u540d\u5b57\u3002\u5728\u524d\u4f8b\u4e2d\uff0c\u4f1a\u751f\u6210\u4e24\u4e2a\u5b9e\u4f8b\u53d8\u91cf\uff0c\u5176\u540d\u79f0\u5206\u522b\u4e3a _firstName\u4e0e_lastName\u3002\u4e5f\u53ef\u4ee5\u5728\u7c7b\u7684\u5b9e\u73b0\u4ee3\u7801\u91cc\u901a\u8fc7 @synthesize\u8bed\u6cd5\u6765\u6307\u5b9a\u5b9e\u4f8b\u53d8\u91cf\u7684\u540d\u5b57.\r\n\r\n@implementation Person \r\n@synthesize firstName = _myFirstName; \r\n@synthesize lastName = myLastName; \r\n@end\r\n\u6211\u4e3a\u4e86\u641e\u6e05\u5c5e\u6027\u662f\u600e\u4e48\u5b9e\u73b0\u7684,\u66fe\u7ecf\u53cd\u7f16\u8bd1\u8fc7\u76f8\u5173\u7684\u4ee3\u7801,\u5927\u81f4\u751f\u6210\u4e86\u4e94\u4e2a\u4e1c\u897f\uff1a\r\n\r\n1\uff09OBJC_IVAR_$\u7c7b\u540d$\u5c5e\u6027\u540d\u79f0 \uff1a\u8be5\u5c5e\u6027\u7684\u201c\u504f\u79fb\u91cf\u201d (offset)\uff0c\u8fd9\u4e2a\u504f\u79fb\u91cf\u662f\u201c\u786c\u7f16\u7801\u201d (hardcode)\uff0c\u8868\u793a\u8be5\u53d8\u91cf\u8ddd\u79bb\u5b58\u653e\u5bf9\u8c61\u7684\u5185\u5b58\u533a\u57df\u7684\u8d77\u59cb\u5730\u5740\u6709\u591a\u8fdc\u3002\r\n\r\n2\uff09setter\u4e0egetter\u65b9\u6cd5\u5bf9\u5e94\u7684\u5b9e\u73b0\u51fd\u6570\r\n\r\n3\uff09ivar_list \uff1a\u6210\u5458\u53d8\u91cf\u5217\u8868\r\n\r\n4\uff09method_list \uff1a\u65b9\u6cd5\u5217\u8868\r\n\r\n5\uff09prop_list \uff1a\u5c5e\u6027\u5217\u8868\r\n\r\n\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u6bcf\u6b21\u5728\u589e\u52a0\u4e00\u4e2a\u5c5e\u6027,\u7cfb\u7edf\u90fd\u4f1a\u5728ivar_list\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u6210\u5458\u53d8\u91cf\u7684\u63cf\u8ff0,\u5728method_list\u4e2d\u589e\u52a0setter\u4e0egetter\u65b9\u6cd5\u7684\u63cf\u8ff0,\u5728\u5c5e\u6027\u5217\u8868\u4e2d\u589e\u52a0\u4e00\u4e2a\u5c5e\u6027\u7684\u63cf\u8ff0,\u7136\u540e\u8ba1\u7b97\u8be5\u5c5e\u6027\u5728\u5bf9\u8c61\u4e2d\u7684\u504f\u79fb\u91cf,\u7136\u540e\u7ed9\u51fasetter\u4e0egetter\u65b9\u6cd5\u5bf9\u5e94\u7684\u5b9e\u73b0,\u5728setter\u65b9\u6cd5\u4e2d\u4ece\u504f\u79fb\u91cf\u7684\u4f4d\u7f6e\u5f00\u59cb\u8d4b\u503c,\u5728getter\u65b9\u6cd5\u4e2d\u4ece\u504f\u79fb\u91cf\u5f00\u59cb\u53d6\u503c,\u4e3a\u4e86\u80fd\u591f\u8bfb\u53d6\u6b63\u786e\u5b57\u8282\u6570,\u7cfb\u7edf\u5bf9\u8c61\u504f\u79fb\u91cf\u7684\u6307\u9488\u7c7b\u578b\u8fdb\u884c\u4e86\u7c7b\u578b\u5f3a\u8f6c."},{"ID":"716","typeID":"10","question":"\u5982\u4f55\u8ba9\u81ea\u5df1\u7684\u7c7b\u7528 copy \u4fee\u9970\u7b26\uff1f\u5982\u4f55\u91cd\u5199\u5e26 copy \u5173\u952e\u5b57\u7684 setter\uff1f","answer":"\u82e5\u60f3\u4ee4\u81ea\u5df1\u6240\u5199\u7684\u5bf9\u8c61\u5177\u6709\u62f7\u8d1d\u529f\u80fd\uff0c\u5219\u9700\u5b9e\u73b0NSCopying\u534f\u8bae\u3002\u5982\u679c\u81ea\u5b9a\u4e49\u7684\u5bf9\u8c61\u5206\u4e3a\u53ef\u53d8\u7248\u672c\u4e0e\u4e0d\u53ef\u53d8\u7248\u672c\uff0c\u90a3\u4e48\u5c31\u8981\u540c\u65f6\u5b9e\u73b0NSCopyiog\u4e0eNSMutableCopying\u534f\u8bae\u3002\r\n\r\n\u5177\u4f53\u6b65\u9aa4\uff1a\r\n\r\n1\uff09\u9700\u58f0\u660e\u8be5\u7c7b\u9075\u4eceNSCopying\u534f\u8bae\r\n\r\n2\uff09\u5b9e\u73b0NSCopying\u534f\u8bae\u3002\u8be5\u534f\u8bae\u53ea\u6709\u4e00\u4e2a\u65b9\u6cd5:\r\n\r\n- (id)copyWithZone: (NSZone*) zone\r\n\u6ce8\u610f\uff1a\u4e00\u63d0\u5230\u8ba9\u81ea\u5df1\u7684\u7c7b\u7528 copy \u4fee\u9970\u7b26\uff0c\u6211\u4eec\u603b\u662f\u60f3\u8986\u5199copy\u65b9\u6cd5\uff0c\u5176\u5b9e\u771f\u6b63\u9700\u8981\u5b9e\u73b0\u7684\u5374\u662f\u201ccopyWithZone\u201d\u65b9\u6cd5\u3002"},{"ID":"715","typeID":"10","question":"\u8fd9\u4e2a\u5199\u6cd5\u4f1a\u51fa\u4ec0\u4e48\u95ee\u9898\uff1a @property (copy) NSMutableArray *array;\uff1f","answer":"\u4e24\u4e2a\u95ee\u9898\uff1a\r\n1\u3001\u6dfb\u52a0,\u5220\u9664,\u4fee\u6539\u6570\u7ec4\u5185\u7684\u5143\u7d20\u7684\u65f6\u5019,\u7a0b\u5e8f\u4f1a\u56e0\u4e3a\u627e\u4e0d\u5230\u5bf9\u5e94\u7684\u65b9\u6cd5\u800c\u5d29\u6e83.\u56e0\u4e3acopy\u5c31\u662f\u590d\u5236\u4e00\u4e2a\u4e0d\u53ef\u53d8NSArray\u7684\u5bf9\u8c61\uff1b\r\n2\u3001\u4f7f\u7528\u4e86atomic\u5c5e\u6027\u4f1a\u4e25\u91cd\u5f71\u54cd\u6027\u80fd\u3002\r\n\r\n\u7b2c1\u6761\u7684\u540c\u4e0a\u4e00\u4e2a\u95ee\u9898\u3002\r\n\r\n\u7b2c2\u6761\u539f\u56e0\uff0c\u5982\u4e0b\uff1a\r\n\r\n\u8be5\u5c5e\u6027\u4f7f\u7528\u4e86\u540c\u6b65\u9501\uff0c\u4f1a\u5728\u521b\u5efa\u65f6\u751f\u6210\u4e00\u4e9b\u989d\u5916\u7684\u4ee3\u7801\u7528\u4e8e\u5e2e\u52a9\u7f16\u5199\u591a\u7ebf\u7a0b\u7a0b\u5e8f\uff0c\u8fd9\u4f1a\u5e26\u6765\u6027\u80fd\u95ee\u9898\uff0c\u901a\u8fc7\u58f0\u660enonatomic\u53ef\u4ee5\u8282\u7701\u8fd9\u4e9b\u867d\u7136\u5f88\u5c0f\u4f46\u662f\u4e0d\u5fc5\u8981\u989d\u5916\u5f00\u9500\u3002\r\n\r\n\u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u7531\u7f16\u8bd1\u5668\u6240\u5408\u6210\u7684\u65b9\u6cd5\u4f1a\u901a\u8fc7\u9501\u5b9a\u673a\u5236\u786e\u4fdd\u5176\u539f\u5b50\u6027(atomicity)\u3002\u5982\u679c\u5c5e\u6027\u5177\u5907nonatomic\u7279\u8d28\uff0c\u5219\u4e0d\u4f7f\u7528\u540c\u6b65\u9501\u3002\u8bf7\u6ce8\u610f\uff0c\u5c3d\u7ba1\u6ca1\u6709\u540d\u4e3a\u201catomic\u201d\u7684\u7279\u8d28(\u5982\u679c\u67d0\u5c5e\u6027\u4e0d\u5177\u5907nonatomic\u7279\u8d28\uff0c\u90a3\u5b83\u5c31\u662f\u201c\u539f\u5b50\u7684\u201d(atomic))\u3002\r\n\r\n\u5728iOS\u5f00\u53d1\u4e2d\uff0c\u4f60\u4f1a\u53d1\u73b0\uff0c\u51e0\u4e4e\u6240\u6709\u5c5e\u6027\u90fd\u58f0\u660e\u4e3anonatomic\u3002\r\n\r\n\u4e00\u822c\u60c5\u51b5\u4e0b\u5e76\u4e0d\u8981\u6c42\u5c5e\u6027\u5fc5\u987b\u662f\u201c\u539f\u5b50\u7684\u201d\uff0c\u56e0\u4e3a\u8fd9\u5e76\u4e0d\u80fd\u4fdd\u8bc1\u201c\u7ebf\u7a0b\u5b89\u5168\u201d ( thread safety)\uff0c\u82e5\u8981\u5b9e\u73b0\u201c\u7ebf\u7a0b\u5b89\u5168\u201d\u7684\u64cd\u4f5c\uff0c\u8fd8\u9700\u91c7\u7528\u66f4\u4e3a\u6df1\u5c42\u7684\u9501\u5b9a\u673a\u5236\u624d\u884c\u3002\u4f8b\u5982\uff0c\u4e00\u4e2a\u7ebf\u7a0b\u5728\u8fde\u7eed\u591a\u6b21\u8bfb\u53d6\u67d0\u5c5e\u6027\u503c\u7684\u8fc7\u7a0b\u4e2d\u6709\u522b\u7684\u7ebf\u7a0b\u5728\u540c\u65f6\u6539\u5199\u8be5\u503c\uff0c\u90a3\u4e48\u5373\u4fbf\u5c06\u5c5e\u6027\u58f0\u660e\u4e3aatomic\uff0c\u4e5f\u8fd8\u662f\u4f1a\u8bfb\u5230\u4e0d\u540c\u7684\u5c5e\u6027\u503c\u3002\r\n\r\n\u56e0\u6b64\uff0c\u5f00\u53d1iOS\u7a0b\u5e8f\u65f6\u4e00\u822c\u90fd\u4f1a\u4f7f\u7528nonatomic\u5c5e\u6027\u3002\u4f46\u662f\u5728\u5f00\u53d1Mac OS X\u7a0b\u5e8f\u65f6\uff0c\u4f7f\u7528 atomic\u5c5e\u6027\u901a\u5e38\u90fd\u4e0d\u4f1a\u6709\u6027\u80fd\u74f6\u9888\u3002"},{"ID":"714","typeID":"10","question":"\u600e\u4e48\u7528 copy \u5173\u952e\u5b57\uff1f","answer":"\u7528\u9014\uff1a\r\n\r\n1\uff09NSString\u3001NSArray\u3001NSDictionary \u7b49\u7b49\u7ecf\u5e38\u4f7f\u7528copy\u5173\u952e\u5b57\uff0c\u662f\u56e0\u4e3a\u4ed6\u4eec\u6709\u5bf9\u5e94\u7684\u53ef\u53d8\u7c7b\u578b\uff1aNSMutableString\u3001NSMutableArray\u3001NSMutableDictionary\uff1b\r\n\r\n2\uff09block\u4e5f\u7ecf\u5e38\u4f7f\u7528copy\u5173\u952e\u5b57\uff0c\u5177\u4f53\u539f\u56e0\u89c1\u5b98\u65b9\u6587\u6863\uff1aObjects Use Properties to Keep Track of Blocks\uff1a\r\n\r\nblock\u4f7f\u7528copy\u662f\u4eceMRC\u9057\u7559\u4e0b\u6765\u7684\u201c\u4f20\u7edf\u201d,\u5728MRC\u4e2d,\u65b9\u6cd5\u5185\u90e8\u7684block\u662f\u5728\u6808\u533a\u7684,\u4f7f\u7528copy\u53ef\u4ee5\u628a\u5b83\u653e\u5230\u5806\u533a.\u5728ARC\u4e2d\u5199\u4e0d\u5199\u90fd\u884c\uff1a\u5bf9\u4e8eblock\u4f7f\u7528copy\u8fd8\u662fstrong\u6548\u679c\u662f\u4e00\u6837\u7684\uff0c\u4f46\u5199\u4e0acopy\u4e5f\u65e0\u4f24\u5927\u96c5\uff0c\u8fd8\u80fd\u65f6\u523b\u63d0\u9192\u6211\u4eec\uff1a\u7f16\u8bd1\u5668\u81ea\u52a8\u5bf9block\u8fdb\u884c\u4e86copy\u64cd\u4f5c\u3002\r\n\r\n copy\u6b64\u7279\u8d28\u6240\u8868\u8fbe\u7684\u6240\u5c5e\u5173\u7cfb\u4e0estrong\u7c7b\u4f3c\u3002\u7136\u800c\u8bbe\u7f6e\u65b9\u6cd5\u5e76\u4e0d\u4fdd\u7559\u65b0\u503c\uff0c\u800c\u662f\u5c06\u5176\u201c\u62f7\u8d1d\u201d (copy)\u3002 \u5f53\u5c5e\u6027\u7c7b\u578b\u4e3aNSString\u65f6\uff0c\u7ecf\u5e38\u7528\u6b64\u7279\u8d28\u6765\u4fdd\u62a4\u5176\u5c01\u88c5\u6027\uff0c\u56e0\u4e3a\u4f20\u9012\u7ed9\u8bbe\u7f6e\u65b9\u6cd5\u7684\u65b0\u503c\u6709\u53ef\u80fd\u6307\u5411\u4e00\u4e2aNSMutableString\u7c7b\u7684\u5b9e\u4f8b\u3002\u8fd9\u4e2a\u7c7b\u662fNSString\u7684\u5b50\u7c7b\uff0c\u8868\u793a\u4e00\u79cd\u53ef\u4fee\u6539\u5176\u503c\u7684\u5b57\u7b26\u4e32\uff0c\u6b64\u65f6\u82e5\u662f\u4e0d\u62f7\u8d1d\u5b57\u7b26\u4e32\uff0c\u90a3\u4e48\u8bbe\u7f6e\u5b8c\u5c5e\u6027\u4e4b\u540e\uff0c\u5b57\u7b26\u4e32\u7684\u503c\u5c31\u53ef\u80fd\u4f1a\u5728\u5bf9\u8c61\u4e0d\u77e5\u60c5\u7684\u60c5\u51b5\u4e0b\u906d\u4eba\u66f4\u6539\u3002\u6240\u4ee5\uff0c\u8fd9\u65f6\u5c31\u8981\u62f7\u8d1d\u4e00\u4efd\u201c\u4e0d\u53ef\u53d8\u201d (immutable)\u7684\u5b57\u7b26\u4e32\uff0c\u786e\u4fdd\u5bf9\u8c61\u4e2d\u7684\u5b57\u7b26\u4e32\u503c\u4e0d\u4f1a\u65e0\u610f\u95f4\u53d8\u52a8\u3002\u53ea\u8981\u5b9e\u73b0\u5c5e\u6027\u6240\u7528\u7684\u5bf9\u8c61\u662f\u201c\u53ef\u53d8\u7684\u201d (mutable)\uff0c\u5c31\u5e94\u8be5\u5728\u8bbe\u7f6e\u65b0\u5c5e\u6027\u503c\u65f6\u62f7\u8d1d\u4e00\u4efd\u3002\r\n\r\n\u7528@property\u58f0\u660e NSString\u3001NSArray\u3001NSDictionary \u7ecf\u5e38\u4f7f\u7528copy\u5173\u952e\u5b57\uff0c\u662f\u56e0\u4e3a\u4ed6\u4eec\u6709\u5bf9\u5e94\u7684\u53ef\u53d8\u7c7b\u578b\uff1aNSMutableString\u3001NSMutableArray\u3001NSMutableDictionary\uff0c\u4ed6\u4eec\u4e4b\u95f4\u53ef\u80fd\u8fdb\u884c\u8d4b\u503c\u64cd\u4f5c\uff0c\u4e3a\u786e\u4fdd\u5bf9\u8c61\u4e2d\u7684\u5b57\u7b26\u4e32\u503c\u4e0d\u4f1a\u65e0\u610f\u95f4\u53d8\u52a8\uff0c\u5e94\u8be5\u5728\u8bbe\u7f6e\u65b0\u5c5e\u6027\u503c\u65f6\u62f7\u8d1d\u4e00\u4efd\u3002"},{"ID":"713","typeID":"10","question":"\u4ec0\u4e48\u60c5\u51b5\u4f7f\u7528 weak \u5173\u952e\u5b57\uff0c\u76f8\u6bd4 assign \u6709\u4ec0\u4e48\u4e0d\u540c\uff1f","answer":"1\uff09\u5728ARC\u4e2d,\u5728\u6709\u53ef\u80fd\u51fa\u73b0\u5faa\u73af\u5f15\u7528\u7684\u65f6\u5019,\u5f80\u5f80\u8981\u901a\u8fc7\u8ba9\u5176\u4e2d\u4e00\u7aef\u4f7f\u7528weak\u6765\u89e3\u51b3,\u6bd4\u5982:delegate\u4ee3\u7406\u5c5e\u6027\r\n\r\n2\uff09\u81ea\u8eab\u5df2\u7ecf\u5bf9\u5b83\u8fdb\u884c\u4e00\u6b21\u5f3a\u5f15\u7528,\u6ca1\u6709\u5fc5\u8981\u518d\u5f3a\u5f15\u7528\u4e00\u6b21,\u6b64\u65f6\u4e5f\u4f1a\u4f7f\u7528weak,\u81ea\u5b9a\u4e49IBOutlet\u63a7\u4ef6\u5c5e\u6027\u4e00\u822c\u4e5f\u4f7f\u7528weak\uff1b\u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528strong\u3002\r\n\r\n\u4e0d\u540c\u70b9\uff1a\r\n\r\n1\uff09weak \u6b64\u7279\u8d28\u8868\u660e\u8be5\u5c5e\u6027\u5b9a\u4e49\u4e86\u4e00\u79cd\u201c\u975e\u62e5\u6709\u5173\u7cfb\u201d (nonowning relationship)\u3002\u4e3a\u8fd9\u79cd\u5c5e\u6027\u8bbe\u7f6e\u65b0\u503c\u65f6\uff0c\u8bbe\u7f6e\u65b9\u6cd5\u65e2\u4e0d\u4fdd\u7559\u65b0\u503c\uff0c\u4e5f\u4e0d\u91ca\u653e\u65e7\u503c\u3002\u6b64\u7279\u8d28\u540cassign\u7c7b\u4f3c\uff0c \u7136\u800c\u5728\u5c5e\u6027\u6240\u6307\u7684\u5bf9\u8c61\u906d\u5230\u6467\u6bc1\u65f6\uff0c\u5c5e\u6027\u503c\u4e5f\u4f1a\u6e05\u7a7a(nil out)\u3002 \u800c assign \u7684\u201c\u8bbe\u7f6e\u65b9\u6cd5\u201d\u53ea\u4f1a\u6267\u884c\u9488\u5bf9\u201c\u7eaf\u91cf\u7c7b\u578b\u201d (scalar type\uff0c\u4f8b\u5982 CGFloat \u6216 NSlnteger \u7b49)\u7684\u7b80\u5355\u8d4b\u503c\u64cd\u4f5c\u3002\r\n\r\n2\uff09assigin \u53ef\u4ee5\u7528\u975eOC\u5bf9\u8c61,\u800cweak\u5fc5\u987b\u7528\u4e8eOC\u5bf9\u8c61"},{"ID":"712","typeID":"10","question":"\u5b9a\u4e49\u4e00\u4e2aOC\u6807\u51c6\u7684\u679a\u4e3e\u547d\u4ee4\uff1f","answer":"\u5b98\u65b9\u793a\u4f8b1\uff1a\r\ntypedef NS_ENUM(NSInteger, UITableViewCellStyle) {\r\n        UITableViewCellStyleDefault,\r\n        UITableViewCellStyleValue1,\r\n        UITableViewCellStyleValue2,\r\n        UITableViewCellStyleSubtitle\r\n};\r\n\r\n\u5b98\u65b9\u793a\u4f8b2\uff1a\r\ntypedef NS_OPTIONS(NSUInteger, UIViewAutoresizing) {\r\n        UIViewAutoresizingNone                 = 0,\r\n        UIViewAutoresizingFlexibleLeftMargin   = 1 << 0,\r\n        UIViewAutoresizingFlexibleWidth        = 1 << 1,\r\n        UIViewAutoresizingFlexibleRightMargin  = 1 << 2,\r\n        UIViewAutoresizingFlexibleTopMargin    = 1 << 3,\r\n        UIViewAutoresizingFlexibleHeight       = 1 << 4,\r\n        UIViewAutoresizingFlexibleBottomMargin = 1 << 5\r\n};\r\n"},{"ID":"711","typeID":"10","question":"\u5bf9\u6bd4\u51fd\u6570\u6307\u9488\u548cBlocks\u4f7f\u7528\u65b9\u6cd5\uff1f","answer":"\u51fd\u6570\u6307\u9488\u5b9a\u4e49\uff1aint func (int count)( return count +1) ;  int (*funcptr)(int) = &func;\r\n\u51fd\u6570\u6307\u9488\u4f7f\u7528\uff1aint result = (*funcptr)(10);\r\nBlocks\u5b9a\u4e49\uff1aint (^blk)(int) = ^(int count){return count+1;};\r\nBlocks\u4f7f\u7528\uff1aint result = blk(10);"},{"ID":"615","typeID":"10","question":"const\u5e38\u91cf\u4e0e\u5b8f\u5b9a\u4e49\u533a\u522b\uff1f","answer":"(1) \u7f16\u8bd1\u5668\u5904\u7406\u65b9\u5f0f\u4e0d\u540c\r\n\u3000\u3000define\u5b8f\u662f\u5728\u9884\u5904\u7406\u9636\u6bb5\u5c55\u5f00\u3002\r\n\u3000\u3000const\u5e38\u91cf\u662f\u7f16\u8bd1\u8fd0\u884c\u9636\u6bb5\u4f7f\u7528\u3002\r\n(2) \u7c7b\u578b\u548c\u5b89\u5168\u68c0\u67e5\u4e0d\u540c\r\n\u3000\u3000define\u5b8f\u6ca1\u6709\u7c7b\u578b\uff0c\u4e0d\u505a\u4efb\u4f55\u7c7b\u578b\u68c0\u67e5\uff0c\u4ec5\u4ec5\u662f\u5c55\u5f00\u3002\r\n\u3000\u3000const\u5e38\u91cf\u6709\u5177\u4f53\u7684\u7c7b\u578b\uff0c\u5728\u7f16\u8bd1\u9636\u6bb5\u4f1a\u6267\u884c\u7c7b\u578b\u68c0\u67e5\u3002\r\n(3) \u5b58\u50a8\u65b9\u5f0f\u4e0d\u540c\r\n\u3000\u3000define\u5b8f\u4ec5\u4ec5\u662f\u5c55\u5f00\uff0c\u6709\u591a\u5c11\u5730\u65b9\u4f7f\u7528\uff0c\u5c31\u5c55\u5f00\u591a\u5c11\u6b21\uff0c\u4e0d\u4f1a\u5206\u914d\u5185\u5b58\u3002\r\n\u3000\u3000const\u5e38\u91cf\u4f1a\u5728\u5185\u5b58\u4e2d\u5206\u914d(\u53ef\u4ee5\u662f\u5806\u4e2d\u4e5f\u53ef\u4ee5\u662f\u6808\u4e2d)\u3002\r\n \r\n(4)const  \u53ef\u4ee5\u8282\u7701\u7a7a\u95f4\uff0c\u907f\u514d\u4e0d\u5fc5\u8981\u7684\u5185\u5b58\u5206\u914d\u3002 \u4f8b\u5982\uff1a  \r\n        #define PI 3.14159 \/\/\u5e38\u91cf\u5b8f  \r\n        const doulbe Pi=3.14159; \/\/\u6b64\u65f6\u5e76\u672a\u5c06Pi\u653e\u5165ROM\u4e2d ......  \r\n        double i=Pi; \/\/\u6b64\u65f6\u4e3aPi\u5206\u914d\u5185\u5b58\uff0c\u4ee5\u540e\u4e0d\u518d\u5206\u914d\uff01  \r\n        double I=PI; \/\/\u7f16\u8bd1\u671f\u95f4\u8fdb\u884c\u5b8f\u66ff\u6362\uff0c\u5206\u914d\u5185\u5b58  \r\n        double j=Pi; \/\/\u6ca1\u6709\u5185\u5b58\u5206\u914d  \r\n        double J=PI; \/\/\u518d\u8fdb\u884c\u5b8f\u66ff\u6362\uff0c\u53c8\u4e00\u6b21\u5206\u914d\u5185\u5b58\uff01  \r\n        const\u5b9a\u4e49\u5e38\u91cf\u4ece\u6c47\u7f16\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u53ea\u662f\u7ed9\u51fa\u4e86\u5bf9\u5e94\u7684\u5185\u5b58\u5730\u5740\uff0c\u800c\u4e0d\u662f\u8c61#define\u4e00\u6837\u7ed9\u51fa\u7684\u662f\u7acb\u5373\u6570\uff0c\u6240\u4ee5\uff0cconst\u5b9a\u4e49\u7684\u5e38\u91cf\u5728\u7a0b\u5e8f\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u53ea\u6709\u4e00\u4efd\u62f7\u8d1d\uff0c\u800c #define\u5b9a\u4e49\u7684\u5e38\u91cf\u5728\u5185\u5b58\u4e2d\u6709\u82e5\u5e72\u4e2a\u62f7\u8d1d\u3002 \r\n(5) \u63d0\u9ad8\u4e86\u6548\u7387\u3002 \u7f16\u8bd1\u5668\u901a\u5e38\u4e0d\u4e3a\u666e\u901aconst\u5e38\u91cf\u5206\u914d\u5b58\u50a8\u7a7a\u95f4\uff0c\u800c\u662f\u5c06\u5b83\u4eec\u4fdd\u5b58\u5728\u7b26\u53f7\u8868\u4e2d\uff0c\u8fd9\u4f7f\u5f97\u5b83\u6210\u4e3a\u4e00\u4e2a\u7f16\u8bd1\u671f\u95f4\u7684\u5e38\u91cf\uff0c\u6ca1\u6709\u4e86\u5b58\u50a8\u4e0e\u8bfb\u5185\u5b58\u7684\u64cd\u4f5c\uff0c\u4f7f\u5f97\u5b83\u7684\u6548\u7387\u4e5f\u5f88\u9ad8\u3002\r\n \r\nconst \u4e0e #define\u7684\u6bd4\u8f83\r\n    C++ \u8bed\u8a00\u53ef\u4ee5\u7528const\u6765\u5b9a\u4e49\u5e38\u91cf\uff0c\u4e5f\u53ef\u4ee5\u7528 #define\u6765\u5b9a\u4e49\u5e38\u91cf\u3002\u4f46\u662f\u524d\u8005\u6bd4\u540e\u8005\u6709\u66f4\u591a\u7684\u4f18\u70b9\uff1a\r\n\uff081\uff09   const\u5e38\u91cf\u6709\u6570\u636e\u7c7b\u578b\uff0c\u800c\u5b8f\u5e38\u91cf\u6ca1\u6709\u6570\u636e\u7c7b\u578b\u3002\u7f16\u8bd1\u5668\u53ef\u4ee5\u5bf9\u524d\u8005\u8fdb\u884c\u7c7b\u578b\u5b89\u5168\u68c0\u67e5\u3002\u800c\u5bf9\u540e\u8005\u53ea\u8fdb\u884c\u5b57\u7b26\u66ff\u6362\uff0c\u6ca1\u6709\u7c7b\u578b\u5b89\u5168\u68c0\u67e5\uff0c\u5e76\u4e14\u5728\u5b57\u7b26\u66ff\u6362\u53ef\u80fd\u4f1a\u4ea7\u751f\u610f\u6599\u4e0d\u5230\u7684\u9519\u8bef\uff08\u8fb9\u9645\u6548\u5e94\uff09\u3002\r\n\uff082\uff09   \u6709\u4e9b\u96c6\u6210\u5316\u7684\u8c03\u8bd5\u5de5\u5177\u53ef\u4ee5\u5bf9const\u5e38\u91cf\u8fdb\u884c\u8c03\u8bd5\uff0c\u4f46\u662f\u4e0d\u80fd\u5bf9\u5b8f\u5e38\u91cf\u8fdb\u884c\u8c03\u8bd5\u3002\r\n "},{"ID":"535","typeID":"10","question":"\u8bb2\u8bb2OC\u548c\u5176\u4ed6\u8bed\u8a00\u597d\u5728\u54ea\u91cc,\u4e0d\u597d\u5728\u54ea\u91cc","answer":"objc\u4f18\u70b9:\r\n    1)Cateogies\r\n    2) Posing\r\n    3) \u52a8\u6001\u8bc6\u522b\r\n    4) \u6307\u6807\u8ba1\u7b97\r\n    5)\u5f39\u6027\u8baf\u606f\u4f20\u9012\r\n    6) \u4e0d\u662f\u2f00\u4e00\u4e2a\u8fc7\u5ea6\u590d\u6742\u7684 C \u884d\u2f63\u751f\u8bed\u2f94\u8a00\r\n    7) Objective-C++ \u4e0e C++ \u53ef\u6df7\u5408\u7f16\u7a0b\r\n    \u7f3a\u70b9:\r\n    1) \u4e0d\u2f40\u652f\u63f4\u547d\u540d\u7a7a\u9593\r\n    2) \u4e0d\u2f40\u652f\u6301\u8fd0\u7b97\u7b26\u91cd\u8f7d\r\n    3)\u4e0d\u2f40\u652f\u6301\u591a\u91cd\u7ee7\u627f"},{"ID":"534","typeID":"10","question":"const\u7684\u7528\u6cd5\uff1f","answer":"(1)\u6b32\u963b\u6b62\u4e00\u4e2a\u53d8\u91cf\u88ab\u6539\u53d8,\u53ef\u4ee5\u4f7f\u7528const\u5173\u952e\u5b57\u3002\u5728\u5b9a\u4e49\u8be5const\u53d8\u91cf\u65f6,\u901a\u5e38\u9700\u8981\u5bf9\u5b83\u8fdb\u884c\u521d\u59cb\u5316,\u56e0\u4e3a\u4ee5\u540e\u5c31\u6ca1\u6709\u673a\u4f1a\u518d\u53bb\u6539\u53d8\u5b83\u4e86;\r\n    (2)\u5bf9\u6307\u9488\u6765\u8bf4,\u53ef\u4ee5\u6307\u5b9a\u6307\u9488\u672c\u8eab\u4e3aconst,\u4e5f\u53ef\u4ee5\u6307\u5b9a\u6307\u9488\u6240\u6307\u7684\u6570\u636e\u4e3aconst,\u6216\u4e8c\u8005\u540c\u65f6\u6307\u5b9a\u4e3aconst;\r\n    (3)\u5728\u4e00\u4e2a\u51fd\u6570\u58f0\u660e\u4e2d,const\u53ef\u4ee5\u4fee\u9970\u5f62\u53c2,\u8868\u660e\u5b83\u662f\u4e00\u4e2a\u8f93\u5165\u53c2\u6570,\u5728\u51fd\u6570\u5185\u90e8\u4e0d\u80fd\u6539\u53d8\u5176\u503c;\r\n    (4)\u5bf9\u4e8e\u7c7b\u7684\u6210\u5458\u51fd\u6570,\u82e5\u6307\u5b9a\u5176\u4e3aconst\u7c7b\u578b,\u5219\u8868\u660e\u5176\u662f\u4e00\u4e2a\u5e38\u51fd\u6570, \u4e0d\u80fd\u4fee\u6539\u7c7b\u7684\u6210\u5458\u53d8\u91cf;\r\n    (5)\u5bf9\u4e8e\u7c7b\u7684\u6210\u5458\u51fd\u6570,\u6709\u65f6\u5019\u5fc5\u987b\u6307\u5b9a\u5176\u8fd4\u56de\u503c\u4e3aconst\u7c7b\u578b,\u4ee5\u4f7f\u5f97\u5176 \u8fd4\u56de\u503c\u4e0d\u4e3a\u201c\u5de6\u503c\u201d\u3002"},{"ID":"533","typeID":"10","question":"\u628a\u4f60\u77e5\u9053\u7684framework\u5199\u51fa\u6765\uff0c\u5199\u51fa\u529f\u80fd","answer":"UIKit.framework \u5305\u542biOS\u5e94\u7528\u7a0b\u5e8f\u7528\u6237\u754c\u9762\u5c42\u4f7f\u7528\u7684\u7c7b\u548c\u65b9\u6cd5\uff0cCoreGraphics.framework \u5305\u542bQuartz 2D \u7ed8\u56feAPI \u63a5\u53e3\uff0cFoundation.framework \u4e3aCoreFoundation \u6846\u67b6\u7684\u8bb8\u591a\u529f\u80fd\u63d0\u4f9bObjective-C \u5c01\u88c5\uff0cCoreFoundation.framework \u4e00\u7ec4C \u8bed\u8a00\u63a5\u53e3,\u5b83\u4eec\u4e3aiOS \u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u57fa\u672c\u6570\u636e\u7ba1\u7406\u548c\u670d\u52a1\u529f\u80fd\uff0cMapKit.framework \u8be5\u6846\u67b6\u4f9b\u4e00\u4e2a\u53ef\u88ab\u5d4c\u5165\u5230\u5e94\u7528\u7a0b\u5e8f\u7684\u5730\u56fe\u754c\u9762,\u8be5\u754c\u9762\u5305\u542b\u4e00\u4e2a\u53ef\u4ee5\u6eda\u52a8\u7684\u5730\u56fe\u89c6\u56fe\uff0cCoreLocation.framework \u53ef\u7528\u4e8e\u5b9a\u4f4d\u67d0\u4e2a\u8bbe\u5907\u5f53\u524d\u7ecf\u7eac\u5ea6\uff0cCFNetwork.framework\u63d0\u4f9b\u4e00\u7ec4\u9ad8\u6027\u80fd\u57fa\u4e8eC \u8bed\u8a00\u7684\u63a5\u53e3,\u5b83\u4eec\u4e3a\u4f7f\u7528\u7f51\u7edc\u534f\u8bae\u63d0\u4f9b\u9762\u5411\u5bf9\u8c61\u62bd\u8c61\u3002"},{"ID":"532","typeID":"10","question":"project workspace scheme\u7684\u533a\u522b\uff1f","answer":"Project:\r\n    \u2f00\u4e00\u822c\u7684\u67d0\u4e2a\u5e94\u2f64\u7528\u5355\u72ec\u65b0\u5efa\u2f00\u4e00\u4e2aproject\u5c31\u53ef\u4ee5\u4e86,\u7136\u540e\u628a\u6240\u6709\u7684\u7a0b\u5e8f\u2f42\u6587\u4ef6\u90fd\u653e\u5728\u2fa5\u91cc\u2faf\u9762,\u8fd9\u4e2a\u53ef\u4ee5\u6ee1\u2f9c\u8db3\u2f24\u5927\u90e8\u5206\u666e\u901a\u7684\u9700\u6c42\u3002\r\n    Workspace:\r\n    \u9879\u2eab\u2f6c\u76ee\u6709\u53ef\u80fd\u8981\u4f7f\u2f64\u7528\u5176\u4ed6\u7684\u9879\u2eab\u2f6c\u76ee\u2f42\u6587\u4ef6,\u6216\u8005\u5f15\u2f0a\u5165\u5176\u4ed6\u7684\u9759\u6001\u5e93\u2f42\u6587\u4ef6,\u8fd9\u4e2a\u65f6\u5019workspace\u5c31\u6d3e\u4e0a\u2f64\u7528\u573a\u4e86,workspace\u65e2\u53ef\u4ee5\u5355\u72ec\u7ba1\u7406\u591a\u4e2a\u9879\u2eab\u2f6c\u76ee,\u2f1c\u53c8\u53ef\u4ee5\u901a\u8fc7\u914d\u7f6e,\u8ba9\u5404\u4e2a\u9879\u2eab\u2f6c\u76ee\u76f8\u4e92\u4f9d\u8d56\u3002\r\n    Scheme:\r\n    Xcode scheme\u5b9a\u4e49\u4e86\u7f16\u8bd1\u96c6\u5408\u4e2d\u7684\u82e5\u5e72target,\u7f16\u8bd1\u65f6\u7684\u2f00\u4e00\u4e9b\u8bbe\u7f6e\u4ee5\u53ca\u8981\u6267\u2f8f\u884c\u7684\u6d4b\u8bd5\u96c6\u5408\u3002\u53ef\u4ee5\u2f83\u81ea\u5b9a\u4e49\u82e5\u5e72\u4e2ascheme,\u4f46\u662f\u540c\u2f00\u4e00\u65f6\u523b\u53ea\u80fd\u8fd0\u2f8f\u884c\u2f00\u4e00\u4e2a\u3002"},{"ID":"531","typeID":"10","question":"SEL\u548c\u4e00\u4e2a\u51fd\u6570\u6307\u9488\u8c03\u7528\u540c\u4e00\u4e2a\u65b9\u6cd5\u7684\u7ed3\u679c\u662f\u4e0d\u662f\u76f8\u540c\uff1f","answer":"\u5f97\u5230\u4e86SEL\u53d8\u91cf\u4e4b\u540e,\u53ef\u4ee5\u901a\u8fc7\u4e0b\u2faf\u9762\u7684\u8c03\u2f64\u7528\u6765\u7ed9\u2f00\u4e00\u4e2a\u5bf9\u8c61\u53d1\u9001\u6d88\u606f:\r\n    [\u5bf9\u8c61performSelector:SEL\u53d8\u91cfwithObject:\u53c2\u65701 withObject:\u53c2\u65702];\r\n    \u7ed3\u8bba:SEL\u53ea\u662f\u2f45\u65b9\u6cd5\u540d\u6807\u8bc6,\u5b9e\u9645\u8fd0\u2f8f\u884c\u65f6\u9700\u8981\u901a\u8fc7\u6d88\u606f\u53d1\u9001\u6765\u8c03\u2f64\u7528,IMP\u662f\u201dimplementation\u201d\u7684\u7f29 \u5199,\u5b83\u662fobjetive-C \u2f45\u65b9\u6cd5 (method)\u5b9e\u73b0\u4ee3\u7801\u5757\u7684\u5730\u5740,\u7c7b\u4f3c\u51fd\u6570\u6307\u9488,\u901a\u8fc7\u5b83\u53ef\u4ee5 \u76f4\u63a5\u8bbf\u95ee\u4efb\u610f\u2f00\u4e00\u4e2a\u2f45\u65b9\u6cd5\u3002\u514d\u53bb\u53d1\u9001\u6d88\u606f\u7684\u4ee3\u4ef7\u3002"},{"ID":"530","typeID":"10","question":"\u5bf9\u4e8eObjective-C\uff0c\u4f60\u8ba4\u4e3a\u5b83\u6700\u5927\u7684\u4f18\u70b9\u548c\u6700\u5927\u7684\u4e0d\u8db3\u662f\u4ec0\u4e48\uff1f\u5bf9\u4e8e\u4e0d\u8db3\u4e4b\u5904\uff0c\u73b0\u5728\u6709\u6ca1\u6709\u53ef\u7528\u7684\u65b9\u6cd5\u7ed5\u8fc7\u8fd9\u4e9b\u4e0d\u8db3\u6765\u5b9e\u73b0\u9700\u6c42\u3002\u5982\u679c\u53ef\u4ee5\u7684\u8bdd\uff0c\u4f60\u6709\u6ca1\u6709\u8003\u8651\u6216\u8005\u5b9e\u8df5\u8fc7\u91cd\u65b0\u5b9e\u73b0OC\u7684\u4e00\u4e9b\u529f\u80fd\uff0c\u5982\u679c\u6709\uff0c\u5177\u4f53\u4f1a\u5982\u4f55\u505a\uff1f","answer":"\u6700\u5927\u7684\u4f18\u70b9\u662f\u5b83\u7684\u8fd0\u884c\u65f6\u7279\u6027\uff0c\u4e0d\u8db3\u662f\u6ca1\u6709\u547d\u540d\u7a7a\u95f4\uff0c\u5bf9\u4e8e\u547d\u540d\u51b2\u7a81\uff0c\u53ef\u4ee5\u4f7f\u7528\u957f\u547d\u540d\u6cd5\u6216\u7279\u6b8a\u524d\u7f00\u89e3\u51b3\uff0c\u5982\u679c\u662f\u5f15\u5165\u7684\u7b2c\u4e09\u65b9\u5e93\u4e4b\u95f4\u7684\u547d\u540d\u51b2\u7a81\uff0c\u53ef\u4ee5\u4f7f\u7528link\u547d\u4ee4\u53caflag\u89e3\u51b3\u51b2\u7a81\u3002  "},{"ID":"529","typeID":"10","question":"\u662f\u5426\u505a\u8fc7\u5f02\u6b65\u7684\u7f51\u7edc\u5904\u7406\u548c\u901a\u8baf\u65b9\u9762\u7684\u5de5\u4f5c\uff1f\u5982\u679c\u6709\uff0c\u80fd\u5177\u4f53\u4ecb\u7ecd\u4e00\u4e9b\u5b9e\u73b0\u7b56\u7565\u4e48\uff1f","answer":"\u4f7f\u7528NSOperation\u53d1\u9001\u5f02\u6b65\u7f51\u7edc\u8bf7\u6c42\uff0c\u4f7f\u7528NSOperationQueue\u7ba1\u7406\u7ebf\u7a0b\u6570\u76ee\u53ca\u4f18\u5148\u7ea7\uff0c\u5e95\u5c42\u662f\u7528NSURLConnetion\u3002"},{"ID":"528","typeID":"10","question":"\u4f7f\u7528GCD\u4ee5\u53cablock\u65f6\u8981\u6ce8\u610f\u4e9b\u4ec0\u4e48\uff1f\u5b83\u4eec\u4e24\u662f\u4e00\u56de\u4e8b\u513f\u4e48\uff1fblock\u5728ARC\u4e2d\u548c\u4f20\u7edf\u7684MRC\u4e2d\u7684\u884c\u4e3a\u548c\u7528\u6cd5\u6709\u6ca1\u6709\u4ec0\u4e48\u533a\u522b\uff0c\u9700\u8981\u6ce8\u610f\u4e9b\u4ec0\u4e48\uff1f\u5982\u4f55\u907f\u514d\u5faa\u73af\u5f15\u7528\uff1f","answer":"\u4f7f\u7528block\u662f\u8981\u6ce8\u610f\uff0c\u82e5\u5c06block\u505a\u51fd\u6570\u53c2\u6570\u65f6\uff0c\u9700\u8981\u628a\u5b83\u653e\u5230\u6700\u540e\uff0cGCD\u662fGrand Central Dispatch\uff0c\u662f\u4e00\u4e2a\u5bf9\u7ebf\u7a0b\u5f00\u6e90\u7c7b\u5e93\uff0c\u800cBlock\u662f\u95ed\u5305\uff0c\u662f\u80fd\u591f\u8bfb\u53d6\u5176\u4ed6\u51fd\u6570\u5185\u90e8\u53d8\u91cf\u7684\u51fd\u6570\u3002"},{"ID":"527","typeID":"10","question":"\u4f60\u7528\u8fc7NSOperationQueue\u4e48\uff1f\u5982\u679c\u7528\u8fc7\u6216\u8005\u4e86\u89e3\u7684\u8bdd\uff0c\u4f60\u4e3a\u4ec0\u4e48\u8981\u4f7f\u7528NSOperationQueue\uff0c\u5b9e\u73b0\u4e86\u4ec0\u4e48\uff1f\u8bf7\u63cf\u8ff0\u5b83\u548cGCD\u7684\u533a\u522b\u548c\u7c7b\u4f3c\u7684\u5730\u65b9\uff1f","answer":"\u4f7f\u7528NSOperationQueue\u7528\u6765\u7ba1\u7406\u5b50\u7c7b\u5316\u7684NSOperation\u5bf9\u8c61\uff0c\u63a7\u5236\u5176\u7ebf\u7a0b\u5e76\u53d1\u6570\u76ee\u3002GCD\u548cNSOperation\u90fd\u53ef\u4ee5\u5b9e\u73b0\u5bf9\u7ebf\u7a0b\u7684\u7ba1\u7406\uff0c\u533a\u522b\u662f NSOperation\u548cNSOperationQueue\u662f\u591a\u7ebf\u7a0b\u7684\u9762\u5411\u5bf9\u8c61\u62bd\u8c61\u3002\u9879\u76ee\u4e2d\u4f7f\u7528NSOperation\u7684\u4f18\u70b9\u662fNSOperation\u662f\u5bf9\u7ebf\u7a0b\u7684\u9ad8\u5ea6\u62bd\u8c61\uff0c\u5728\u9879\u76ee\u4e2d\u4f7f\u7528\u5b83\uff0c\u4f1a\u4f7f\u9879\u76ee\u7684\u7a0b\u5e8f\u7ed3\u6784\u66f4\u597d\uff0c\u5b50\u7c7b\u5316NSOperation\u7684\u8bbe\u8ba1\u601d\u8def\uff0c\u662f\u5177\u6709\u9762\u5411\u5bf9\u8c61\u7684\u4f18\u70b9\uff08\u590d\u7528\u3001\u5c01\u88c5\uff09\uff0c\u4f7f\u5f97\u5b9e\u73b0\u662f\u591a\u7ebf\u7a0b\u652f\u6301\uff0c\u800c\u63a5\u53e3\u7b80\u5355\uff0c\u5efa\u8bae\u5728\u590d\u6742\u9879\u76ee\u4e2d\u4f7f\u7528\u3002\r\n\u9879\u76ee\u4e2d\u4f7f\u7528GCD\u7684\u4f18\u70b9\u662fGCD\u672c\u8eab\u975e\u5e38\u7b80\u5355\u3001\u6613\u7528\uff0c\u5bf9\u4e8e\u4e0d\u590d\u6742\u7684\u591a\u7ebf\u7a0b\u64cd\u4f5c\uff0c\u4f1a\u8282\u7701\u4ee3\u7801\u91cf\uff0c\u800cBlock\u53c2\u6570\u7684\u4f7f\u7528\uff0c\u4f1a\u662f\u4ee3\u7801\u66f4\u4e3a\u6613\u8bfb\uff0c\u5efa\u8bae\u5728\u7b80\u5355\u9879\u76ee\u4e2d\u4f7f\u7528\u3002"},{"ID":"526","typeID":"10","question":"NSNotification\u548cKVO\u7684\u533a\u522b\u548c\u7528\u6cd5\u662f\u4ec0\u4e48\uff1f\u4ec0\u4e48\u65f6\u5019\u5e94\u8be5\u4f7f\u7528\u901a\u77e5\uff0c\u4ec0\u4e48\u65f6\u5019\u5e94\u8be5\u4f7f\u7528KVO\uff0c\u5b83\u4eec\u7684\u5b9e\u73b0\u4e0a\u6709\u4ec0\u4e48\u533a\u522b\u5417\uff1f\u5982\u679c\u7528protocol\u548cdelegate\uff08\u6216\u8005delegate\u7684Array\uff09\u6765\u5b9e\u73b0\u7c7b\u4f3c\u7684\u529f\u80fd\u53ef\u80fd\u5417\uff1f\u5982\u679c\u53ef\u80fd\uff0c\u4f1a\u6709\u4ec0\u4e48\u6f5c\u5728\u7684\u95ee\u9898\uff1f\u5982\u679c\u4e0d\u80fd\uff0c\u4e3a\u4ec0\u4e48\uff1f","answer":"NSNotification\u662f\u901a\u77e5\u6a21\u5f0f\u5728iOS\u7684\u5b9e\u73b0\uff0cKVO\u7684\u5168\u79f0\u662f\u952e\u503c\u89c2\u5bdf(Key-value observing),\u5176\u662f\u57fa\u4e8eKVC\uff08key-value coding\uff09\u7684\uff0cKVC\u662f\u4e00\u4e2a\u901a\u8fc7\u5c5e\u6027\u540d\u8bbf\u95ee\u5c5e\u6027\u53d8\u91cf\u7684\u673a\u5236\u3002\u4f8b\u5982\u5c06Module\u5c42\u7684\u53d8\u5316\uff0c\u901a\u77e5\u5230\u591a\u4e2aController\u5bf9\u8c61\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528NSNotification\uff1b\u5982\u679c\u662f\u53ea\u9700\u8981\u89c2\u5bdf\u67d0\u4e2a\u5bf9\u8c61\u7684\u67d0\u4e2a\u5c5e\u6027\uff0c\u53ef\u4ee5\u4f7f\u7528KVO\u3002\r\n\u5bf9\u4e8e\u59d4\u6258\u6a21\u5f0f\uff0c\u5728\u8bbe\u8ba1\u6a21\u5f0f\u4e2d\u662f\u5bf9\u8c61\u9002\u914d\u5668\u6a21\u5f0f\uff0c\u5176\u662fdelegate\u662f\u6307\u5411\u67d0\u4e2a\u5bf9\u8c61\u7684\uff0c\u8fd9\u662f\u4e00\u5bf9\u4e00\u7684\u5173\u7cfb\uff0c\u800c\u5728\u901a\u77e5\u6a21\u5f0f\u4e2d\uff0c\u5f80\u5f80\u662f\u4e00\u5bf9\u591a\u7684\u5173\u7cfb\u3002\u59d4\u6258\u6a21\u5f0f\uff0c\u4ece\u6280\u672f\u4e0a\u53ef\u4ee5\u73b0\u5728\u6539\u53d8delegate\u6307\u5411\u7684\u5bf9\u8c61\uff0c\u4f46\u4e0d\u5efa\u8bae\u8fd9\u6837\u505a\uff0c\u4f1a\u8ba9\u4eba\u8ff7\u60d1\uff0c\u5982\u679c\u4e00\u4e2adelegate\u5bf9\u8c61\u4e0d\u65ad\u6539\u53d8\uff0c\u6307\u5411\u4e0d\u540c\u7684\u5bf9\u8c61\u3002"},{"ID":"525","typeID":"10","question":"\u662f\u5426\u4f7f\u7528\u8fc7CoreText\u6216\u8005CoreImage\u7b49\uff1f\u5982\u679c\u4f7f\u7528\u8fc7\uff0c\u8bf7\u8c08\u8c08\u4f60\u4f7f\u7528CoreText\u6216\u8005CoreImage\u7684\u4f53\u9a8c\uff1f","answer":"CoreText\u53ef\u4ee5\u89e3\u51b3\u590d\u6742\u6587\u5b57\u5185\u5bb9\u6392\u7248\u95ee\u9898\u3002CoreImage\u53ef\u4ee5\u5904\u7406\u56fe\u7247\uff0c\u4e3a\u5176\u6dfb\u52a0\u5404\u79cd\u6548\u679c\u3002\u4f53\u9a8c\u662f\u5f88\u5f3a\u5927\uff0c\u633a\u590d\u6742\u7684\u3002"},{"ID":"524","typeID":"10","question":"\u662f\u5426\u4f7f\u7528\u8fc7CoreAnimation\u548cCoreGraphics\u3002UI\u6846\u67b6\u548cCA\uff0cCG\u6846\u67b6\u7684\u8054\u7cfb\u662f\u4ec0\u4e48\uff1f\u5206\u522b\u7528CA\u548cCG\u505a\u8fc7\u4e9b\u4ec0\u4e48\u52a8\u753b\u6216\u8005\u56fe\u50cf\u4e0a\u7684\u5185\u5bb9\uff1f","answer":"UI\u6846\u67b6\u7684\u5e95\u5c42\u6709CoreAnimation\uff0cCoreAnimation\u7684\u5e95\u5c42\u6709CoreGraphics\u3002    \r\nUIKit | \r\n------------ | \r\nCore Animation | \r\nCore Graphics |\r\nGraphics Hardware|  \r\n\u4f7f\u7528CA\u505a\u8fc7menu\u83dc\u5355\u7684\u5c55\u5f00\u6536\u8d77"},{"ID":"523","typeID":"10","question":"\u4f7f\u7528\u8fc7Objective-C\u7684\u8fd0\u884c\u65f6\u7f16\u7a0b\uff08Runtime Programming\uff09\u4e48\uff1f\u5982\u679c\u4f7f\u7528\u8fc7\uff0c\u4f60\u7528\u5b83\u505a\u4e86\u4ec0\u4e48\uff1f\u4f60\u8fd8\u80fd\u8bb0\u5f97\u4f60\u6240\u4f7f\u7528\u7684\u76f8\u5173\u7684\u5934\u6587\u4ef6\u6216\u8005\u67d0\u4e9b\u65b9\u6cd5\u7684\u540d\u79f0\u5417\uff1f ","answer":"Objecitve-C\u7684\u91cd\u8981\u7279\u6027\u662fRuntime\uff08\u8fd0\u884c\u65f6\uff09,\u5728#import <objc\/runtime.h> \u4e0b\u80fd\u770b\u5230\u76f8\u5173\u7684\u65b9\u6cd5\uff0c\u7528\u8fc7objc_getClass()\u548cclass_copyMethodList()\u83b7\u53d6\u8fc7\u79c1\u6709API;\u4f7f\u7528  \r\n```objective-c\r\nMethod method1 = class_getInstanceMethod(cls, sel1);\r\nMethod method2 = class_getInstanceMethod(cls, sel2);\r\nmethod_exchangeImplementations(method1, method2);  \r\n```   \r\n\u4ee3\u7801\u4ea4\u6362\u4e24\u4e2a\u65b9\u6cd5\uff0c\u5728\u5199unit test\u65f6\u4f7f\u7528\u5230\u3002"},{"ID":"485","typeID":"10","question":"iOS \u521b\u5efa\u5355\u4f8b\u7684\u4e24\u79cd\u65b9\u6cd5(MRC ARC)","answer":"MRC\r\nstatic AccountManager *DefaultManager = nil;  \r\n   \r\n+ (AccountManager *)defaultManager {  \r\n    if (!DefaultManager) DefaultManager = [[self allocWithZone:NULL] init];  \r\n    return DefaultManager;  \r\n}  \r\n\r\nARC\r\n+ (AccountManager *)sharedManager  \r\n{  \r\n        static AccountManager *sharedAccountManagerInstance = nil;  \r\n        static dispatch_once_t predicate;  \r\n        dispatch_once(&predicate, ^{  \r\n                sharedAccountManagerInstance = [[self alloc] init];   \r\n        });  \r\n    return sharedAccountManagerInstance;  \r\n}  "},{"ID":"484","typeID":"10","question":"\u5199\u4e00\u4e2aNSString\u7c7b\u7684\u5b9e\u73b0","answer":"+ (id)initWithCString:(c*****t char *)nullTerminatedCString encoding:(NSStringEncoding)encoding;\r\n+ (id) stringWithCString: (c*****t char*)nullTerminatedCString  \r\n            encoding: (NSStringEncoding)encoding\r\n{\r\n  NSString  *obj;\r\n  obj = [self allocWithZone: NSDefaultMallocZone()];\r\n  obj = [obj initWithCString: nullTerminatedCString encoding: encoding];\r\n  return AUTORELEASE(obj);\r\n}"},{"ID":"483","typeID":"10","question":"\u76ee\u6807-\u52a8\u4f5c\u673a\u5236\u662f\u4ec0\u4e48\uff1f","answer":"\u76ee\u6807\u662f\u52a8\u4f5c\u6d88\u606f\u7684\u63a5\u6536\u8005\u3002\u4e00\u4e2a\u63a7\u4ef6\uff0c\u6216\u8005\u66f4\u4e3a\u5e38\u89c1\u7684\u662f\u5b83\u7684\u5355\u5143\uff0c\u4ee5\u63d2\u5ea7\u53d8\u91cf\uff08\u53c2\u89c1\"\u63d2\u5ea7\u53d8\u91cf\"\u90e8\u5206\uff09\r\n\u7684\u5f62\u5f0f\u4fdd\u6709\u5176\u52a8\u4f5c\u6d88\u606f\u7684\u76ee\u6807\u3002\r\n\u52a8\u4f5c\u662f\u63a7\u4ef6\u53d1\u9001\u7ed9\u76ee\u6807\u7684\u6d88\u606f\uff0c\u6216\u8005\u4ece\u76ee\u6807\u7684\u89d2\u5ea6\u770b\uff0c\u5b83\u662f\u76ee\u6807\u4e3a\u4e86\u54cd\u5e94\u52a8\u4f5c\u800c\u5b9e\u73b0\u7684\u65b9\u6cd5\u3002\r\n\u7a0b\u5e8f\u9700\u8981\u67d0\u4e9b\u673a\u5236\u6765\u8fdb\u884c\u4e8b\u4ef6\u548c\u6307\u4ee4\u7684\u7ffb\u8bd1\u3002\u8fd9\u4e2a\u673a\u5236\u5c31\u662f\u76ee\u6807-\u52a8\u4f5c\u673a\u5236\u3002"},{"ID":"482","typeID":"10","question":"\u4ec0\u4e48\u662f\u952e-\u503c,\u952e\u8def\u5f84\u662f\u4ec0\u4e48","answer":"\u6a21\u578b\u7684\u6027\u8d28\u662f\u901a\u8fc7\u4e00\u4e2a\u7b80\u5355\u7684\u952e\uff08\u901a\u5e38\u662f\u4e2a\u5b57\u7b26\u4e32\uff09\u6765\u6307\u5b9a\u7684\u3002\u89c6\u56fe\u548c\u63a7\u5236\u5668\u901a\u8fc7\u952e\u6765\u67e5\u627e\u76f8\u5e94\u7684\u5c5e\u6027\u503c\u3002\u5728\u4e00\u4e2a\u7ed9\u5b9a\u7684\u5b9e\u4f53\u4e2d\uff0c\u540c\u4e00\u4e2a\u5c5e\u6027\u7684\u6240\u6709\u503c\u5177\u6709\u76f8\u540c\u7684\u6570\u636e\u7c7b\u578b\u3002\u952e-\u503c\u7f16\u7801\u6280\u672f\u7528\u4e8e\u8fdb\u884c\u8fd9\u6837\u7684\u67e5\u627e\u2014\u5b83\u662f\u4e00\u79cd\u95f4\u63a5\u8bbf\u95ee\u5bf9\u8c61\u5c5e\u6027\u7684\u673a\u5236\u3002\r\n\u952e\u8def\u5f84\u662f\u4e00\u4e2a\u7531\u7528\u70b9\u4f5c\u5206\u9694\u7b26\u7684\u952e\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\uff0c\u7528\u4e8e\u6307\u5b9a\u4e00\u4e2a\u8fde\u63a5\u5728\u4e00\u8d77\u7684\u5bf9\u8c61\u6027\u8d28\u5e8f\u5217\u3002\u7b2c\u4e00\u4e2a\u952e\u7684\r\n\u6027\u8d28\u662f\u7531\u5148\u524d\u7684\u6027\u8d28\u51b3\u5b9a\u7684\uff0c\u63a5\u4e0b\u6765\u6bcf\u4e2a\u952e\u7684\u503c\u4e5f\u662f\u76f8\u5bf9\u4e8e\u5176\u524d\u9762\u7684\u6027\u8d28\u3002\u952e\u8def\u5f84\u4f7f\u60a8\u53ef\u4ee5\u4ee5\u72ec\u7acb\u4e8e\u6a21\u578b\r\n\u5b9e\u73b0\u7684\u65b9\u5f0f\u6307\u5b9a\u76f8\u5173\u5bf9\u8c61\u7684\u6027\u8d28\u3002\u901a\u8fc7\u952e\u8def\u5f84\uff0c\u60a8\u53ef\u4ee5\u6307\u5b9a\u5bf9\u8c61\u56fe\u4e2d\u7684\u4e00\u4e2a\u4efb\u610f\u6df1\u5ea6\u7684\u8def\u5f84\uff0c\u4f7f\u5176\u6307\u5411\u76f8\r\n\u5173\u5bf9\u8c61\u7684\u7279\u5b9a\u5c5e\u6027\u3002"},{"ID":"481","typeID":"10","question":"\u81ea\u52a8\u91ca\u653e\u6c60\u662f\u4ec0\u4e48,\u5982\u4f55\u5de5\u4f5c","answer":"\u5f53 \u60a8\u5411\u4e00\u4e2a\u5bf9\u8c61\u53d1\u9001\u4e00\u4e2aautorelease\u6d88\u606f\u65f6\uff0cCocoa\u5c31\u4f1a\u5c06\u8be5\u5bf9\u8c61\u7684\u4e00\u4e2a\u5f15\u7528\u653e\u5165\u5230\u6700\u65b0\u7684\u81ea\u52a8\u91ca\u653e\u6c60\u3002\u5b83\u4ecd\u7136\u662f\u4e2a\u6b63\u5f53\u7684\u5bf9\u8c61\uff0c\u56e0\u6b64\u81ea\u52a8\u91ca\u653e\u6c60\u5b9a \u4e49\u7684\u4f5c\u7528\u57df\u5185\u7684\u5176\u5b83\u5bf9\u8c61\u53ef\u4ee5\u5411\u5b83\u53d1\u9001\u6d88\u606f\u3002\u5f53\u7a0b\u5e8f\u6267\u884c\u5230\u4f5c\u7528\u57df\u7ed3\u675f\u7684\u4f4d\u7f6e\u65f6\uff0c\u81ea\u52a8\u91ca\u653e\u6c60\u5c31\u4f1a\u88ab\u91ca\u653e\uff0c\u6c60\u4e2d\u7684\u6240\u6709\u5bf9\u8c61\u4e5f\u5c31\u88ab\u91ca\u653e\u3002\r\n1.  ojc-c \u662f \u901a\u8fc7\u4e00\u79cd\"referring counting\"(\u5f15\u7528\u8ba1\u6570)\u7684\u65b9\u5f0f\u6765\u7ba1\u7406\u5185\u5b58\u7684, \u5bf9\u8c61\u5728\u5f00\u59cb\u5206\u914d\u5185\u5b58(alloc)\u7684\u65f6\u5019\u5f15\u7528\u8ba1\u6570\u4e3a\u4e00,\u4ee5\u540e\u6bcf\u5f53\u78b0\u5230\u6709copy,retain\u7684\u65f6\u5019\u5f15\u7528\u8ba1\u6570\u90fd\u4f1a\u52a0\u4e00, \u6bcf\u5f53\u78b0\u5230release\u548cautorelease\u7684\u65f6\u5019\u5f15\u7528\u8ba1\u6570\u5c31\u4f1a\u51cf\u4e00,\u5982\u679c\u6b64\u5bf9\u8c61\u7684\u8ba1\u6570\u53d8\u4e3a\u4e860, \u5c31\u4f1a\u88ab\u7cfb\u7edf\u9500\u6bc1.\r\n2. NSAutoreleasePool \u5c31\u662f\u7528\u6765\u505a\u5f15\u7528\u8ba1\u6570\u7684\u7ba1\u7406\u5de5\u4f5c\u7684,\u8fd9\u4e2a\u4e1c\u897f\u4e00\u822c\u4e0d\u7528\u4f60\u7ba1\u7684.\r\n3. autorelease\u548crelease\u6ca1\u4ec0\u4e48\u533a\u522b,\u53ea\u662f\u5f15\u7528\u8ba1\u6570\u51cf\u4e00\u7684\u65f6\u673a\u4e0d\u540c\u800c\u5df2,autorelease\u4f1a\u5728\u5bf9\u8c61\u7684\u4f7f\u7528\u771f\u6b63\u7ed3\u675f\u7684\u65f6\u5019\u624d\u505a\u5f15\u7528\u8ba1\u6570\u51cf\u4e00."},{"ID":"479","typeID":"10","question":"\u65b9\u6cd5\u548c\u9009\u62e9\u5668\u6709\u4f55\u4e0d\u540c\uff1f","answer":"selector\u662f\u4e00\u4e2a\u65b9\u6cd5\u7684\u540d\u5b57\uff0cmethod\u662f\u4e00\u4e2a\u7ec4\u5408\u4f53\uff0c\u5305\u542b\u4e86\u540d\u5b57\u548c\u5b9e\u73b0."},{"ID":"478","typeID":"10","question":"id\u3001nil\u4ee3\u8868\u4ec0\u4e48\uff1f","answer":"id\u548cvoid *\u5e76\u975e\u5b8c\u5168\u4e00\u6837\u3002\u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0cid\u662f\u6307\u5411struct objc_object\u7684\u4e00\u4e2a\u6307\u9488\uff0c\u8fd9\u4e2a\u610f\u601d\u57fa\u672c\u4e0a\u662f\u8bf4\uff0cid\u662f\u4e00\u4e2a\u6307\u5411\u4efb\u4f55\u4e00\u4e2a\u7ee7\u627f\u4e86Object\uff08\u6216\u8005NSObject\uff09\u7c7b\u7684\u5bf9\u8c61\u3002\u9700\u8981\u6ce8\u610f\u7684\u662fid\u662f\u4e00\u4e2a\u6307\u9488\uff0c\u6240\u4ee5\u4f60\u5728\u4f7f\u7528id\u7684\u65f6\u5019\u4e0d\u9700\u8981\u52a0\u661f\u53f7\u3002\u6bd4\u5982id foo=nil\u5b9a\u4e49\u4e86\u4e00\u4e2anil\u6307\u9488\uff0c\u8fd9\u4e2a\u6307\u9488\u6307\u5411NSObject\u7684\u4e00\u4e2a\u4efb\u610f\u5b50\u7c7b\u3002\u800cid *foo=nil\u5219\u5b9a\u4e49\u4e86\u4e00\u4e2a\u6307\u9488\uff0c\u8fd9\u4e2a\u6307\u9488\u6307\u5411\u53e6\u4e00\u4e2a\u6307\u9488\uff0c\u88ab\u6307\u5411\u7684\u8fd9\u4e2a\u6307\u9488\u6307\u5411NSObject\u7684\u4e00\u4e2a\u5b50\u7c7b\u3002\r\nnil\u548cC\u8bed\u8a00\u7684NULL\u76f8\u540c\uff0c\u5728objc\/objc.h\u4e2d\u5b9a\u4e49\u3002nil\u8868\u793a\u4e00\u4e2aObjctive-C\u5bf9\u8c61\uff0c\u8fd9\u4e2a\u5bf9\u8c61\u7684\u6307\u9488\u6307\u5411\u7a7a\uff08\u6ca1\u6709\u4e1c\u897f\u5c31\u662f\u7a7a\uff09\u3002\r\n\u9996\u5b57\u6bcd\u5927\u5199\u7684Nil\u548cnil\u6709\u4e00\u70b9\u4e0d\u4e00\u6837\uff0cNil\u5b9a\u4e49\u4e00\u4e2a\u6307\u5411\u7a7a\u7684\u7c7b\uff08\u662fClass\uff0c\u800c\u4e0d\u662f\u5bf9\u8c61\uff09\u3002\r\nSEL\u662f\u201cselector\u201d\u7684\u4e00\u4e2a\u7c7b\u578b\uff0c\u8868\u793a\u4e00\u4e2a\u65b9\u6cd5\u7684\u540d\u5b57\r\nMethod\uff08\u6211\u4eec\u5e38\u8bf4\u7684\u65b9\u6cd5\uff09\u8868\u793a\u4e00\u79cd\u7c7b\u578b\uff0c\u8fd9\u79cd\u7c7b\u578b\u4e0eselector\u548c\u5b9e\u73b0(implementation)\u76f8\u5173\r\nIMP\u5b9a\u4e49\u4e3a id (*IMP) (id, SEL, \u2026)\u3002\u8fd9\u6837\u8bf4\u6765\uff0c IMP\u662f\u4e00\u4e2a\u6307\u5411\u51fd\u6570\u7684\u6307\u9488\uff0c\u8fd9\u4e2a\u88ab\u6307\u5411\u7684\u51fd\u6570\u5305\u62ecid(\u201cself\u201d\u6307\u9488)\uff0c\u8c03\u7528\u7684SEL\uff08\u65b9\u6cd5\u540d\uff09\uff0c\u518d\u52a0\u4e0a\u4e00\u4e9b\u5176\u4ed6\u53c2\u6570.\u8bf4\u767d\u4e86IMP\u5c31\u662f\u5b9e\u73b0\u65b9\u6cd5\u3002"},{"ID":"477","typeID":"10","question":"\u5c42\u548cUIView\u7684\u533a\u522b\u662f\u4ec0\u4e48\uff1f","answer":"\u4e24\u8005\u6700\u5927\u7684\u533a\u522b\u662f,\u56fe\u5c42\u4e0d\u4f1a\u76f4\u63a5\u6e32\u67d3\u5230\u5c4f\u5e55\u4e0a\uff0cUIView\u662fiOS\u7cfb\u7edf\u4e2d\u754c\u9762\u5143\u7d20\u7684\u57fa\u7840\uff0c\u6240\u6709\u7684\u754c\u9762\u5143\u7d20\u90fd\u662f\u7ee7\u627f\u81ea\u5b83\u3002\u5b83\u672c\u8eab\u5b8c\u5168\u662f\u7531CoreAnimation\u6765\u5b9e\u73b0\u7684\u3002\u5b83\u771f\u6b63\u7684\u7ed8\u56fe\u90e8\u5206\uff0c\u662f\u7531\u4e00\u4e2aCALayer\u7c7b\u6765\u7ba1\u7406\u3002UIView\u672c\u8eab\u66f4\u50cf\u662f\u4e00\u4e2aCALayer\u7684\u7ba1\u7406\u5668\u3002\u4e00\u4e2aUIView\u4e0a\u53ef\u4ee5\u6709n\u4e2aCALayer\uff0c\u6bcf\u4e2alayer\u663e\u793a\u4e00\u79cd\u4e1c\u897f\uff0c\u589e\u5f3aUIView\u7684\u5c55\u73b0\u80fd\u529b\u3002"},{"ID":"475","typeID":"10","question":"APNS \u5b9e\u73b0\u6b65\u9aa4","answer":"APNS \u662fApple Push Notification Service\uff08Apple Push\u670d\u52a1\u5668\uff09\u7684\u7f29\u5199\uff0c\u662f\u82f9\u679c\u7684\u670d\u52a1\u5668\u3002\r\n\r\n\u7b2c\u4e00\u9636\u6bb5\uff1a.net\u5e94\u7528\u7a0b\u5e8f\u628a\u8981\u53d1\u9001\u7684\u6d88\u606f\u3001\u76ee\u7684iPhone\u7684\u6807\u8bc6\u6253\u5305\uff0c\u53d1\u7ed9APNS\u3002 \r\n\u7b2c\u4e8c\u9636\u6bb5\uff1aAPNS\u5728\u81ea\u8eab\u7684\u5df2\u6ce8\u518cPush\u670d\u52a1\u7684iPhone\u5217\u8868\u4e2d\uff0c\u67e5\u627e\u6709\u76f8\u5e94\u6807\u8bc6\u7684iPhone\uff0c\u5e76\u628a\u6d88\u606f\u53d1\u5230iPhone\u3002 \r\n\u7b2c\u4e09\u9636\u6bb5\uff1aiPhone\u628a\u53d1\u6765\u7684\u6d88\u606f\u4f20\u9012\u7ed9\u76f8\u5e94\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c \u5e76\u4e14\u6309\u7167\u8bbe\u5b9a\u5f39\u51faPush\u901a\u77e5\u3002\r\nhttp:\/\/blog.csdn.net\/zhuqilin0\/article\/details\/6527113    \/\/\u6d88\u606f\u63a8\u9001\u673a\u5236\r\n"},{"ID":"473","typeID":"10","question":"ASIDownloadCache \u8bbe\u7f6e\u4e0b\u8f7d\u7f13\u5b58","answer":"\u5b83\u5bf9Get\u8bf7\u6c42\u7684\u54cd\u5e94\u6570\u636e\u8fdb\u884c\u7f13\u5b58\uff08\u88ab\u7f13\u5b58\u7684\u6570\u636e\u5fc5\u9700\u662f\u6210\u529f\u7684200\u8bf7\u6c42\uff09\uff1a\r\n[ASIHTTPRequest setDefaultCache:[ASIDownloadCache sharedCache]];\r\n\u5f53\u8bbe\u7f6e\u7f13\u5b58\u7b56\u7565\u540e\uff0c\u6240\u6709\u7684\u8bf7\u6c42\u90fd\u88ab\u81ea\u52a8\u7684\u7f13\u5b58\u8d77\u6765\u3002\r\n\u53e6\u5916\uff0c\u5982\u679c\u4ec5\u4ec5\u5e0c\u671b\u67d0\u6b21\u8bf7\u6c42\u4f7f\u7528\u7f13\u5b58\u64cd\u4f5c\uff0c\u4e5f\u53ef\u4ee5\u8fd9\u6837\u4f7f\u7528\uff1a\r\nASIHTTPRequest *request = [ASIHTTPRequest requestWithURL:url];\r\n[request setDownloadCache:[ASIDownloadCache sharedCache]];\r\n\u7f13\u5b58\u5b58\u50a8\u65b9\u5f0f\r\n\u4f60\u53ef\u4ee5\u8bbe\u7f6e\u7f13\u5b58\u7684\u6570\u636e\u9700\u8981\u4fdd\u5b58\u591a\u957f\u65f6\u95f4\uff0cASIHTTPRequest\u63d0\u4f9b\u4e86\u4e24\u79cd\u7b56\u7565\uff1a\r\na\uff0cASICacheForSessionDurationCacheStoragePolicy\uff0c\u9ed8\u8ba4\u7b56\u7565\uff0c\u57fa\u4e8esession\u7684\u7f13\u5b58\u6570\u636e\u5b58\u50a8\u3002\u5f53\u4e0b\u6b21\u8fd0\u884c\u6216[ASIHTTPRequest clearSession]\u65f6\uff0c\u7f13\u5b58\u5c06\u5931\u6548\u3002\r\nb\uff0cASICachePermanentlyCacheStoragePolicy\uff0c\u628a\u7f13\u5b58\u6570\u636e\u6c38\u4e45\u4fdd\u5b58\u5728\u672c\u5730\uff0c\r\n\u5982\uff1a\r\nASIHTTPRequest *request = [ ASIHTTPRequest requestWithURL:url ];\r\n[ request setCacheStoragePolicy:ASICachePermanentlyCacheStoragePolicy ];"},{"ID":"471","typeID":"10","question":"HTTP\u534f\u8bae\u8be6\u89e3","answer":"HTTP\u662f\u4e00\u4e2a\u5c5e\u4e8e\u5e94\u7528\u5c42\u7684\u9762\u5411\u5bf9\u8c61\u7684\u534f\u8bae\uff0c\u7531\u4e8e\u5176\u7b80\u6377\u3001\u5feb\u901f\u7684\u65b9\u5f0f\uff0c\u9002\u7528\u4e8e\u5206\u5e03\u5f0f\u8d85\u5a92\u4f53\u4fe1\u606f\u7cfb\u7edf\u3002\u76ee\u524d\u5728WWW\u4e2d\u4f7f\u7528\u7684\u662fHTTP\/1.0\u7684\u7b2c\u516d\u7248\uff0cHTTP\/1.1\u7684\u89c4\u8303\u5316\u5de5\u4f5c\u6b63\u5728\u8fdb\u884c\u4e4b\u4e2d\u3002\r\nhttp\uff08\u8d85\u6587\u672c\u4f20\u8f93\u534f\u8bae\uff09\u662f\u4e00\u4e2a\u57fa\u4e8e\u8bf7\u6c42\u4e0e\u54cd\u5e94\u6a21\u5f0f\u7684\u3001\u65e0\u72b6\u6001\u7684\u3001\u5e94\u7528\u5c42\u7684\u534f\u8bae\uff0c\u5e38\u57fa\u4e8eTCP\u7684\u8fde\u63a5\u65b9\u5f0f\uff0cHTTP1.1\u7248\u672c\u4e2d\u7ed9\u51fa\u4e00\u79cd\u6301\u7eed\u8fde\u63a5\u7684\u673a\u5236\uff0c\u7edd\u5927\u591a\u6570\u7684Web\u5f00\u53d1\uff0c\u90fd\u662f\u6784\u5efa\u5728HTTP\u534f\u8bae\u4e4b\u4e0a\u7684Web\u5e94\u7528\u3002\r\nHTTP\u534f\u8bae\u7684\u4e3b\u8981\u7279\u70b9\u53ef\u6982\u62ec\u5982\u4e0b\uff1a\r\n1.\u652f\u6301\u5ba2\u6237\/\u670d\u52a1\u5668\u6a21\u5f0f\u3002\r\n2.\u7b80\u5355\u5feb\u901f\uff1a\u5ba2\u6237\u5411\u670d\u52a1\u5668\u8bf7\u6c42\u670d\u52a1\u65f6\uff0c\u53ea\u9700\u4f20\u9001\u8bf7\u6c42\u65b9\u6cd5\u548c\u8def\u5f84\u3002\u8bf7\u6c42\u65b9\u6cd5\u5e38\u7528\u7684\u6709GET\u3001HEAD\u3001POST\u3002\u6bcf\u79cd\u65b9\u6cd5\u89c4\u5b9a\u4e86\u5ba2\u6237\u4e0e\u670d\u52a1\u5668\u8054\u7cfb\u7684\u7c7b\u578b\u4e0d\u540c\u3002\u7531\u4e8eHTTP\u534f\u8bae\u7b80\u5355\uff0c\u4f7f\u5f97HTTP\u670d\u52a1\u5668\u7684\u7a0b\u5e8f\u89c4\u6a21\u5c0f\uff0c\u56e0\u800c\u901a\u4fe1\u901f\u5ea6\u5f88\u5feb\u3002\r\n3.\u7075\u6d3b\uff1aHTTP\u5141\u8bb8\u4f20\u8f93\u4efb\u610f\u7c7b\u578b\u7684\u6570\u636e\u5bf9\u8c61\u3002\u6b63\u5728\u4f20\u8f93\u7684\u7c7b\u578b\u7531Content-Type\u52a0\u4ee5\u6807\u8bb0\u3002\r\n4.\u65e0\u8fde\u63a5\uff1a\u65e0\u8fde\u63a5\u7684\u542b\u4e49\u662f\u9650\u5236\u6bcf\u6b21\u8fde\u63a5\u53ea\u5904\u7406\u4e00\u4e2a\u8bf7\u6c42\u3002\u670d\u52a1\u5668\u5904\u7406\u5b8c\u5ba2\u6237\u7684\u8bf7\u6c42\uff0c\u5e76\u6536\u5230\u5ba2\u6237\u7684\u5e94\u7b54\u540e\uff0c\u5373\u65ad\u5f00\u8fde\u63a5\u3002\u91c7\u7528\u8fd9\u79cd\u65b9\u5f0f\u53ef\u4ee5\u8282\u7701\u4f20\u8f93\u65f6\u95f4\u3002\r\n5.\u65e0\u72b6\u6001\uff1aHTTP\u534f\u8bae\u662f\u65e0\u72b6\u6001\u534f\u8bae\u3002\u65e0\u72b6\u6001\u662f\u6307\u534f\u8bae\u5bf9\u4e8e\u4e8b\u52a1\u5904\u7406\u6ca1\u6709\u8bb0\u5fc6\u80fd\u529b\u3002\u7f3a\u5c11\u72b6\u6001\u610f\u5473\u7740\u5982\u679c\u540e\u7eed\u5904\u7406\u9700\u8981\u524d\u9762\u7684\u4fe1\u606f\uff0c\u5219\u5b83\u5fc5\u987b\u91cd\u4f20\uff0c\u8fd9\u6837\u53ef\u80fd\u5bfc\u81f4\u6bcf\u6b21\u8fde\u63a5\u4f20\u9001\u7684\u6570\u636e\u91cf\u589e\u5927\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u5728\u670d\u52a1\u5668\u4e0d\u9700\u8981\u5148\u524d\u4fe1\u606f\u65f6\u5b83\u7684\u5e94\u7b54\u5c31\u8f83\u5feb\u3002"},{"ID":"470","typeID":"10","question":"TCP\/UDP\u533a\u522b\u8054\u7cfb","answer":"TCP---\u4f20\u8f93\u63a7\u5236\u534f\u8bae,\u63d0\u4f9b\u7684\u662f\u9762\u5411\u8fde\u63a5\u3001\u53ef\u9760\u7684\u5b57\u8282\u6d41\u670d\u52a1\u3002\u5f53\u5ba2\u6237\u548c\u670d\u52a1\u5668\u5f7c\u6b64\u4ea4\u6362\u6570\u636e\u524d\uff0c\u5fc5\u987b\u5148\u5728\u53cc\u65b9\u4e4b\u95f4\u5efa\u7acb\u4e00\u4e2aTCP\u8fde\u63a5\uff0c\u4e4b\u540e\u624d\u80fd\u4f20\u8f93\u6570\u636e\u3002TCP\u63d0\u4f9b\u8d85\u65f6\u91cd\u53d1\uff0c\u4e22\u5f03\u91cd\u590d\u6570\u636e\uff0c\u68c0\u9a8c\u6570\u636e\uff0c\u6d41\u91cf\u63a7\u5236\u7b49\u529f\u80fd\uff0c\u4fdd\u8bc1\u6570\u636e\u80fd\u4ece\u4e00\u7aef\u4f20\u5230\u53e6\u4e00\u7aef\u3002\r\nUDP---\u7528\u6237\u6570\u636e\u62a5\u534f\u8bae\uff0c\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u9762\u5411\u6570\u636e\u62a5\u7684\u8fd0\u8f93\u5c42\u534f\u8bae\u3002UDP\u4e0d\u63d0\u4f9b\u53ef\u9760\u6027\uff0c\u5b83\u53ea\u662f\u628a\u5e94\u7528\u7a0b\u5e8f\u4f20\u7ed9IP\u5c42\u7684\u6570\u636e\u62a5\u53d1\u9001\u51fa\u53bb\uff0c\u4f46\u662f\u5e76\u4e0d\u80fd\u4fdd\u8bc1\u5b83\u4eec\u80fd\u5230\u8fbe\u76ee\u7684\u5730\u3002\u7531\u4e8eUDP\u5728\u4f20\u8f93\u6570\u636e\u62a5\u524d\u4e0d\u7528\u5728\u5ba2\u6237\u548c\u670d\u52a1\u5668\u4e4b\u95f4\u5efa\u7acb\u4e00\u4e2a\u8fde\u63a5\uff0c\u4e14\u6ca1\u6709\u8d85\u65f6\u91cd\u53d1\u7b49\u673a\u5236\uff0c\u6545\u800c\u4f20\u8f93\u901f\u5ea6\u5f88\u5feb\r\nTCP\uff08Transmission Control Protocol\uff0c\u4f20\u8f93\u63a7\u5236\u534f\u8bae\uff09\u662f\u57fa\u4e8e\u8fde\u63a5\u7684\u534f\u8bae\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u6b63\u5f0f\u6536\u53d1\u6570\u636e\u524d\uff0c\u5fc5\u987b\u548c\u5bf9\u65b9\u5efa\u7acb\u53ef\u9760\u7684\u8fde\u63a5\u3002\u4e00\u4e2aTCP\u8fde\u63a5\u5fc5\u987b\u8981\u7ecf\u8fc7\u4e09\u6b21\u201c\u5bf9\u8bdd\u201d\u624d\u80fd\u5efa\u7acb\u8d77\u6765\uff0c\u6211\u4eec\u6765\u770b\u770b\u8fd9\u4e09\u6b21\u5bf9\u8bdd\u7684\u7b80\u5355\u8fc7\u7a0b\uff1a1.\u4e3b\u673aA\u5411\u4e3b\u673aB\u53d1\u51fa\u8fde\u63a5\u8bf7\u6c42\u6570\u636e\u5305\uff1b2.\u4e3b\u673aB\u5411\u4e3b\u673aA\u53d1\u9001\u540c\u610f\u8fde\u63a5\u548c\u8981\u6c42\u540c\u6b65\uff08\u540c\u6b65\u5c31\u662f\u4e24\u53f0\u4e3b\u673a\u4e00\u4e2a\u5728\u53d1\u9001\uff0c\u4e00\u4e2a\u5728\u63a5\u6536\uff0c\u534f\u8c03\u5de5\u4f5c\uff09\u7684\u6570\u636e\u5305\uff1b3.\u4e3b\u673aA\u518d\u53d1\u51fa\u4e00\u4e2a\u6570\u636e\u5305\u786e\u8ba4\u4e3b\u673aB\u7684\u8981\u6c42\u540c\u6b65\uff1a\u201c\u6211\u73b0\u5728\u5c31\u53d1\uff0c\u4f60\u63a5\u7740\u5427\uff01\u201d\uff0c\u8fd9\u662f\u7b2c\u4e09\u6b21\u5bf9\u8bdd\u3002\u4e09\u6b21\u201c\u5bf9\u8bdd\u201d\u7684\u76ee\u7684\u662f\u4f7f\u6570\u636e\u5305\u7684\u53d1\u9001\u548c\u63a5\u6536\u540c\u6b65\uff0c\u7ecf\u8fc7\u4e09\u6b21\u201c\u5bf9\u8bdd\u201d\u4e4b\u540e\uff0c\u4e3b\u673aA\u624d\u5411\u4e3b\u673aB\u6b63\u5f0f\u53d1\u9001\u6570\u636e\u3002\r\nUDP\uff08User Data Protocol\uff0c\u7528\u6237\u6570\u636e\u62a5\u534f\u8bae\uff09\u662f\u4e0eTCP\u76f8\u5bf9\u5e94\u7684\u534f\u8bae\u3002\u5b83\u662f\u9762\u5411\u975e\u8fde\u63a5\u7684\u534f\u8bae\uff0c\u5b83\u4e0d\u4e0e\u5bf9\u65b9\u5efa\u7acb\u8fde\u63a5\uff0c\u800c\u662f\u76f4\u63a5\u5c31\u628a\u6570\u636e\u5305\u53d1\u9001\u8fc7\u53bb\uff01  UDP\u9002\u7528\u4e8e\u4e00\u6b21\u53ea\u4f20\u9001\u5c11\u91cf\u6570\u636e\u3001\u5bf9\u53ef\u9760\u6027\u8981\u6c42\u4e0d\u9ad8\u7684\u5e94\u7528\u73af\u5883\u3002\r\ntcp\u534f\u8bae\u548cudp\u534f\u8bae\u7684\u5dee\u522b\r\n\u662f\u5426\u8fde\u63a5 \u9762\u5411\u8fde\u63a5 \u9762\u5411\u975e\u8fde\u63a5\r\n\u4f20\u8f93\u53ef\u9760\u6027 \u53ef\u9760 \u4e0d\u53ef\u9760\r\n\u5e94\u7528\u573a\u5408 \u4f20\u8f93\u5927\u91cf\u6570\u636e \u5c11\u91cf\u6570\u636e\r\n\u901f\u5ea6 \u6162 \u5feb"},{"ID":"469","typeID":"10","question":"socket\u8fde\u63a5\u548chttp\u8fde\u63a5\u7684\u533a\u522b","answer":"\u7b80\u5355\u8bf4\uff0c\u4f60\u6d4f\u89c8\u7684\u7f51\u9875\uff08\u7f51\u5740\u4ee5http:\/\/\u5f00\u5934)\u90fd\u662fhttp\u534f\u8bae\u4f20\u8f93\u5230\u4f60\u7684\u6d4f\u89c8\u5668\u7684, \u800chttp\u662f\u57fa\u4e8esocket\u4e4b\u4e0a\u7684\u3002socket\u662f\u4e00\u5957\u5b8c\u6210tcp\uff0cudp\u534f\u8bae\u7684\u63a5\u53e3\u3002\r\nHTTP\u534f\u8bae\uff1a\u7b80\u5355\u5bf9\u8c61\u8bbf\u95ee\u534f\u8bae\uff0c\u5bf9\u5e94\u4e8e\u5e94\u7528\u5c42  \uff0cHTTP\u534f\u8bae\u662f\u57fa\u4e8eTCP\u8fde\u63a5\u7684\r\ntcp\u534f\u8bae\uff1a    \u5bf9\u5e94\u4e8e\u4f20\u8f93\u5c42\r\nip\u534f\u8bae\uff1a     \u5bf9\u5e94\u4e8e\u7f51\u7edc\u5c42 \r\nTCP\/IP\u662f\u4f20\u8f93\u5c42\u534f\u8bae\uff0c\u4e3b\u8981\u89e3\u51b3\u6570\u636e\u5982\u4f55\u5728\u7f51\u7edc\u4e2d\u4f20\u8f93\uff1b\u800cHTTP\u662f\u5e94\u7528\u5c42\u534f\u8bae\uff0c\u4e3b\u8981\u89e3\u51b3\u5982\u4f55\u5305\u88c5\u6570\u636e\u3002\r\nSocket\u662f\u5bf9TCP\/IP\u534f\u8bae\u7684\u5c01\u88c5\uff0cSocket\u672c\u8eab\u5e76\u4e0d\u662f\u534f\u8bae\uff0c\u800c\u662f\u4e00\u4e2a\u8c03\u7528\u63a5\u53e3\uff08API\uff09\uff0c\u901a\u8fc7Socket\uff0c\u6211\u4eec\u624d\u80fd\u4f7f\u7528TCP\/IP\u534f\u8bae\u3002\r\nhttp\u8fde\u63a5\uff1ahttp\u8fde\u63a5\u5c31\u662f\u6240\u8c13\u7684\u77ed\u8fde\u63a5\uff0c\u5373\u5ba2\u6237\u7aef\u5411\u670d\u52a1\u5668\u7aef\u53d1\u9001\u4e00\u6b21\u8bf7\u6c42\uff0c\u670d\u52a1\u5668\u7aef\u54cd\u5e94\u540e\u8fde\u63a5\u5373\u4f1a\u65ad\u6389\uff1b\r\nsocket\u8fde\u63a5\uff1asocket\u8fde\u63a5\u5c31\u662f\u6240\u8c13\u7684\u957f\u8fde\u63a5\uff0c\u7406\u8bba\u4e0a\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u7aef\u4e00\u65e6\u5efa\u7acb\u8d77\u8fde\u63a5\u5c06\u4e0d\u4f1a\u4e3b\u52a8\u65ad\u6389\uff1b\u4f46\u662f\u7531\u4e8e\u5404\u79cd\u73af\u5883\u56e0\u7d20\u53ef\u80fd\u4f1a\u662f\u8fde\u63a5\u65ad\u5f00\uff0c\u6bd4\u5982\u8bf4\uff1a\u670d\u52a1\u5668\u7aef\u6216\u5ba2\u6237\u7aef\u4e3b\u673adown\u4e86\uff0c\u7f51\u7edc\u6545\u969c\uff0c\u6216\u8005\u4e24\u8005\u4e4b\u95f4\u957f\u65f6\u95f4\u6ca1\u6709\u6570\u636e\u4f20\u8f93\uff0c\u7f51\u7edc\u9632\u706b\u5899\u53ef\u80fd\u4f1a\u65ad\u5f00\u8be5\u8fde\u63a5\u4ee5\u91ca\u653e\u7f51\u7edc\u8d44\u6e90\u3002\u6240\u4ee5\u5f53\u4e00\u4e2asocket\u8fde\u63a5\u4e2d\u6ca1\u6709\u6570\u636e\u7684\u4f20\u8f93\uff0c\u90a3\u4e48\u4e3a\u4e86\u7ef4\u6301\u8fde\u63a5\u9700\u8981\u53d1\u9001\u5fc3\u8df3\u6d88\u606f~~\u5177\u4f53\u5fc3\u8df3\u6d88\u606f\u683c\u5f0f\u662f\u5f00\u53d1\u8005\u81ea\u5df1\u5b9a\u4e49\u7684\r\n\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u7f51\u7edc\u4e2d\u7684\u8fdb\u7a0b\u662f\u901a\u8fc7socket\u6765\u901a\u4fe1\u7684\uff0c\u90a3\u4ec0\u4e48\u662fsocket\u5462\uff1fsocket\u8d77\u6e90\u4e8eUnix\uff0c\u800cUnix\/Linux\u57fa\u672c\u54f2\u5b66\u4e4b\u4e00\u5c31\u662f\u201c\u4e00\u5207\u7686\u6587\u4ef6\u201d\uff0c\u90fd\u53ef\u4ee5\u7528\u201c\u6253\u5f00open \u2013> \u8bfb\u5199write\/read \u2013> \u5173\u95edclose\u201d\u6a21\u5f0f\u6765\u64cd\u4f5c\u3002\u6211\u7684\u7406\u89e3\u5c31\u662fSocket\u5c31\u662f\u8be5\u6a21\u5f0f\u7684\u4e00\u4e2a\u5b9e\u73b0\uff0csocket\u5373\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u6587\u4ef6\uff0c\u4e00\u4e9bsocket\u51fd\u6570\u5c31\u662f\u5bf9\u5176\u8fdb\u884c\u7684\u64cd\u4f5c\uff08\u8bfb\/\u5199IO\u3001\u6253\u5f00\u3001\u5173\u95ed\uff09\uff0c\u8fd9\u4e9b\u51fd\u6570\u6211\u4eec\u5728\u540e\u9762\u8fdb\u884c\u4ecb\u7ecd\u3002\u6211\u4eec\u5728\u4f20\u8f93\u6570\u636e\u65f6\uff0c\u53ef\u4ee5\u53ea\u4f7f\u7528\uff08\u4f20\u8f93\u5c42\uff09TCP\/IP\u534f\u8bae\uff0c\u4f46\u662f\u90a3\u6837\u7684\u8bdd\uff0c\u5982\u679c\u6ca1\u6709\u5e94\u7528\u5c42\uff0c\u4fbf\u65e0\u6cd5\u8bc6\u522b\u6570\u636e\u5185\u5bb9\uff0c\u5982\u679c\u60f3\u8981\u4f7f\u4f20\u8f93\u7684\u6570\u636e\u6709\u610f\u4e49\uff0c\u5219\u5fc5\u987b\u4f7f\u7528\u5230\u5e94\u7528\u5c42\u534f\u8bae\uff0c\u5e94\u7528\u5c42\u534f\u8bae\u6709\u5f88\u591a\uff0c\u6bd4\u5982HTTP\u3001FTP\u3001TELNET\u7b49\uff0c\u4e5f\u53ef\u4ee5\u81ea\u5df1\u5b9a\u4e49\u5e94\u7528\u5c42\u534f\u8bae\u3002WEB\u4f7f\u7528HTTP\u534f\u8bae\u4f5c\u5e94\u7528\u5c42\u534f\u8bae\uff0c\u4ee5\u5c01\u88c5HTTP\u6587\u672c\u4fe1\u606f\uff0c\u7136\u540e\u4f7f\u7528TCP\/IP\u505a\u4f20\u8f93\u5c42\u534f\u8bae\u5c06\u5b83\u53d1\u5230\u7f51\u7edc\u4e0a\u3002\r\n1)Socket\u662f\u4e00\u4e2a\u9488\u5bf9TCP\u548cUDP\u7f16\u7a0b\u7684\u63a5\u53e3\uff0c\u4f60\u53ef\u4ee5\u501f\u52a9\u5b83\u5efa\u7acbTCP\u8fde\u63a5\u7b49\u7b49\u3002\u800cTCP\u548cUDP\u534f\u8bae\u5c5e\u4e8e\u4f20\u8f93\u5c42 \u3002\r\n  \u800chttp\u662f\u4e2a\u5e94\u7528\u5c42\u7684\u534f\u8bae\uff0c\u5b83\u5b9e\u9645\u4e0a\u4e5f\u5efa\u7acb\u5728TCP\u534f\u8bae\u4e4b\u4e0a\u3002\r\n(HTTP\u662f\u8f7f\u8f66\uff0c\u63d0\u4f9b\u4e86\u5c01\u88c5\u6216\u8005\u663e\u793a\u6570\u636e\u7684\u5177\u4f53\u5f62\u5f0f\uff1bSocket\u662f\u53d1\u52a8\u673a\uff0c\u63d0\u4f9b\u4e86\u7f51\u7edc\u901a\u4fe1\u7684\u80fd\u529b\u3002)\r\n2\uff09Socket\u662f\u5bf9TCP\/IP\u534f\u8bae\u7684\u5c01\u88c5\uff0cSocket\u672c\u8eab\u5e76\u4e0d\u662f\u534f\u8bae\uff0c\u800c\u662f\u4e00\u4e2a\u8c03\u7528\u63a5\u53e3\uff08API\uff09\uff0c\u901a\u8fc7Socket\uff0c\u6211\u4eec\u624d\u80fd\u4f7f\u7528TCP\/IP\u534f\u8bae\u3002Socket\u7684\u51fa\u73b0\u53ea\u662f\u4f7f\u5f97\u7a0b\u5e8f\u5458\u66f4\u65b9\u4fbf\u5730\u4f7f\u7528TCP\/IP\u534f\u8bae\u6808\u800c\u5df2\uff0c\u662f\u5bf9TCP\/IP\u534f\u8bae\u7684\u62bd\u8c61\uff0c\u4ece\u800c\u5f62\u6210\u4e86\u6211\u4eec\u77e5\u9053\u7684\u4e00\u4e9b\u6700\u57fa\u672c\u7684\u51fd\u6570\u63a5\u53e3\u3002"},{"ID":"468","typeID":"10","question":"\u4ec0\u4e48\u662fTCP\u8fde\u63a5\u7684\u4e09\u6b21\u63e1\u624b","answer":"\u7b2c\u4e00\u6b21\u63e1\u624b\uff1a\u5ba2\u6237\u7aef\u53d1\u9001syn\u5305(syn=j)\u5230\u670d\u52a1\u5668\uff0c\u5e76\u8fdb\u5165SYN_SEND\u72b6\u6001\uff0c\u7b49\u5f85\u670d\u52a1\u5668\u786e\u8ba4\uff1b\r\n\u7b2c\u4e8c\u6b21\u63e1\u624b\uff1a\u670d\u52a1\u5668\u6536\u5230syn\u5305\uff0c\u5fc5\u987b\u786e\u8ba4\u5ba2\u6237\u7684SYN\uff08ack=j+1\uff09\uff0c\u540c\u65f6\u81ea\u5df1\u4e5f\u53d1\u9001\u4e00\u4e2aSYN\u5305\uff08syn=k\uff09\uff0c\u5373SYN+ACK\u5305\uff0c\u6b64\u65f6\u670d\u52a1\u5668\u8fdb\u5165SYN_RECV\u72b6\u6001\uff1b\r\n\u7b2c\u4e09\u6b21\u63e1\u624b\uff1a\u5ba2\u6237\u7aef\u6536\u5230\u670d\u52a1\u5668\u7684SYN\uff0bACK\u5305\uff0c\u5411\u670d\u52a1\u5668\u53d1\u9001\u786e\u8ba4\u5305ACK(ack=k+1)\uff0c\u6b64\u5305\u53d1\u9001\u5b8c\u6bd5\uff0c\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u8fdb\u5165ESTABLISHED\u72b6\u6001\uff0c\u5b8c\u6210\u4e09\u6b21\u63e1\u624b\u3002\r\n\u63e1\u624b\u8fc7\u7a0b\u4e2d\u4f20\u9001\u7684\u5305\u91cc\u4e0d\u5305\u542b\u6570\u636e\uff0c\u4e09\u6b21\u63e1\u624b\u5b8c\u6bd5\u540e\uff0c\u5ba2\u6237\u7aef\u4e0e\u670d\u52a1\u5668\u624d\u6b63\u5f0f\u5f00\u59cb\u4f20\u9001\u6570\u636e\u3002\u7406\u60f3\u72b6\u6001\u4e0b\uff0cTCP\u8fde\u63a5\u4e00\u65e6\u5efa\u7acb\uff0c\u5728\u901a\u4fe1\u53cc\u65b9\u4e2d\u7684\u4efb\u4f55\u4e00\u65b9\u4e3b\u52a8\u5173\u95ed\u8fde\u63a5\u4e4b\u524d\uff0cTCP \u8fde\u63a5\u90fd\u5c06\u88ab\u4e00\u76f4\u4fdd\u6301\u4e0b\u53bb\u3002\u65ad\u5f00\u8fde\u63a5\u65f6\u670d\u52a1\u5668\u548c\u5ba2\u6237\u7aef\u5747\u53ef\u4ee5\u4e3b\u52a8\u53d1\u8d77\u65ad\u5f00TCP\u8fde\u63a5\u7684\u8bf7\u6c42\uff0c\u65ad\u5f00\u8fc7\u7a0b\u9700\u8981\u7ecf\u8fc7\u201c\u56db\u6b21\u63e1\u624b\u201d\uff08\u8fc7\u7a0b\u5c31\u4e0d\u7ec6\u5199\u4e86\uff0c\u5c31\u662f\u670d\u52a1\u5668\u548c\u5ba2\u6237\u7aef\u4ea4\u4e92\uff0c\u6700\u7ec8\u786e\u5b9a\u65ad\u5f00\uff09"},{"ID":"467","typeID":"10","question":"\u5229\u7528Socket\u5efa\u7acb\u7f51\u7edc\u8fde\u63a5\u7684\u6b65\u9aa4","answer":"\u5efa\u7acbSocket\u8fde\u63a5\u81f3\u5c11\u9700\u8981\u4e00\u5bf9\u5957\u63a5\u5b57\uff0c\u5176\u4e2d\u4e00\u4e2a\u8fd0\u884c\u4e8e\u5ba2\u6237\u7aef\uff0c\u79f0\u4e3aClientSocket \uff0c\u53e6\u4e00\u4e2a\u8fd0\u884c\u4e8e\u670d\u52a1\u5668\u7aef\uff0c\u79f0\u4e3aServerSocket \u3002\r\n\u5957\u63a5\u5b57\u4e4b\u95f4\u7684\u8fde\u63a5\u8fc7\u7a0b\u5206\u4e3a\u4e09\u4e2a\u6b65\u9aa4\uff1a\u670d\u52a1\u5668\u76d1\u542c\uff0c\u5ba2\u6237\u7aef\u8bf7\u6c42\uff0c\u8fde\u63a5\u786e\u8ba4\u3002\r\n1\u3002\u670d\u52a1\u5668\u76d1\u542c\uff1a\u670d\u52a1\u5668\u7aef\u5957\u63a5\u5b57\u5e76\u4e0d\u5b9a\u4f4d\u5177\u4f53\u7684\u5ba2\u6237\u7aef\u5957\u63a5\u5b57\uff0c\u800c\u662f\u5904\u4e8e\u7b49\u5f85\u8fde\u63a5\u7684\u72b6\u6001\uff0c\u5b9e\u65f6\u76d1\u63a7\u7f51\u7edc\u72b6\u6001\uff0c\u7b49\u5f85\u5ba2\u6237\u7aef\u7684\u8fde\u63a5\u8bf7\u6c42\u3002\r\n2\u3002\u5ba2\u6237\u7aef\u8bf7\u6c42\uff1a\u6307\u5ba2\u6237\u7aef\u7684\u5957\u63a5\u5b57\u63d0\u51fa\u8fde\u63a5\u8bf7\u6c42\uff0c\u8981\u8fde\u63a5\u7684\u76ee\u6807\u662f\u670d\u52a1\u5668\u7aef\u7684\u5957\u63a5\u5b57\u3002\u4e3a\u6b64\uff0c\u5ba2\u6237\u7aef\u7684\u5957\u63a5\u5b57\u5fc5\u987b\u9996\u5148\u63cf\u8ff0\u5b83\u8981\u8fde\u63a5\u7684\u670d\u52a1\u5668\u7684\u5957\u63a5\u5b57\uff0c\u6307\u51fa\u670d\u52a1\u5668\u7aef\u5957\u63a5\u5b57\u7684\u5730\u5740\u548c\u7aef\u53e3\u53f7\uff0c\u7136\u540e\u5c31\u5411\u670d\u52a1\u5668\u7aef\u5957\u63a5\u5b57\u63d0\u51fa\u8fde\u63a5\u8bf7\u6c42\u3002\r\n3\u3002\u8fde\u63a5\u786e\u8ba4\uff1a\u5f53\u670d\u52a1\u5668\u7aef\u5957\u63a5\u5b57\u76d1\u542c\u5230\u6216\u8005\u8bf4\u63a5\u6536\u5230\u5ba2\u6237\u7aef\u5957\u63a5\u5b57\u7684\u8fde\u63a5\u8bf7\u6c42\u65f6\uff0c\u5c31\u54cd\u5e94\u5ba2\u6237\u7aef\u5957\u63a5\u5b57\u7684\u8bf7\u6c42\uff0c\u5efa\u7acb\u4e00\u4e2a\u65b0\u7684\u7ebf\u7a0b\uff0c\u628a\u670d\u52a1\u5668\u7aef\u5957\u63a5\u5b57\u7684\u63cf\u8ff0\u53d1\u7ed9\u5ba2\u6237\u7aef\uff0c\u4e00\u65e6\u5ba2\u6237\u7aef\u786e\u8ba4\u4e86\u6b64\u63cf\u8ff0\uff0c\u53cc\u65b9\u5c31\u6b63\u5f0f\u5efa\u7acb\u8fde\u63a5\u3002\u800c\u670d\u52a1\u5668\u7aef\u5957\u63a5\u5b57\u7ee7\u7eed\u5904\u4e8e\u76d1\u542c\u72b6\u6001\uff0c\u7ee7\u7eed\u63a5\u6536\u5176\u4ed6\u5ba2\u6237\u7aef\u5957\u63a5\u5b57\u7684\u8fde\u63a5\u8bf7\u6c42\u3002"},{"ID":"466","typeID":"10","question":"\u4ec0\u4e48\u662fTCP\u8fde\u63a5\u7684\u4e09\u6b21\u63e1\u624b","answer":"\u7b2c\u4e00\u6b21\u63e1\u624b\uff1a\u5ba2\u6237\u7aef\u53d1\u9001syn\u5305(syn=j)\u5230\u670d\u52a1\u5668\uff0c\u5e76\u8fdb\u5165SYN_SEND\u72b6\u6001\uff0c\u7b49\u5f85\u670d\u52a1\u5668\u786e\u8ba4\uff1b\r\n\u7b2c\u4e8c\u6b21\u63e1\u624b\uff1a\u670d\u52a1\u5668\u6536\u5230syn\u5305\uff0c\u5fc5\u987b\u786e\u8ba4\u5ba2\u6237\u7684SYN\uff08ack=j+1\uff09\uff0c\u540c\u65f6\u81ea\u5df1\u4e5f\u53d1\u9001\u4e00\u4e2aSYN\u5305\uff08syn=k\uff09\uff0c\u5373SYN+ACK\u5305\uff0c\u6b64\u65f6\u670d\u52a1\u5668\u8fdb\u5165SYN_RECV\u72b6\u6001\uff1b\r\n\u7b2c\u4e09\u6b21\u63e1\u624b\uff1a\u5ba2\u6237\u7aef\u6536\u5230\u670d\u52a1\u5668\u7684SYN\uff0bACK\u5305\uff0c\u5411\u670d\u52a1\u5668\u53d1\u9001\u786e\u8ba4\u5305ACK(ack=k+1)\uff0c\u6b64\u5305\u53d1\u9001\u5b8c\u6bd5\uff0c\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u8fdb\u5165ESTABLISHED\u72b6\u6001\uff0c\u5b8c\u6210\u4e09\u6b21\u63e1\u624b\u3002\r\n\u63e1\u624b\u8fc7\u7a0b\u4e2d\u4f20\u9001\u7684\u5305\u91cc\u4e0d\u5305\u542b\u6570\u636e\uff0c\u4e09\u6b21\u63e1\u624b\u5b8c\u6bd5\u540e\uff0c\u5ba2\u6237\u7aef\u4e0e\u670d\u52a1\u5668\u624d\u6b63\u5f0f\u5f00\u59cb\u4f20\u9001\u6570\u636e\u3002\u7406\u60f3\u72b6\u6001\u4e0b\uff0cTCP\u8fde\u63a5\u4e00\u65e6\u5efa\u7acb\uff0c\u5728\u901a\u4fe1\u53cc\u65b9\u4e2d\u7684\u4efb\u4f55\u4e00\u65b9\u4e3b\u52a8\u5173\u95ed\u8fde\u63a5\u4e4b\u524d\uff0cTCP \u8fde\u63a5\u90fd\u5c06\u88ab\u4e00\u76f4\u4fdd\u6301\u4e0b\u53bb\u3002\u65ad\u5f00\u8fde\u63a5\u65f6\u670d\u52a1\u5668\u548c\u5ba2\u6237\u7aef\u5747\u53ef\u4ee5\u4e3b\u52a8\u53d1\u8d77\u65ad\u5f00TCP\u8fde\u63a5\u7684\u8bf7\u6c42\uff0c\u65ad\u5f00\u8fc7\u7a0b\u9700\u8981\u7ecf\u8fc7\u201c\u56db\u6b21\u63e1\u624b\u201d\uff08\u8fc7\u7a0b\u5c31\u4e0d\u7ec6\u5199\u4e86\uff0c\u5c31\u662f\u670d\u52a1\u5668\u548c\u5ba2\u6237\u7aef\u4ea4\u4e92\uff0c\u6700\u7ec8\u786e\u5b9a\u65ad\u5f00\uff09"},{"ID":"465","typeID":"10","question":"\u591a\u7ebf\u7a0b \u4e4b NSOperation","answer":"\u5982\u679c\u9700\u8981\u8ba9\u7ebf\u7a0b\u540c\u65f6\u5e76\u884c\u8fd0\u884c\u591a\u4e2a\uff0c\u53ef\u4ee5\u5c06\u7ebf\u7a0b\u52a0\u5165\u961f\u5217\uff08Queue\uff09\u4e2d\uff0cNSOperationQueue\u7c7b\u5c31\u662f\u4e00\u4e2a\u7ebf\u7a0b\u961f\u5217\u7ba1\u7406\u7c7b\uff0c\u4ed6\u63d0\u4f9b\u4e86\u7ebf\u7a0b\u5e76\u884c\u3001\u961f\u5217\u7684\u7ba1\u7406\u3002\u53ef\u4ee5\u8ba4\u4e3aNSOperationQueue\u5c31\u662f\u4e00\u4e2a\u7ebf\u7a0b\u7ba1\u7406\u5668\uff0c\u901a\u8fc7addOperations\u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u4e00\u6b21\u6027\u628a\u591a\u4e2a\uff08\u6570\u7ec4\u5f62\u5f0f\uff09\u7ebf\u7a0b\u6dfb\u52a0\u5230\u961f\u5217\u4e2d\u3002\u540c\u65f6\uff0cNSOperationQueue\u5141\u8bb8\u901a\u8fc7setMaxConcurrentOperationCount\u65b9\u6cd5\u8bbe\u7f6e\u961f\u5217\u7684\u5e76\u884c\uff08\u540c\u4e00\u65f6\u95f4\uff09\u8fd0\u884c\u6570\u91cf"},{"ID":"464","typeID":"10","question":"\u591a\u7ebf\u7a0b \u4e4b NSThread","answer":"NSThree\u662f\u5b98\u65b9\u63a8\u8350\u7684\u7ebf\u7a0b\u5904\u7406\u65b9\u5f0f\uff0c\u5b83\u5728\u5904\u7406\u673a\u5236\u4e0a\uff0c\u9700\u8981\u5f00\u53d1\u8005\u8d1f\u8d23\u624b\u52a8\u7ba1\u7406Thread\u7684\u751f\u547d\u5468\u671f\uff0c\u5305\u62ec\u5b50\u7ebf\u7a0b\u4e0e\u4e3b\u7ebf\u7a0b\u4e4b\u95f4\u7684\u540c\u6b65\u7b49\u3002\u7ebf\u7a0b\u5171\u4eab\u540c\u4e00\u5e94\u7528\u7a0b\u5e8f\u7684\u90e8\u5206\u5185\u5b58\u7a7a\u95f4\uff0c\u5b83\u4eec\u62e5\u6709\u5bf9\u6570\u636e\u76f8\u540c\u7684\u8bbf\u95ee\u6743\u9650\u3002\u4f60\u5f97\u534f\u8c03\u591a\u4e2a\u7ebf\u7a0b \u5bf9\u540c\u4e00\u6570\u636e\u7684\u8bbf\u95ee\uff0c\u4e00\u822c\u505a\u6cd5\u662f\u5728\u8bbf\u95ee\u4e4b\u524d\u52a0\u9501\uff0c\u8fd9\u4f1a\u5bfc\u81f4\u4e00\u5b9a\u7684\u6027\u80fd\u5f00\u9500\u3002\u5728 iOS \u4e2d\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u591a\u79cd\u5f62\u5f0f\u7684 thread\u3002 \u6bd4\u5176\u4ed6\u4e24\u4e2a\u8f7b\u91cf\u7ea7 \u9700\u8981\u81ea\u5df1\u7ba1\u7406\u7ebf\u7a0b\u7684\u751f\u547d\u5468\u671f\uff0c\u7ebf\u7a0b\u540c\u6b65\u3002 \u7ebf\u7a0b\u540c\u6b65\u5bf9\u6570\u636e\u7684\u52a0\u9501\u4f1a\u6709\u4e00\u5b9a\u7684\u7cfb\u7edf\u5f00\u9500"},{"ID":"463","typeID":"10","question":"\u591a\u7ebf\u7a0b \u4e4b GCD","answer":"Grand Central Dispatch (GCD)\u662fApple\u5f00\u53d1\u7684\u4e00\u4e2a\u591a\u6838\u7f16\u7a0b\u7684\u89e3\u51b3\u65b9\u6cd5\u3002\u8be5\u65b9\u6cd5\u5728Mac OS X 10.6\u96ea\u8c79\u4e2d\u9996\u6b21\u63a8\u51fa\uff0c\u5e76\u968f\u540e\u88ab\u5f15\u5165\u5230\u4e86iOS4.0\u4e2d\u3002GCD\u662f\u4e00\u4e2a\u66ff\u4ee3\u8bf8\u5982NSThread, NSOperationQueue, NSInvocationOperation\u7b49\u6280\u672f\u7684\u5f88\u9ad8\u6548\u548c\u5f3a\u5927\u7684\u6280\u672f\uff0c\u5b83\u770b\u8d77\u6765\u8c61\u5c31\u5176\u5b83\u8bed\u8a00\u7684\u95ed\u5305(Closure)\u4e00\u6837\uff0c\u4f46\u82f9\u679c\u628a\u5b83\u53eb\u505ablocks\u3002"},{"ID":"250","typeID":"10","question":"Objective-C\u7684\u4f18\u70b9","answer":"Objective-C\u8bed\u8a00\u6709C++ Java\u7b49\u9762\u5411\u5bf9\u8c61\u7684\u7279\u70b9\uff0c\u90a3\u662f\u8fdc\u8fdc\u4e0d\u80fd\u4f53\u73b0\u5b83\u7684\u4f18\u70b9\u7684\u3002Objective-C\u7684\u4f18\u70b9\u662f\u5b83\u662f\u52a8\u6001\u7684\u3002\u52a8\u6001\u80fd\u529b\u6709\u4e09\u79cd\uff1a\r\n\u52a8\u6001\u7c7b-\u8fd0\u884c\u65f6\u786e\u5b9a\u7c7b\u7684\u5bf9\u8c61\r\n\u52a8\u6001\u7ed1\u5b9a-\u8fd0\u884c\u65f6\u786e\u5b9a\u8981\u8c03\u7528\u7684\u65b9\u6cd5\r\n\u52a8\u6001\u52a0\u8f7d--\u8fd0\u884c\u65f6\u4e3a\u7a0b\u5e8f\u52a0\u8f7d\u65b0\u7684\u6a21\u5757"},{"ID":"249","typeID":"10","question":"\u5229\u7528Socket\u5efa\u7acb\u7f51\u7edc\u8fde\u63a5\u7684\u6b65\u9aa4","answer":"\u5efa\u7acbSocket\u8fde\u63a5\u81f3\u5c11\u9700\u8981\u4e00\u5bf9\u5957\u63a5\u5b57\uff0c\u5176\u4e2d\u4e00\u4e2a\u8fd0\u884c\u4e8e\u5ba2\u6237\u7aef\uff0c\u79f0\u4e3aClientSocket \uff0c\u53e6\u4e00\u4e2a\u8fd0\u884c\u4e8e\u670d\u52a1\u5668\u7aef\uff0c\u79f0\u4e3aServerSocket \u3002\r\n\r\n\u5957\u63a5\u5b57\u4e4b\u95f4\u7684\u8fde\u63a5\u8fc7\u7a0b\u5206\u4e3a\u4e09\u4e2a\u6b65\u9aa4\uff1a\u670d\u52a1\u5668\u76d1\u542c\uff0c\u5ba2\u6237\u7aef\u8bf7\u6c42\uff0c\u8fde\u63a5\u786e\u8ba4\u3002\r\n\r\n1\u3002\u670d\u52a1\u5668\u76d1\u542c\uff1a\u670d\u52a1\u5668\u7aef\u5957\u63a5\u5b57\u5e76\u4e0d\u5b9a\u4f4d\u5177\u4f53\u7684\u5ba2\u6237\u7aef\u5957\u63a5\u5b57\uff0c\u800c\u662f\u5904\u4e8e\u7b49\u5f85\u8fde\u63a5\u7684\u72b6\u6001\uff0c\u5b9e\u65f6\u76d1\u63a7\u7f51\u7edc\u72b6\u6001\uff0c\u7b49\u5f85\u5ba2\u6237\u7aef\u7684\u8fde\u63a5\u8bf7\u6c42\u3002\r\n\r\n2\u3002\u5ba2\u6237\u7aef\u8bf7\u6c42\uff1a\u6307\u5ba2\u6237\u7aef\u7684\u5957\u63a5\u5b57\u63d0\u51fa\u8fde\u63a5\u8bf7\u6c42\uff0c\u8981\u8fde\u63a5\u7684\u76ee\u6807\u662f\u670d\u52a1\u5668\u7aef\u7684\u5957\u63a5\u5b57\u3002\u4e3a\u6b64\uff0c\u5ba2\u6237\u7aef\u7684\u5957\u63a5\u5b57\u5fc5\u987b\u9996\u5148\u63cf\u8ff0\u5b83\u8981\u8fde\u63a5\u7684\u670d\u52a1\u5668\u7684\u5957\u63a5\u5b57\uff0c\u6307\u51fa\u670d\u52a1\u5668\u7aef\u5957\u63a5\u5b57\u7684\u5730\u5740\u548c\u7aef\u53e3\u53f7\uff0c\u7136\u540e\u5c31\u5411\u670d\u52a1\u5668\u7aef\u5957\u63a5\u5b57\u63d0\u51fa\u8fde\u63a5\u8bf7\u6c42\u3002\r\n\r\n3\u3002\u8fde\u63a5\u786e\u8ba4\uff1a\u5f53\u670d\u52a1\u5668\u7aef\u5957\u63a5\u5b57\u76d1\u542c\u5230\u6216\u8005\u8bf4\u63a5\u6536\u5230\u5ba2\u6237\u7aef\u5957\u63a5\u5b57\u7684\u8fde\u63a5\u8bf7\u6c42\u65f6\uff0c\u5c31\u54cd\u5e94\u5ba2\u6237\u7aef\u5957\u63a5\u5b57\u7684\u8bf7\u6c42\uff0c\u5efa\u7acb\u4e00\u4e2a\u65b0\u7684\u7ebf\u7a0b\uff0c\u628a\u670d\u52a1\u5668\u7aef\u5957\u63a5\u5b57\u7684\u63cf\u8ff0\u53d1\u7ed9\u5ba2\u6237\u7aef\uff0c\u4e00\u65e6\u5ba2\u6237\u7aef\u786e\u8ba4\u4e86\u6b64\u63cf\u8ff0\uff0c\u53cc\u65b9\u5c31\u6b63\u5f0f\u5efa\u7acb\u8fde\u63a5\u3002\u800c\u670d\u52a1\u5668\u7aef\u5957\u63a5\u5b57\u7ee7\u7eed\u5904\u4e8e\u76d1\u542c\u72b6\u6001\uff0c\u7ee7\u7eed\u63a5\u6536\u5176\u4ed6\u5ba2\u6237\u7aef\u5957\u63a5\u5b57\u7684\u8fde\u63a5\u8bf7\u6c42\u3002"},{"ID":"248","typeID":"10","question":"\u4ec0\u4e48\u662fTCP\u8fde\u63a5\u7684\u4e09\u6b21\u63e1\u624b","answer":"\u7b2c\u4e00\u6b21\u63e1\u624b\uff1a\u5ba2\u6237\u7aef\u53d1\u9001syn\u5305(syn=j)\u5230\u670d\u52a1\u5668\uff0c\u5e76\u8fdb\u5165SYN_SEND\u72b6\u6001\uff0c\u7b49\u5f85\u670d\u52a1\u5668\u786e\u8ba4\uff1b\r\n\u7b2c\u4e8c\u6b21\u63e1\u624b\uff1a\u670d\u52a1\u5668\u6536\u5230syn\u5305\uff0c\u5fc5\u987b\u786e\u8ba4\u5ba2\u6237\u7684SYN\uff08ack=j+1\uff09\uff0c\u540c\u65f6\u81ea\u5df1\u4e5f\u53d1\u9001\u4e00\u4e2aSYN\u5305\uff08syn=k\uff09\uff0c\u5373SYN+ACK\u5305\uff0c\u6b64\u65f6\u670d\u52a1\u5668\u8fdb\u5165SYN_RECV\u72b6\u6001\uff1b\r\n\u7b2c\u4e09\u6b21\u63e1\u624b\uff1a\u5ba2\u6237\u7aef\u6536\u5230\u670d\u52a1\u5668\u7684SYN\uff0bACK\u5305\uff0c\u5411\u670d\u52a1\u5668\u53d1\u9001\u786e\u8ba4\u5305ACK(ack=k+1)\uff0c\u6b64\u5305\u53d1\u9001\u5b8c\u6bd5\uff0c\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u8fdb\u5165ESTABLISHED\u72b6\u6001\uff0c\u5b8c\u6210\u4e09\u6b21\u63e1\u624b\u3002\r\n\r\n\u63e1\u624b\u8fc7\u7a0b\u4e2d\u4f20\u9001\u7684\u5305\u91cc\u4e0d\u5305\u542b\u6570\u636e\uff0c\u4e09\u6b21\u63e1\u624b\u5b8c\u6bd5\u540e\uff0c\u5ba2\u6237\u7aef\u4e0e\u670d\u52a1\u5668\u624d\u6b63\u5f0f\u5f00\u59cb\u4f20\u9001\u6570\u636e\u3002\u7406\u60f3\u72b6\u6001\u4e0b\uff0cTCP\u8fde\u63a5\u4e00\u65e6\u5efa\u7acb\uff0c\u5728\u901a\u4fe1\u53cc\u65b9\u4e2d\u7684\u4efb\u4f55\u4e00\u65b9\u4e3b\u52a8\u5173\u95ed\u8fde\u63a5\u4e4b\u524d\uff0cTCP \u8fde\u63a5\u90fd\u5c06\u88ab\u4e00\u76f4\u4fdd\u6301\u4e0b\u53bb\u3002\u65ad\u5f00\u8fde\u63a5\u65f6\u670d\u52a1\u5668\u548c\u5ba2\u6237\u7aef\u5747\u53ef\u4ee5\u4e3b\u52a8\u53d1\u8d77\u65ad\u5f00TCP\u8fde\u63a5\u7684\u8bf7\u6c42\uff0c\u65ad\u5f00\u8fc7\u7a0b\u9700\u8981\u7ecf\u8fc7\u201c\u56db\u6b21\u63e1\u624b\u201d\uff08\u8fc7\u7a0b\u5c31\u4e0d\u7ec6\u5199\u4e86\uff0c\u5c31\u662f\u670d\u52a1\u5668\u548c\u5ba2\u6237\u7aef\u4ea4\u4e92\uff0c\u6700\u7ec8\u786e\u5b9a\u65ad\u5f00\uff09"},{"ID":"247","typeID":"10","question":"Socket\u8fde\u63a5\u548cHttp\u8fde\u63a5\u7684\u533a\u522b","answer":"\u7b80\u5355\u8bf4\uff0c\u4f60\u6d4f\u89c8\u7684\u7f51\u9875\uff08\u7f51\u5740\u4ee5http:\/\/\u5f00\u5934)\u90fd\u662fhttp\u534f\u8bae\u4f20\u8f93\u5230\u4f60\u7684\u6d4f\u89c8\u5668\u7684, \u800chttp\u662f\u57fa\u4e8esocket\u4e4b\u4e0a\u7684\u3002socket\u662f\u4e00\u5957\u5b8c\u6210tcp\uff0cudp\u534f\u8bae\u7684\u63a5\u53e3\u3002\r\nHTTP\u534f\u8bae\uff1a\u7b80\u5355\u5bf9\u8c61\u8bbf\u95ee\u534f\u8bae\uff0c\u5bf9\u5e94\u4e8e\u5e94\u7528\u5c42  \uff0cHTTP\u534f\u8bae\u662f\u57fa\u4e8eTCP\u8fde\u63a5\u7684\r\n\r\ntcp\u534f\u8bae\uff1a    \u5bf9\u5e94\u4e8e\u4f20\u8f93\u5c42\r\n\r\nip\u534f\u8bae\uff1a     \u5bf9\u5e94\u4e8e\u7f51\u7edc\u5c42 \r\nTCP\/IP\u662f\u4f20\u8f93\u5c42\u534f\u8bae\uff0c\u4e3b\u8981\u89e3\u51b3\u6570\u636e\u5982\u4f55\u5728\u7f51\u7edc\u4e2d\u4f20\u8f93\uff1b\u800cHTTP\u662f\u5e94\u7528\u5c42\u534f\u8bae\uff0c\u4e3b\u8981\u89e3\u51b3\u5982\u4f55\u5305\u88c5\u6570\u636e\u3002\r\n\r\nSocket\u662f\u5bf9TCP\/IP\u534f\u8bae\u7684\u5c01\u88c5\uff0cSocket\u672c\u8eab\u5e76\u4e0d\u662f\u534f\u8bae\uff0c\u800c\u662f\u4e00\u4e2a\u8c03\u7528\u63a5\u53e3\uff08API\uff09\uff0c\u901a\u8fc7Socket\uff0c\u6211\u4eec\u624d\u80fd\u4f7f\u7528TCP\/IP\u534f\u8bae\u3002\r\n\r\nhttp\u8fde\u63a5\uff1ahttp\u8fde\u63a5\u5c31\u662f\u6240\u8c13\u7684\u77ed\u8fde\u63a5\uff0c\u5373\u5ba2\u6237\u7aef\u5411\u670d\u52a1\u5668\u7aef\u53d1\u9001\u4e00\u6b21\u8bf7\u6c42\uff0c\u670d\u52a1\u5668\u7aef\u54cd\u5e94\u540e\u8fde\u63a5\u5373\u4f1a\u65ad\u6389\uff1b\r\n\r\nsocket\u8fde\u63a5\uff1asocket\u8fde\u63a5\u5c31\u662f\u6240\u8c13\u7684\u957f\u8fde\u63a5\uff0c\u7406\u8bba\u4e0a\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u7aef\u4e00\u65e6\u5efa\u7acb\u8d77\u8fde\u63a5\u5c06\u4e0d\u4f1a\u4e3b\u52a8\u65ad\u6389\uff1b\u4f46\u662f\u7531\u4e8e\u5404\u79cd\u73af\u5883\u56e0\u7d20\u53ef\u80fd\u4f1a\u662f\u8fde\u63a5\u65ad\u5f00\uff0c\u6bd4\u5982\u8bf4\uff1a\u670d\u52a1\u5668\u7aef\u6216\u5ba2\u6237\u7aef\u4e3b\u673adown\u4e86\uff0c\u7f51\u7edc\u6545\u969c\uff0c\u6216\u8005\u4e24\u8005\u4e4b\u95f4\u957f\u65f6\u95f4\u6ca1\u6709\u6570\u636e\u4f20\u8f93\uff0c\u7f51\u7edc\u9632\u706b\u5899\u53ef\u80fd\u4f1a\u65ad\u5f00\u8be5\u8fde\u63a5\u4ee5\u91ca\u653e\u7f51\u7edc\u8d44\u6e90\u3002\u6240\u4ee5\u5f53\u4e00\u4e2asocket\u8fde\u63a5\u4e2d\u6ca1\u6709\u6570\u636e\u7684\u4f20\u8f93\uff0c\u90a3\u4e48\u4e3a\u4e86\u7ef4\u6301\u8fde\u63a5\u9700\u8981\u53d1\u9001\u5fc3\u8df3\u6d88\u606f~~\u5177\u4f53\u5fc3\u8df3\u6d88\u606f\u683c\u5f0f\u662f\u5f00\u53d1\u8005\u81ea\u5df1\u5b9a\u4e49\u7684\r\n\r\n\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u7f51\u7edc\u4e2d\u7684\u8fdb\u7a0b\u662f\u901a\u8fc7socket\u6765\u901a\u4fe1\u7684\uff0c\u90a3\u4ec0\u4e48\u662fsocket\u5462\uff1fsocket\u8d77\u6e90\u4e8eUnix\uff0c\u800cUnix\/Linux\u57fa\u672c\u54f2\u5b66\u4e4b\u4e00\u5c31\u662f\u201c\u4e00\u5207\u7686\u6587\u4ef6\u201d\uff0c\u90fd\u53ef\u4ee5\u7528\u201c\u6253\u5f00open \u2013> \u8bfb\u5199write\/read \u2013> \u5173\u95edclose\u201d\u6a21\u5f0f\u6765\u64cd\u4f5c\u3002\u6211\u7684\u7406\u89e3\u5c31\u662fSocket\u5c31\u662f\u8be5\u6a21\u5f0f\u7684\u4e00\u4e2a\u5b9e\u73b0\uff0csocket\u5373\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u6587\u4ef6\uff0c\u4e00\u4e9bsocket\u51fd\u6570\u5c31\u662f\u5bf9\u5176\u8fdb\u884c\u7684\u64cd\u4f5c\uff08\u8bfb\/\u5199IO\u3001\u6253\u5f00\u3001\u5173\u95ed\uff09\uff0c\u8fd9\u4e9b\u51fd\u6570\u6211\u4eec\u5728\u540e\u9762\u8fdb\u884c\u4ecb\u7ecd\u3002\u6211\u4eec\u5728\u4f20\u8f93\u6570\u636e\u65f6\uff0c\u53ef\u4ee5\u53ea\u4f7f\u7528\uff08\u4f20\u8f93\u5c42\uff09TCP\/IP\u534f\u8bae\uff0c\u4f46\u662f\u90a3\u6837\u7684\u8bdd\uff0c\u5982\u679c\u6ca1\u6709\u5e94\u7528\u5c42\uff0c\u4fbf\u65e0\u6cd5\u8bc6\u522b\u6570\u636e\u5185\u5bb9\uff0c\u5982\u679c\u60f3\u8981\u4f7f\u4f20\u8f93\u7684\u6570\u636e\u6709\u610f\u4e49\uff0c\u5219\u5fc5\u987b\u4f7f\u7528\u5230\u5e94\u7528\u5c42\u534f\u8bae\uff0c\u5e94\u7528\u5c42\u534f\u8bae\u6709\u5f88\u591a\uff0c\u6bd4\u5982HTTP\u3001FTP\u3001TELNET\u7b49\uff0c\u4e5f\u53ef\u4ee5\u81ea\u5df1\u5b9a\u4e49\u5e94\u7528\u5c42\u534f\u8bae\u3002WEB\u4f7f\u7528HTTP\u534f\u8bae\u4f5c\u5e94\u7528\u5c42\u534f\u8bae\uff0c\u4ee5\u5c01\u88c5HTTP\u6587\u672c\u4fe1\u606f\uff0c\u7136\u540e\u4f7f\u7528TCP\/IP\u505a\u4f20\u8f93\u5c42\u534f\u8bae\u5c06\u5b83\u53d1\u5230\u7f51\u7edc\u4e0a\u3002\r\n1)Socket\u662f\u4e00\u4e2a\u9488\u5bf9TCP\u548cUDP\u7f16\u7a0b\u7684\u63a5\u53e3\uff0c\u4f60\u53ef\u4ee5\u501f\u52a9\u5b83\u5efa\u7acbTCP\u8fde\u63a5\u7b49\u7b49\u3002\u800cTCP\u548cUDP\u534f\u8bae\u5c5e\u4e8e\u4f20\u8f93\u5c42 \u3002\r\n  \u800chttp\u662f\u4e2a\u5e94\u7528\u5c42\u7684\u534f\u8bae\uff0c\u5b83\u5b9e\u9645\u4e0a\u4e5f\u5efa\u7acb\u5728TCP\u534f\u8bae\u4e4b\u4e0a\u3002 \r\n (HTTP\u662f\u8f7f\u8f66\uff0c\u63d0\u4f9b\u4e86\u5c01\u88c5\u6216\u8005\u663e\u793a\u6570\u636e\u7684\u5177\u4f53\u5f62\u5f0f\uff1bSocket\u662f\u53d1\u52a8\u673a\uff0c\u63d0\u4f9b\u4e86\u7f51\u7edc\u901a\u4fe1\u7684\u80fd\u529b\u3002)\r\n\r\n 2\uff09Socket\u662f\u5bf9TCP\/IP\u534f\u8bae\u7684\u5c01\u88c5\uff0cSocket\u672c\u8eab\u5e76\u4e0d\u662f\u534f\u8bae\uff0c\u800c\u662f\u4e00\u4e2a\u8c03\u7528\u63a5\u53e3\uff08API\uff09\uff0c\u901a\u8fc7Socket\uff0c\u6211\u4eec\u624d\u80fd\u4f7f\u7528TCP\/IP\u534f\u8bae\u3002Socket\u7684\u51fa\u73b0\u53ea\u662f\u4f7f\u5f97\u7a0b\u5e8f\u5458\u66f4\u65b9\u4fbf\u5730\u4f7f\u7528TCP\/IP\u534f\u8bae\u6808\u800c\u5df2\uff0c\u662f\u5bf9TCP\/IP\u534f\u8bae\u7684\u62bd\u8c61\uff0c\u4ece\u800c\u5f62\u6210\u4e86\u6211\u4eec\u77e5\u9053\u7684\u4e00\u4e9b\u6700\u57fa\u672c\u7684\u51fd\u6570\u63a5\u53e3\u3002"},{"ID":"246","typeID":"10","question":"TCP\/UDP\u533a\u522b\u8054\u7cfb","answer":"TCP---\u4f20\u8f93\u63a7\u5236\u534f\u8bae,\u63d0\u4f9b\u7684\u662f\u9762\u5411\u8fde\u63a5\u3001\u53ef\u9760\u7684\u5b57\u8282\u6d41\u670d\u52a1\u3002\u5f53\u5ba2\u6237\u548c\u670d\u52a1\u5668\u5f7c\u6b64\u4ea4\u6362\u6570\u636e\u524d\uff0c\u5fc5\u987b\u5148\u5728\u53cc\u65b9\u4e4b\u95f4\u5efa\u7acb\u4e00\u4e2aTCP\u8fde\u63a5\uff0c\u4e4b\u540e\u624d\u80fd\u4f20\u8f93\u6570\u636e\u3002TCP\u63d0\u4f9b\u8d85\u65f6\u91cd\u53d1\uff0c\u4e22\u5f03\u91cd\u590d\u6570\u636e\uff0c\u68c0\u9a8c\u6570\u636e\uff0c\u6d41\u91cf\u63a7\u5236\u7b49\u529f\u80fd\uff0c\u4fdd\u8bc1\u6570\u636e\u80fd\u4ece\u4e00\u7aef\u4f20\u5230\u53e6\u4e00\u7aef\u3002 \r\n\r\nUDP---\u7528\u6237\u6570\u636e\u62a5\u534f\u8bae\uff0c\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u9762\u5411\u6570\u636e\u62a5\u7684\u8fd0\u8f93\u5c42\u534f\u8bae\u3002UDP\u4e0d\u63d0\u4f9b\u53ef\u9760\u6027\uff0c\u5b83\u53ea\u662f\u628a\u5e94\u7528\u7a0b\u5e8f\u4f20\u7ed9IP\u5c42\u7684\u6570\u636e\u62a5\u53d1\u9001\u51fa\u53bb\uff0c\u4f46\u662f\u5e76\u4e0d\u80fd\u4fdd\u8bc1\u5b83\u4eec\u80fd\u5230\u8fbe\u76ee\u7684\u5730\u3002\u7531\u4e8eUDP\u5728\u4f20\u8f93\u6570\u636e\u62a5\u524d\u4e0d\u7528\u5728\u5ba2\u6237\u548c\u670d\u52a1\u5668\u4e4b\u95f4\u5efa\u7acb\u4e00\u4e2a\u8fde\u63a5\uff0c\u4e14\u6ca1\u6709\u8d85\u65f6\u91cd\u53d1\u7b49\u673a\u5236\uff0c\u6545\u800c\u4f20\u8f93\u901f\u5ea6\u5f88\u5feb \r\n\r\nTCP\uff08Transmission Control Protocol\uff0c\u4f20\u8f93\u63a7\u5236\u534f\u8bae\uff09\u662f\u57fa\u4e8e\u8fde\u63a5\u7684\u534f\u8bae\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u6b63\u5f0f\u6536\u53d1\u6570\u636e\u524d\uff0c\u5fc5\u987b\u548c\u5bf9\u65b9\u5efa\u7acb\u53ef\u9760\u7684\u8fde\u63a5\u3002\u4e00\u4e2aTCP\u8fde\u63a5\u5fc5\u987b\u8981\u7ecf\u8fc7\u4e09\u6b21\u201c\u5bf9\u8bdd\u201d\u624d\u80fd\u5efa\u7acb\u8d77\u6765\uff0c\u6211\u4eec\u6765\u770b\u770b\u8fd9\u4e09\u6b21\u5bf9\u8bdd\u7684\u7b80\u5355\u8fc7\u7a0b\uff1a1.\u4e3b\u673aA\u5411\u4e3b\u673aB\u53d1\u51fa\u8fde\u63a5\u8bf7\u6c42\u6570\u636e\u5305\uff1b2.\u4e3b\u673aB\u5411\u4e3b\u673aA\u53d1\u9001\u540c\u610f\u8fde\u63a5\u548c\u8981\u6c42\u540c\u6b65\uff08\u540c\u6b65\u5c31\u662f\u4e24\u53f0\u4e3b\u673a\u4e00\u4e2a\u5728\u53d1\u9001\uff0c\u4e00\u4e2a\u5728\u63a5\u6536\uff0c\u534f\u8c03\u5de5\u4f5c\uff09\u7684\u6570\u636e\u5305\uff1b3.\u4e3b\u673aA\u518d\u53d1\u51fa\u4e00\u4e2a\u6570\u636e\u5305\u786e\u8ba4\u4e3b\u673aB\u7684\u8981\u6c42\u540c\u6b65\uff1a\u201c\u6211\u73b0\u5728\u5c31\u53d1\uff0c\u4f60\u63a5\u7740\u5427\uff01\u201d\uff0c\u8fd9\u662f\u7b2c\u4e09\u6b21\u5bf9\u8bdd\u3002\u4e09\u6b21\u201c\u5bf9\u8bdd\u201d\u7684\u76ee\u7684\u662f\u4f7f\u6570\u636e\u5305\u7684\u53d1\u9001\u548c\u63a5\u6536\u540c\u6b65\uff0c\u7ecf\u8fc7\u4e09\u6b21\u201c\u5bf9\u8bdd\u201d\u4e4b\u540e\uff0c\u4e3b\u673aA\u624d\u5411\u4e3b\u673aB\u6b63\u5f0f\u53d1\u9001\u6570\u636e\u3002 \r\nUDP\uff08User Data Protocol\uff0c\u7528\u6237\u6570\u636e\u62a5\u534f\u8bae\uff09\u662f\u4e0eTCP\u76f8\u5bf9\u5e94\u7684\u534f\u8bae\u3002\u5b83\u662f\u9762\u5411\u975e\u8fde\u63a5\u7684\u534f\u8bae\uff0c\u5b83\u4e0d\u4e0e\u5bf9\u65b9\u5efa\u7acb\u8fde\u63a5\uff0c\u800c\u662f\u76f4\u63a5\u5c31\u628a\u6570\u636e\u5305\u53d1\u9001\u8fc7\u53bb\uff01  UDP\u9002\u7528\u4e8e\u4e00\u6b21\u53ea\u4f20\u9001\u5c11\u91cf\u6570\u636e\u3001\u5bf9\u53ef\u9760\u6027\u8981\u6c42\u4e0d\u9ad8\u7684\u5e94\u7528\u73af\u5883\u3002 \r\ntcp\u534f\u8bae\u548cudp\u534f\u8bae\u7684\u5dee\u522b \r\n\u662f\u5426\u8fde\u63a5 \u9762\u5411\u8fde\u63a5 \u9762\u5411\u975e\u8fde\u63a5 \r\n\u4f20\u8f93\u53ef\u9760\u6027 \u53ef\u9760 \u4e0d\u53ef\u9760 \r\n\u5e94\u7528\u573a\u5408 \u4f20\u8f93\u5927\u91cf\u6570\u636e \u5c11\u91cf\u6570\u636e \r\n\u901f\u5ea6 \u6162 \u5feb"},{"ID":"245","typeID":"10","question":"GCD\u9ad8\u7ea7\u7406\u89e3","answer":"Grand Central Dispatch (GCD)\u662fApple\u5f00\u53d1\u7684\u4e00\u4e2a\u591a\u6838\u7f16\u7a0b\u7684\u8f83\u65b0\u7684\u89e3\u51b3\u65b9\u6cd5\u3002\u5728Mac OS X 10.6\u96ea\u8c79\u4e2d\u9996\u6b21\u63a8\u51fa\uff0c\u5e76\u5728\u6700\u8fd1\u5f15\u5165\u5230\u4e86iOS4.0\u3002\u3000\u3000GCD\u662f\u4e00\u4e2a\u66ff\u4ee3\u8bf8\u5982NSThread\u7b49\u6280\u672f\u7684\u5f88\u9ad8\u6548\u548c\u5f3a\u5927\u7684\u6280\u672f\u3002GCD\u5b8c\u5168\u53ef\u4ee5\u5904\u7406\u8bf8\u5982\u6570\u636e\u9501\u5b9a\u548c\u8d44\u6e90\u6cc4\u6f0f\u7b49\u590d\u6742\u7684\u5f02\u6b65\u7f16\u7a0b\u95ee\u9898\u3002\u3000\r\n\r\n\u3000GCD\u53ef\u4ee5\u5b8c\u6210\u5f88\u591a\u4e8b\u60c5\uff0c\u4f46\u662f\u8fd9\u91cc\u4ec5\u5173\u6ce8\u5728iOS\u5e94\u7528\u4e2d\u5b9e\u73b0\u591a\u7ebf\u7a0b\u6240\u9700\u7684\u4e00\u4e9b\u57fa\u7840\u77e5\u8bc6\u3002\u3000\u3000\u5728\u5f00\u59cb\u4e4b\u524d\uff0c\u9700\u8981\u7406\u89e3\u662f\u8981\u63d0\u4f9b\u7ed9GCD\u961f\u5217\u7684\u662f\u4ee3\u7801\u5757\uff0c\u7528\u4e8e\u5728\u7cfb\u7edf\u6216\u8005\u7528\u6237\u521b\u5efa\u7684\u7684\u961f\u5217\u4e0a\u8c03\u5ea6\u8fd0\u884c\u3002\u3000\u3000\u58f0\u660e\u4e00\u4e2a\u961f\u5217 \u3000\u3000\r\n\u5982\u4e0b\u4f1a\u8fd4\u56de\u4e00\u4e2a\u7528\u6237\u521b\u5efa\u7684\u961f\u5217\uff1a\r\n\u3000\u3000dispatch_queue_t myQueue = dispatch_queue_create(\"com.iphonedevblog.post\", NULL);\u5176\u4e2d\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u6807\u8bc6\u961f\u5217\u7684\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u7528\u6765\u5b9a\u4e49\u961f\u5217\u7684\u53c2\u6570\uff08\u76ee\u524d\u4e0d\u652f\u6301\uff0c\u56e0\u6b64\u4f20\u5165NULL\uff09\u3002\u3000\r\n\u6267\u884c\u4e00\u4e2a\u961f\u5217 \u3000\r\n\u3000\u5982\u4e0b\u4f1a\u5f02\u6b65\u6267\u884c\u4f20\u5165\u7684\u4ee3\u7801\uff1a\u3000\r\n\u3000dispatch_async(myQueue, ^{ [self doSomething]; });\u5176\u4e2d\uff0c\u9996\u5148\u4f20\u5165\u4e4b\u524d\u521b\u5efa\u7684\u961f\u5217\uff0c\u7136\u540e\u63d0\u4f9b\u7531\u961f\u5217\u8fd0\u884c\u7684\u4ee3\u7801\u5757\u3002\u3000\u3000\r\n\u58f0\u660e\u5e76\u6267\u884c\u4e00\u4e2a\u961f\u5217 \u3000\u3000\r\n\u5982\u679c\u4e0d\u9700\u8981\u4fdd\u7559\u8981\u8fd0\u884c\u7684\u961f\u5217\u7684\u5f15\u7528\uff0c\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u4ee3\u7801\u5b9e\u73b0\u4e4b\u524d\u7684\u529f\u80fd\uff1a\u3000\u3000dispatch_async(dispatch_queue_create (\"com.iphonedevblog.post\", NULL), ^{ [self doSomething]; });\u3000\u3000\u5982\u679c\u9700\u8981\u6682\u505c\u4e00\u4e2a\u961f\u5217\uff0c\u53ef\u4ee5\u8c03\u7528\u5982\u4e0b\u4ee3\u7801\u3002\u6682\u505c\u4e00\u4e2a\u961f\u5217\u4f1a\u963b\u6b62\u548c\u8be5\u961f\u5217\u76f8\u5173\u7684\u6240\u6709\u4ee3\u7801\u8fd0\u884c\u3002\u3000\u3000dispatch_suspend(myQueue);\u6682\u505c\u4e00\u4e2a\u961f\u5217 \u3000\r\n\u5982\u679c\u6682\u505c\u4e00\u4e2a\u961f\u5217\u4e0d\u8981\u5fd8\u8bb0\u6062\u590d\u3002\u6682\u505c\u548c\u6062\u590d\u7684\u64cd\u4f5c\u548c\u5185\u5b58\u7ba1\u7406\u4e2d\u7684retain\u548crelease\u7c7b\u4f3c\u3002\u8c03\u7528dispatch_suspend\u4f1a\u589e\u52a0\u6682\u505c\u8ba1\u6570\uff0c\u800cdispatch_resume\u5219\u4f1a\u51cf\u5c11\u3002\u961f\u5217\u53ea\u6709\u5728\u6682\u505c\u8ba1\u6570\u53d8\u6210\u96f6\u7684\u60c5\u51b5\u4e0b\u624d\u5f00\u59cb\u8fd0\u884c\u3002dispatch_resume(myQueue);\u6062\u590d\u4e00\u4e2a\u961f\u5217 \u3000\u3000\u3000\u4ece\u961f\u5217\u4e2d\u5728\u4e3b\u7ebf\u7a0b\u8fd0\u884c\u4ee3\u7801 \u3000\u3000\u6709\u4e9b\u64cd\u4f5c\u65e0\u6cd5\u5728\u5f02\u6b65\u961f\u5217\u8fd0\u884c\uff0c\u56e0\u6b64\u5fc5\u987b\u5728\u4e3b\u7ebf\u7a0b\uff08\u6bcf\u4e2a\u5e94\u7528\u90fd\u6709\u4e00\u4e2a\uff09\u4e0a\u8fd0\u884c\u3002UI\u7ed8\u56fe\u4ee5\u53ca\u4efb\u4f55\u5bf9NSNotificationCenter\u7684\u8c03\u7528\u5fc5\u987b\u5728\u4e3b\u7ebf\u7a0b\u957f\u8fdb\u884c\u3002\u5728\u53e6\u4e00\u4e2a\u961f\u5217\u4e2d\u8bbf\u95ee\u4e3b\u7ebf\u7a0b\u5e76\u8fd0\u884c\u4ee3\u7801\u7684\u793a\u4f8b\u5982\u4e0b\uff1a\u3000\u3000dispatch_sync(dispatch_get_main_queue(), ^{ [self dismissLoginWindow]; });\u6ce8\u610f\uff0cdispatch_suspend \uff08\u4ee5\u53cadispatch_resume\uff09\u5728\u4e3b\u7ebf\u7a0b\u4e0a\u4e0d\u8d77\u4f5c\u7528\u3002\r\n\u4f7f\u7528GCD\uff0c\u53ef\u4ee5\u8ba9\u4f60\u7684\u7a0b\u5e8f\u4e0d\u4f1a\u5931\u53bb\u54cd\u5e94. \u591a\u7ebf\u7a0b\u4e0d\u5bb9\u6613\u4f7f\u7528\uff0c\u7528\u4e86GCD\uff0c\u4f1a\u8ba9\u5b83\u53d8\u5f97\u7b80\u5355\u3002\u4f60\u65e0\u9700\u4e13\u95e8\u8fdb\u884c\u7ebf\u7a0b\u7ba1\u7406, \u5f88\u68d2\uff01\r\ndispatch_queue_t t1=dispatch_queue_create(\"1\", NULL);\r\n    dispatch_queue_t t2=dispatch_queue_create(\"2\", NULL);\r\n    dispatch_async(t1, ^{\r\n        [self print1];\r\n    });\r\n    dispatch_async(t2, ^{\r\n        [self print2];\r\n    });"},{"ID":"244","typeID":"10","question":"obj-c\u7684\u4f18\u7f3a\u70b9","answer":"objc\u4f18\u70b9\uff1a \r\n  1) Cateogies \r\n  2) Posing \r\n  3) \u52a8\u6001\u8bc6\u522b \r\n  4) \u6307\u6807\u8ba1\u7b97 \r\n  5\uff09\u5f39\u6027\u8baf\u606f\u4f20\u9012 \r\n  6) \u4e0d\u662f\u4e00\u4e2a\u8fc7\u5ea6\u590d\u6742\u7684 C \u884d\u751f\u8bed\u8a00 \r\n  7) Objective-C \u4e0e C++ \u53ef\u6df7\u5408\u7f16\u7a0b \r\n\u7f3a\u70b9: \r\n  1) \u4e0d\u652f\u63f4\u547d\u540d\u7a7a\u95f4 \r\n  2)  \u4e0d\u652f\u6301\u8fd0\u7b97\u7b26\u91cd\u8f7d \r\n  3\uff09 \u4e0d\u652f\u6301\u591a\u91cd\u7ee7\u627f \r\n  4\uff09 \u4f7f\u7528\u52a8\u6001\u8fd0\u884c\u65f6\u7c7b\u578b\uff0c\u6240\u6709\u7684\u65b9\u6cd5\u90fd\u662f\u51fd\u6570\u8c03\u7528\uff0c\u6240\u4ee5\u5f88\u591a\u7f16\u8bd1\u65f6\u4f18\u5316\u65b9\u6cd5\u90fd\u7528\u4e0d\u5230\u3002\uff08\u5982\u5185\u8054\u51fd\u6570\u7b49\uff09\uff0c\u6027\u80fd\u4f4e\u52a3\u3002"},{"ID":"218","typeID":"10","question":"\u7528 C++\u8bbe\u8ba1\u4e00\u4e2a\u4e0d\u80fd\u88ab\u7ee7\u627f\u7684\u7c7b","answer":"template <typename T> class A {\r\nfriend T; private:\r\nA() {} ~A() {}\r\n};\r\nclass B : virtual public A<B> {\r\npublic:\r\nB() {}\r\n~B() {} };\r\nclass C : virtual public B\r\n{ public:\r\nC() {}\r\n~C() {} };\r\nvoid main( void ) {\r\nB b; \/\/C c; return;\r\n}\r\n  \u6ce8\u610f:\u6784\u9020\u51fd\u6570\u662f\u7ee7\u627f\u5b9e\u73b0\u7684\u5173\u952e,\u6bcf\u6b21\u5b50\u7c7b\u5bf9\u8c61\u6784\u9020\u65f6,\u9996\u5148\u8c03\u7528\u7684\u662f\u7236\u7c7b\u7684\u6784\u9020\u51fd\u6570,\u7136\u540e\u624d\r\n\u662f\u81ea\u5df1\u7684\u3002"},{"ID":"150","typeID":"10","question":"\u4e0d\u540c\u5c4f\u5e55\u600e\u4e48\u9002\u914d\uff1f","answer":"iphone, iphone3G, iphone3GS 320x480\r\niphone4, iphoen4S 640x960 retina\r\niphone5, iphone5S, 640x1136\r\n\u5199\u7a0b\u5e8f\u9700\u8981\u6709 2 \u5957\u56fe\u7247 demo.png demo@2x.png iphone5 \u9002\u914d.\r\n1136\/2-44-49\r\n[[UIScreen mainScreen] applicationFrame] = (320x460, 320x548) [[UIScreen mainScreen] bounds] = (320x480, 320x568)\r\niPad, iPad2, iPad Mini 1024x768\r\niPad3, iPad4, 2048x1563"},{"ID":"149","typeID":"10","question":"\u6570\u636e\u5e93\u80fd\u4e0d\u80fd\u5b58\u56fe\u7247,\u600e\u4e48\u5b58?","answer":"\u53ef\u4ee5\u5b58\u56fe\u7247, nsdata \u5b58,\u4f46\u662f\u6211\u4eec\u4e00\u822c\u4e0d\u8fd9\u6837\u5b58,\u6211\u4eec\u5b58\u8def\u5f84\u628a \u56fe\u7247\u5b58\u5728\u6c99\u76d2\u4e2d"},{"ID":"148","typeID":"10","question":"\u6210\u5458\u53d8\u91cf\u7684\u4f5c\u7528\u57df\u6709\u54ea\u51e0\u79cd","answer":"@public, @protected, @private"},{"ID":"147","typeID":"10","question":" OC \u4e2d\u6709\u79c1\u6709\u6210\u5458\u53d8\u91cf\u5417?","answer":"\u5728.m \u6587\u4ef6\u4e2d\u5b9e\u73b0\u533f\u540d\u7c7b\u522b Category"},{"ID":"146","typeID":"10","question":" OC \u4e2d\u6709\u79c1\u6709\u65b9\u6cd5\u5417?","answer":"\u5728.m \u6587\u4ef6\u4e2d\u5b9e\u73b0 Category,\u53ea\u662f\u5728.m \u4e2d\u65b9\u6cd5\r\n"},{"ID":"145","typeID":"10","question":"\u89e3\u91ca\u5173\u952e\u5b57static\u3001const\u3001inline\u3001 static inline\u3001volatile","answer":"static \u4fee\u9970\u53d8\u91cf\u8868\u793a\u9759\u6001\u53d8\u91cf,\u6839\u636e\u4f5c\u7528\u57df \u4e0d\u540c\r\nextern \u548c static \u662f\u76f8\u53cd\u7684\u3002\r\nStatic \u4fee\u9970\u51fd\u6570\u662f\u8868\u793a\u51fd\u6570\u5728\u672c\u6587\u4ef6\u6709\u6548\r\nStatic inline \u8054\u5408\u5728\u4e00\u8d77\u8868\u793a\u5185\u8054\u51fd\u6570\u3002\u7c7b\u4f3c\u4e8e\u5b8f\r\nConst \u4fee\u9970\u53d8\u91cf\u548c\u53d8\u91cf\u7684\u5185\u5bb9\u53ea\u8bfb\r\nVolatile \u8868\u793a\u6bcf\u6b21\u90fd\u4ece\u5185\u5b58\u4e2d\u771f\u6b63\u7684\u8bfb\u53d6\u3002\u4e3b\u8981\u662f\u7528\u4e8e\u5d4c\u5165\u5f0f\u4e2d, \u8bfb\u53d6\u786c\u4ef6\u3002\r\n"},{"ID":"144","typeID":"10","question":"\u4ec0\u4e48\u662f\u901a\u77e5\u4e2d\u5fc3","answer":"\u901a\u77e5\u4e2d\u5fc3\u662f\u591a\u5bf9\u591a\u7684\u5e73\u7b49\u7684\u901a\u8baf\u6a21\u5f0f\u3002\u4e3b\u8981\u7528\u5728\u591a\u4e2a\u5bf9\u8c61\u4e4b\u95f4\u677e \u8026\u5408\u7684\u901a\u8baf\u6a21\u5f0f\u3002\u5bf9\u8c61\u548c\u5bf9\u8c61\u4e4b\u95f4\u901a\u8fc7\u901a\u77e5\u7684\u540d\u5b57\u5c31\u53ef\u4ee5\u8fdb\u884c\u5173 \u8054\u901a\u8baf\u3002\r\n"},{"ID":"143","typeID":"10","question":"\u4ec0\u4e48\u662f\u59d4\u6258\u4ee3\u7406\u6a21\u5f0f","answer":"\u59d4\u6258\u4ee3\u7406\u662f 2 \u4e2a\u5bf9\u8c61\u4e4b\u95f4\u7684\u4e00\u79cd\u901a\u8baf\u65b9\u5f0f\u3002\r\n\u4e00\u65b9\u4f7f\u7528\u534f\u8bae,\u4ee3\u7406\uff0c\u53e6\u5916\u4e00\u65b9\u5b9e\u73b0\u534f\u8bae,\u7c7b\u4f3c\u4e8e\u56de\u8c03,blocks \u7b49\u8bed\u6cd5\u3002\r\n\u76ee\u7684\u662f\u4e3a\u4e86\u8f6f\u4ef6\u8bbe\u8ba1\u7684\u4f4e\u8026\u5408"},{"ID":"142","typeID":"10","question":"ScrollView \u7684\u590d\u7528\u673a\u5236","answer":"\u6eda\u52a8\u8fc7\u7a0b\u4e2d\u628a scrollview \u91cc\u9762\u7684 \u8d85\u51fa\u5c4f\u5e55\u7684 view \u653e\u5728\u91cd\u7528\u961f\u5217\u4e2d, \u5728\u6eda\u52a8\u8fc7\u7a0b\u4e2d\u5982\u679c\u6709\u65b0\u7684 view \u8fdb\u6765,\u9996\u5148\u4ece\u91cd\u7528\u961f\u5217\u4e2d\u53d6\u5f97 view, \u5982\u679c\u6ca1\u6709\u5c31\u65b0\u521b\u5efa\u4e00\u4e2a\u3002"},{"ID":"141","typeID":"10","question":"Frame \u548c bounds \u6709\u4ec0\u4e48\u533a\u522b\uff1f","answer":"Frame \u662f\u5b50\u89c6\u56fe\u76f8\u5bf9\u4e8e\u7236\u89c6\u56fe\u7684\u5750\u6807\u7cfb\u7edf,x y width height, bounds \u662f uiview \u81ea\u5df1\u7684\u5750\u6807\u7cfb\u7edf bounds x y=0\r\n"},{"ID":"140","typeID":"10","question":"Blocks \u8bed\u6cd5\u6709\u4ec0\u4e48\u4f18\u70b9","answer":"Blocks \u7c7b\u4f3c\u4e8e c \u4e2d\u56de\u8c03\u51fd\u6570,\u548c\u4ee3\u7406\u7c7b\u4f3c\u7684,\u7c7b\u4f3c\u4e8e java \u4e2d\u7684 listener \u533f\u540d\u51fd\u6570"},{"ID":"139","typeID":"10","question":"C++\u600e\u4e48\u8c03\u7528 C \u7684\u65b9\u6cd5","answer":"extern \u201cC\u201d int foo(){ };"},{"ID":"138","typeID":"10","question":"NSArray, NSDictionary \u8fd9\u4e9b\u662f\u5982\u4f55\u505a\u7684?","answer":"NSArray \u4f7f\u7528\u94fe\u8868\u505a\u7684 NSDictionary \u4f7f\u7528 hash \u8868\u505a\u51fa\u6765\u7684"},{"ID":"137","typeID":"10","question":"\u904d\u5386\u6570\u7ec4\u7684\u4e09\u79cd\u65b9\u5f0f\u6709\u4ec0\u4e48\u533a\u522b","answer":"for forin iterator\r\nforin \u4e5f\u53eb\u5feb\u901f\u5faa\u73af\u3002\u4e3a\u4ec0\u4e48\u4ed6\u53eb\u5feb\u901f\u5faa\u73af,\u539f\u56e0\u662f\u901f\u5ea6\u5feb?\u4e3a\u4ec0\r\n\u4e48\u901f\u5ea6\u5feb? \u53ef\u4ee5\u901a\u8fc7\u4f18\u5316\u63d0\u524d\u628a forin \u91cc\u9762\u7684 array \u6570\u7ec4\u6570\u7ec4\u5168\u90e8\r\n\u5bfc\u5165\u5230 cpu cache \u4e2d\u3002\u56e0\u4e3a cache \u8bbf\u95ee\u901f\u5ea6\u628a\u5185\u5b58\u5feb\u81f3\u5c11 100 \u500d"},{"ID":"136","typeID":"10","question":"HTTP \u534f\u8bae\u3001Socket \u534f\u8bae\u7684\u533a\u522b","answer":"HTTP \u542f\u52a8\u4e00\u4e2a NSUrlConnection \u5728 didFinish \u957f\u8fde\u63a5,\u957f\u671f\u7684\u548c\u670d\u52a1\u5668\u4fdd\u6301\u8fde\u63a5\u3002\u76ee\u7684\u662f\u4e3a\u4e86\u907f\u514d\u6bcf\u6b21\u90fd\u8981\u8fde \u63a5\u3002\u56e0\u4e3a\u548c\u670d\u52a1\u5668\u8fde\u63a5\u7684\u8fc7\u7a0b\u975e\u5e38\u590d\u6742\u3002\u4e5f\u8017\u65f6\u3002\u6240\u4ee5\u8fde\u63a5\u4e00\u6b21\u3002 HTTP \u77ed\u8fde\u63a5\u53ea\u8981\u5904\u7406\u5b8c\u5c31\u65ad\u6389,\u4e0b\u6b21\u91cd\u65b0\u8fde\u63a5 \u5bf9\u670d\u52a1\u5668\u7684\u8d1f\u62c5 \u5c0f.\r\n \u957f\u8fde\u63a5\u5bf9\u670d\u52a1\u5668\u538b\u529b\u5f88\u5927\u3002\r\n"},{"ID":"135","typeID":"10","question":"\u600e\u4e48\u5b9e\u73b0\u5bf9\u8c61\u7684\u672c\u5730\u5b58\u50a8","answer":"\u5f52\u6863 NSArchieve"},{"ID":"134","typeID":"10","question":"copy \u548c mutableCopy \u533a\u522b","answer":"copy \u662f\u62f7\u8d1d,mutableCopy \u662f\u53ef\u53d8\u62f7\u8d1d,\u6bd4\u5982\u628a NSString \u901a\u8fc7 mutableCopy \u53d8 \u6210 NSMutableString, \u628a NSArray \u901a \u8fc7 mutableCopy \u53d8\u6210 NSMutableArray.\r\nNSString -\u00e0\uf0e0NSMutableString, NSArray\u00e0\uf0e0NSMutableArray,\r\nNSDictionary\u00e0\uf0e0NSMutableDictionary, NSData->NSMutableData;"},{"ID":"133","typeID":"10","question":"copy \u662f\u6df1\u62f7\u8d1d\u8fd8\u662f\u6d45\u62f7\u8d1d","answer":"copy \u7f3a\u7701\u662f\u6d45\u62f7\u8d1d.\u4f46\u662f copy \u4e5f\u53ef\u4ee5\u505a\u6210\u6df1\u62f7\u8d1d"},{"ID":"132","typeID":"10","question":" retain\u3001copy\u3001readonly\u3001readwrite \u7684\u533a\u522b","answer":"retain\u5bf9\u8ba1\u6570\u5668+1 copy\u662f\u521b\u5efa\u4e00\u4e2a\u65b0\u5bf9\u8c61,readonly\u53ea\u4ea7\u751fgetter \u51fd\u6570,readwrite \u4ea7\u751f setter, getter \u51fd\u6570"},{"ID":"131","typeID":"10","question":"\u89e3\u91caOC\u91cc\u7684id\u7c7b\u578b","answer":"id \u662f\u6cdb\u578b\u6307\u9488,\u53ef\u4ee5\u6307\u5411\u4efb\u4f55 oc \u7c7b\u578b,\r\nid =~ NSObject *\r\nid \u662f objc_object \u7684 typedef,\u6267\u884c Class \u5bf9\u8c61"},{"ID":"130","typeID":"10","question":"\u672c\u5730\u5b58\u50a8\u65b9\u5f0f\u6709\u54ea\u51e0\u79cd","answer":"\u6570\u636e\u5e93,nsuserdefauts, file , plist,archieve \u5f52\u6863 \u6bd4\u8f83\u5c0f\u7684\u5c31\u653e\u5728 nsuserdefaults(\u4ee5\u6587\u4ef6\u8bbe\u8ba1\u7684\u5b58\u653e\u5728 Libraray \u4e2d) \u6570\u636e\u5e93\u91cc\u9762\u9002\u5408\u5b58\u653e\u4e00\u6761\u4e00\u6761\u7684\u8bb0\u5f55\r\nfile \u4e00\u822c\u5b58\u666e\u901a\u6587\u4ef6,\u56fe\u7247,\u89c6\u9891,\u97f3\u9891\u7b49\r\nplist \u5b58\u653e\u6bd4 nsuserdefaults \u5927\u4e00\u4e9b\u7684\r\n\u5f52\u6863 nsarchieve \u53ef\u4ee5\u5b58\u5bf9\u8c61\r\n"},{"ID":"129","typeID":"10","question":"POST \u548c GET \u6709\u4f55\u533a\u522b","answer":"GET \u548c POST \u90fd\u662f HTTP \u8bf7\u6c42\u65b9\u5f0f\u7684 2 \u4e2d\u3002\r\nPOST \u662f\u5b89\u5168\u7684\u3002GET \u662f\u4e0d\u5b89\u5168\u7684\u3002GET \u662f\u653e\u5728\u6d4f\u89c8\u5668\u4e2d\u5730\u5740\u66b4\u9732 \u51fa\u6765\u4e86\u3002POST \u4e0d\u4f1a\u3002\u4f46\u662f\u5728 App \u4e0a GET \u548c POST \u90fd\u770b\u4e0d\u89c1\u3002 GET \u548c POST \u90fd\u662f\u548c\u670d\u52a1\u5668\u63d0\u4ea4\u53c2\u6570\/\u901a\u8baf\u7684\u4e00\u79cd\u65b9\u5f0f\u3002\r\nGET \u53c2\u6570\u4e0d\u80fd\u592a\u957f<1024B POST \u6ca1\u6709\u9650\u5236<4G\r\nGET \u4e0d\u80fd\u4e0a\u4f20\u6587\u4ef6, POST \u53ef\u4ee5\u4e0a\u4f20\u6587\u4ef6\u3002"},{"ID":"128","typeID":"10","question":"POST \u8bf7\u6c42\u7684\u94fe\u63a5\u53c2\u6570\u600e\u4e48\u62fc\u63a5","answer":"POST \u53c2\u6570\u6709 2 \u4e2d,\u4e00\u79cd\u6587\u4ef6 POST \u4e00\u79cd\u975e\u6587\u4ef6 POST,\u5bf9\u4e8e\u975e\u6587 \u4ef6 POST \u683c \u5f0f ( form-data\/x-www-urlencoded ) \u662f name=xxx&id=22&sxx=33\r\n\u5bf9\u4e8e\u6587\u4ef6 POST(multiple\/form-data)"},{"ID":"127","typeID":"10","question":" C\/C++\u548c OC \u600e\u4e48\u6df7\u7528","answer":".m -> .mm"},{"ID":"126","typeID":"10","question":"NSString *name = @\u201d1000phone.com\u201d,[name release]\u4f1a\u51fa\u73b0\u4ec0\u4e48 \u60c5\u51b5","answer":"\u8fd9\u4e2a\u4ee3\u7801\u4e0d\u6ee1\u8db3 objective-c \u7684\u5185\u5b58\u7ba1\u7406\u9ec4\u91d1\u6cd5\u5219\u3002\u6ca1\u6709 alloc \u5c31\r\nrelease"},{"ID":"125","typeID":"10","question":"\u4ec0\u4e48\u662f\u5355\u4f8b\u6a21\u5f0f","answer":"\u5355\u4f8b\u5c31\u662f\u5728\u591a\u4e2a\u5bf9\u8c61\u4e4b\u95f4\u5171\u4eab\u6570\u636e,\u7c7b\u4f3c\u4e8e\u5168\u5c40\u53d8\u91cf,\u6bd4\u5982\u6570\u636e \u5e93\u6253\u5f00\u4e00\u6b21,\u591a\u4e2a\u754c\u9762\u90fd\u53ef\u4ee5\u4f7f\u7528"},{"ID":"124","typeID":"10","question":"\u89e3\u91caKVC\u548cKVO","answer":"Key value coding, Key value observer.\r\nKvc \u662f\u8def\u5f84\u8bbf\u95ee\u7684\u89c4\u8303,kvo \u662f\u89c2\u5bdf\u67d0\u4e2a\u53d8\u91cf\u7684\u53d8\u5316\u8fc7\u7a0b\r\nKVO \u53ef\u4ee5\u89c2\u5bdf\u67d0\u4e2a\u5bf9\u8c61\u7684\u53d8\u91cf\u53d8\u5316\u8fc7\u7a0b,KVC \u662f\u6ee1\u8db3\u88ab\u89c2\u5bdf\u7684\u7f16 \u7801\u89c4\u8303\u3002\r\nKVC\/KVO \u7c7b\u4f3c\u4e8e\u4ee3\u7406,\u901a\u77e5\u4e2d\u5fc3\u3002\u90fd\u662f\u4e00\u79cd\u901a\u8baf\u65b9\u6cd5\u3002\r\n"},{"ID":"123","typeID":"10","question":"OC \u91cc\u600e\u4e48\u5b9e\u73b0\u591a\u7ee7\u627f","answer":"OC \u6ca1\u6709\u591a\u7ee7\u627f\u3002\u7528\u534f\u8bae\u5b9e\u73b0\u591a\u7ee7\u627f,\u628a\u534f\u8bae\u4e2d\u7684\u65b9\u6cd5\u5728\u5b9e\u73b0\u7684\u7c7b \u4e2d\u91cd\u5199 C++\u6709\u591a\u7ee7\u627f,\u591a\u7ee7\u627f\u5176\u5b9e\u7528\u597d\u4e86\u5f88\u65b9\u4fbf\u3002C++\u591a\u7ee7\u627f\u5f88\u5bb9\u6613\u51fa\u73b0 \u4e8c\u4e00\u6027\u6bd4\u5982:\r\n\u7c7b A { int a;}\r\n\u7c7bB: \u7c7bA,\u7c7bC:\u7c7bA\r\n\u7c7bD : B, C\u90a3\u4e48 int a\u5230\u5e95\u662f\u7ee7\u627f\u81ea\u8c01\u7684 \u5355\u7ee7\u627f"},{"ID":"122","typeID":"10","question":"\u89e3\u91ca const, static, inline \u5173\u952e\u5b57","answer":"const \u4fee\u9970\u6307\u9488,\u6216\u8005\u5e38\u91cf,\u6bd4\u5982\u4e0d\u53ef\u53d8,\r\nstatic \u4fee\u9970\u53d8\u91cf\u8868\u793a\u4f5c\u7528\u57df,\u6bd4\u5982\u5168\u5c40\u7684\u79c1\u6709\u53d8\u91cf,\u51fd\u6570\u5185\u90e8\u7684 static \u662f\u5185\u90e8\u7684\u79c1\u6709\u53d8\u91cf\u3002\r\nStatic \u4fee\u9970\u51fd\u6570\u8868\u793a\u51fd\u6570\u662f\u6587\u4ef6\u4f5c\u7528\u57df\r\nInline \u8868\u793a\u5185\u8054\u3002\u4e00\u822c\u6765\u8bf4 inline \u9700\u8981\u548c static \u8054\u5408\u7528 \u4e00\u822c\u7528\u6cd5\u662f static inline int max(int a, int b) {\r\nreturn a>b?a:b; }\r\nstatic inline\u4f5c\u7528\u662f\u548c\u5b8f\u7c7b\u4f3c,\u53ea\u4e0d\u8fc7\u662f\u65b9\u4fbf\u8c03\u8bd5(\u5b8f\u4e0d\u80fd\u65ad\u6389\u8c03 \u8bd5,static inline \u53ef\u4ee5)\u3002\u8fd0\u884c\u65f6\u5019\u662f\u4e00\u6837\u7684\u3002\r\n\u4e00\u822c c\/c++\u77ed\u5c0f\u7684\u51fd\u6570\u90fd\u7528 static inline \u5185\u8054\u51fd\u6570"},{"ID":"121","typeID":"10","question":"\u4e0b\u62c9\u5237\u65b0\u9700\u8981\u5b9e\u73b0\u54ea\u51e0\u4e2a\u65b9\u6cd5,\u5237\u65b0\u6d41\u7a0b","answer":"\u4e0b\u6765\u4e00\u822c\u4f7f\u7528 EGORefresh \u8fdb\u884c\u3002\u539f\u7406\u662f\u5229\u7528 scrollview \u7684\u53cd\u5f39\u6548 \u679c\u628a\u5237\u65b0 view \u52a0\u8f7d scrollview \u7684\u8d1f\u5750\u6807\u4e0a\u3002\u901a\u8fc7\u4ee3\u7406\u65b9\u6cd5\u53bb\u89e6\u53d1\u3002"},{"ID":"120","typeID":"10","question":"\u5982\u4f55\u8c03\u7528 iOS \u6253\u7535\u8bdd,\u53d1\u77ed\u4fe1","answer":"[[UIApplication sharedApplication] openURL:[NSURL urlwithString:@\u201dtel:\/\/1543434\u201d]]; [[UIApplication sharedApplication] openURL:[NSURL urlwithString:@\u201dsms:\/\/1572234\u201d]]; [[UIApplication sharedApplication] openURL:[NSURL urlwithString:@\u201dmail:\/\/hello@hello.com\u201d]];\r\n[[UIApplication sharedApplication] openURL:[NSURL urlwithString:@\u201dhttp:\/\/1000phone.net\u201d]];\r\n"},{"ID":"119","typeID":"10","question":"Objective-C \u5982\u4f55\u548c javascript \u901a\u8baf","answer":"Objective-c --\u00e0\uf0e0javascript ---\u00e0\uf0e0html \u91cc\u9762\u5185\u5bb9\r\nObjective-c \u662f\u901a\u8fc7 stringByEvaluatingJavaScriptFromString \u51fd\u6570 \u6765\u6267\u884c html \u4e2d\u7684 javascript\r\nJavascript -\u00e0\uf0e0url --\u00e0\uf0e0objective-c \u672c\u5730\u65b9\u6cd5\r\n\u9700\u8981\u901a\u8fc7 uiwebview \u4e2d\u7684\u4ee3\u7406\u51fd\u6570\r\n- (BOOL)webView:(UIWebView *)webView shouldStartLoadWithRequest:(NSURLRequest *)request navigationType:(UIWebViewNavigationType)navigationType;"},{"ID":"118","typeID":"10","question":"\u600e\u4e48\u89e3\u6790 HTML \u6e90\u7801","answer":"\u4e00\u822c HTML \u662f\u901a\u8fc7 webview \u6765\u663e\u793a\u7684\u3002\u4e00\u822c\u7b80\u5355\u7684 html \u662f\u901a\u8fc7 \u89e3\u6790\u5b57\u7b26\u4e32\u6765\u89e3\u6790\u3002\u6ca1\u6709\u6210\u719f\u73b0\u6210 html \u89e3\u6790\u5668\u3002 \u4e00\u822c\u670d\u52a1\u5668\u53bb\u6293\u53d6html\u89e3\u6790html\u5f62\u6210json xml\u6587\u4ef6\u4f9b\u624b\u673a\u7aef\u8bfb \u53d6\u3002"},{"ID":"117","typeID":"10","question":"UITextField\u3001UITextView \u7684\u533a\u522b","answer":"UITextField\u4e0d\u80fd\u6362\u884c,UITextView\u53ef\u4ee5\u6362\u884c\u3002TextView\u53ef\u4ee5\u70b9\u51fb\r\n\u5b57\u4f53\u653e\u5927,\u53ef\u4ee5\u590d\u5236\u3002\u76f8\u540c\u7684\u662f\u4ed6\u4eec\u90fd\u6709\u4ee3\u7406\u7c7b\u4f3c"},{"ID":"116","typeID":"10","question":"\u4ee3\u7406\u548c\u901a\u77e5\u4e2d\u5fc3\/\u5e7f\u64ad\/NoficationCenter \u4ec0\u4e48\u533a\u522b","answer":"\u4ee3\u7406\u4e3b\u8981\u662f\u53cd\u5411\u4f20\u503c,\u4e00\u822c\u7528\u6765 1:1 \u7684\u4e24\u4e2a\u5bf9\u8c61\u901a\u8baf\u4e0a\u3002\r\n\u901a\u77e5\u4e2d\u5fc3\u662f\u901a\u8fc7\u6ce8\u518c\u7136\u540e\u63a5\u6536\u4e8b\u4ef6\u7684\u4e00\u79cd n:n(\u591a\u5bf9\u5bf9) \u7684\u65b9\u6cd5"},{"ID":"115","typeID":"10","question":"\u4ee3\u7406\u548c\u534f\u8bae\u4ec0\u4e48\u533a\u522b","answer":"\u4ee3\u7406\u662f\u4e00\u79cd\u6982\u5ff5,\u534f\u8bae\u662f\u4e00\u79cd\u6280\u672f,\u4ee3\u7406\u662f\u7528\u534f\u8bae\u6765\u5b9e\u73b0\u7684,\u4ee3\u7406 \u662f 2 \u4e2a\u5bf9\u8c61\u4e4b\u95f4\u901a\u8baf\u7684\u4e00\u79cd\u65b9\u5f0f\u3002 \u4ee3\u7406\u4e3b\u8981\u505a\u53cd\u5411\u4f20\u503c\u7684\u3002\u5b9e\u73b0\u7cfb\u7edf\u7684\u4e00\u4e9b\u56de\u8c03\u65b9\u6cd5,\u6bd4\u5982 scrollview \u6ed1\u52a8\u4e8b\u4ef6,\u9009\u62e9\u7167\u7247,asi \u7f51\u7edc\u4e0b\u8f7d\u5b8c\u6210\u7b49\u3002"},{"ID":"114","typeID":"10","question":" \u4ec0\u4e48\u662f\u5f02\u6b65","answer":"\u76f8\u5bf9\u4e8e\u540c\u6b65\u6765\u8bf4,\u5355\u72ec\u8d77\u4e00\u4e2a\u6216\u8005\u591a\u7ebf\u7a0b\u53bb\u5904\u7406 \u5f02\u6b65\u662f\u4e00\u4e2a\u6982\u5ff5 \u7ebf\u7a0b\u8fd8\u662f\u4e00\u4e2a\u6280\u672f,\u5f02\u6b65\u5c31\u662f\u7528\u7ebf\u7a0b\u8fd9\u79cd\u6280\u672f \u5b9e\u73b0\u7684\r\n\u6bd4\u5982\u754c\u9762\u4e0b\u8f7d\u6570\u636e,\u6211\u4eec\u542f\u52a8\u4e00\u4e2a\u5f02\u6b65\u4efb\u52a1 ASI \u53bb\u7f51\u7edc\u4e0b\u8f7d\u6570\u636e, \u7136\u540e\u5f02\u6b65\u5237\u65b0\u754c\u9762,\u6211\u4eec\u65e0\u9700\u7b49\u5f85\u7f51\u7edc\u6570\u636e\u4e0b\u8f7d\u5b8c\u6210."},{"ID":"113","typeID":"10","question":"\u89e3\u91ca\u591a\u7ebf\u7a0b\u3001NSThread \u3001NSOperation\u3001GCD\r\n","answer":"\u591a\u7ebf\u7a0b\u5728 iOS \u7528\u7684\u5f88\u591a,\u6bd4\u5982\u6bcf\u4e2a asi \u8bf7\u6c42,sdwebimage \u8bf7\u6c42,\u6570 \u636e\u8bf7\u6c42\u7b49\u5f85\u7b49\u7f51\u7edc\u6570\u636e\u5904\u7406,\u591a\u7ebf\u7a0b\/\u5f02\u6b65\u5c31\u662f\u4e3b\u8981\u662f\u4e3a\u4e86\u754c\u9762\u6d41 \u7545,\u9632\u6b62\u754c\u9762\u5047\u6b7b\u3002\r\n\u6bcf\u4e00\u4e2a ASI \u8bf7\u6c42\u5c31\u662f\u4e00\u4e2a NSOperation\r\n\u6bcf\u4e00\u4e2a NSUrlConnnection \u4e5f\u662f\u4e00\u4e2a\u7ebf\u7a0b\r\nNsthread \u662f\u521b\u5efa\u7ebf\u7a0b\u7684\u4e00\u4e2a\u901a\u7528\u7684\u7c7b\u3002\u6bd4\u5982\u7ebf\u7a0b\u521b\u5efa,\u53d6\u6d88,\u5f00 \u59cb\u7b49\u3002\r\nNsoperation \u5c31\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u4ee5\u4efb\u52a1\u4e3a\u5bfc\u5411\u7684\u591a\u7ebf\u7a0b\u6a21\u578b\u3002\u76ee\u7684\u662f \u4e3a\u4e86\u4e0d\u61c2\u64cd\u4f5c\u7cfb\u7edf,\u4e0d\u61c2\u7ebf\u7a0b\u7684\u4eba\u4f7f\u7528\u7684\r\nGCD \u7c7b\u4f3c\u4e8e NSOperation, \u662f\u4e00\u4e2a blocks \u7248\u672c\u7684\u7ebf\u7a0b\u6a21\u578b\u3002"},{"ID":"112","typeID":"10","question":" C \u548c OC \u6709\u54ea\u4e9b\u57fa\u672c\u6570\u636e\u7c7b\u578b","answer":"C char, short, int, struct, union, enum\r\nNSString, nsarray, nsdictionary."},{"ID":"111","typeID":"10","question":"\u7c7b\u522b\u548c\u7ee7\u627f\u4ec0\u4e48\u533a\u522b","answer":"\u7c7b\u522b\/\u7c7b\u76ee\/Category \u5f88\u65b9\u4fbf\u7ed9\u73b0\u6709\u7c7b\u6dfb\u52a0\u65b9\u6cd5\u3002\u4f46\u662f\u4e0d\u80fd\u6dfb\u52a0\u6210 \u5458\u53d8\u91cf,\u533f\u540d\u7c7b\u9664\u5916,\u6bd4\u5982\u53ef\u4ee5\u7ed9 NSString \u589e\u52a0\u65b9\u6cd5,\u7ed9 UINavigationBar \u589e\u52a0\u65b9\u6cd5,\u6bd4\u5982 SDWebImage \u7ed9 UIImageView \u589e \u52a0\u4e86 setImageWithURL:\u65b9\u6cd5\u3002\u7c7b\u522b\u5bf9\u4e8e\u4f7f\u7528\u8005\u5f88\u65b9\u4fbf\r\n\u7ee7\u627f\u53ef\u4ee5\u7ed9\u73b0\u6709\u7684\u7c7b\u589e\u52a0\u65b9\u6cd5\u548c\u6210\u5458\u53d8\u91cf\u3002\u7ee7\u627f\u5bf9\u4e8e\u4f7f\u7528\u8005\u6765 \u8bf4\u4e0d\u5982\u7c7b\u522b\u65b9\u4fbf ,\u6bd4\u5982\u5bf9 SDWebImage \u5982\u679c\u7528\u7ee7\u627f\u7684\u8bdd,\u90a3\u4e48\u5c31 \u9700\u8981\u5199\u4e00\u4e2a\u7c7b\u4f3c\u4e8e QFImageView \u7136\u540e\u628a\u6240\u6709\u7684 UIImageView \u6539\u6210\r\nQFImageView,\u8fd9\u91cc\u4e0d\u5982\u7c7b\u522b\u65b9\u4fbf"},{"ID":"110","typeID":"10","question":"\u7c7b\u522b\u7684\u4f5c\u7528","answer":"\u7c7b\u522b\u662f\u7ed9\u5df2\u6709\u7684\u7c7b\u6dfb\u52a0\u65b9\u6cd5,\u4f46\u662f\u4e0d\u80fd\u6dfb\u52a0\u53d8\u91cf,\u533f\u540d\u7c7b\u522b\u9664\u5916 ()"},{"ID":"109","typeID":"10","question":"\u4f60\u5982\u4f55\u7406\u89e3\u590d\u7528\u673a\u5236","answer":"\u4e00\u822c\u662f\u5bf9 uiscrollview \u505a\u590d\u7528\u673a\u5236,\u56e0\u4e3a uiscrollview \u6eda\u52a8\u7a97\u53e3\u6ca1 \u6709\u590d\u7528,\u6240\u4ee5\u8981\u505a,\u539f\u7406\u5c31\u662f\u8d85\u8fc7\u5c4f\u5e55\u7684 view \u4e0d\u80fd\u9500\u6bc1,\u800c\u8981\u653e \u5728\u590d\u7528\u961f\u5217\/\u6c60\u91cc\u9762\u5b58\u653e\u8d77\u6765,\u7136\u540e\u4ee5\u540e\u8981\u5728scrollview\u663e\u793aview \u9996\u5148\u4e0d\u8981 alloc \u521b\u5efa,\u800c\u8981\u9996\u5148\u53bb\u590d\u7528\u6c60\u91cc\u9762\u627e\u6709\u6ca1\u6709\u53ef\u590d\u7528\u7684 view,\u5982\u679c\u6ca1\u6709\u5c31 alloc \u5982\u679c\u6709\u5c31\u76f4\u63a5\u7528\u3002"},{"ID":"108","typeID":"10","question":"\u7011\u5e03\u6d41\u600e\u4e48\u7406\u89e3\u548c\u5b9e\u73b0\u7684","answer":"1. \u5982\u679c\u7b80\u5355\u7684\u6765\u8bf4,\u7528 3 \u4e2a tableview \u5c31\u53ef\u4ee5\u5b9e\u73b0\u7011\u5e03\u6d41,3 \u4e2a tableview \u5b9e\u73b0\u8054\u52a8\u6eda\u52a8\u3002\r\n2. \u5176\u5b9e\u6700\u597d\u7684\u505a\u6cd5\u5728 scrollview \u4e0a\u4f7f\u7528 3 \u4e2a\u590d\u7528\u961f\u5217,\u5982\u679c\u4e00\u79cd \u4e00\u4e2a cell \u8d85\u8fc7\u5c4f\u5e55,\u4e0d\u80fd release,\u800c\u662f\u628a\u5b83\u56de\u6536\u5230\u590d\u7528\u961f\u5217\u4e2d, \u5982\u679c\u8981\u521b\u5efa\u4e00\u4e2a cell,\u9996\u5148\u4ece\u590d\u7528\u961f\u5217\u4e2d\u53d6\u4e00\u4e2a,\u7136\u540e\u4f7f\u7528\u3002"},{"ID":"107","typeID":"10","question":"\u5e38\u89c1\u7684\u70b9\u51fb\u624b\u52bf\u6709\u54ea\u51e0\u79cd","answer":"UIPinchGuesture, UITapGuesture, UISwipGuesture,\r\nUILongPressGuesture, UIRotationGuesture"},{"ID":"106","typeID":"10","question":"\u4ec0\u4e48\u662f MVC \u6a21\u5f0f","answer":"Model, View, Controller, \u662f iOS \u5f00\u53d1\u4e2d\u7684\u5178\u578b\u7684\u8bbe\u8ba1\u6a21\u5f0f\u3002\u6bd4\u5982\u901a \u8fc7 http \u628a\u7f51\u7edc\u6570\u636e\u4e0b\u8f7d\u5e76\u89e3\u6790\u7136\u540e\u5b58\u4e8e\u81ea\u5df1\u7684\u6570\u636e\u6a21\u578b Model \u4e2d, \u7136\u540e\u901a\u77e5 controller \u53bb\u5237\u65b0\u754c\u9762,\u901a\u8fc7 controller \u8bb2 Model \u548c View \u8fdb\u884c\u5173\u8054,\u8fd9\u79cd\u6a21\u5f0f\u5c31\u53eb mvc\u3002\r\n\u8fd9\u6837\u7684\u597d\u5904\u662f,\u53ef\u4ee5\u9694\u79bb\u6570\u636e\u6a21\u578b model \u548c View \u754c\u9762\u3002\u9075\u5faa\u4e86\u4f4e \u8026\u5408\u7684\u8bbe\u8ba1\u601d\u60f3."},{"ID":"105","typeID":"10","question":"\u754c\u9762\u4e4b\u95f4\u4f20\u503c\u6709\u54ea\u51e0\u79cd\u65b9\u6cd5","answer":"\u5355\u4f8b,\u4ee3\u7406,\u76f4\u63a5\u8d4b\u503c,\u901a\u77e5\u4e2d\u5fc3\/\u5e7f\u64ad, \u6570\u636e\u5e93\u7b49\u591a\u79cd"},{"ID":"104","typeID":"10","question":"\u89e3\u91ca TCP\/IP \u534f\u8bae","answer":"TCP\/IP \u662f\u7f51\u7edc\u5f00\u53d1\u4e2d\u5e38\u89c1\u7684\u4f20\u8f93\u534f\u8bae,\u4ed6\u4f20\u8f93\u548c udp \u76f8\u6bd4\u662f\u53ef\u9760 \u7684\u3002http \u662f\u57fa\u4e8e tcp\/ip \u7684\u4e3b\u8981\u7528\u6237\u4e92\u8054\u7f51\u7684\u534f\u8bae\r\n\u6240\u8c13\u53ef\u9760\u662f tcp \u4f20\u8f93\u5bf9\u65b9\u4f1a\u7ed9\u4e00\u4e2a ACK \u4fe1\u53f7(\u786e\u8ba4\u4fe1\u53f7)\r\ntcp \u4f20\u8f93\u4e0d\u5982 udp \u5feb,\u541e\u5410\u91cf\u4e0d\u5982 udp \u5927\r\ntcp \u662f\u987a\u5e8f\u7684,udp \u662f\u65e0\u5e8f\u7684\r\ntcp \u4f1a\u4fdd\u6301\u8fde\u63a5,udp \u4e0d\u4f1a\u4fdd\u6301\u8fde\u63a5"},{"ID":"103","typeID":"10","question":"\u6d45\u62f7\u8d1d\u4e0e\u6df1\u62f7\u8d1d\u7684\u533a\u522b \u6216\u8005\u4ec0\u4e48\u662f\u6df1\u62f7\u8d1d \u4ec0\u4e48\u662f\u6d45\u62f7\u8d1d","answer":"copy, mutableCopy\r\n@interface A {\r\nB *b; }\r\n\u6d45\u62f7\u8d1d\u53ea\u662f\u62f7\u8d1d\u5bf9\u8c61\u672c\u8eab,\u4e0d\u4f1a\u5bf9\u91cc\u9762\u7684\u5b50\u5bf9\u8c61\u8fdb\u4e00\u6b65\u62f7\u8d1d\r\n \u6df1\u62f7\u8d1d\u4f1a\u5bf9\u5b50\u5bf9\u8c61\u4ee5\u53ca\u5b50\u5bf9\u8c61\u7684\u5b50\u5bf9\u8c61\u8fdb\u4e00\u6b65\u62f7\u8d1d\r\n"},{"ID":"102","typeID":"10","question":"C\u8bed\u8a00\u91cc\u7684\u6570\u7ec4\u4e0eOC\u6570\u7ec4\u7684\u533a\u522b","answer":"OC \u6570\u7ec4\u662f\u4e00\u4e2a\u5bf9\u8c61,\u6709\u5927\u91cf\u7684\u65b9\u6cd5,c \u6ca1\u6709\u90fd\u9700\u8981\u81ea\u5df1\u5199 C \u6570\u7ec4\u5220\u9664\u662f\u9700\u8981\u540e\u9762\u5f80\u524d\u79fb\u52a8,oc \u6570\u7ec4\u81ea\u52a8\u5904\u7406"},{"ID":"101","typeID":"10","question":"\u4f60\u5982\u4f55\u7406\u89e3 iOS \u5185\u5b58\u7ba1\u7406","answer":"1. new alloc copy retain\u8fd9\u4e9b\u5bf9\u8c61\u6211\u4eec\u90fd\u8981\u4e3b\u52a8\u7684release\u6216\u8005 autorelease\r\n2. \u5982\u679c\u662f\u7c7b\u65b9\u6cd5\u521b\u5efa\u7684\u5bf9\u8c61,\u90a3\u4e48\u7cfb\u7edf\u81ea\u52a8\u91ca\u653e\u6c60\u81ea\u52a8\u5728\u9002\u5f53\u7684 \u65f6\u5019\u4f1a\u5e2e\u6211\u4eec release\r\n3. ARC xcode \u81ea\u52a8\u4f1a\u5e2e\u6211\u4eec\u4eba\u5de5\u667a\u80fd\u7684\u6dfb\u52a0 release autorelease \u64cd \u4f5c\r\n"},{"ID":"10","typeID":"10","question":"\u5728\u9879\u76ee\u4ec0\u4e48\u65f6\u5019\u9009\u62e9\u4f7f\u7528GCD\uff0c\u4ec0\u4e48\u65f6\u5019\u9009\u62e9NSOperation\uff1f","answer":"\u9879\u76ee\u4e2d\u4f7f\u7528NSOperation\u7684\u4f18\u70b9\u662fNSOperation\u662f\u5bf9\u7ebf\u7a0b\u7684\u9ad8\u5ea6\u62bd\u8c61\uff0c\u5728\u9879\u76ee\u4e2d\u4f7f\u7528\u5b83\uff0c\u4f1a\u4f7f\u9879\u76ee\u7684\u7a0b\u5e8f\u7ed3\u6784\u66f4\u597d\uff0c\u5b50\u7c7b\u5316NSOperation\u7684\u8bbe\u8ba1\u601d\u8def\uff0c\u662f\u5177\u6709\u9762\u5411\u5bf9\u8c61\u7684\u4f18\u70b9\uff08\u590d\u7528\u3001\u5c01\u88c5\uff09\uff0c\u4f7f\u5f97\u5b9e\u73b0\u662f\u591a\u7ebf\u7a0b\u652f\u6301\uff0c\u800c\u63a5\u53e3\u7b80\u5355\uff0c\u5efa\u8bae\u5728\u590d\u6742\u9879\u76ee\u4e2d\u4f7f\u7528\u3002\r\n\u9879\u76ee\u4e2d\u4f7f\u7528GCD\u7684\u4f18\u70b9\u662fGCD\u672c\u8eab\u975e\u5e38\u7b80\u5355\u3001\u6613\u7528\uff0c\u5bf9\u4e8e\u4e0d\u590d\u6742\u7684\u591a\u7ebf\u7a0b\u64cd\u4f5c\uff0c\u4f1a\u8282\u7701\u4ee3\u7801\u91cf\uff0c\u800cBlock\u53c2\u6570\u7684\u4f7f\u7528\uff0c\u4f1a\u662f\u4ee3\u7801\u66f4\u4e3a\u6613\u8bfb\uff0c\u5efa\u8bae\u5728\u7b80\u5355\u9879\u76ee\u4e2d\u4f7f\u7528\u3002"},{"ID":"9","typeID":"10","question":"ASI \u539f\u7406\u662f\u4ec0\u4e48?\u8bf7\u4e3e\u4f8b\u6765\u8bf4\u660e\u4f60\u5e73\u65f6\u7528\u7684\u90a3\u4e9b\u6587\u4ef6\uff1f","answer":"ASI \u4f7f\u7528apple\u5e95\u5c42 CFNetworking \u6846\u67b6\u5b9e\u73b0\u7684\uff0c\u800c\u4e0d\u662f\u7528 Socket \u5957\u63a5\u5b57\u5b9e\u73b0\u7684\u3002  \u4ed6\u662f\u4e00\u4e2a\u57fa\u4e8eNSOperation\uff08\u62bd\u8c61\u7c7b\uff09\u7684\u7ebf\u7a0b\u5904\u7406\u7f51\u7edc\u6846\u67b6 CFNetwork \u662f\u57fa\u4e8eInputSteam \/ Outstream \u6d41\u7684\u65b9\u5f0f\u7ba1\u7406\u6570\u636e\uff0c\u5b83\u5185\u90e8\u4f7f\u7528\u4e86\u591a\u7ebf\u7a0b\u5f02\u6b65\u6a21\u5f0f\u8fdb\u884c\u6570\u636e\u7684\u901a\u8baf\uff0c\u6bd4\u5982\u6570\u636e\u4e0a\u4f20\u8fdb\u5ea6\uff0c\u4e0b\u8f7d\u8fdb\u5ea6\uff0c\u7f13\u5b58\u7684\u7ba1\u7406\u673a\u5236\uff0c\u5927\u6587\u4ef6\u4e0b\u8f7d\uff0c\u5927\u6587\u4ef6\u4e0a\u4f20\uff0c\u5b89\u5168\u673a\u5236\u3002"},{"ID":"8","typeID":"10","question":"\u4ec0\u4e48\u662fblock\uff1fblock \u5b9e\u73b0\u539f\u7406\uff1f\u591a\u7ebf\u7a0b\u4e0eblock\u6709\u4ec0\u4e48\u5173\u7cfb\uff1f\u5199\u4e2a\u4f8b\u5b50\u3002","answer":"1 \u4ec0\u4e48\u662fblock\r\n\r\n\u5bf9\u4e8e\u95ed\u5305\uff08block),\u6709\u5f88\u591a\u5b9a\u4e49\uff0c\u5176\u4e2d\u95ed\u5305\u5c31\u662f\u80fd\u591f\u8bfb\u53d6\u5176\u5b83\u51fd\u6570\u5185\u90e8\u53d8\u91cf\u7684\u51fd\u6570\uff0c\u8fd9\u4e2a\u5b9a\u4e49\u5373\u63a5\u8fd1\u672c\u8d28\u53c8\u8f83\u597d\u7406\u89e3\u3002\u5bf9\u4e8e\u521a\u63a5\u89e6Block\u7684\u540c\u5b66\uff0c\u4f1a\u89c9\u5f97\u6709\u4e9b\u7ed5\uff0c\u56e0\u4e3a\u6211\u4eec\u4e60\u60ef\u5199\u8fd9\u6837\u7684\u7a0b\u5e8fmain(){ funA();} funA(){funB();} funB(){.....}; \u5c31\u662f\u51fd\u6570main\u8c03\u7528\u51fd\u6570A\uff0c\u51fd\u6570A\u8c03\u7528\u51fd\u6570B... \u51fd\u6570\u4eec\u4f9d\u6b21\u987a\u5e8f\u6267\u884c\uff0c\u4f46\u73b0\u5b9e\u4e2d\u4e0d\u5168\u662f\u8fd9\u6837\u7684\uff0c\u4f8b\u5982\u9879\u76ee\u7ecf\u7406M\uff0c\u624b\u4e0b\u67093\u4e2a\u7a0b\u5e8f\u5458A\u3001B\u3001C\uff0c\u5f53\u4ed6\u7ed9\u7a0b\u5e8f\u5458A\u5b89\u6392\u5b9e\u73b0\u529f\u80fdF1\u65f6\uff0c\u4ed6\u5e76\u4e0d\u7b49\u7740A\u5b8c\u6210\u4e4b\u540e\uff0c\u518d\u53bb\u5b89\u6392B\u53bb\u5b9e\u73b0F2\uff0c\u800c\u662f\u5b89\u6392\u7ed9A\u529f\u80fdF1\uff0cB\u529f\u80fdF2\uff0cC\u529f\u80fdF3\uff0c\u7136\u540e\u53ef\u80fd\u53bb\u5199\u6280\u672f\u6587\u6863\uff0c\u800c\u5f53A\u9047\u5230\u95ee\u9898\u65f6\uff0c\u4ed6\u4f1a\u6765\u627e\u9879\u76ee\u7ecf\u7406M\uff0c\u5f53B\u505a\u5b8c\u65f6\uff0c\u4f1a\u901a\u77e5M\uff0c\u8fd9\u5c31\u662f\u4e00\u4e2a\u5f02\u6b65\u6267\u884c\u7684\u4f8b\u5b50\u3002\u5728\u8fd9\u79cd\u60c5\u5f62\u4e0b\uff0cBlock\u4fbf\u53ef\u5927\u663e\u8eab\u624b\uff0c\u56e0\u4e3a\u5728\u9879\u76ee\u7ecf\u7406M\uff0c\u7ed9A\u5b89\u6392\u5de5\u4f5c\u65f6\uff0c\u540c\u65f6\u4f1a\u544a\u8bc9A\u82e5\u679c\u9047\u5230\u56f0\u96be\uff0c\u5982\u4f55\u80fd\u627e\u5230\u4ed6\u62a5\u544a\u95ee\u9898\uff08\u4f8b\u5982\u6253\u4ed6\u624b\u673a\u53f7\uff09\uff0c\u8fd9\u5c31\u662f\u9879\u76ee\u7ecf\u7406M\u7ed9A\u7684\u4e00\u4e2a\u56de\u8c03\u63a5\u53e3\uff0c\u8981\u56de\u6389\u7684\u64cd\u4f5c\uff0c\u6bd4\u5982\u63a5\u5230\u7535\u8bdd\uff0c\u767e\u5ea6\u67e5\u8be2\u540e\uff0c\u8fd4\u56de\u7f51\u9875\u5185\u5bb9\u7ed9A\uff0c\u8fd9\u5c31\u662f\u4e00\u4e2aBlock\uff0c\u5728M\u4ea4\u5f85\u5de5\u4f5c\u65f6\uff0c\u5df2\u7ecf\u5b9a\u4e49\u597d\uff0c\u5e76\u4e14\u53d6\u5f97\u4e86F1\u7684\u4efb\u52a1\u53f7\uff08\u5c40\u90e8\u53d8\u91cf\uff09\uff0c\u5374\u662f\u5728\u5f53A\u9047\u5230\u95ee\u9898\u65f6\uff0c\u624d\u8c03\u7528\u6267\u884c\uff0c\u8de8\u51fd\u6570\u5728\u9879\u76ee\u7ecf\u7406M\u67e5\u8be2\u767e\u5ea6\uff0c\u83b7\u5f97\u7ed3\u679c\u540e\u56de\u8c03\u8be5block\u3002\r\n\r\n2 block \u5b9e\u73b0\u539f\u7406\r\nObjective-C\u662f\u5bf9C\u8bed\u8a00\u7684\u6269\u5c55\uff0cblock\u7684\u5b9e\u73b0\u662f\u57fa\u4e8e\u6307\u9488\u548c\u51fd\u6570\u6307\u9488\u3002\r\n\u4ece\u8ba1\u7b97\u8bed\u8a00\u7684\u53d1\u5c55\uff0c\u6700\u65e9\u7684goto\uff0c\u9ad8\u7ea7\u8bed\u8a00\u7684\u6307\u9488\uff0c\u5230\u9762\u5411\u5bf9\u8c61\u8bed\u8a00\u7684block\uff0c\u4ece\u673a\u5668\u7684\u601d\u7ef4\uff0c\u4e00\u6b65\u6b65\u63a5\u8fd1\u4eba\u7684\u601d\u7ef4\uff0c\u4ee5\u65b9\u4fbf\u5f00\u53d1\u4eba\u5458\u66f4\u4e3a\u9ad8\u6548\u3001\u76f4\u63a5\u7684\u63cf\u8ff0\u51fa\u73b0\u5b9e\u7684\u903b\u8f91\uff08\u9700\u6c42\uff09\u3002\r\n\u4e0b\u9762\u662f\u4e24\u7bc7\u5f88\u597d\u7684\u4ecb\u7ecdblock\u5b9e\u73b0\u7684\u535a\u6587\r\niOS\u4e2dblock\u5b9e\u73b0\u7684\u63a2\u7a76\r\n\u8c08Objective-C Block\u7684\u5b9e\u73b0\r\n\r\n\r\n3 block\u7684\u4f7f\u7528\r\n\u4f7f\u7528\u5b9e\u4f8b\r\ncocoaTouch\u6846\u67b6\u4e0b\u52a8\u753b\u6548\u679c\u7684Block\u7684\u8c03\u7528\r\n\r\n\u4f7f\u7528typed\u58f0\u660eblock\r\ntypedef void(^didFinishBlock) (NSObject *ob);\r\n\u8fd9\u5c31\u58f0\u660e\u4e86\u4e00\u4e2adidFinishBlock\u7c7b\u578b\u7684block\uff0c\r\n\u7136\u540e\u4fbf\u53ef\u7528\r\n@property (nonatomic,copy) didFinishBlock  finishBlock;\r\n\u58f0\u660e\u4e00\u4e2ablokc\u5bf9\u8c61\uff0c\u6ce8\u610f\u5bf9\u8c61\u5c5e\u6027\u8bbe\u7f6e\u4e3acopy\uff0c\u63a5\u5230block \u53c2\u6570\u65f6\uff0c\u4fbf\u4f1a\u81ea\u52a8\u590d\u5236\u4e00\u4efd\u3002\r\n\r\n__block\u662f\u4e00\u79cd\u7279\u6b8a\u7c7b\u578b\uff0c\r\n\u4f7f\u7528\u8be5\u5173\u952e\u5b57\u58f0\u660e\u7684\u5c40\u90e8\u53d8\u91cf\uff0c\u53ef\u4ee5\u88abblock\u6240\u6539\u53d8\uff0c\u5e76\u4e14\u5176\u5728\u539f\u51fd\u6570\u4e2d\u7684\u503c\u4f1a\u88ab\u6539\u53d8\u3002\r\n\r\n\r\n4 \u5e38\u89c1\u7cfb\u5217\u9762\u8bd5\u9898\r\n\u9762\u8bd5\u65f6\uff0c\u9762\u8bd5\u5b98\u4f1a\u5148\u95ee\u4e00\u4e9b\uff0c\u662f\u5426\u4e86\u89e3block\uff0c\u662f\u5426\u4f7f\u7528\u8fc7block\uff0c\u8fd9\u4e9b\u95ee\u9898\u76f8\u5f53\u4e8e\u5f00\u573a\u767d\uff0c\u5f80\u5f80\u662f\u4e0b\u9762\u4e00\u7cfb\u5217\u95ee\u9898\u7684\u5f00\u59cb\uff0c\u6240\u4ee5\u4e00\u5b9a\u8981\u5982\u5b9e\u6839\u636e\u81ea\u5df1\u7684\u60c5\u51b5\u56de\u7b54\u3002\r\n1 \u4f7f\u7528block\u548c\u4f7f\u7528delegate\u5b8c\u6210\u59d4\u6258\u6a21\u5f0f\u6709\u4ec0\u4e48\u4f18\u70b9\uff1f\r\n\u9996\u5148\u8981\u4e86\u89e3\u4ec0\u4e48\u662f\u59d4\u6258\u6a21\u5f0f\uff0c\u59d4\u6258\u6a21\u5f0f\u5728iOS\u4e2d\u5927\u91cf\u5e94\u7528\uff0c\u5176\u5728\u8bbe\u8ba1\u6a21\u5f0f\u4e2d\u662f\u9002\u914d\u5668\u6a21\u5f0f\u4e2d\u7684\u5bf9\u8c61\u9002\u914d\u5668\uff0cObjective-C\u4e2d\u4f7f\u7528id\u7c7b\u578b\u6307\u5411\u4e00\u5207\u5bf9\u8c61\uff0c\u4f7f\u59d4\u6258\u6a21\u5f0f\u66f4\u4e3a\u7b80\u6d01\u3002\u4e86\u89e3\u59d4\u6258\u6a21\u5f0f\u7684\u7ec6\u8282\uff1a\r\n iOS\u8bbe\u8ba1\u6a21\u5f0f----\u59d4\u6258\u6a21\u5f0f \r\n\u4f7f\u7528block\u5b9e\u73b0\u59d4\u6258\u6a21\u5f0f\uff0c\u5176\u4f18\u70b9\u662f\u56de\u8c03\u7684block\u4ee3\u7801\u5757\u5b9a\u4e49\u5728\u59d4\u6258\u5bf9\u8c61\u51fd\u6570\u5185\u90e8\uff0c\u4f7f\u4ee3\u7801\u66f4\u4e3a\u7d27\u51d1\uff1b\r\n\u9002\u914d\u5bf9\u8c61\u4e0d\u518d\u9700\u8981\u5b9e\u73b0\u5177\u4f53\u67d0\u4e2aprotocol\uff0c\u4ee3\u7801\u66f4\u4e3a\u7b80\u6d01\u3002\r\n\r\n\r\n2 \u591a\u7ebf\u7a0b\u4e0eblock\r\nGCD\u4e0eBlock\r\n\u4f7f\u7528 dispatch_async \u7cfb\u5217\u65b9\u6cd5\uff0c\u53ef\u4ee5\u4ee5\u6307\u5b9a\u7684\u65b9\u5f0f\u6267\u884cblock\r\nGCD\u7f16\u7a0b\u5b9e\u4f8b\r\n\r\ndispatch_async\u7684\u5b8c\u6574\u5b9a\u4e49\r\n   void dispatch_async(\r\n   dispatch_queue_t queue,\r\n   dispatch_block_t block);\r\n\u529f\u80fd\uff1a\u5728\u6307\u5b9a\u7684\u961f\u5217\u91cc\u63d0\u4ea4\u4e00\u4e2a\u5f02\u6b65\u6267\u884c\u7684block\uff0c\u4e0d\u963b\u585e\u5f53\u524d\u7ebf\u7a0b\r\n\r\n\u901a\u8fc7queue\u6765\u63a7\u5236block\u6267\u884c\u7684\u7ebf\u7a0b\u3002\u4e3b\u7ebf\u7a0b\u6267\u884c\u524d\u6587\u5b9a\u4e49\u7684 finishBlock\u5bf9\u8c61\r\ndispatch_async(dispatch_get_main_queue(),^(void){finishBlock();}); "},{"ID":"7","typeID":"10","question":"\u5c5e\u6027readwrite\uff0creadonly\uff0cassign\uff0cretain\uff0ccopy\uff0cnonatomic \u5404\u662f\u4ec0\u4e48\u4f5c\u7528\uff0c\u5728\u90a3\u79cd\u60c5\u51b5\u4e0b\u7528\uff1f","answer":"readwrite \u662f\u53ef\u8bfb\u53ef\u5199\u7279\u6027\uff1b\u9700\u8981\u751f\u6210getter\u65b9\u6cd5\u548csetter\u65b9\u6cd5\u65f6\r\n\r\nreadonly \u662f\u53ea\u8bfb\u7279\u6027  \u53ea\u4f1a\u751f\u6210getter\u65b9\u6cd5 \u4e0d\u4f1a\u751f\u6210setter\u65b9\u6cd5 ;\u4e0d\u5e0c\u671b\u5c5e\u6027\u5728\u7c7b\u5916\u6539\u53d8\r\n\r\nassign \u662f\u8d4b\u503c\u7279\u6027\uff0csetter\u65b9\u6cd5\u5c06\u4f20\u5165\u53c2\u6570\u8d4b\u503c\u7ed9\u5b9e\u4f8b\u53d8\u91cf\uff1b\u4ec5\u8bbe\u7f6e\u53d8\u91cf\u65f6\uff1b\r\n\r\nretain \u8868\u793a\u6301\u6709\u7279\u6027\uff0csetter\u65b9\u6cd5\u5c06\u4f20\u5165\u53c2\u6570\u5148\u4fdd\u7559\uff0c\u518d\u8d4b\u503c\uff0c\u4f20\u5165\u53c2\u6570\u7684retaincount\u4f1a+1;\r\n\r\ncopy \u8868\u793a\u8d4b\u503c\u7279\u6027\uff0csetter\u65b9\u6cd5\u5c06\u4f20\u5165\u5bf9\u8c61\u590d\u5236\u4e00\u4efd\uff1b\u9700\u8981\u5b8c\u5168\u4e00\u4efd\u65b0\u7684\u53d8\u91cf\u65f6\u3002\r\n\r\nnonatomic \u975e\u539f\u5b50\u64cd\u4f5c\uff0c\u51b3\u5b9a\u7f16\u8bd1\u5668\u751f\u6210\u7684setter getter\u662f\u5426\u662f\u539f\u5b50\u64cd\u4f5c\uff0catomic\u8868\u793a\u591a\u7ebf\u7a0b\u5b89\u5168\uff0c\u4e00\u822c\u4f7f\u7528nonatomic\u3002"},{"ID":"6","typeID":"10","question":"\u5bf9\u4e8e\u8bed\u53e5NSString*obj = [[NSData alloc] init]; obj\u5728\u7f16\u8bd1\u65f6\u548c\u8fd0\u884c\u65f6\u5206\u522b\u65f6\u4ec0\u4e48\u7c7b\u578b\u7684\u5bf9\u8c61\uff1f","answer":"\u7f16\u8bd1\u65f6\u662fNSString\u7684\u7c7b\u578b\uff1b\u8fd0\u884c\u65f6\u662fNSData\u7c7b\u578b\u7684\u5bf9\u8c61\u3002"},{"ID":"5","typeID":"10","question":"\u5982\u4f55\u7406\u89e3\u7ebf\u7a0b ?","answer":"\uff081\uff09iOS \u7ebf\u7a0b\u662f\u4e3a\u4e86\u754c\u9762\u6d41\u7a0b\uff0c\u9632\u6b62\u9875\u9762\u5047\u6b7b\u3002\u6bd4\u5982\u89e3\u6790\u4e00\u4e2a\u5927\u6587\u4ef6\uff0c\u6bd4\u5982\u4e00\u4e2a\u5730\u533a\u7684\u8be6\u60c5\u6587\u4ef6\uff0c\u89e3\u6790\u65f6\u95f4\u6bd4\u5982\u662f10\u79d2\uff0c\u90a3\u4e48\u4e0d\u7528\u7ebf\u7a0b\u7684\u8bdd\uff0c\u754c\u9762\u5c31\u4f1a\u5047\u6b7b\u3001\u5361\u987f10\u79d2\u5de6\u53f3\u3002\u7528\u6237\u4f53\u9a8c\u5dee\uff0c\u90a3\u4e48\u89e3\u51b3\u65b9\u6cd5\u5c31\u662f\u5f88\u5feb\u628a\u754c\u9762\u6682\u65f6 \u542f\u52a8\u7ebf\u7a0b\u53bb\u540e\u53f0\u89e3\u6790;\r\n\uff082\uff09\u518d\u6bd4\u5982\u505a\u56fe\u7247\u6ee4\u955c\uff0c\u56fe\u50cf\u64cd\u4f5c\u4f1a\u8017\u8d39\u5f88\u591a\u65f6\u95f4\uff0c\u6bd4\u59825\u79d2\u5de6\u53f3\uff0c\u754c\u9762\u5c31\u4f1a\u5047\u6b7b;\r\n\uff083\uff09\u7f51\u7edc\u4e0b\u8f7d\u6570\u636e\uff0c\u7528\u4e8e\u7f51\u7edc\u72b6\u6001\u597d\u574f\u65f6\u95f4\u4e0d\u786e\u5b9a\uff0c\u90a3\u4e48\u6211\u4eec\u9700\u8981\u4f7f\u7528\u7ebf\u7a0b \u6765\u5904\u7406\u8fd9\u4e2d\u4e0d\u786e\u5b9a\u7684\u5173\u7cfb\uff0c\u4e00\u5b9a\u6570\u636e\u63a5\u6536\u5b8c\u6210\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u901a\u77e5\u4e3b\u7ebf\u7a0b\u5904\u7406;\r\n\uff084\uff09\u518d\u6bd4\u5982\u8bfb\u53d6\u6570\u636e\u5168\u56fd\u7535\u8bdd\u53f7\u7801\u6570\u636e\u5e93\uff0c\u65f6\u95f4\u5f88\u957f\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u901a\u8fc7\u7ebf\u7a0b\u6765\u505a; \r\n\uff085\uff09\u7279\u522b\u5f3a\u8c03\u7684\u662f\uff0c\u7ebf\u7a0b\u4e0d\u662f\u5feb\uff0c\u5c31\u662f\u4e3a\u4e86\u7ed9\u7528\u6237\u4e00\u4e2a\u5feb\u7684\u5047\u8c61."},{"ID":"4","typeID":"10","question":"\u63cf\u8ff0\u4e00\u4e0biOS SDK\u4e2d\u5982\u4f55\u5b9e\u73b0MVC\u7684\u5f00\u53d1\u6a21\u5f0f\uff1f","answer":"MVC\u662f\u6a21\u578b\u3001\u8bd5\u56fe\u3001\u63a7\u5236\u5f00\u53d1\u6a21\u5f0f\uff0c\u5bf9\u4e8eiOS SDK\uff0c\u6240\u6709\u7684View\u90fd\u662f\u89c6\u56fe\u5c42\u7684\uff0c\u5b83\u5e94\u8be5\u72ec\u7acb\u4e8e\u6a21\u578b\u5c42\uff0c\u7531\u89c6\u56fe\u63a7\u5236\u5c42\u6765\u63a7\u5236\u3002\u6240\u6709\u7684\u7528\u6237\u6570\u636e\u90fd\u662f\u6a21\u578b\u5c42\uff0c\u5b83\u5e94\u8be5\u72ec\u7acb\u4e8e\u89c6\u56fe\u3002\u6240\u6709\u7684ViewController\u90fd\u662f\u63a7\u5236\u5c42\uff0c\u7531\u5b83\u8d1f\u8d23\u63a7\u5236\u89c6\u56fe\uff0c\u8bbf\u95ee\u6a21\u578b\u6570\u636e\u3002"},{"ID":"3","typeID":"10","question":"Objective-C\u5982\u4f55\u5bf9\u5185\u5b58\u7ba1\u7406\u7684,\u8bf4\u8bf4\u4f60\u7684\u770b\u6cd5\u548c\u89e3\u51b3\u65b9\u6cd5?","answer":"Objective-C\u7684\u5185\u5b58\u7ba1\u7406\u4e3b\u8981\u6709\u4e09\u79cd\u65b9\u5f0fARC\uff08\u81ea\u52a8\u5185\u5b58\u8ba1\u6570\uff09\u3001\u624b\u52a8\u5185\u5b58\u8ba1\u6570\u3001\u5185\u5b58\u6c60\u3002"},{"ID":"2","typeID":"10","question":"Object\uff0dc\u7684\u7c7b\u53ef\u4ee5\u591a\u91cd\u7ee7\u627f\u4e48\uff1f\u53ef\u4ee5\u5b9e\u73b0\u591a\u4e2a\u63a5\u53e3\u4e48\uff1fCategory\u662f\u4ec0\u4e48\uff1f\u91cd\u5199\u4e00\u4e2a\u7c7b\u7684\u65b9\u5f0f\u7528\u7ee7\u627f\u597d\u8fd8\u662f\u5206\u7c7b\u597d\uff1f\u4e3a\u4ec0\u4e48\uff1f","answer":"Object-c\u7684\u7c7b\u4e0d\u53ef\u4ee5\u591a\u91cd\u7ee7\u627f\uff1b\u53ef\u4ee5\u5b9e\u73b0\u591a\u4e2a\u63a5\u53e3\uff0c\u901a\u8fc7\u5b9e\u73b0\u591a\u4e2a\u63a5\u53e3\u53ef\u4ee5\u5b8c\u6210C++\u7684\u591a\u91cd\u7ee7\u627f\uff1bCategory\u662f\u7c7b\u522b\uff0c\u4e00\u822c\u60c5\u51b5\u7528\u5206\u7c7b\u597d\uff0c\u7528Category\u53bb\u91cd\u5199\u7c7b\u7684\u65b9\u6cd5\uff0c\u4ec5\u5bf9\u672cCategory\u6709\u6548\uff0c\u4e0d\u4f1a\u5f71\u54cd\u5230\u5176\u4ed6\u7c7b\u4e0e\u539f\u6709\u7c7b\u7684\u5173\u7cfb\u3002"},{"ID":"1","typeID":"10","question":"#import \u8ddf#include \u6709\u4ec0\u4e48\u533a\u522b\uff0c@class\u5462, \uff03import<> \u8ddf #import\u201d\"\u6709\u4ec0\u4e48\u533a\u522b\uff1f","answer":"#import\u662fObjective-C\u5bfc\u5165\u5934\u6587\u4ef6\u7684\u5173\u952e\u5b57\uff0c#include\u662fC\/C++\u5bfc\u5165\u5934\u6587\u4ef6\u7684\u5173\u952e\u5b57,\u4f7f\u7528#import\u5934\u6587\u4ef6\u4f1a\u81ea\u52a8\u53ea\u5bfc\u5165\u4e00\u6b21\uff0c\u4e0d\u4f1a\u91cd\u590d\u5bfc\u5165\uff0c\u76f8\u5f53\u4e8e#include\u548c#pragma once\uff1b@class\u544a\u8bc9\u7f16\u8bd1\u5668\u67d0\u4e2a\u7c7b\u7684\u58f0\u660e\uff0c\u5f53\u6267\u884c\u65f6\uff0c\u624d\u53bb\u67e5\u770b\u7c7b\u7684\u5b9e\u73b0\u6587\u4ef6\uff0c\u53ef\u4ee5\u89e3\u51b3\u5934\u6587\u4ef6\u7684\u76f8\u4e92\u5305\u542b\uff1b#import<>\u7528\u6765\u5305\u542b\u7cfb\u7edf\u7684\u5934\u6587\u4ef6\uff0c#import\u201d\u201d\u7528\u6765\u5305\u542b\u7528\u6237\u5934\u6587\u4ef6\u3002"}]}
