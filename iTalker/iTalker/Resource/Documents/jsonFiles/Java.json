{"success":1,"total":413,"result":[{
    "answer" : "这两个方法用来提示JVM要进行垃圾回收。但是，立即开始还是延迟进行垃圾回收是取决于JVM的。",
    "ID" : "94c34bb2bdef11e6a0e100163e0021c8",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "System.gc()和Runtime.gc()会做什么事情？"
  },
  {
    "ID" : "55e592e6e4b0152a610d3ae1",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "20",
    "optionC" : "15",
    "optionAnswer" : "C",
    "answer" : "应该是C substring实际是new，5字符 str3和4也都是new，每个5字符分别都会创建新的对象常量池是PermGen的，因此应该是一共15字符",
    "optionB" : "10",
    "type" : "1",
    "optionA" : "5",
    "question" : "static String str0=\"0123456789\";\nstatic String str1=\"0123456789\";\nString str2=str1.substring(5);\nString str3=new String(str2);\nString str4=new String(str3.toCharArray());\nstr0=null;假定str0,...,str4后序代码都是只读引用。\nJava 7中，以上述代码为基础，在发生过一次FullGC后，上述代码在Heap空间（不包括PermGen）保留的字符数为（）"
  },
  {
    "answer" : "Iterator接口定义了遍历集合的方法，但它的实现则是集合实现类的责任。每个能够返回用于遍历的Iterator的集合类都有它自己的Iterator实现内部类。\r这就允许集合类去选择迭代器是fail-fast还是fail-safe的。比如，ArrayList迭代器是fail-fast的，而CopyOnWriteArrayList迭代器是fail-safe的。",
    "ID" : "55f2e483e4b0152a6114319d",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "为何Iterator接口没有具体的实现？"
  },
  {
    "ID" : "55e592e6e4b0152a610d3adc",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "程序员无法明确强制垃圾回收器运行",
    "optionC" : "赋值给该项对象的引用为null",
    "optionAnswer" : "D",
    "answer" : "在《java虚拟机》一书中明确讲了，释放掉占据的内存空间是由gc完成，但是程序员无法明确强制其运行，该空间在不被引用的时候不一定会立即被释放，这取决于GC本身，无法由程序员通过代码控制。",
    "optionB" : "代用system.gc()方法",
    "type" : "1",
    "optionA" : "调用free()方法",
    "question" : "如何放掉一个指定占据的内存空间？（）"
  },
  {
    "ID" : "55b9d326e4b08f89c6185bd3",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "e",
    "optionC" : "\/",
    "optionAnswer" : "C",
    "answer" : "Java中，e用于科学计数法形式表示实常数，如123e3或123E3，其中e或E之前必须有数字，e或E后面的指数必须为整数。d表示double型的值，如1.23d或者1.23D。对于float型的值，则在数字后加f或F，如12.3F或者132.3f，它在机器中占32位，且表示精度较double型要低。",
    "optionB" : "d",
    "type" : "1",
    "optionA" : "f",
    "question" : "Java中，数值类型值中不可能出现的符号是( )。"
  },
  {
    "answer" : "\"Iterator接口定义了遍历集合的方法，但它的实现则是集合实现类的责任。每个能够返回用于遍历的Iterator的集合类都有它自己的Iterator实现内部类。\n这就允许集合类去选择迭代器是fail-fast还是fail-safe的。比如，ArrayList迭代器是fail-fast的，而CopyOnWriteArrayList迭代器是fail-safe的。\"",
    "ID" : "55f2e39fe4b0152a61143071",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "为何Iterator接口没有具体的实现？"
  },
  {
    "ID" : "55e592e7e4b0152a610d3af3",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "以上都是",
    "optionC" : "LinkedList",
    "optionAnswer" : "A",
    "answer" : "HashMap是线程安全的HashMap\nVector是线程安全的ArrayList\nTreeSet和LinkedList都不是线程安全的",
    "optionB" : "TreeSet",
    "type" : "1",
    "optionA" : "Vector",
    "question" : "java中HashTable, Vector, TreeSet, LinkedList哪些线程是安全的？"
  },
  {
    "ID" : "55b9d327e4b08f89c6185bd5",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "Two273.5",
    "optionC" : "_$theLastOne",
    "optionAnswer" : "D",
    "answer" : "本题主要考查Java语言的标识符这个知识点。Java语言的标识符必须由字母、下划线(_)、美元符号($)开始，其余字符可以是上述3种符号或数字(0～9)。Java语言使用Unicode字符集，所以标识符中使用的字母包括下面几种：①A～Z；②a～z；③Unicode字符集中序号大于0xC0的所有符号。选项A是正确的，下划线“”是可以在标识符里面出现的；选项B是正确的；选项C是正确的，符号$也是可以在标识符里面出现的；选项D是错误的，符号“.”不能在标识符里面出现。故本题答案是D。",
    "optionB" : "FirstJavaApplet",
    "type" : "1",
    "optionA" : "Tree_Glasses",
    "question" : "下列哪个是非法的Java标识符? ( )"
  },
  {
    "answer" : "int maxArea(vector<int>& height) {\n    int water = 0;\n    int i = 0, j = height.size() - 1;\n    while (i < j) {\n        int h = min(height[i], height[j]);\n        water = max(water, (j - i) * h);\n        while (height[i] <= h && i < j) i++;\n        while (height[j] <= h && i < j) j--;\n    }\n    return water;\n}",
    "ID" : "55f2e54fe4b0152a611434c6",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "对于非负序列a1、a2、……、an，在数轴上做垂线连接点（i，0）和（i，ai）。选择这样的两条线和x轴可以形成一个容器，我们以面积代表所装的水，求以这种方式构成的容器能装的最大面积。比如选择a2=3、a5=6，则所装的面积为9."
  },
  {
    "answer" : "256",
    "ID" : "55f2e54fe4b0152a611434dc",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "符号-、*、$分别代表减法、乘法和指数运算，且\na)三个运算符优先级顺序为：-最高，*其次，$最低；\nb)运算符运算时为左结合\n则5-3*2$2*4-3$2的结果为（） "
  },
  {
    "ID" : "55e592e5e4b0152a610d3aa3",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "com.jd.MyClass",
    "optionC" : "\/\/\/\/\/\/\/MyClass.class",
    "optionAnswer" : "C",
    "answer" : "C。由于replaceAll方法的第一个参数是一个正则表达式，而\".\"在正则表达式中表示任何字符，所以会把前面字符串的所有字符都替换成\"\/\"。如果想替换的只是\".\"，那么久要写成\"\\\\.\".",
    "optionB" : "com\/jd\/MyClass.class",
    "type" : "1",
    "optionA" : "com. jd",
    "question" : "以下代码将打印出 public static void main (String[] args) {     String classFile = \"com. jd. \". replaceAll(\".\", \"\/\") + \"MyClass.class\";    System.out.println(classFile);}"
  },
  {
    "ID" : "55e6d766e4b0152a610de71d",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "System.io.out System.io.in",
    "optionC" : "System.io.in System.io.out",
    "optionAnswer" : "A",
    "answer" : "System.in 和 System.out 是java中的标准输入输出流，一般情况下代表从控制台输入和输出到控制台",
    "optionB" : "System.out System.in",
    "type" : "1",
    "optionA" : "System.in System.out",
    "question" : "一般用()创建InputStream对象,表示从标准输入中获取数据,用()创建OutputStream对象，表示输出到标准输出设备中。"
  },
  {
    "ID" : "55e592e6e4b0152a610d3ab9",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "依赖倒置原则（Dependecy-Inversion Principle）",
    "optionC" : "抽象类原则（Abstract-Class principle）",
    "optionAnswer" : "C",
    "answer" : "五大面向对象的原则：（1）单一职责原则（2）开放封闭原则（3）里氏原则\n（4）依赖倒置原则（5）接口隔离原则",
    "optionB" : "开放封闭原则（Open-Closed principle）",
    "type" : "1",
    "optionA" : "单一职责原则（Single-Resposibility Principle）",
    "question" : "下面不是面向对象的基本原则的是？"
  },
  {
    "ID" : "55e58d70e4b0152a610d39ff",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : " 0 42 42",
    "optionC" : " 0 0 42",
    "optionAnswer" : "B",
    "answer" : "这里要理解fix方法，修改的是Two对象，Byte x为该对象的一个变量，因为这个方法是引用传递，所以会改变对象的内容，这里就是tt.x也会跟着变化。\r如果把这个成员变量x的属性变为int，则最后输出0 42 42.",
    "optionB" : "null 42 42",
    "type" : "1",
    "optionA" : "null null 42",
    "question" : "给出以下代码,请给出结果.\rclass Two{\r    Byte x;\r}\rclass PassO{\r    public static void main(String[] args){\r        PassO p=new PassO();\r        p.start();\r    }\r    void start(){\r        Two t=new Two();\r        System.out.print(t.x+””);\r        Two t2=fix(t);\r        System.out.print(t.x+” ” +t2.x);\r    }\r    Two fix(Two tt){\r        tt.x=42;\r        return tt;\r    }\r}"
  },
  {
    "ID" : "55e592e6e4b0152a610d3ad1",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "构造函数不能带参数",
    "optionC" : "构造函数必须与类名相同",
    "optionAnswer" : "C",
    "answer" : "C是对的，A构造方法不能够返回值，B可以用private，单例模式就是使用private 来修饰构造方法的。D:构造函数添加参数是可以的，重载方法。（注意* 只写带参数的构造函数程序不会加会把默认的无参数的构造函数）",
    "optionB" : "构造函数不可以用private修饰",
    "type" : "1",
    "optionA" : "构造函数可以声明返回类型",
    "question" : "下列关于构造函数的描述正确的是?"
  },
  {
    "answer" : "Java提供和支持创建抽象类和接口。它们的实现有共同点，不同点在于： 1、接口中所有的方法隐含的都是抽象的。而抽象类则可以同时包含抽象和非抽象的方法。 2、类可以实现很多个接口，但是只能继承一个抽象类 3、类如果要实现一个接口，它必须要实现接口声明的所有方法。但是，类可以不实现抽象类声明的所有方法，当然，在这种情况下，类也必须得声明成是抽象的。 4、抽象类可以在不提供接口方法实现的情况下实现接口。 5、Java接口中声明的变量默认都是final的。抽象类可以包含非final的变量。 6、Java接口中的成员函数默认是public的。抽象类的成员函数可以是private，protected或者是public。 7、接口是绝对抽象的，不可以被实例化。抽象类也不可以被实例化，但是，如果它包含main方法的话是可以被调用的。",
    "ID" : "30c93a2ebded11e69a7900163e0021c8",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "接口和抽象类的区别是什么？"
  },
  {
    "answer" : "ArrayList和Vector在很多时候都很类似。\r（1）两者都是基于索引的，内部由一个数组支持。\r（2）两者维护插入的顺序，我们可以根据插入顺序来获取元素。\r（3）ArrayList和Vector的迭代器实现都是fail-fast的。\r（4）ArrayList和Vector两者允许null值，也可以使用索引值对元素进行随机访问。\r \r以下是ArrayList和Vector的不同点。\r（1）Vector是同步的，而ArrayList不是。然而，如果你寻求在迭代的时候对列表进行改变，你应该使用CopyOnWriteArrayList。\r（2）ArrayList比Vector快，它因为有同步，不会过载。\r（3）ArrayList更加通用，因为我们可以使用Collections工具类轻易地获取同步列表和只读列表。",
    "ID" : "55f2e483e4b0152a611431a5",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "ArrayList和Vector有何异同点？"
  },
  {
    "answer" : "答：能，局部会屏蔽全局。要用全局变量，需要使用\"::\"\n局部变量可以与全局变量同名，在函数内引用这个变量时，会用到同名的局部变量，而不会用到全局变量。对于有些编译器而言，在同一个函数内可以定义多个同名的局部变量，比如在两个循环体内都定义一个同名的局部变量，而那个局部变量的作用域就在那个循环体内。",
    "ID" : "55f2e54fe4b0152a61143510",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "局部变量能否和全局变量重名？"
  },
  {
    "answer" : "答：extern\n可以用引用头文件的方式，也可以用extern关键字，如果用引用头文件方式来引用某个在头文件中声明的全局变理，假定你将那个变写错了，那么在编译期间会报错，如果你用extern方式引用时，假定你犯了同样的错误，那么在编译期间不会报错，而在连接期间报错。",
    "ID" : "55f2e54fe4b0152a61143511",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "如何引用一个已经定义过的全局变量？"
  },
  {
    "answer" : "\/\/二分法求解\n\/\/a^b = (a ^ (b\/2))^2\nint GetPow(int a, int b) {\n    if (b == 1 || b == 0) {\n        return a;\n    }\n    if (b % 2) {\n        return ((int) (pow((float) GetPow(a, b \/ 2), 2) * a) % 1000);\n    } else {\n        return ((int) (pow((float) GetPow(a, b \/ 2), 2)) % 1000);\n    }\n}",
    "ID" : "55f2e54fe4b0152a61143505",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "给定两个数A、B（0，100000），求A^B中最后三位数是多少。请简要描述你的思路。"
  },
  {
    "answer" : "2，5,6",
    "ID" : "55f2e54fe4b0152a611434f4",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : " he的平方=she。h、e、s代表的数字（），（），（）。s,h,e不能为0."
  },
  {
    "ID" : "7a57329ebde911e6a0e100163e0021c8",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "3、4",
    "optionC" : "1、3",
    "optionAnswer" : "A",
    "answer" : "这里有点迷惑人，大家都知道默认ArrayList的长度是10个，所以如果你要往list里添加20个元素肯定要扩充一次（扩充为原来的1.5倍），但是这里显示指明了需要多少空间，所以就一次性为你分配这么多空间，也就是不需要扩充了。",
    "optionB" : "2、4",
    "type" : "1",
    "optionA" : "1、2",
    "question" : "下面哪些是对称加密算法（） 1-DES   2-AES   3-DSA   4-RSA"
  },
  {
    "ID" : "55e58d70e4b0152a610d39dc",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "toString() 返回该对象的字符串表示",
    "optionC" : "wait() 导致当前的线程等待，直到其他线程调用此对象的 notify() 方法或 notifyAll() 方法",
    "optionAnswer" : "B",
    "answer" : "Object类中没有copy()方法，只有clone()方法，创建并返回此对象的副本。",
    "optionB" : "copy() 创建并返回此对象的一个副本",
    "type" : "1",
    "optionA" : "equals(Object obj) 指示某个其他对象是否与此对象“相等”",
    "question" : "下面有关java object默认的基本方法，说法错误的是？"
  },
  {
    "ID" : "55b9d327e4b08f89c6185be0",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "在Java程序中import语句必须引入在所有类定义之前",
    "optionC" : "在Java程序中import语句必须有一个",
    "optionAnswer" : "C",
    "answer" : "Java程序中使用import关键字导入一个包中的类。在一个Java源程序中，可以有0个或多个import语句，但是必须在所有类定义之前引入标准类。因此，本题中选项C的说法是错误的。",
    "optionB" : "在Java程序中import语句可以没有",
    "type" : "1",
    "optionA" : "在Java程序中import语句可以有多个",
    "question" : "下列关于Java对import语句规定的叙述中，错误的是"
  },
  {
    "answer" : "任何人不必等的情况数 Cn=2N!\/(N!*N!*(N+1)) 总的情况数 T=2N!\/N!*N! 不必等的概率为：Cn\/T = 1\/(N+1)",
    "ID" : "55f2e54fe4b0152a611434fc",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "在有团购之前，大家都是现场买门票，公园的门票是5元，某天售票处开门时没有准备零钱。假设一天来购票的依次有2N个人，其中有N个人有5元零钱，其他N个人只有10元面值的钱；假设每人只买一张票。请问任何人都不必为找零而等待的概率是多少？"
  },
  {
    "ID" : "55b227dee4b0bb7ded0a8ca9",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "不同包中的子类",
    "optionC" : "同一包中的非子类",
    "optionAnswer" : "D",
    "answer" : "缺省访问控制符：如果一个类没有访问控制符，说明它具有缺省的访问控制符特性。此时，这个类只能被同一个包中的类访问或引用。这一访问特性又称为包访问性。",
    "optionB" : "同一包中的子类",
    "type" : "1",
    "optionA" : "同一类",
    "question" : " 声明成员变量时,如果不使用任何访问控制符(public, protected, private)，则以下哪种类型的类不能对该成员进行直接访问 （ ）"
  },
  {
    "ID" : "55e59382e4b0152a610d3c53",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "程序可以显式地立即释放对象占有的内存",
    "optionC" : "程序可明确地标识某个局部变量的引用不再被使用",
    "optionAnswer" : "B",
    "answer" : "java提供了一个系统级的线程，即垃圾回收器线程。用来对每一个分配出去的内存空间进行跟踪。当JVM空闲时，自动回收每块可能被回收的内存，GC是完全自动的，不能被强制执行。程序员最多只能用System.gc()来建议执行垃圾回收器回收内存，但是具体的回收时间，是不可知的。\n当对象的引用变量被赋值为null，可能被当成垃圾。",
    "optionB" : "JAVA程序不能依赖于垃圾回收的时间或者顺序",
    "type" : "1",
    "optionA" : "程序可以任意指定释放内存的时间",
    "question" : "关于JAVA的垃圾回收机制，下面哪些结论是正确？"
  },
  {
    "answer" : "有序数组最大的好处在于查找的时间复杂度是O(log n)，而无序数组是O(n)。有序数组的缺点是插入操作的时间复杂度是O(n)，因为值大的元素需要往后移动来给新元素腾位置。相反，无序数组的插入时间复杂度是常量O(1)。",
    "ID" : "2890c10ebdef11e6a0e100163e0021c8",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "如何权衡是使用无序的数组还是有序的数组？"
  },
  {
    "ID" : "55e592e7e4b0152a610d3b1e",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "Animation",
    "optionC" : "Frame",
    "optionAnswer" : "D",
    "answer" : "Tween补间动画\nFrame逐帧动画",
    "optionB" : "Alpha",
    "type" : "1",
    "optionA" : "Tween",
    "question" : "下面哪一项不属于android的动画类型？"
  },
  {
    "ID" : "55e59381e4b0152a610d3c2d",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "函数成员",
    "optionC" : "数据成员",
    "optionAnswer" : "B",
    "answer" : "private成员只能在当前类中访问，派生类可以访问父类的public和protected属性成员",
    "optionB" : "protected成员",
    "type" : "1",
    "optionA" : "private成员",
    "question" : "类B从类A派生，则类B可以访问类A中的（ ）成员？"
  },
  {
    "ID" : "55e592e7e4b0152a610d3aff",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "类的复用",
    "optionC" : "类的组合",
    "optionAnswer" : "A",
    "answer" : "A  多态的表现形式",
    "optionB" : "多继承",
    "type" : "1",
    "optionA" : "多态性",
    "question" : "_______意味着一个操作在不同的类中可以有不同的实现方式。"
  },
  {
    "ID" : "55e592e7e4b0152a610d3afc",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "Struts1 整合了JSTL，Struts2可以使用JSTL，但是也支持OGNL",
    "optionC" : "Struts1 Action 依赖于Servlet API，Struts 2 Action不依赖于容器，允许Action脱离容器单独被测试",
    "optionAnswer" : "B",
    "answer" : "1.Struts1要求Action去继承一个抽象基类，而Struts2是通过实现Action接口2.Struts1依赖于Servlet API，会把HttpServletRequest和HttpServletResponse传递给execute()方法，而Struts2不依赖于Servlet API3.Struts1是单例的，一个Action实例处理所有的请求，所以它的线程是不安全的，而Struts2是每个请求都产生一个Action实例（多例），所以线程安全4.Struts2在Struts1的基础上支持了OGNL表达式",
    "optionB" : "Struts1 Action对象为每一个请求产生一个实例。Struts2 Action是单例模式并且必须是线程安全的",
    "type" : "1",
    "optionA" : "Struts1要求Action类继承一个抽象基类。Struts 2 Action类可以实现一个Action接口",
    "question" : "下面有关struts1和struts2的区别，描述错误的是？"
  },
  {
    "answer" : "1、HashMap和Hashtable都实现了Map接口，因此很多特性非常相似。但是，他们有以下不同点： 2、HashMap允许键和值是null，而Hashtable不允许键或者值是null。 3、Hashtable是同步的，而HashMap不是。因此，HashMap更适合于单线程环境，而Hashtable适合于多线程环境。 4、HashMap提供了可供应用迭代的键的集合，因此，HashMap是快速失败的。另一方面，Hashtable提供了对键的列举(Enumeration)。 5、一般认为Hashtable是一个遗留的类。",
    "ID" : "84b8e250bdee11e6a0e100163e0021c8",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "HashMap和Hashtable有什么区别？"
  },
  {
    "answer" : "可以，在不同的C文件中以static形式来声明同名全局变量。\n可以在不同的C文件中声明同名的全局变量，前提是其中只能有一个C文件中对此变量赋初值，此时连接不会出错",
    "ID" : "55f2e54fe4b0152a61143512",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "全局变量可不可以定义在可被多个.C文件包含的头文件中？为什么？"
  },
  {
    "answer" : "全局变量(外部变量)的说明之前再冠以static 就构成了静态的全局变量。全局变量本身就是静态存储方式，静态全局变量当然也是静态存储方式。 这两者在存储方式上并无不同。这两者的区别虽在于非静态全局变量的作用域是整个源程序，当一个源程序由多个源文件组成时，非静态的全局变量在各个源文件中都是有效的。 而静态全局变量则限制了其作用域， 即只在定义该变量的源文件内有效，在同一源程序的其它源文件中不能使用它。由于静态全局变量的作用域局限于一个源文件内，只能为该源文件内的函数公用，因此可以避免在其它源文件中引起错误。\n从以上分析可以看出， 把局部变量改变为静态变量后是改变了它的存储方式即改变了它的生存期。把全局变量改变为静态变量后是改变了它的作用域， 限制了它的使用范围。\nstatic函数与普通函数作用域不同。仅在本文件。只在当前源文件中使用的函数应该说明为内部函数(static)，内部函数应该在当前源文件中说明和定义。对于可在当前源文件以外使用的函数，应该在一个头文件中说明，要使用这些函数的源文件要包含这个头文件\nstatic全局变量与普通的全局变量有什么区别：static全局变量只初使化一次，防止在其他文件单元中被引用;\nstatic局部变量和普通局部变量有什么区别：static局部变量只被初始化一次，下一次依据上一次结果值；\nstatic函数与普通函数有什么区别：static函数在内存中只有一份，普通函数在每个被调用中维持一份拷贝",
    "ID" : "55f2e550e4b0152a61143516",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "static全局变量与普通的全局变量有什么区别？static局部变量和普通局部变量有什么区别？static函数与普通函数有什么区别？"
  },
  {
    "answer" : "对于在Map中插入、删除和定位元素这类操作，HashMap是最好的选择。然而，假如你需要对一个有序的key集合进行遍历，TreeMap是更好的选择。基于你的collection的大小，也许向HashMap中添加元素会更快，将map换为TreeMap进行有序key的遍历。",
    "ID" : "55f2e483e4b0152a611431a4",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "如何决定选用HashMap还是TreeMap？"
  },
  {
    "answer" : "Java中非静态内部类对象的创建要依赖其外部类对象，上面的面试题中foo和main方法都是静态方法，静态方法中没有this，也就是说没有所谓的外部类对象，因此无法创建内部类对象，如果要在静态方法中创建内部类对象，可以这样做：new Outer().new Inner();",
    "ID" : "a44729d0bdf111e6a0e100163e0021c8",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "下面的代码哪些地方会产生编译错误？ class Outer {     class Inner {}     public static void foo() { new Inner(); }     public void bar() { new Inner(); }     public static void main(String[] args) {         new Inner();     } }"
  },
  {
    "answer" : "2 << 3（左移3位相当于乘以2的3次方，右移3位相当于除以2的3次方）。补充：我们为编写的类重写hashCode方法时，可能会看到如下所示的代码，其实我们不太理解为什么要使用这样的乘法运算来产生哈希码（散列码），而且为什么这个数是个素数，为什么通常选择31这个数？前两个问题的答案你可以自己百度一下，选择31是因为可以用移位和减法运算来代替乘法，从而得到更好的性能。说到这里你可能已经想到了：31 * num 等价于(num << 5) - num，左移5位相当于乘以2的5次方再减去自身就相当于乘以31，现在的VM都能自动完成这个优化。",
    "ID" : "370d7532bdf011e69a7900163e0021c8",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "用最有效率的方法计算2乘以8？ "
  },
  {
    "answer" : "当A1A2垂直B1B2时B1B2最长\n\n说明:\n设两个圆心分别为O1,O2\n因为：两点确定一条直线，A1A2的中垂线必过圆心，故O1O2垂直平分A1A2， \n设B1A1中点为C1，B2A1中点为C2 : 且O1C1垂直B1B2,O2C2垂直B1B2 \n所以就有了：\nB1B2 = 2*C1A1+2*C2A1 = 2*C1C2\n故B1B2最长为C1C2最长，\n又由于,O1C1垂直B1B2,O2C2垂直B1B2,故C1C2O2O1至少为梯形（假定），且O1O2长度固定\n沿着C1做一平行线D1D2与O1O2平行，故D1D2C2至少为一垂直三角形，C2为90度，\n通过锤子三角形定义，得出，当C1C2平行于D1D2时C1C2有最大值。\n又由于:故O1O2垂直平分A1A2，、\n得出 当A1A2垂直B1B2时B1B2最长 \n",
    "ID" : "55f2e54fe4b0152a611434f8",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "两个圆相交，交点是A1，A2。现在过A1点做一直线与两个圆分别相交另外一点B1，B2.问在什么情况下，B1B2最长?"
  },
  {
    "answer" : "三个基本元素：\n封装\n继承\n多态\n五个基本原则：\n单一职责原则（Single-Resposibility Principle）:一个类，最好只做一件事，只有一个引起它的变化。单一职责原则可以看做是低耦合、高内聚在面向对象原则上的引申，将职责定义为引起变化的原因，以提高内聚性来减少引起变化的原因。\n开放封闭原则（Open-Closed principle）:软件实体应该是可扩展的，而不可修改的。也就是，对扩展开放，对修改封闭的。\nLiskov替换原则（Liskov-Substituion Principle）:子类必须能够替换其基类。这一思想体现为对继承机制的约束规范，只有子类能够替换基类时，才能保证系统在运行期内识别子类，这是保证继承复用的基础。\n依赖倒置原则（Dependecy-Inversion Principle）:依赖于抽象。具体而言就是高层模块不依赖于底层模块，二者都同依赖于抽象；抽象不依赖于具体，具体依赖于抽象。\n接口隔离原则（Interface-Segregation Principle）:使用多个小的专门的接口，而不要使用一个大的总接口。",
    "ID" : "55f2e54fe4b0152a611434e6",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "面向对象的三个基本元素，五个基本原则"
  },
  {
    "answer" : "吞吐量收集器使用并行版本的新生代垃圾收集器，它用于中等规模和大规模数据的应用程序。而串行收集器对大多数的小应用(在现代处理器上需要大概100M左右的内存)就足够了。",
    "ID" : "f0e042cebdef11e6a0e100163e0021c8",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "串行(serial)收集器和吞吐量(throughput)收集器的区别是什么？"
  },
  {
    "ID" : "55e59381e4b0152a610d3c20",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "Swing是一个基于组件的框架，所有的组件都是从javax.swing.JComponent类继承来的",
    "optionC" : "Swing优化了AWT，运行速度比AWT快",
    "optionAnswer" : "C",
    "answer" : "Swing 是在AWT的基础上构建的一套新的图形界面系统，它提供了AWT 所能够提供的所有功能，并且用纯粹的Java代码对AWT 的功能进行了大幅度的扩充。AWT 是基于本地方法的C\/C++程序，其运行速度比较快；Swing是基于AWT 的Java程序，其运行速度比较慢。",
    "optionB" : "Swing 是为了解决 AWT 存在的问题而新开发的包，它以 AWT 为基础的",
    "type" : "1",
    "optionA" : "Swing是一个基于Java的跨平台MVC框架。使用单线程模式。",
    "question" : "下面有关JAVA swing的描述，说法错误的是？"
  },
  {
    "ID" : "55e6d765e4b0152a610de712",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "在类方法中绝对不能调用实例方法",
    "optionC" : "在类方法中只能调用本类中的类方法",
    "optionAnswer" : "B",
    "answer" : "A:类方法是指类中被static修饰的方法，无this指针。\rC：类方法是可以调用其他类的static方法的。\rD:可以在类方法中生成实例对象再调用实例方法。（这个我也打错了，想想应该是这个意思）",
    "optionB" : "在类方法中调用本类的类方法时可直接调用",
    "type" : "1",
    "optionA" : "在类方法中可用this来调用本类的类方法",
    "question" : "下列说法正确的有（ ）"
  },
  {
    "answer" : "HashMap在Map.Entry静态内部类实现中存储key-value对。\rHashMap使用哈希算法，在put和get方法中，它使用hashCode()和equals()方法。当我们通过传递key-value对调用put方法的时候，HashMap使用Key hashCode()和哈希算法来找出存储key-value对的索引。\rEntry存储在LinkedList中，所以如果存在entry，它使用equals()方法来检查传递的key是否已经存在，如果存在，它会覆盖value，如果不存在，它会创建一个新的entry然后保存。\r当我们通过传递key调用get方法时，它再次使用hashCode()来找到数组中的索引，然后使用equals()方法找出正确的Entry，然后返回它的值。下面的图片解释了详细内容。\r其它关于HashMap比较重要的问题是容量、负荷系数和阀值调整。HashMap默认的初始容量是32，负荷系数是0.75。\r阀值是为负荷系数乘以容量，无论何时我们尝试添加一个entry，如果map的大小比阀值大的时候，HashMap会对map的内容进行重新哈希，且使用更大的容量。容量总是2的幂，所以如果你知道你需要存储大量的key-value对，比如缓存从数据库里面拉取的数据，使用正确的容量和负荷系数对HashMap进行初始化是个不错的做法。",
    "ID" : "55f2e483e4b0152a6114319f",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "在Java中，HashMap是如何工作的？"
  },
  {
    "ID" : "55b9d326e4b08f89c6185bbc",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "java.math",
    "optionC" : "java.lang",
    "optionAnswer" : "C",
    "answer" : "Java语言中，所有的简单数据类型都被包含在包java.lang中。",
    "optionB" : "java.awt",
    "type" : "1",
    "optionA" : "java.sql",
    "question" : " Java语言中所有的简单数据类型都被包含在(  )中"
  },
  {
    "answer" : "对象被值传递，意味着传递了对象的一个副本。因此，就算是改变了对象副本，也不会影响源对象的值。  对象被引用传递，意味着传递的并不是实际的对象，而是对象的引用。因此，外部对引用对象所做的改变会反映到所有的对象上。",
    "ID" : "48090aa2bded11e69a7900163e0021c8",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "什么是值传递和引用传递？"
  },
  {
    "answer" : "（1）我们可以使用Iterator来遍历Set和List集合，而ListIterator只能遍历List。\r（2）Iterator只可以向前遍历，而LIstIterator可以双向遍历。\r（3）ListIterator从Iterator接口继承，然后添加了一些额外的功能，比如添加一个元素、替换一个元素、获取前面或后面元素的索引位置。",
    "ID" : "55f2e483e4b0152a61143198",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "Iterater和ListIterator之间有什么区别？"
  },
  {
    "answer" : "1，静态成员函数不可以是虚函数，因为静态成员函数全局通用，不受限于某个具体对象\n2，构造函数不可以是虚函数，虚函数主要是针对对象而言，而构造函数是在对象创建之前，所以构造函数的虚函数是没有意义的\n3，内联函数不可以是虚函数，因为内联函数不能再运行中动态确定其位置",
    "ID" : "55f2e550e4b0152a6114351e",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "什么函数不能声明为虚函数？"
  },
  {
    "answer" : "Java虚拟机是一个可以执行Java字节码的虚拟机进程。Java源文件被编译成能被Java虚拟机执行的字节码文件。  Java被设计成允许应用程序可以运行在任意的平台，而不需要程序员为每一个平台单独重写或者是重新编译。Java虚拟机让这个变为可能，因为它知道底层硬件平台的指令长度和其他特性。",
    "ID" : "56606952bdec11e6a0e100163e0021c8",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "什么是Java虚拟机？为什么Java被称作是“平台无关的编程语言”？"
  },
  {
    "ID" : "55e6d765e4b0152a610de708",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "Object",
    "optionC" : "Exception",
    "optionAnswer" : "D",
    "answer" : "java中Object是所有类的父亲,所有类的对象都是Class的实例。",
    "optionB" : "Dang",
    "type" : "1",
    "optionA" : "Father",
    "question" : "Java中所有类的父类是（ ）。"
  },
  {
    "ID" : "55e592e7e4b0152a610d3b0c",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "PreparedStatement是Statement的父接口",
    "optionC" : "CallableStatement是Statement的子接口",
    "optionAnswer" : "B",
    "answer" : "api：public interface CallableStatement extends PreparedStatement;public interface PreparedStatement extends Statement",
    "optionB" : "PreparedStatement是CallableStatement的父接口",
    "type" : "1",
    "optionA" : "CallableStatement是PreparedStatement的父接口",
    "question" : " 以下描述正确的是"
  },
  {
    "answer" : "1",
    "ID" : "55f2e54fe4b0152a611434cb",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "123456789101112...2014除以9的余数是（） "
  },
  {
    "ID" : "55b227dfe4b0bb7ded0a8cb7",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "double类型的数据占计算机存储的32位；",
    "optionC" : "boolean类型的数据作为类成员变量的时候，系统默认值初始为true；",
    "optionAnswer" : "A",
    "answer" : "选项B中，以0x或者0X开头的整数应该是16进制的整型常量；选项C中，对于boolean类型的数据，作为类成员变量的时候，系统默认的初始值应该是false；选项D中，double类型的数据应该占用64位的存储空间；选项A正确。",
    "optionB" : "以0x或者0X开头的整数代表8进制整型常量；",
    "type" : "1",
    "optionA" : "一0开头的整数代表8进制常量；",
    "question" : "下列关于JAVA语言简单数据类型的说法中，哪个是正确的"
  },
  {
    "answer" : "char* removeEmpty(char *str, char ch) {\n    char *it1 = str;\n    char *it2 = str;\n    while (*it2 != '\\0') {\n        \/\/while (*it2 == ch) {it2++; }\n        while (*it2 == ch  && *(it2 + 1) == ch)\n        {\n            it2++;\n        }\n        *it1++ = *it2++;\n    }\n     return str;\n}\nvoid FormatString(char str[], int len){\n    str = removeEmpty(str, ' ');\n}",
    "ID" : "55f2e54fe4b0152a611434cc",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "给定字符串（ASCII码0-255）数组，请在不开辟额外空间的情况下删除开始和结尾处的空格，并将中间的多个连续的空格合并成一个。例如：\"   i    am a      little boy.    \"，变成\"i am a little boy\",语言不限，但不要用伪代码作答，函数输入输出请参考如下的函数原型：C++函数原型：\nvoid FormatString(char str[],int len){\n}\n"
  },
  {
    "ID" : "55b9d326e4b08f89c6185bc0",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "java.util包",
    "optionC" : "javax.sound包",
    "optionAnswer" : "C",
    "answer" : "选项C属于扩展包，它提供多媒体声音要求的MIDI输入\/输出以及合成操作的基本类。Java核心包包括：Java.lang包、java.awt包、java.applet包、java.io包、java.net包、java.rm包、java.math包、java.util包、java.sql包、java.security包、java.text包和java.bean包。",
    "optionB" : "java.awt包",
    "type" : "1",
    "optionA" : "java.lang包",
    "question" : "下面不属于Java核心包的是"
  },
  {
    "answer" : "在最外层循环前加一个标记如A，然后用break A;可以跳出多重循环。（Java中支持带标签的break和continue语句，作用有点类似于C和C++中的goto语句，但是就像要避免使用goto一样，应该避免使用带标签的break和continue，因为它不会让你的程序变得更优雅，很多时候甚至有相反的作用，所以这种语法其实不知道更好）",
    "ID" : "5daf250abdf011e6a0e100163e0021c8",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "在Java中，如何跳出当前的多重嵌套循环？ "
  },
  {
    "ID" : "55e59381e4b0152a610d3c1a",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "一个class只能定义一个constructor",
    "optionC" : "constructor在一个对象被new时执行",
    "optionAnswer" : "C",
    "answer" : "A，构造函数可以省略，系统会生成默认构造函数\nB，java和C++中要求constructor与class同门，PHP中就直接写成constructor()\n   如果不从语言角度来讲的话，就假设是java语言，类名是大写的，类名首字母是大写的，构造函数首    字母也是大写的。我们可以写一个首字母小写的同名方法。\nD，一个类可以有多个重载的构造方法",
    "optionB" : "constructor必须与class同名，但方法不能与class同名",
    "type" : "1",
    "optionA" : "class中的constructor不可省略",
    "question" : "下列说法正确的有（ ）"
  },
  {
    "ID" : "55e59380e4b0152a610d3be2",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "RuntimeException体系包括错误的类型转换、数组越界访问和试图访问空指针等等，必须被 try{}catch语句块所捕获",
    "optionC" : "Error类体系描述了Java运行系统中的内部错误以及资源耗尽的情形，Error不需要捕捉",
    "optionAnswer" : "D",
    "answer" : "粉红色的是受检查的异常(checked exceptions),其必须被try{}catch语句块所捕获,或者在方法签名里通过throws子句声明.受检查的异常必须在编译时被捕捉处理,命名为 CHeckedException 是因为Java编译器要进行检查,Java虚拟机也要进行检查,以确保这个规则得到遵守。 \n绿色的异常是运行时异常(runtime exceptions),需要程序员自己分析代码决定是否捕获和处理,比如 空指针,被0除... 而声明为Error的，则属于严重错误,需要根据业务信息进行特殊处理,Error不需要捕捉。 比如：AWTError、ThreadDeath、",
    "optionB" : "非RuntimeException一般是外部错误，其必须被 try{}catch语句块所捕获",
    "type" : "1",
    "optionA" : "异常的继承结构：基类为Throwable，Error和Exception继承Throwable，RuntimeException和IOException等继承Exception",
    "question" : "下面有关JAVA异常类的描述，说法错误的是？"
  },
  {
    "ID" : "c8cdcb9abde411e69a7900163e0021c8",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "都不输出",
    "optionC" : "pingpong和pongping都有可能",
    "optionAnswer" : "B",
    "answer" : "这里考的是Thread类中start()和run()方法的区别了。start()用来启动一个线程，当调用start方法后，系统才会开启一个新的线程，进而调用run()方法来执行任务，而单独的调用run()就跟调用普通方法是一样的，已经失去线程的特性了。因此在启动一个线程的时候一定要使用start()而不是run()。",
    "optionB" : "pongping",
    "type" : "1",
    "optionA" : "pingpong",
    "question" : "下面程序的运行结果：（） public static void main(String args[]) {          Thread t = new Thread() {              public void run() {                 pong();             }         };          t.run();         System.out.print(\"ping\");      }      static void pong() {          System.out.print(\"pong\");      } }"
  },
  {
    "answer" : "String 类是final类，不可以被继承。继承String本身就是一个错误的行为，对String类型最好的重用方式是关联关系（Has-A）和依赖关系（Use-A）而不是继承关系（Is-A）。",
    "ID" : "9a9ae03abdf011e6a0e100163e0021c8",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "是否可以继承String类？ "
  },
  {
    "answer" : "12",
    "ID" : "55f2e54fe4b0152a611434b7",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "把4000个节点组成一棵二叉树，最小高度是 "
  },
  {
    "ID" : "55e59381e4b0152a610d3c33",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "javaprof.exe",
    "optionC" : "jdb.exe",
    "optionAnswer" : "C",
    "answer" : "C：java调试器jdb.exe",
    "optionB" : "javadoc.exe",
    "type" : "1",
    "optionA" : "java.exe",
    "question" : "?下列哪个选项是Java调试器？如果编译器返回程序代码的错误，可以用它对程序进行调试。"
  },
  {
    "ID" : "55b5a91fe4b0ef2b575583eb",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "x[0]为空",
    "optionC" : "x[10]为0",
    "optionAnswer" : "A",
    "answer" : "int类型的数组未初始化时默认值为0。大小为10的数组范围为x[0]~x[9]",
    "optionB" : "x[9]未定义",
    "type" : "1",
    "optionA" : "x[9]为0 ",
    "question" : "执行完以下代码int [ ]  x = new int[10]；后，以下哪项说明是正确的（ )"
  },
  {
    "ID" : "55e59382e4b0152a610d3c4d",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "输出结果",
    "optionC" : "存储数据",
    "optionAnswer" : "C",
    "answer" : "算法包括0个或多个输入，1个或多个输出，中间有穷个处理过程。\n存储结构不属于算法结构",
    "optionB" : "处理数据",
    "type" : "1",
    "optionA" : "输入数据",
    "question" : "下列不属于算法结构的是（）"
  },
  {
    "ID" : "55e6d765e4b0152a610de713",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "12",
    "optionC" : "1",
    "optionAnswer" : "D",
    "answer" : "当执行try{}时，遇到算算术异常，然后抛出异常，catch捕捉到异常，打印出1，最后执行finally打印2",
    "optionB" : "123",
    "type" : "1",
    "optionA" : "3",
    "question" : "下面代码的输出结果是什么？\rpublic class ZeroTest {\r    public static void main(String[] args) {\r     try{\r       int i = 100 \/ 0;\r       System.out.print(i);\r  }catch(Exception e){\r       System.out.print(1);\r       throw new RuntimeException();\r  }finally{\r       System.out.print(2);\r  }\r      System.out.print(3);\r }\r }"
  },
  {
    "answer" : "int sprintf(char *str, const char *format, ...);\nint snprintf(char *str, size_t size, const char *format, ...);snprintf中的size用来限定str可用空间的大小，防止str的内存越界。",
    "ID" : "55f2e54fe4b0152a611434ca",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "sprinf和snprintf函数区别是。"
  },
  {
    "ID" : "55e58d70e4b0152a610d39ea",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "第三行编译错误",
    "optionC" : "Fred",
    "optionAnswer" : "B",
    "answer" : "默认的Object类并没有重写equals()函数，默认比较的是地址，这重写了无论与谁比较都是TRUE",
    "optionB" : "  True",
    "type" : "1",
    "optionA" : "运行时抛出异常",
    "question" : "给出以下代码 public class TestObj{    public static void main(String[] args){        Object o=new Object(){            public boolean equals(Object obj){                return true;            }        };        System.out.println(o.equals(“Fred”));    }}请给出结果：（）"
  },
  {
    "answer" : "将一个对象存放在某种类型的永久存储器上（比如硬盘，光盘，软盘等），称为保持。\n\n标识一个类可以被持久化，叫序列化，也叫串行化或持久化。表示这个类中的数据可以按流式输出。\n\n实现可序列化的方法：实现java.io.Serializable接口。",
    "ID" : "5602715fe4b043d0cb1d3a41",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "什么叫保持？什么是可序列化？如何实现可序列化？"
  },
  {
    "ID" : "55e59380e4b0152a610d3bf1",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "接口中可以有普通成员变量，抽象类中没有普通成员变量",
    "optionC" : "一个类可以实现多个接口，但只能继承一个抽象类",
    "optionAnswer" : "D",
    "answer" : "接口和抽象类中都可以有普通成员变量，但是接口中的成员变量必须是final类型的，抽象类的成员变量与普通类相同，无特殊规定",
    "optionB" : "抽象类中可以包含非抽象的普通方法，接口中的方法必须是抽象的，不能有非抽象的普通方法",
    "type" : "1",
    "optionA" : "抽象类可以有构造方法，接口中不能有构造方法",
    "question" : "下面有关java 抽象类和接口的区别，说法错误的是？"
  },
  {
    "ID" : "55b227dfe4b0bb7ded0a8cbd",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "可移植",
    "optionC" : "跨平台 ",
    "optionAnswer" : "B",
    "answer" : "安全性是指Java执行多层安全机制，以提供足够的安全保障的特点；跨平台和可移植是指Java一次编写到处运行；多线程反映了Java程序可同时执行多个任务的并行机制特点。",
    "optionB" : "多线性",
    "type" : "1",
    "optionA" : "安全性 ",
    "question" : "Java语言具有许多优点和特点，哪个反映了Java程序并行机制的特点？（)"
  },
  {
    "ID" : "55e6d765e4b0152a610de70e",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "java还实现了真数组，避免了覆盖数据的可能",
    "optionC" : "java自己操纵内存减少了内存出错的可能性",
    "optionAnswer" : "B",
    "answer" : "程序设计语言中，数组元素在内存中是一个接着一个线性存放的，通过第一个元素就能访问随后的元素，这样的数组称之为“真数组”。\r实现了真数组为Java语言健壮性的特点之一。",
    "optionB" : "java能运行虚拟机实现跨平台",
    "type" : "1",
    "optionA" : "java能检查程序在变异和运行时的错误",
    "question" : "下列不属于java语言鲁棒性特点的是"
  },
  {
    "ID" : "55b227dfe4b0bb7ded0a8cba",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "byte",
    "optionC" : "int ",
    "optionAnswer" : "D",
    "answer" : "byte：8位，最大存储数据量是255，存放的数据范围是-128~127之间。 \nshort：16位，最大数据存储量是65536，数据范围是-32768~32767之间。 \nint：32位，最大数据存储容量是232-1，数据范围是-231~231-1。 \nlong：64位，最大数据存储容量是264-1，数据范围为-263~263-1。\n",
    "optionB" : " long  ",
    "type" : "1",
    "optionA" : "short                ",
    "question" : "整型数据类型中，需要内存空间最少的是（)"
  },
  {
    "answer" : "描述服务端和客户端的连接过程",
    "ID" : "5602715fe4b043d0cb1d3a4b",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "简述Java网络模型的基本功能"
  },
  {
    "ID" : "55e592e7e4b0152a610d3aeb",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "以上均正确",
    "optionC" : "final修饰的方法不能被重载",
    "optionAnswer" : "B",
    "answer" : "final修饰的遍历不能被重写，可以被重载",
    "optionB" : "final修饰的类肯定不能被继承",
    "type" : "1",
    "optionA" : "final是java中的修饰符，可以修饰类、接口、抽象类、方法和属性",
    "question" : "以下关于final关键字说法正确的是"
  },
  {
    "answer" : "输出结果：goodandgbc",
    "ID" : "55f2e54fe4b0152a611434c3",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "检查程序，是否存在问题，如果存在指出问题所在，如果不存在，说明输出结果。package algorithms.com.guan.javajicu;\npublic class Example {\n    String str = new String(“good”);\n    char[] ch = {‘a’, ’b’, ’c’};\n    public static void main(String[] args) {\n        Exampleex = new Example();\n        ex.change(ex.str, ex.ch);\n        System.out.print(ex.str + ” and ”);\n        System.out.print(ex.ch);\n }\n public void change(Stringstr, char ch[]) {\n        str = “test ok”;\n        ch[0] = 'g';\n }\n}"
  },
  {
    "answer" : "队列先进先出，栈后进先出",
    "ID" : "55f2e550e4b0152a61143517",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : " 队列和栈有什么区别？"
  },
  {
    "answer" : "PriorityQueue是一个基于优先级堆的无界队列，它的元素是按照自然顺序(natural order)排序的。在创建的时候，我们可以给它提供一个负责给元素排序的比较器。PriorityQueue不允许null值，因为他们没有自然顺序，或者说他们没有任何的相关联的比较器。最后，PriorityQueue不是线程安全的，入队和出队的时间复杂度是O(log(n))。",
    "ID" : "f079c716bdee11e69a7900163e0021c8",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "什么是Java优先级队列(Priority Queue)？"
  },
  {
    "ID" : "55e59382e4b0152a610d3c48",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "记录集的列数-1",
    "optionC" : "记录集的行数+1",
    "optionAnswer" : "B",
    "answer" : "resultset.Fields.count得到recordSet对象字段数。 也就是列数。",
    "optionB" : "记录集的列数",
    "type" : "1",
    "optionA" : "记录集的行数",
    "question" : "语句resultset.Fields.count 返回的值是多少？"
  },
  {
    "answer" : "#include#include#define N 4 \/\/电话号码个数 \n  \nusing namespace std;\n  \nchar c[][10] = {\"\",\"\",\"ABC\",\"DEF\",\"GHI\",\"JKL\",\"MNO\",\"PQRS\",\"TUV\",\"WXYZ\"};\/\/存储各个数字所能代表的字符 \nint number[N] = {2, 4 ,7, 9}; \/\/存储电话号码 \nint total[10] = {0, 0, 3, 3, 3, 3, 3, 4, 3, 4}; \/\/各个数组所能代表的字符总数 \nint answer[N]; \/\/数字目前所代表的字符在其所能代表的字符集中的位置,初始为0 \n  \nvoid Search(int *number, int n); \/\/非递归的办法 \nvoid RecursiveSearch(int *number, int cur, char *ps, int n); \/\/递归的办法\nint main()\n{\n        \/\/Search(number, N); \n        char ps[N+1] = {0};\n        RecursiveSearch(number, 0, ps, N);\n        return 0;\n}\n  \n  \nvoid Search(int *number, int n)\n{\n        int i;\n        while(1)\n        {\n                for(i=0; i<n; ++i)=\"\" printf(\"%c\",=\"\" c[number[i]][answer[i]]);=\"\" printf(\"\\n\");=\"\" int=\"\" k=\"n-1;\" 用k和while循环来解决扩展性问题,模拟了递归=\"\" while(k=\"\">= 0)\n                {\n<\/n;>\n \n    <n; ++i)=\"\" printf(\"%c\",=\"\" c[number[i]][answer[i]]);=\"\" printf(\"\\n\");=\"\" int=\"\" k=\"n-1;\" 用k和while循环来解决扩展性问题,模拟了递归=\"\" while(k=\"\">                        if(answer[k] < total[number[k]]-1) { ++answer[k]; break; } else { answer[k] = 0; --k; } } if(k < 0) break; } } \/*递归的解法: number为存储电话号码的数组,pos为当前处理的数字在number中的下标,初始为0 *ps为一外部数组,用于存放字母,n代表电话号码的长度(个数) * 此递归的方法好理解,比上面非递归的办法好写易懂 * *\/ <\/n;>\n \n    <n; ++i)=\"\" printf(\"%c\",=\"\" c[number[i]][answer[i]]);=\"\" printf(\"\\n\");=\"\" int=\"\" k=\"n-1;\" 用k和while循环来解决扩展性问题,模拟了递归=\"\" while(k=\"\">\n<\/n;>\nvoid RecursiveSearch(int *number, int pos, char *ps, int n)\n{\n        int i;\n        for(i=0; i<total[number[pos]]; ++i)\n        {\n                ps[pos] = c[number[pos]][i];\n                if(pos == n-1)\n                        cout<<ps<<endl;\n                else\n                        RecursiveSearch(number, pos+1, ps, n);\n        }\n}",
    "ID" : "55f2e54fe4b0152a611434eb",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "现在有一个手机，手机上的键盘上有这样的对应关系，2对应\"abc\",3对应\"def\".....手机里面有一个userlist用户列表，当我们输入942的时候出来拼音的对应可能是“xia”，“zha”，“xi”，“yi”等，当我们输入9264的时候出来是yang，可能是“样”，“杨”，“往”等，现在我们输入一个字符串数字，比如926等，要在电话簿userlist中查找出对应的用户名和电话号码并返回结果。 C++语言: 电话号码对应的英语单词(注意此题的非递归做法)"
  },
  {
    "ID" : "55e59381e4b0152a610d3c3a",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "如果在一个线程构造了一个不可变对象之后（对象仅包含final字段），就可以保证了这个对象被其他线程正确的查看",
    "optionC" : "“volatile” — 保证修饰后在对变量读写前都会与主内存更新。",
    "optionAnswer" : "D",
    "answer" : "final只是指向不变，但是指向的值有可能变，所以依然不是线程安全",
    "optionB" : "“synchronized” — 保证在块开始时都同步主内存的值到工作内存，而块结束时将变量同步回主内存",
    "type" : "1",
    "optionA" : "JMM通过控制主内存与每个线程的本地内存之间的交互，来为java程序员提供内存可见性保证",
    "question" : "?下面有关java内存模型的描述，说法错误的是？"
  },
  {
    "answer" : "它可以在当前Iterator的顶层实现，但是它用得很少，如果将它加到接口中，每个继承都要去实现它，这没有意义。",
    "ID" : "55f2e483e4b0152a61143197",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "为何迭代器没有一个方法可以直接获取下一个元素，而不需要移动游标？"
  },
  {
    "ID" : "55e6d766e4b0152a610de725",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "Struts1 整合了JSTL，Struts2可以使用JSTL，但是也支持OGNL",
    "optionC" : "Struts1 Action 依赖于Servlet API，Struts 2 Action不依赖于容器，允许Action脱离容器单独被测试",
    "optionAnswer" : "B",
    "answer" : "1.Struts1要求Action去继承一个抽象基类，而Struts2是通过实现Action接口\r2.Struts1依赖于Servlet API，会把HttpServletRequest和HttpServletResponse传递给execute()方法，而Struts2不依赖于Servlet API\r3.Struts1是单例的，一个Action实例处理所有的请求，所以它的线程是不安全的，而Struts2是每个请求都产生一个Action实例（多例），所以线程安全\r4.Struts2在Struts1的基础上支持了OGNL表达式",
    "optionB" : "Struts1 Action对象为每一个请求产生一个实例。Struts2 Action是单例模式并且必须是线程安全的",
    "type" : "1",
    "optionA" : "Struts1要求Action类继承一个抽象基类。Struts 2 Action类可以实现一个Action接口",
    "question" : "下面有关struts1和struts2的区别，描述错误的是？"
  },
  {
    "ID" : "55e58d70e4b0152a610d3a02",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "对象序列化的所属类需要实现Serializable接口",
    "optionC" : "使用transient修饰的变量会被序列化",
    "optionAnswer" : "D",
    "answer" : " 使用ObjectOutputStream和ObjectInputStream可以将对象进行传输.\r    声明为static和transient类型的成员数据不能被串行化。因为static代表类的状态， transient代表对象的临时数据。",
    "optionB" : "使用PrintWriter可以将对象进行传输",
    "type" : "1",
    "optionA" : "使用FileOutputStream可以将对象进行传输",
    "question" : "以下关于对象序列化描述正确的是"
  },
  {
    "ID" : "55e59380e4b0152a610d3be5",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "以上都不是",
    "optionC" : "1",
    "optionAnswer" : "C",
    "answer" : "ResultSet跟普通的数组不同，索引从1开始而不是从0开始",
    "optionB" : "0",
    "type" : "1",
    "optionA" : "-1",
    "question" : "ResultSet中记录行的第一列索引为？"
  },
  {
    "ID" : "55e59381e4b0152a610d3c44",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "让一个线程等待另一个线程的通知的方法是：thread. sleep()",
    "optionC" : "将一个线程标记成daemon线程，意味着当主线程结束，并且没有其它正在运行的非daemon线程时，该daemon线程也会自动结束。",
    "optionAnswer" : "C",
    "answer" : "启动线程方法start();线程stop方法已经被弃用；守护线程在非守护线程结束后，会自动结束；等待其他线程通知方法是wait()",
    "optionB" : "结束一个线程的通常做法是：thread. stop()",
    "type" : "1",
    "optionA" : "启动一个线程的方法是：thread. run()",
    "question" : "?下列有关Thread的描述，哪个是正确的？"
  },
  {
    "ID" : "55e6d765e4b0152a610de715",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "Spring提供了AOP方式的日志系统",
    "optionC" : "使用Spring可以实现声明式事务",
    "optionAnswer" : "D",
    "answer" : "Spring提供了AOP方式的日志系统\rSpring并没有为我们提供日志系统，我们需要使用AOP（面向方面编程）的方式，借助Spring与日志系统log4j实现我们自己的日志系统。",
    "optionB" : "Spring中包含一个“依赖注入”模式的实现",
    "type" : "1",
    "optionA" : "Spring是一系列轻量级Java EE框架的集合",
    "question" : "下面关于Spring的说法中错误的是（）"
  },
  {
    "ID" : "55e59380e4b0152a610d3be8",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "\"Hello$World\"",
    "optionC" : "\"Hello*World\"",
    "optionAnswer" : "D",
    "answer" : "标识符是以字母开头的字母数字序列：\n数字是指0~9，字母指大小写英文字母、下划线（_)和美元符号（$），也可以是Unicode字符集中的字符，如汉字；\n字母、数字等字符的任意组合，不能包含+、- *等字符；\n不能使用关键字；\n大小写敏感\n由此可以看出： A：不可以数字开头\n               B：用下划线开头符合，但是中间有空格\n               C:不能包含“*”\n                排除ABC，答案即是D",
    "optionB" : "\"_Hello World\"",
    "type" : "1",
    "optionA" : "\"9HelloWorld\"",
    "question" : "下面哪个标识符是合法的？"
  },
  {
    "ID" : "55b9d326e4b08f89c6185bc7",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "与文件大小相同",
    "optionC" : "与文件类型相同",
    "optionAnswer" : "B",
    "answer" : "本题考查Java包的概念。Java采用包来管理类名空间，为编程提供一种命名机制，也是一种可见性限制机制。定义一个包要用package关键字，用package语句说明一个包时，该包的层次结构必须与文件文件夹的层次相同。否则，在编译时可能出现查找不到的问题，所以选项B正确。",
    "optionB" : "与文件文件夹的层次相同",
    "type" : "1",
    "optionA" : "与文件的结构相同",
    "question" : "在Java中，用package语句说明一个包时，该包的层次结构必须是"
  },
  {
    "answer" : "我们可以使用任何类作为Map的key，然而在使用它们之前，需要考虑以下几点：\r\r（1）如果类重写了equals()方法，它也应该重写hashCode()方法。\r\r（2）类的所有实例需要遵循与equals()和hashCode()相关的规则。请参考之前提到的这些规则。\r\r（3）如果一个类没有使用equals()，你不应该在hashCode()中使用它。\r\r（4）用户自定义key类的最佳实践是使之为不可变的，这样，hashCode()值可以被缓存起来，拥有更好的性能。不可变的类也可以确保hashCode()和equals()在未来不会改变，这样就会解决与可变相关的问题了。\r \r比如，我有一个类MyKey，在HashMap中使用它。\r\r\/\/传递给MyKey的name参数被用于equals()和hashCode()中\rMyKey key = new MyKey('Pankaj'); \/\/assume hashCode=1234\rmyHashMap.put(key, 'Value');\r\r\/\/ 以下的代码会改变key的hashCode()和equals()值\rkey.setName('Amit'); \/\/assume new hashCode=7890\r\r\/\/下面会返回null，因为HashMap会尝试查找存储同样索引的key，而key已被改变了，匹配失败，返回null\rmyHashMap.get(new MyKey('Pankaj'));\r \r那就是为何String和Integer被作为HashMap的key大量使用。",
    "ID" : "55f2e483e4b0152a611431a1",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "我们能否使用任何类作为Map的key？"
  },
  {
    "ID" : "55b9d327e4b08f89c6185bdb",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "RandomAccessFile类兼有输入输出功能",
    "optionC" : "RandomAccessFile类不能写文件",
    "optionAnswer" : "C",
    "answer" : "RandomAccessFile提供了对文件随机访问的功能，它继承了Objects类，实现 DataInput和DataOutput接口，因此RandomAccessFile类兼有输入输出功能，可以访问文件任意位置。所以选择C。",
    "optionB" : "RandomAccessFile类实现DataInput和DataOutput接口",
    "type" : "1",
    "optionA" : "RandomAccessFile类可以随机访问文件",
    "question" : "下列关于RandomAccessFile类的叙述，不正确的是( )"
  },
  {
    "ID" : "55b9d327e4b08f89c6185bda",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "随机",
    "optionC" : "随机或顺序",
    "optionAnswer" : "B",
    "answer" : "本题考查Java中，类 FileInputStream和FileOutputStream提供了对文件的顺序读\/写方法，选项B正确。",
    "optionB" : "顺序",
    "type" : "1",
    "optionA" : "跳跃",
    "question" : "Java中，类FileInputStream和FileOutputStream提供了对文件的读\/写方法是"
  },
  {
    "ID" : "55e58d70e4b0152a610d39e0",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "call by reference能改变实际参数的内容",
    "optionC" : "call by reference不能改变实际参数的参考地址",
    "optionAnswer" : "B",
    "answer" : "1 基本类型和基本类型变量被当作参数传递给方法时，是值传递。\r在方法实体中，无法给原变量重新赋值，也无法改变它的值。\r2 对象和引用型变量被当作参数传递给方法时，是引用传递。\r在方法实体中，无法给原变量重新赋值，但是可以改变它所指向对象的属性。",
    "optionB" : "call by reference能改变实际参数的参考地址",
    "type" : "1",
    "optionA" : "call by value不会改变实际参数的数值",
    "question" : "下列不正确的有（ ）"
  },
  {
    "ID" : "55e6d766e4b0152a610de721",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "内存回收线程不能释放内存对象",
    "optionC" : "内存回收线程负责释放无用内存",
    "optionAnswer" : "C",
    "answer" : "A，java的内存回收是自动的，Gc在后台运行，不需要用户手动操作\rB，java中不允许使用指针\rD，内存回收线程可以释放无用的对象内存",
    "optionB" : "Java程序允许用户使用指针来释放内存",
    "type" : "1",
    "optionA" : "Java程序要求用户必须手工创建一个线程来释放内存",
    "question" : "关于Java语言的内存回收机制，下列选项中最正确的一项是"
  },
  {
    "answer" : "extern “C”\nC++语言为了支持重构（重构的特征?：相同的范围、相同的名字、不同的参数），在编译时对函数的命名方式进行了改变，编译后的名字包括一些参数的信息。extern \"C\"的作用，就是“提示”编译器，下面的文件和函数，要用C语言的命名规则进行。",
    "ID" : "55f2e54fe4b0152a611434c9",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "C++调用C语言库时，需要加()"
  },
  {
    "answer" : "StringBuffer sb = new StringBuffer();\n\nsb.append(“aaa”);",
    "ID" : "5602715ee4b043d0cb1d3a22",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "举例说明如何使用StringBuffer"
  },
  {
    "ID" : "55b227dee4b0bb7ded0a8c98",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "内存回收程序可以在指定的时间释放内存对象",
    "optionC" : "内存回收程序允许程序员直接释放内存",
    "optionAnswer" : "B",
    "answer" : "A. 程序员不需要创建线程来释放内存。\nC. 不允许程序员直接释放内存。\nD. 不一定在什么时刻执行垃圾回收。\n",
    "optionB" : "内存回收程序负责释放无用内存",
    "type" : "1",
    "optionA" : "程序员必须创建一个线程来释放内存",
    "question" : " 下列哪些语句关于Java内存回收的说明是正确的? （）"
  },
  {
    "ID" : "55e59381e4b0152a610d3c25",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "l.equals(42L)",
    "optionC" : "i.equals(l)",
    "optionAnswer" : "D",
    "answer" : "",
    "optionB" : "d.equals(l)",
    "type" : "1",
    "optionA" : "i.equals(d)",
    "question" : "Integer i = 42;\nLong l = 42l;\nDouble d = 42.0;\n下面为true的是"
  },
  {
    "ID" : "55e592e6e4b0152a610d3ac6",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "以上均正确",
    "optionC" : "在Thread类中有一个Map，用于存储每一个线程的变量的副本。",
    "optionAnswer" : "D",
    "answer" : "A,B,C三个选项的描述都是正确的",
    "optionB" : "线程的角度看，每个线程都保持一个对其线程局部变量副本的隐式引用，只要线程是活动的并且 ThreadLocal 实例是可访问的；在线程消失之后，其线程局部实例的所有副本都会被垃圾回收",
    "type" : "1",
    "optionA" : "ThreadLocal存放的值是线程封闭，线程间互斥的，主要用于线程内共享一些数据，避免通过参数来传递",
    "question" : "下面有关java threadlocal说法正确的有？"
  },
  {
    "answer" : "Java1.5并发包（java.util.concurrent）包含线程安全集合类，允许在迭代时修改集合。迭代器被设计为fail-fast的，会抛出ConcurrentModificationException。一部分类为：CopyOnWriteArrayList、 ConcurrentHashMap、CopyOnWriteArraySet。",
    "ID" : "55f2e484e4b0152a611431ab",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "并发集合类是什么？"
  },
  {
    "answer" : "-5",
    "ID" : "55f2e54fe4b0152a61143500",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "店主销售电话卡，他以60元的价格各销售了两张。其中一张是赚了20%，另一张是亏了20%。 请问他总共赚了 1 钱(亏了的话请用负数表示)？"
  },
  {
    "answer" : "finally块一般写一些不论是否发生异常都必须执行一次的代码\n\n例如关闭与数据库的连接等",
    "ID" : "5602715ee4b043d0cb1d3a30",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "简述finally块的功能和规则"
  },
  {
    "answer" : "处理文件和获取文件信息；文件或文件夹的管理。\n\n概括一句话就是：除了读写文件内容其他的都可以做。",
    "ID" : "5602715fe4b043d0cb1d3a43",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "简述File类的基本功能"
  },
  {
    "ID" : "55e58d70e4b0152a610d3a0a",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "void",
    "optionC" : "goto",
    "optionAnswer" : "A",
    "answer" : "null不是Java中的关键字，它是一个字面量\rnative是Java中的关键字，申明在方法上表示该方法调用的是非Java语言的函数\rgoto是Java的关键字，被作为保留关键字，不使用\rsizeof是c++中的\rvoid是Java中的关键字，在方法声明上，表示该方法无返回值",
    "optionB" : "native",
    "type" : "1",
    "optionA" : "null",
    "question" : "Which one is not Java keywords?"
  },
  {
    "ID" : "55e59381e4b0152a610d3c2c",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "可以被抽象类继承",
    "optionC" : "子类为abstract",
    "optionAnswer" : "D",
    "answer" : "A,抽象类不能实例化，因为有抽象方法未实现\nB,可以被继承。派生类可以实现抽象方法\nC，子类可以是抽象的，也可以非抽象的E，可以被抽象类继承，也可以被非抽象类继承",
    "optionB" : "不可以被继承",
    "type" : "1",
    "optionA" : "可以实例化",
    "question" : "对于abstract声明的类，下面说法正确的是"
  },
  {
    "answer" : "#include <cstdio>\n#include <algorithm>\n \nint a[500500] = {0};\nint dp[500500] = {0};\n \nint main(){\n    freopen(\"numtri.in\",\"r\",stdin);\n    int row_num = 0;\n    scanf(\"%d\", &row_num);\n    int elem_num = row_num * (row_num + 1) \/ 2; \/\/ 数字金字塔中的元素个数\n    for(int i = 0;i <elem_num;i++) {\n        scanf(\"%d\",&a[i]);\n    }\n    for(int i=0; i<row_num; i++) {\n        dp[elem_num-1-i]=a[elem_num-1-i];\n    }\n    int n;\n    for(int i=row_num-2; i>=0; i--){\n        n = i * (i + 1) \/ 2;\n        for(int j=0; j<=i; j++) {\n            dp[n+j] = a[n+j] + std::max(dp[n+j+i+1], dp[n+j+i+2]);\n        }\n    }\n \n    freopen(\"numtri.out\",\"w\",stdout);\n    printf(\"%d\\n\",dp[0]);\n    return 0;\n}",
    "ID" : "55f2e54fe4b0152a611434d8",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "假设有如下所示的一个数字金字塔，现在，要求写一个程序来查找从顶点到底部任意处结束的路径，使路径经过的数字的和最大，并输出该路径的最大和。比如以下金字塔的和最大路径的和为7+3+8+7+5=30。7\n3 2\n8 1 0\n2 7 4 4\n4 5 2 6 5"
  },
  {
    "ID" : "55e592e8e4b0152a610d3b34",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "cba",
    "optionC" : "cab",
    "optionAnswer" : "A",
    "answer" : "答案：A 在继承中派生类的对象调用构造函数的顺序，应该是先调用基类的构造函数，然后是成员中的对象对应类的构造函数，最后是派生类自己的构造函数.",
    "optionB" : "acb",
    "type" : "1",
    "optionA" : "abc",
    "question" : "建立派生类对象时,3种构造函数分别是a(基类的构造函数)、b(成员对象的构造函数)、c(派生类的构造函数)这3种构造函数的调用顺序为: "
  },
  {
    "ID" : "55e592e6e4b0152a610d3aae",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "(double)-9.0",
    "optionC" : "(long)-8",
    "optionAnswer" : "D ",
    "answer" : "D  Math.floor(x) 返回小于等于x的最接近整数，类型为double",
    "optionB" : "(long)-9",
    "type" : "1",
    "optionA" : "(float)-8.0",
    "question" : "Math.floor(-8.5)=( )"
  },
  {
    "answer" : "1 输入打折价错误+输入原价错误 （输入值不在正常范围内）\n2 输入打折价错误+输入原价正确\n3 输入打折价正确+输入原价错误\n4 输入打折价正确+输入原价正确 （打折价高于原价）\n5 输入打折价正确+输入原价正确 （打折价高于原价 返回折扣信息不对）\n6 输入打折价正确+输入原价正确  （打折价高于原价 返回折扣信息对）",
    "ID" : "55f2e54fe4b0152a611434cd",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "假设京东有一个web API: http:\/\/p.jd.com?p1=90&p0=100，输入打折价p1和原价p0，返回折扣信息0.9，请设计测试用例进行测试。"
  },
  {
    "ID" : "55e6d766e4b0152a610de720",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "throw子句",
    "optionC" : "finally子句",
    "optionAnswer" : "C",
    "answer" : "finally子句一般是用来清理这些资源的。",
    "optionB" : "catch子句",
    "type" : "1",
    "optionA" : "try子句",
    "question" : "在异常处理中，入释放资源，关闭数据库、关闭文件应由（ ）语句来完成。"
  },
  {
    "answer" : "可以有两个方法：如果可以破坏链表m_pNext,那可以一个循环将所有m_pNext指向上一个接点，然后一个循环输出，然后再还原接点。\n个人觉得这个太复杂。\n方法二：使用递归或借助栈来做。（所有递归都可以通过栈来转成非递归）\n\nvoid PutRlist(const listNode * pNode)\n{\n    if（!pNode） return;\n    PutRlist(pNode->m_pNext);\n    \/\/输出。\n    std::cout<<pNode->m_nKey<< \"<-\";\n}",
    "ID" : "55f2e54fe4b0152a611434f9",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "从尾到头输出链表\n题目：输入一个链表的头结点，从尾到头反过来输出每个结点的值。链表结点定义如下：struct ListNode\n{\n    int  m_nKey;\n    ListNode *m_pNext;\n};\n"
  },
  {
    "ID" : "55b59784e4b0ef2b57550927",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "java．lang",
    "optionC" : "java．Util",
    "optionAnswer" : "D",
    "answer" : "本题考查Java中包的概念。Java中用import语句来导入包，但需注意的是， Java语言中的java．lang包是由编译器直接自动导入的，因此，编程时使用该包中的类，可省去import导入。使用其他包中的类，必须用import导入，选项D为正确答案。",
    "optionB" : "java．awt",
    "type" : "1",
    "optionA" : "java．Applet",
    "question" : "在Java中，由Java编译器自动导入而无需在程序中用import导入的包是"
  },
  {
    "ID" : "55e59382e4b0152a610d3c51",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "Reader",
    "optionC" : "PipedReader",
    "optionAnswer" : "D",
    "answer" : "java.io.Reader是一个读取字符流的抽象类，通过继承Reader类，可以很方便的读取字符流，比如，我们可以将一个字符串读取为一串串（字符）流，还可以读取一个文件里的内容为一串串的流。\nJava(1.6.x)里提供了几种Reader的直接继承类，具体的有：BufferedReader, CharArrayReader, FileReader, InputStreamReader, PipedReader, StringReader等，子类须实现的方法只有 read(char[], int, int) 和 close()。",
    "optionB" : "InputStreamReader",
    "type" : "1",
    "optionA" : "FilterReader",
    "question" : "BufferedReader的父类是以下哪个？"
  },
  {
    "ID" : "55b5a91fe4b0ef2b575583e7",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "public abstract class Car{}",
    "optionC" : "protected private number;",
    "optionAnswer" : "D",
    "answer" : "类声明格式[public][abstract][final]class className [extends superclassName][implements interfaceNameList]{...类体...}，而abstract和final不能共存，因为因为abstract是要被继承的，而被final修饰的类不可被继承。",
    "optionB" : "abstract private move(){}",
    "type" : "1",
    "optionA" : "abstract final class HI{}",
    "question" : "下列哪个类的声明是正确的？（ )"
  },
  {
    "answer" : "语义不明，已知的是，Iterator的协议不能确保迭代的次序。然而要注意，ListIterator没有提供一个add操作，它要确保迭代的顺序。",
    "ID" : "55f2e483e4b0152a61143196",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "为何没有像Iterator.add()这样的方法，向集合中添加元素？"
  },
  {
    "answer" : "两两比赛，分成500组剩下一人，类似于归并排序的方式，比出冠军后，让冠军之间再比，主要是要想想多余的那一个选手如何处理，必然要在第一次决出冠军后加入比赛组。",
    "ID" : "55f2e54fe4b0152a611434e7",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "公司里面有1001个员工，现在要在公司里面找到最好的羽毛球选手，也就是第一名，每个人都必须参赛，问至少要比赛多少次才能够找到最好的羽毛球员工。"
  },
  {
    "answer" : "Java集合类提供了一套设计良好的支持对一组对象进行操作的接口和类。Java集合类里面最基本的接口有： 1、Collection：代表一组对象，每一个对象都是它的子元素。 2、Set：不包含重复元素的Collection。 3、List：有顺序的collection，并且可以包含重复元素。 4、Map：可以把键(key)映射到值(value)的对象，键不能重复。",
    "ID" : "0da12c0ebdee11e6a0e100163e0021c8",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "Java集合类框架的基本接口有哪些？"
  },
  {
    "answer" : "如果我们想使用Array或Collection的排序方法时，需要在自定义类里实现Java提供Comparable接口。\r\rComparable接口有compareTo(T OBJ)方法，它被排序方法所使用。我们应该重写这个方法，如果“this”对象比传递的对象参数更小、相等或更大时，它返回一个负整数、0或正整数。\r\r但是，在大多数实际情况下，我们想根据不同参数进行排序。\r\r比如，作为一个CEO，我想对雇员基于薪资进行排序，一个HR想基于年龄对他们进行排序。这就是我们需要使用Comparator接口的情景，因为Comparable.compareTo(Object o)方法实现只能基于一个字段进行排序，我们不能根据对象排序的需要选择字段。\r\rComparator接口的compare(Object o1, Object o2)方法的实现需要传递两个对象参数，若第一个参数比第二个小，返回负整数；若第一个等于第二个，返回0；若第一个比第二个大，返回正整数。",
    "ID" : "55f2e484e4b0152a611431af",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "Comparable和Comparator接口是什么？"
  },
  {
    "ID" : "55e58d70e4b0152a610d39dd",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "3",
    "optionC" : "2",
    "optionAnswer" : "D",
    "answer" : "构造方法形式\r类名([形式参数表])\r构造方法没有返回值，不能添加void，构造方法可以被重载",
    "optionB" : "1",
    "type" : "1",
    "optionA" : "0",
    "question" : "在如下所示的类Test中，共有（）个构造方法。 \rpublic class Test\r{\r    private int x;\r    public Test()\r    {\r        x = 35;\r    }\r \r    public void Test(double f)\r    {\r        this.x = (int)f;\r    }\r \r    public Test(double f)\r    {\r        this.x = (int)f;\r    }\r \r    public Test(String s) {}\r}\r "
  },
  {
    "answer" : "function sum(int a[], int n, int x){\n    s=a[n]\n    for(int i=1; i<=n; i++){\n        s += x*s + a[n-i]\n    }\n    return s;\n}",
    "ID" : "55f2e54fe4b0152a611434e2",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "计算机中处理乘法的指令要比加法复杂的多， 因为在一些关键系统中我们常常会考虑如何尽可能减少乘法的运算。\n现在有如下的表达式\ny= anxn+an-1xn-1 +…..+a1x +a0\n其中an, an-1, ….a1, a0是常数， 给一个x， 要求尽快算出y的值。请尝试写出这样的一个函数。"
  },
  {
    "answer" : "和while(1)相同。",
    "ID" : "55f2e54fe4b0152a61143513",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : " 语句for( ;1;)有什么问题？它是什么意思？"
  },
  {
    "answer" : "有A、B两个栈，进队列push到A，出队列从B中pop\n在进队列前把B中的元素全部pop出来并push到A中\n在出队列前把A中的元素全部pop出来并push到B中",
    "ID" : "55f2e54fe4b0152a6114350c",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "用两个栈模拟队列先进先出，模拟其add和romve功能，给出思路和代码。"
  },
  {
    "ID" : "55e59382e4b0152a610d3c45",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "Java使用 finalize() 方法在垃圾收集器象从内存中清除出去之前做必要的清理工作",
    "optionC" : "finally在异常处理时提供 finally 块来执行任何清除操作。",
    "optionAnswer" : "B",
    "answer" : "final关键字可用于修饰类、变量和方法。final修饰的类不能被继承，final修饰的方法不能被重写，final修饰的变量不可被修改，一旦获得初始值，该变量就不能被重新赋值。",
    "optionB" : "如果一个方法被声明为final，可以被覆盖",
    "type" : "1",
    "optionA" : "如果一个类被声明为final，意味着它不能再派生出新的子类，不能作为父类被继承",
    "question" : "下面有关final, finally, finalize的区别描述错误的是？"
  },
  {
    "ID" : "55e592e6e4b0152a610d3ad2",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "java.util",
    "optionC" : "java.io",
    "optionAnswer" : "A",
    "answer" : "java.lang包是java语言的核心包，lang是language的缩写\njava.lang包定义了一些基本的类型，包括Integer,String之类的，是java程序必备的包，有解释器自动引入，无需手动导入",
    "optionB" : "java.system",
    "type" : "1",
    "optionA" : "java.lang",
    "question" : "在运行时，由java解释器自动引入，而不用import语句引入的包是()。"
  },
  {
    "answer" : "除了整型，枚举类型，字符型，其他的都不行。譬如：字符串，浮点型这些都不可以作为switch的参数类型。",
    "ID" : "55f2e550e4b0152a61143523",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : " 不能做switch()的参数类型是："
  },
  {
    "ID" : "55b9d327e4b08f89c6185be1",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "Java还实现了真数组，避免了覆盖数据的可能",
    "optionC" : "Java自己操纵内存减少了内存出错的可能性",
    "optionAnswer" : "B",
    "answer" : "Java鲁棒性的特点如下：Java在编译和运行程序时都要对可能出现的问题进行检查，以防止错误的产生。Java编译器可以查出许多其他语言运行时才能发现的错误。Java不支持指针操作，大大减少了错误发生的可能性。Java具有异常处理的功能，当程序异常时，它能捕获并响应意外情况，以保证程序能稳妥地结束，计算机系统不会崩溃。而Java能运行虚拟机实现跨平台是Java的与平台无关性的特点。所以本题选B。",
    "optionB" : "Java能运行虚拟机实现跨平台",
    "type" : "1",
    "optionA" : "Java能检查程序在编译和运行时的错误",
    "question" : "下列不属于Java语言鲁棒性特点的是 ( )"
  },
  {
    "answer" : "用来保证在任一时刻只能有一个线程来访问临界资源的那个标记\n\n在Java中使用\n\n用在对象前面限制一段代码的执行\n\n用在方法声明中，表示整个方法为同步方法。",
    "ID" : "5602715fe4b043d0cb1d3a47",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "什么是互斥锁，Java中如何实现"
  },
  {
    "answer" : "是一种字符的编码方式，占16位字节，Java 技术使用 Unicode 来表示字符串和字符。",
    "ID" : "5602715fe4b043d0cb1d3a3f",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "什么是Unicode？"
  },
  {
    "ID" : "55e592e7e4b0152a610d3b0f",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "this（）和super（）可以在static环境中使用，包括static方法和static语句块",
    "optionC" : "this（）和super（）可以同时出现在一个构造函数中",
    "optionAnswer" : "A",
    "answer" : "this是对象的引用",
    "optionB" : "super（）和this（）不一定要放在构造方法内第一行",
    "type" : "1",
    "optionA" : "在子类构造方法中使用super（）显示调用父类的构造方法，super（）必须写在子类构造方法的第一行，否则编译不通过",
    "question" : " 在使用super 和this关键字时，以下描述正确的是"
  },
  {
    "ID" : "56437914bde711e6a0e100163e0021c8",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "Double",
    "optionC" : "Float",
    "optionAnswer" : "B",
    "answer" : "默认为double型，如果为float型需要加上f显示说明，即0.6332f",
    "optionB" : "double",
    "type" : "1",
    "optionA" : "float",
    "question" : "0.6332的数据类型是（）"
  },
  {
    "ID" : "55e592e6e4b0152a610d3adf",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "如果在一个线程构造了一个不可变对象之后（对象仅包含final字段），就可以保证了这个对象被其他线程正确的查看",
    "optionC" : "“volatile” — 保证修饰后在对变量读写前都会与主内存更新。",
    "optionAnswer" : "D",
    "answer" : "如果在一个线程构造了一个不可变对象之后（对象仅包含final字段），你希望保证这个对象被其他线程正确的查看，你仍然需要使用同步才行。",
    "optionB" : "“synchronized” — 保证在块开始时都同步主内存的值到工作内存，而块结束时将变量同步回主内存",
    "type" : "1",
    "optionA" : "JMM通过控制主内存与每个线程的本地内存之间的交互，来为java程序员提供内存可见性保证",
    "question" : "下面有关java内存模型的描述，说法错误的是？"
  },
  {
    "answer" : "栈和队列两者都被用来预存储数据。java.util.Queue是一个接口，它的实现类在Java并发包中。队列允许先进先出（FIFO）检索元素，但并非总是这样。Deque接口允许从两端检索元素。\r\r栈与队列很相似，但它允许对元素进行后进先出（LIFO）进行检索。\r\rStack是一个扩展自Vector的类，而Queue是一个接口。",
    "ID" : "55f2e484e4b0152a611431ad",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "队列和栈是什么，列出它们的区别？"
  },
  {
    "answer" : "使用递归方法，可以使用前序遍历，首先分别计算左右子树各自的子树和，然后记录目前最大的；\n再加入当前的父节点，再计算父节点开头的子树是否最大；该层递归上去即可。\npublic class MaxSumSubTree {\n    class TreeNode{\n        TreeNode left,right;\n        int tag;\n        TreeNode(int tag){\n            this.tag = tag;\n        }\n    }\n\n    private TreeNode maxRoot = new TreeNode(0);\n    public int find(TreeNode root){\n        if(root==null){\n            return 0;\n        } else{\n            int lSum = find(root.left);\n            int rSum = find(root.right);\n            if(maxRoot.tag<lSum)\n                maxRoot = root.left;\n            if(maxRoot.tag<rSum)\n                maxRoot = root.right;\n            return root.tag+lSum+rSum;\n        }\n    }\n}\n",
    "ID" : "55f2e54fe4b0152a611434db",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "有一个二叉树， 节点全部为整数，如何找到一个子树，它所有节点的和最大？要求编程序实现。"
  },
  {
    "answer" : " 1\/8",
    "ID" : "55f2e54fe4b0152a611434df",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "在区间[-1, 1]随意取两个数，它们的和大于1的概率是"
  },
  {
    "ID" : "55b5a91fe4b0ef2b575583ea",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "编译错误",
    "optionC" : "输出结果为：value  is  9.0",
    "optionAnswer" : "C",
    "answer" : "99.9是浮点型，9是整型，在9和99.9作运算时自动转化为浮点型，因此输出结果为9.0。",
    "optionB" : "输出结果为：value  is  9",
    "type" : "1",
    "optionA" : "输出结果为：value  is  99.9 ",
    "question" : "编译运行以下程序后，关于输出结果的说明正确的是 （  ）\npublic  class   Conditional{\n    public  static  void  main(String  args[ ]){\n        int  x=4;\n        System.out.println(“value  is  “+ ((x>4) ? 99.9:9));\n    }\n}\n"
  },
  {
    "ID" : "55e59380e4b0152a610d3bde",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "+",
    "optionC" : "%",
    "optionAnswer" : "C",
    "answer" : "ABD选项的操作符都可用于float和double\n只有%取余操作，只适用于整型",
    "optionB" : "\/",
    "type" : "1",
    "optionA" : "*",
    "question" : "Java中只有整型才能使用的运算符为？"
  },
  {
    "ID" : "55e6d766e4b0152a610de71c",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "response对象：response对象包含了响应客户请求的有关信息",
    "optionC" : "application对象：application对象实现了用户间数据的共享，可存放全局变量，可以有多个",
    "optionAnswer" : "C",
    "answer" : "application对象是共享的，多个用户共享一个，以此实现数据共享和通信",
    "optionB" : "request对象：客户端的请求信息被封装在request对象中，通过它才能了解到客户的需求，然后做出响应",
    "type" : "1",
    "optionA" : "session对象：session对象指的是客户端与服务器的一次会话，从客户连到服务器的一个WebApplication开始，直到客户端与服务器断开连接为止",
    "question" : "下面有关JSP内置对象的描述，说法错误的是？"
  },
  {
    "ID" : "55b5a91fe4b0ef2b575583fc",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : " double=0.9239d;",
    "optionC" : "long l=0xfffL; ",
    "optionAnswer" : "C",
    "answer" : "A 只有变量类型没有变量名。并且把int的128转byte 需要显示强制转换。应改为： byte b=(byte) 128；B 只有变量类型没有变量名。改为：Boolean bo=null；D 同样没有变量名。改为：double d=0.9239d。",
    "optionB" : " Boolean=null;",
    "type" : "1",
    "optionA" : "byte=128;",
    "question" : " 指出正确的表达式 （ )"
  },
  {
    "ID" : "7ca235cabde511e69a7900163e0021c8",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "MongoDB",
    "optionC" : "Microsoft SQL Server",
    "optionAnswer" : "D",
    "answer" : "非关系型数据库有MongoDB、memcachedb、Redis等",
    "optionB" : "MySql",
    "type" : "1",
    "optionA" : "Oracle",
    "question" : "下列属于非关系型数据库的是（）"
  },
  {
    "ID" : "55e592e7e4b0152a610d3aec",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "以上说法都对",
    "optionC" : "以上说法都不对",
    "optionAnswer" : "B",
    "answer" : "Java中是单继承多实现，所以尽量实现接口\n抽象类和接口中都有抽象方法，不能实例化",
    "optionB" : "抽象类可以被声明使用，接口不可以被声明使用",
    "type" : "1",
    "optionA" : "优先选用接口，尽量少用抽象类",
    "question" : "关于抽象类与接口，下列说法正确的有？"
  },
  {
    "ID" : "55e592e7e4b0152a610d3b0d",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "以上说法都对",
    "optionC" : "以上说法都不对",
    "optionAnswer" : "D",
    "answer" : "String 用于创建字符串常量， StringBuffer和StringBuilder(JDK 1.5 later)用于创建字符串变量",
    "optionB" : "String是常量，StringBuffer是变量",
    "type" : "1",
    "optionA" : "String是不可变的对象，StringBuffer是可以再编辑的",
    "question" : "String与StringBuffer的区别。"
  },
  {
    "answer" : "首先，1000亿条记录全部放到内存肯定不够，那就是分成小文件了，然后整合；\n公共的时间段，因为精确到分钟，我们把这每一分钟建成一个小文件，每个小文件肯定会有许多重复的ip，url；\n现在统计每个小的文件中url的访问量和ip的访问次数，方法就是建立索引；\n（建立索引的目的是为了减少查询次数，但是随着索引级数增多也会造成花更多的时间在建立索引上）；\n建立url的索引，假如是www.nowcoder.com\/question,可以分别给www.nowcoder.com和question建立索引，那么来了一条url，先看一级索引是不是匹配，匹配再看二级索引，相同的话就是我们要的url目标；\nip的索引也是一样，ip分成4段建立索引；\n所以这里影响效率的就是在索引建立这块，索引建立好那就是查询的事了的，就会变得非常快。\n假定给定了某个时间段，找出url的访问量，那么先找到给定的时间段，对应着刚开始分割的小的文件（每一个分钟）中搜索，通过索引找到相同的url之后，开始统计，直到搜索完所有的给定时间段内的所有的小的文件；\n求ip的访问次数也是一样，按照给定的时间段，找到对应的小的文件，通过索引找到相同的ip后统计，直到搜索完了给定时间段内的所有的小的文件。",
    "ID" : "55f2e54fe4b0152a611434cf",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "有1000亿条记录，每条记录由url,ip,时间组成，设计一个系统能够快速查询以下内容\n1.给定url和时间段（精确到分钟）统计url的访问次数\n2.给定ip和时间段（精确到分钟）统计ip的访问次数"
  },
  {
    "ID" : "55b9d326e4b08f89c6185bc3",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "源文件中public类的数目不限",
    "optionC" : "源文件其扩展名为.jar",
    "optionAnswer" : "B",
    "answer" : "本题考查考生对Java语言概念的理解。这是考试重点内容，注意理解这些基本概念。Java语言和C语言不同，它是区分大小写的； Java程序的源文件扩展名为.class，.jar文件是由归档工具jar生成的jar文件。源文件中public类的数目只能有0个或1个，用来指定应用程序类名，也是源文件名，所以选项B正确。",
    "optionB" : "源文件名与public类型的类名必须相同",
    "type" : "1",
    "optionA" : "Java是不区分大小写的",
    "question" : "下列有关Java语言的叙述中，正确的是"
  },
  {
    "ID" : "55e59382e4b0152a610d3c4c",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "无输出",
    "optionC" : "exception",
    "optionAnswer" : "B",
    "answer" : "==是比较对象的引用是否一致（实际上就是比较hashcode），str1和str2尽管内容相同，但是是两个对象，所以false。若直接定义String str3=\"hello\"，则编译器，自动会把str3和str2认为是同一对象的不同引用，str1 == str3返回true。",
    "optionB" : "FALSE",
    "type" : "1",
    "optionA" : "TRUE",
    "question" : "下面程序的运行结果是\nString str1 = \"hello\";\nString str2 = \"he\" + new String(\"llo\");\nSystem.err.println(str1 == str2);"
  },
  {
    "ID" : "55e6d766e4b0152a610de722",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "C#",
    "optionC" : "objectC",
    "optionAnswer" : "B",
    "answer" : "A，C，D都是类C语言，B不是\rPython是解释执行的，其他语言都需要先编译",
    "optionB" : "Python",
    "type" : "1",
    "optionA" : "JAVA",
    "question" : "从运行层面上来看，从四个选项选出不同的一个。"
  },
  {
    "ID" : "55b5a91fe4b0ef2b575583ed",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "interface",
    "optionC" : "abstract                    ",
    "optionAnswer" : "B",
    "answer" : "implements是一个类实现一个接口用的关键字。",
    "optionB" : "implements   ",
    "type" : "1",
    "optionA" : "extends",
    "question" : "下列哪一个关键字用于实现接口来定义类？ （ )"
  },
  {
    "ID" : "55e592e7e4b0152a610d3b1d",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "String类型的传递属于按引用传递",
    "optionC" : "用户自定义类型的传递属于按引用传递",
    "optionAnswer" : "D",
    "answer" : "按值传递：就是将该值的副本传过去（基本数据类型+String类型的传递，就是按值传递） \n按引用传递：就是将值的内存地址传过去（除基本数据类型+String以外类型的传递，就是引用传递）",
    "optionB" : "Array类型的传递属于按引用传递",
    "type" : "1",
    "optionA" : "char类型的传递属于按值传递",
    "question" : "下面有关java按值传递和引用传递，说法错误的是？"
  },
  {
    "ID" : "55b5a920e4b0ef2b57558400",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "int() ages = new int(100);",
    "optionC" : "int[] ages = new int[100];",
    "optionAnswer" : "C",
    "answer" : "定义数组同时给出长度，初始化为默认值（由元素数据类型决定）：\n格式：\ntype[] 变量名 = new type[数组长度]\n等价于：\ntype 变量名[] =new type[数组长度]\n",
    "optionB" : "int ages = new int[100];",
    "type" : "1",
    "optionA" : "int[] ages = [100];",
    "question" : "下面哪一个是合法的数组声明和构造语句( )"
  },
  {
    "ID" : "55e6d765e4b0152a610de70f",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "输出结果",
    "optionC" : "存储数据",
    "optionAnswer" : "C",
    "answer" : "算法包括0个或多个输入，1个或多个输出，中间有穷个处理过程。\r存储结构不属于算法结构",
    "optionB" : "处理数据",
    "type" : "1",
    "optionA" : "输入数据",
    "question" : "下列不属于算法结构的是（）"
  },
  {
    "ID" : "55b5a91fe4b0ef2b575583fd",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : " test ok and gbc ",
    "optionC" : "test ok and abc",
    "optionAnswer" : "B",
    "answer" : "java是传值，不是传引用。str=\"test ok\"只是修改的局部变量str,不是类的成员变量。类的成员变量并没有被修改。char是原始类型，也就是本身不是对象，是直接放在栈里的，也就是说传递的就是本身的地址。所以结果里是被修改的。",
    "optionB" : "good and gbc",
    "type" : "1",
    "optionA" : "good and abc ",
    "question" : "  指出下列程序运行的结果 （  ）\npublic class Example{ \n    String str=new String(\"good\"); \n     char[] ch = {'a','b','c'}; \n     public static void main(String args[]){ \n         Example ex=new Example(); \n         ex.change(ex.str,ex.ch); \n         System.out.print(ex.str+\" and \"); \n         Sytem.out.print(ex.ch); \n     }\n    public void change(String str,char ch[]){ \n         str=\"test ok\"; \n         ch[0]='g'; \n     }\n}\n"
  },
  {
    "ID" : "55e592e6e4b0152a610d3ae4",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "BatchedStatement",
    "optionC" : "CallableStatement",
    "optionAnswer" : "D",
    "answer" : "答案：D Statement在JDBC中相当于SQL语句的载体 A，Statement是最基本的用法，采用字符串拼接的方式，存在注入漏洞 B，PreparedStatement对Statement中的SQL语句进行预编译，同时检查合法性，效率高 C，CallableStatement接口扩展 PreparedStatement，用来调用存储过程,它提供了对输出和输入\/输出参数的支持。CallableStatement 接口还具有对 PreparedStatement 接口提供的输入参数的支持。D，不是标准的Statement类",
    "optionB" : "PreparedStatement",
    "type" : "1",
    "optionA" : "Statement",
    "question" : "下面哪个不是标准Statement类？"
  },
  {
    "answer" : "float f = 1.2f\n\nlong l = 1.2L",
    "ID" : "5602715de4b043d0cb1d39dc",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "如何定义float类型和long型"
  },
  {
    "ID" : "55e58d70e4b0152a610d39f2",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "当一个类实现一个接口，并且不能为任何抽象方法提供实现细节或方法体时",
    "optionC" : "当一个类实现多个接口时",
    "optionAnswer" : "C",
    "answer" : "当一个类中有一个方法是抽象类则类必须为抽象类。\r抽象类中可以有非抽象方法。\r抽象类给出方法的声明但没有具体的实现。",
    "optionB" : "当类是一个抽象类的子类，并且不能为任何抽象方法提供任何实现细节或方法体时",
    "type" : "1",
    "optionA" : "当一个类的一个或多个方法是抽象方法时",
    "question" : "下面哪些情况下不需要使用抽象类？"
  },
  {
    "ID" : "55e592e7e4b0152a610d3af9",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "Spring提供了AOP方式的日志系统",
    "optionC" : "使用Spring可以实现声明式事务",
    "optionAnswer" : "D",
    "answer" : "D.Spring提供了AOP方式的日志系统\nSpring并没有为我们提供日志系统，我们需要使用AOP（面向方面编程）的方式，借助Spring与日志系统log4j实现我们自己的日志系统。 ",
    "optionB" : "Spring中包含一个“依赖注入”模式的实现",
    "type" : "1",
    "optionA" : "Spring是一系列轻量级Java EE框架的集合",
    "question" : "下面关于Spring的说法中错误的是（）"
  },
  {
    "answer" : "try块内部一般写一些编程人员认为可能会出现异常的代码,使程序运行时不会因为出现异常而中断。",
    "ID" : "5602715ee4b043d0cb1d3a2e",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "简述try块的功能和规则"
  },
  {
    "answer" : "2.INSERT INTO product(Pid,Pname,Price)VALUES(1004,'京东空调',3000)\n3.UPDATE product SET Price=3666 WHEREpid=1001 \n4.SELECT * FROM product WHERE pname LIKE '%京%' \n5.SELECT* FROM product WHERE price<3000.0 AND price>1000.0 ORDER BY price DESC",
    "ID" : "55f2e54fe4b0152a611434f0",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "在京东商城的商品展示页面下方，总会有一些关于本商品的客户评论信息。模仿该评论模块，有如下三个表：price(商品表)，userinfo(用户表),threads(评论主题表)\n\n1.请画出以上三张表对应实体的ER图（实体字段标明主键外键即可，用箭头表示） \n2.在product表中加入一条新纪录(1004,'京东空调',3000).请写出对应的SQL语句。 \n3.更新product表中pid为1001的商品的价格为3666。请写出对应的SQL语句。 \n4.在product表中查询pname中带有\"京\"的商品。请写出对应的SQL语句。 \n5.查询product表中price在1000.0与3000.0之间的所有商品并按照价格降序排序。"
  },
  {
    "ID" : "55b227dee4b0bb7ded0a8c92",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : " int  j=0;\ndo{\n      System.out.println( “j  is “+j++);\n      if (j = = 3) {continue  loop;}\n }while  (j<10)\n",
    "optionC" : "int j=0;\nfor(int  k=0; j + k !=10; j++,k++)\n{    \n    System.out.println(“ j  is “+ j + “k  is”+ k);\n}\n",
    "optionAnswer" : "C",
    "answer" : "A中i没有初始化。\nB是死循环，j为非零,while循环的条件一直满足，就会一直循环下去。\nD，当j增加到3的时候就执行continue loop，而代码中没有标明loop标语。\n",
    "optionB" : " int  j=3;\nwhile(j)\n{  \nSystem.out.println(“ j  is “+j);\n}\n",
    "type" : "1",
    "optionA" : "while (int  i<7)\n{     i++;\n     System.out.println(“i is “+i);\n }\n",
    "question" : "以下选项中循环结构合法的是（）"
  },
  {
    "answer" : "用来证明和测试程序的假设。",
    "ID" : "5602715fe4b043d0cb1d3a35",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "什么是断言？"
  },
  {
    "ID" : "55b227dee4b0bb7ded0a8cab",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "InputStreamReader",
    "optionC" : "ObjectInputStream              ",
    "optionAnswer" : "D",
    "answer" : "InputStreamReader 是字节流通向字符流的桥梁：它使用指定的 charset 读取字节并将其解码为字符。它使用的字符集可以由名称指定或显式给定，或者可以接受平台默认的字符集。字符流的源或目标通常是文本文件",
    "optionB" : "FileInputStream",
    "type" : "1",
    "optionA" : "BufferedWriter                 ",
    "question" : "下面哪个流类属于面向字符的输入流( )"
  },
  {
    "answer" : "\b1\tSet keyset()\u001a赞map-\u0005+@\tkey*Set掐\u0002\r\r\b\/醉ap\/\u0001\fmap\u0016\u001a(\b- e\f退Χ\u0002S*磴hc(M*\b\f屙ap9\bd磴h戢d蛙\u0016\t\f磴h\u001a睾*I\u0002\r\r\b\/\u0001\u001a巧teratorRemove\u0001Set.remove\u0001removeAll\u0001retainAllclear蛙厶C d\f雾ap-d \u0004\u0002\r\/\u0001addaddAll蛙\u0002\r\r\b2\tCollection values()\u001a赞*map-\u0005+@\tvalue*Collection掐\u0002\r\r侏collection醉ap\/\u0001\fmap\u0016\u001a(collection- e\f退Χ\u0002S*磴hc(M*collection\f屙ap9\bd磴h戢d蛙\u0016\t\f磴h\u001a睾*I\u0002\r\r\b\/\u0001\u001a巧teratorRemove\u0001Set.remove\u0001removeAll\u0001retainAllclear蛙厶C d\f雾ap-d \u0004\u0002\r\/\u0001addaddAll蛙\u0002\r\r\b3\tSet<Map.Entry<K,V>> entrySet()\u001a赞*map\u0005+@\t \u0004*\b掐\u0002\r\r侏\b醉ap\/\u0001\fmap\u0016\u001a(collection- e\f退Χ\u0002S*磴hc(M*\b\f屙ap9\bd磴h戢d蛙\f迨汨赞entry厶setValue\u0016\t\f磴h\u001a睾*I\u0002\r\r\b\/\u0001\u001a巧teratorRemove\u0001Set.remove\u0001removeAll\u0001retainAllclear蛙厶C d\f雾ap-d \u0004\u0002\r\/\u0001addaddAll蛙\u0002（除迭代器自身的移除操作，以及对迭代器返回的entry进行setValue外），迭代器的结果会变为未定义。\r\r集合支持通过Iterator的Remove、Set.remove、removeAll、retainAll和clear操作进行元素移除，从map中移除对应的映射。它不支持add和addAll操作。",
    "ID" : "55f2e483e4b0152a611431a2",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "Map接口提供了哪些不同的集合视图？"
  },
  {
    "ID" : "55e59380e4b0152a610d3bf2",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "WeakMap继承自HashMap",
    "optionC" : "HashSet继承自AbstractSet",
    "optionAnswer" : "C",
    "answer" : "List,Set,Map在java.util包下都是接口\nList有两个实现类：ArrayList和LinkedList\nSet有两个实现类：HashSet和LinkedHashSet\nAbstractSet实现了Set\n详见，JDK帮助文档",
    "optionB" : "AbstractSet继承自Set",
    "type" : "1",
    "optionA" : "LinkedList继承自List",
    "question" : "下列关于容器集合类的说法正确的是？"
  },
  {
    "ID" : "55e592e6e4b0152a610d3abc",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "PROPAGATION_NESTED：支持当前事务，新增Savepoint点，与当前事务同步提交或回滚",
    "optionC" : "PROPAGATION_REQUIRES_NEW：新建事务，如果当前存在事务，把当前事务挂起",
    "optionAnswer" : "B ",
    "answer" : "B.PROPAGATION_REQUIRED：支持当前事务，如果当前没有事务，就创建一个新的事务",
    "optionB" : "PROPAGATION_REQUIRED：支持当前事务，如果当前没有事务，就抛出异常",
    "type" : "1",
    "optionA" : "PROPAGATION_SUPPORTS：支持当前事务，如果当前没有事务，就以非事务方式执行",
    "question" : "下面有关SPRING的事务传播特性，说法错误的是？"
  },
  {
    "ID" : "55b9d327e4b08f89c6185be7",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "有两个值，1 代表真，0 代表假",
    "optionC" : "其值可以赋给 int 类型的变量",
    "optionAnswer" : "A",
    "answer" : "布尔型数据只有两个值，true和false，不对应任何数字，不与数字转换，一般用于逻辑判别。",
    "optionB" : "用 int 表示类型",
    "type" : "1",
    "optionA" : "一种基本的数据类型，它的类型名称为 boolean",
    "question" : "下列有关 Java 布尔类型的描述中，正确的是"
  },
  {
    "answer" : "final是最终的意思，final可用于定义变量、方法和类但含义不同，声明为final的类不能被继承。  ",
    "ID" : "5602715de4b043d0cb1d39d4",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "在java中如果声明一个类为final，表示什么意思？"
  },
  {
    "answer" : "int FindMaxSubMin(BinTree *root)\n{\n    stack<BinTree*> s;\n    BinTree *p=root;\n    int MaxNode = p->data;\n    int MinNode = p->data;\n    while(p!=NULL||!s.empty())\n    {\n        while(p!=NULL)\n        {\n            s.push(p);\n            p=p->lchild;\n        }\n        if(!s.empty())\n        {\n            p=s.top();\n            if(p->data > MaxNode)\n            {\n                MaxNode = p->data;\n            }\n            if(p->data < MinNode)\n            {\n                MinNode = p->data;\n            }\n            s.pop();\n            p=p->rchild;\n        }\n }\n return abs(MaxNode - MinNode);\n }",
    "ID" : "55f2e54fe4b0152a611434c5",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "写一个函数，输入一个二叉树，树中每个节点存放了一个整数值，函数返回这颗二叉树中相差最大的两个节点间的差值绝对值。请注意程序效率。"
  },
  {
    "answer" : "方法的重载和重写都是实现多态的方式，区别在于前者实现的是编译时的多态性，而后者实现的是运行时的多态性。重载发生在一个类中，同名的方法如果有不同的参数列表（参数类型不同、参数个数不同或者二者都不同）则视为重载；重写发生在子类与父类之间，重写要求子类被重写方法与父类被重写方法有相同的返回类型，比父类被重写方法更好访问，不能比父类被重写方法声明更多的异常（里氏代换原则）。重载对返回类型没有特殊的要求。",
    "ID" : "04289510bdf111e6a0e100163e0021c8",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "为什么不能根据返回类型来区分重载？"
  },
  {
    "ID" : "2a76dbdebdea11e6a0e100163e0021c8",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "代码得到编译，但捕获到 NullPointException异常",
    "optionC" : "由于String s没有初始化，代码不能编译通过",
    "optionAnswer" : "C",
    "answer" : "开始以为会输出null什么的，运行后才发现Java中所有定义的基本类型或对象都必须初始化才能输出值。",
    "optionB" : "代码得到编译，并输出“s=null”",
    "type" : "1",
    "optionA" : "代码得到编译，并输出“s=”",
    "question" : "下面代码的运行结果为：（） import java.io.*; import java.util.*;  public class foo{     public static void main (String[] args){         String s;         System.out.println(\"s=\" + s);     } }"
  },
  {
    "ID" : "55e58d70e4b0152a610d3a00",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "javax.servlet",
    "optionC" : "servlet.http",
    "optionAnswer" : "B",
    "answer" : "javax是Sun公司提供的一个扩展包，算是对原 JAVA 包的一些优化处理，现在已经有很多都是基于JAVAX的程序开发而不是java包，就像 netbeans 里的图形处理都是使用jabax包",
    "optionB" : "javax.servlet",
    "type" : "1",
    "optionA" : "java.servlet",
    "question" : "常用的servlet包的名称是？"
  },
  {
    "ID" : "55e59380e4b0152a610d3bec",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "implements",
    "optionC" : "Sizeof",
    "optionAnswer" : "D",
    "answer" : "A是C++中的关键字\nB，java中的真用true表示，首字母是小写\nC，java中没有sizeof运算符\nD，implements是java中实现接口的关键字",
    "optionB" : "TRUE",
    "type" : "1",
    "optionA" : "NULL",
    "question" : "Which are keywords in Java?"
  },
  {
    "ID" : "55e592e7e4b0152a610d3aef",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "The program prints”12”",
    "optionC" : "The program prints”8”",
    "optionAnswer" : "B",
    "answer" : "短路与和短路或，只要前半部分能够决定最终结果后半部分不再执行",
    "optionB" : "The program prints”4”",
    "type" : "1",
    "optionA" : "The program prints”0”",
    "question" : "Given the following code:public class Test {\n    private static int j = 0;\n \n    private static Boolean methodB(int k) {\n        j += k;\n        return true;\n    }\n \n    public static void methodA(int i) {\n        boolean b;\n        b = i < 10 | methodB(4);\n        b = i < 10 || methodB(8);\n \n    }\n \n    public static void main(String args[]) {\n        methodA(0);\n        System.out.println(j);\n    }\n}\nWhat is the result?"
  },
  {
    "ID" : "55e592e6e4b0152a610d3ac5",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "static",
    "optionC" : "protected",
    "optionAnswer" : "C",
    "answer" : "接口只能被public和默认修饰符修饰，protected也不行所以除了public其他的都要选",
    "optionB" : "public",
    "type" : "1",
    "optionA" : "private",
    "question" : "忽略内部接口的情况，能用来修饰interface的有（ ）"
  },
  {
    "answer" : " QACSQDFXRHMY， FHCDQAMQRSYX",
    "ID" : "55f2e54fe4b0152a611434ee",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "关键码序列(Q,H,C,Y,Q,A,M,S,R,D,F,X)，要按照关键码值递增的次序进行排序，若采用初始步长为4的Shell的排序法，则一趟扫描的结果是（）；若采用以第一个元素为分界元素的快速排序法，则扫描一趟的结果是（）。"
  },
  {
    "ID" : "55e59380e4b0152a610d3bd4",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "WindowEvent",
    "optionC" : "MouseEvent",
    "optionAnswer" : "C",
    "answer" : "显然可知",
    "optionB" : "KeyEvent",
    "type" : "1",
    "optionA" : "InputEvent",
    "question" : "下列Java常见事件类中哪个是鼠标事件类？（）?"
  },
  {
    "ID" : "55e592e7e4b0152a610d3b27",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "suspend（）",
    "optionC" : "sleep（）",
    "optionAnswer" : "A",
    "answer" : "选A，start是启动线程对象，使之从新建状态转入就绪状态；sleep让线程睡眠一段时间，在此期间线程不消耗CPU资源；suspend使线程挂起，暂停执行， 如果想恢复线程，必须由其他线程调用 resume方法",
    "optionB" : "start（）",
    "type" : "1",
    "optionA" : "run（）",
    "question" : "下列方法中哪个是执行线程的方法？ （）"
  },
  {
    "answer" : "4",
    "ID" : "55f2e54fe4b0152a611434fe",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : " 五对夫妇甲,乙,丙,丁,戊举行家庭聚会 每一个人都可能和其他人握手, 但夫妇之间绝对不握手. 聚会结束时, 甲先生问其他人: 各握了几次手? 得到的答案是: 0,1,2,3,4,5,6,7,8. 试问: 甲太太握了（）次手?"
  },
  {
    "ID" : "55e592e7e4b0152a610d3afd",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "All of above",
    "optionC" : "(s.equals(t))",
    "optionAnswer" : "C",
    "answer" : "==默认比较的是对象或者变量所存储的地址，equals方法则可以则继承的类里重写，包装类中的equals实际比较的是所存储的变量值，而对象直接用==则比较的是地址",
    "optionB" : "(s==t)",
    "type" : "1",
    "optionA" : "(s==u)",
    "question" : "Consider the following code:Integer s=new Integer(9);\nInteger t=new Integer(9);\nLong u=new Long(9);Which test would return true?"
  },
  {
    "ID" : "55e59381e4b0152a610d3c0e",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "该类的静态数据成员变量的值不可修改",
    "optionC" : "该类的静态方法只能访问该类的静态成员变量",
    "optionAnswer" : "D",
    "answer" : "类的静态成员与类直接相关，与对象无关，在一个类的所有实例之间共享同一个静态成员，A正确\n静态成员函数中不能调用非静态成员，C正确\n非静态成员函数中可以调用静态成员，B正确\n常量成员才不能修改，静态成员变量必须初始化，但可以修改（例如我们常利用静态成员变量统计某个函数的调用次数），D错误",
    "optionB" : "静态成员变量可被该类的所有方法访问",
    "type" : "1",
    "optionA" : "该类的对象共享其静态成员变量的值",
    "question" : "下列关于一个类的静态成员的描述中，不正确的是"
  },
  {
    "ID" : "55b9d327e4b08f89c6185bdc",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "getName()",
    "optionC" : "getAbsoluteFile()",
    "optionAnswer" : "B",
    "answer" : "本题考查File类的基本知识。File类是通过文件名列表来描述一个文件对象的属性，通过File类提供的方法，可以获得文件的名称、长度、所有路径等信息，还可以改变文件的名称、删除文件等。",
    "optionB" : "getParentFile()",
    "type" : "1",
    "optionA" : "getAbsolutePath()",
    "question" : "Java对文件类提供了许多操作方法，能获得文件对象父路径名的方法是（） 。"
  },
  {
    "ID" : "55b5a91fe4b0ef2b575583fb",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "List myList=new List();",
    "optionC" : "ArrayList myList=new List();",
    "optionAnswer" : "B",
    "answer" : "ArrayList继承了List，而List是一个接口，不能实例化。",
    "optionB" : "List myList=new ArrayList();",
    "type" : "1",
    "optionA" : "ArrayList myList=new Object();",
    "question" : "欲构造ArrayList类的一个实例，此类继承了List接口，下列哪个方法是正确的？（  ）"
  },
  {
    "ID" : "55e59380e4b0152a610d3c04",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "抽象",
    "optionC" : "多态",
    "optionAnswer" : "A",
    "answer" : "反射破坏代码的封装性，破坏原有的访问修饰符访问限制??",
    "optionB" : "继承",
    "type" : "1",
    "optionA" : "封装",
    "question" : "在为传统面向对象语言的程序做单元测试的时候,经常用到mock对象。Mock对象通过反射数。请问反射最大程度破坏了面向对象的以下哪个特性？"
  },
  {
    "ID" : "55e59381e4b0152a610d3c23",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "Create B ->Create A ->Load B ->Load A",
    "optionC" : "Load B -> Create B-> Create A -> Load A",
    "optionAnswer" : "B",
    "answer" : "初始化块在构造器执行之前执行，类初始化阶段先执行最顶层父类的静态初始化块，依次向下执行，最后执行当前类的静态初始化块；创建对象时，先调用顶层父类的构造方法，依次向下执行，最后调用本类的构造方法。",
    "optionB" : "Load B -> Load A ->Create B ->Create A",
    "type" : "1",
    "optionA" : "Load B ->Create B->Load A -> Create A",
    "question" : "下面的代码运行的结果是：class B extends Object\n{\n    static\n    {\n        System.out.println(\"Load B\");\n    }\n    public B()\n    {\n        System.out.println(\"Create B\");\n    }\n}\nclass A extends B\n{\n    static\n    {\n        System.out.println(\"Load A\");\n    }\n    public A()\n    {\n        System.out.println(\"Create A\");\n    }\n}\n \npublic class Testclass\n{\n    public static void main(String[] args)\n    {\n        new A();\n    }\n}"
  },
  {
    "ID" : "55e592e7e4b0152a610d3b1a",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "long double",
    "optionC" : "long float",
    "optionAnswer" : "B",
    "answer" : "Java中，如果对整数不指定类型，默认时int类型，对小数不指定类型，默认是double类型\n如果要指定长整型，最好写为long a = 100000000L,如果要指定为单精度最好写为float a= 12.34F",
    "optionB" : "int double",
    "type" : "1",
    "optionA" : "int float",
    "question" : "在基本JAVA类型中，如果不明确指定，整数型的默认是什么类型？带小数的默认是什么类型？"
  },
  {
    "ID" : "55b9d327e4b08f89c6185beb",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "非流类",
    "optionC" : "对象流类",
    "optionAnswer" : "D",
    "answer" : "Java的io包中的类可以处理不同类型的流，比如字节流、字符流、对象流、非流类等等。File类就是一个重要的非流类，它是以一种系统无关的方式表示一个文件对象的属性。",
    "optionB" : "字节流类",
    "type" : "1",
    "optionA" : "字符流类",
    "question" : " java.io包的File类是( )。"
  },
  {
    "answer" : "数组没有length()方法，有length 的属性。String 有length()方法。JavaScript中，获得字符串的长度是通过length属性得到的，这一点容易和Java混淆。",
    "ID" : "4cd53c24bdf011e6a0e100163e0021c8",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "数组有没有length()方法？String有没有length()方法？ "
  },
  {
    "ID" : "55b5a91fe4b0ef2b575583f4",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "for (int k = 0; k > 0; k++)",
    "optionC" : "for (int k = 0; k < 10; k--)",
    "optionAnswer" : "C",
    "answer" : "C中k的初始值为0，k不断做自减操作，永远满足k<10的循环条件，因此会造成死循环。",
    "optionB" : "for (int k = 10; k > 0; k--)",
    "type" : "1",
    "optionA" : "for (int k = 0; k < 0; k++)",
    "question" : "下面哪一个循环会导致死循环？（ )"
  },
  {
    "ID" : "55b227dee4b0bb7ded0a8c96",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "synchronized",
    "optionC" : "serialize",
    "optionAnswer" : "D",
    "answer" : "synchronized，Java语言的关键字，当它用来修饰一个方法或者一个代码块的时候，能够保证在同一时刻最多只有一个线程执行该段代码。一、当两个并发线程访问同一个对象object中的这个synchronized(this)同步代码块时，一个时间内只能有一个线程得到执行。另一个线程必须等待当前线程执行完这个代码块以后才能执行该代码块。二、然而，当一个线程访问object的一个synchronized(this)同步代码块时，另一个线程仍然可以访问该object中的非synchronized(this)同步代码块。三、尤其关键的是，当一个线程访问object的一个synchronized(this)同步代码块时，其他线程对object中所有其它synchronized(this)同步代码块的访问将被阻塞。四、第三个例子同样适用其它同步代码块。也就是说，当一个线程访问object的一个synchronized(this)同步代码块时，它就获得了这个object的对象锁。结果，其它线程对该object对象所有同步代码部分的访问都被暂时阻塞。五、以上规则对其它对象锁同样适用。",
    "optionB" : "static               ",
    "type" : "1",
    "optionA" : "transient         ",
    "question" : "以下哪个关键字可以用来为对象加互斥锁？（ ）"
  },
  {
    "answer" : "public class MyCast implements Tt{\n\npublic void outPut( ){}\n\npublic int tt( ){\n\nreturn 0;\n\n}\n\n}",
    "ID" : "5602715ee4b043d0cb1d3a29",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "如何在代码中使用接口？"
  },
  {
    "ID" : "55e6d765e4b0152a610de707",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "Reader",
    "optionC" : "PipedReader",
    "optionAnswer" : "D",
    "answer" : "java.io.Reader是一个读取字符流的抽象类，通过继承Reader类，可以很方便的读取字符流，比如，我们可以将一个字符串读取为一串串（字符）流，还可以读取一个文件里的内容为一串串的流。\rJava(1.6.x)里提供了几种Reader的直接继承类，具体的有：BufferedReader, CharArrayReader, FileReader, InputStreamReader, PipedReader, StringReader等，子类须实现的方法只有 read(char[], int, int) 和 close()。",
    "optionB" : "InputStreamReader",
    "type" : "1",
    "optionA" : "FilterReader",
    "question" : "BufferedReader的父类是以下哪个？"
  },
  {
    "ID" : "55e59381e4b0152a610d3c35",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "static",
    "optionC" : "Boolean",
    "optionAnswer" : "B",
    "answer" : "public static void main(String args[])。必须这么定义，这是Java的规范。?",
    "optionB" : "void",
    "type" : "1",
    "optionA" : "int",
    "question" : "?Which is the return type of the method main()?"
  },
  {
    "answer" : "理论上Java因为有垃圾回收机制（GC）不会存在内存泄露问题（这也是Java被广泛使用于服务器端编程的一个重要原因）；然而在实际开发中，可能会存在无用但可达的对象，这些对象不能被GC回收，因此也会导致内存泄露的发生。例如hibernate的Session（一级缓存）中的对象属于持久态，垃圾回收器是不会回收这些对象的，然而这些对象中可能存在无用的垃圾对象，如果不及时关闭（close）或清空（flush）一级缓存就可能导致内存泄露。在支持垃圾回收的语言中，内存泄露是很隐蔽的，这种内存泄露其实就是无意识的对象保持。如果一个对象引用被无意识的保留起来了，那么垃圾回收器不会处理这个对象，也不会处理该对象引用的其他对象，即使这样的对象只有少数几个，也可能会导致很多的对象被排除在垃圾回收之外，从而对性能造成重大影响，极端情况下会引发Disk Paging（物理内存与硬盘的虚拟内存交换数据），甚至造成OutOfMemoryError。",
    "ID" : "b32dada2bdf111e6a0e100163e0021c8",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "Java 中会存在内存泄漏吗，请简单描述。 "
  },
  {
    "ID" : "55e592e6e4b0152a610d3ab5",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "public int setVar(int a， float c){return a;}",
    "optionC" : "public int setVar(int a， float c， int b){return a;}",
    "optionAnswer" : "B ",
    "answer" : "ACD重载是在同一个类中，有多个方法名相同，参数列表不同(参数个数不同，参数类型不同),与方法的返回值无关，与权限修饰符无关，B中的参数列表和题目的方法完全一样了。",
    "optionB" : "protected void setVar(int a， int b， float c){}",
    "type" : "1",
    "optionA" : "private void setVar(int a， float c， int b){}",
    "question" : "A,B,C,D 中哪个不是 setvar的重载？public class methodover\n{\n    public void setVar(int a, int b, float c) {}\n}"
  },
  {
    "ID" : "55e592e6e4b0152a610d3acb",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "PreparedStatement可以阻止常见的SQL注入式攻击",
    "optionC" : "PreparedStatement中，“?” 叫做占位符，一个占位符可以有一个或者多个值",
    "optionAnswer" : "C",
    "answer" : "选择C JDBC statement中的PReparedStatement的占位符对应着即将与之对应当值，并且一个占位符只能对应一个值，如果能对应多个就会引起混淆。sql语句是确定的，那么一个占位符必定只能对应一个值",
    "optionB" : "对于PreparedStatement来说，数据库可以使用已经编译过及定义好的执行计划，这种预处理语句查询比普通的Statement查询运行速度更快",
    "type" : "1",
    "optionA" : "JDBC提供了Statement、PreparedStatement 和 CallableStatement三种方式来执行查询语句，其中 Statement 用于通用查询， PreparedStatement 用于执行参数化查询，而 CallableStatement则是用于存储过程",
    "question" : "下面有关jdbc statement的说法错误的是？"
  },
  {
    "ID" : "55e592e7e4b0152a610d3af0",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "java.swing",
    "optionC" : "java.lang",
    "optionAnswer" : "A ",
    "answer" : "答案：A B，java.awt包是java图形界面的包 C，java.lang是java语言的核心好，lang是language的简写 D，java.swing是经过java封装的与操作系统无关的图形界面包",
    "optionB" : "java.awt",
    "type" : "1",
    "optionA" : "java.sql",
    "question" : "提供Java存取数据库能力的包是（ ）"
  },
  {
    "ID" : "55b227dfe4b0bb7ded0a8cb5",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "凡是在Unicode的字符都可以用单引号括起来作为char类型常量；",
    "optionC" : "char类型在内存中占16位；",
    "optionAnswer" : "C",
    "answer" : "'\\r'表示回车符，'\\n'表示换行符。不是所有的Unicode字符都可以直接用作char类型常量的，比如选项A、B中的字符，需要用反斜杠做转义才可以。",
    "optionB" : "’\\n’表示回车符",
    "type" : "1",
    "optionA" : "’\\r’表示换行符",
    "question" : "下列关于char类型的数据说法中，正确的一项是：()"
  },
  {
    "answer" : "18",
    "ID" : "55f2e54fe4b0152a611434e0",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "n从1开始，每个操作可以对n加1或加倍，如果要使n是2014，最少需要 （）个操作"
  },
  {
    "answer" : "因为类A、B不是接口，所以是不可以直接继承的，但可以将A、B类定义成父子类，那么C类就能实现A、B类的功能了。假如A为B的父类，B为C的父类，此时C就能实现A、B的功能。  ",
    "ID" : "5602715de4b043d0cb1d39d7",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "如果有两个类A、B（注意不是接口），你想同时使用这两个类的功能，那么你会如何编写这个C类呢？"
  },
  {
    "ID" : "55e6d765e4b0152a610de714",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "和是：43，finally语句块",
    "optionC" : "finally语句块，和是：43",
    "optionAnswer" : "C",
    "answer" : "程序先执行try块中return之前（包括return语句中的表达式运算）的代码； 再执行finally块，最后执行try块中的return;    而 finally块之后的return语句，因为程序在try块中已经return了，所以不再执行。\r",
    "optionB" : "编译异常",
    "type" : "1",
    "optionA" : "catch语句块，和是：43",
    "question" : "下面代码运行结果是（）\rpublic class Test{ \r    public int add(int a,int b){   \r         try {\r             return a+b;      \r         } \r        catch (Exception e) {  \r            System.out.println(\"catch语句块\");\r         }\r         finally{ \r             System.out.println(\"finally语句块\");\r         }\r         return 0;\r    } \r     public static void main(String argv[]){ \r         Test test =new Test(); \r         System.out.println(\"和是：\"+test.add(9, 34)); \r     }\r}\r"
  },
  {
    "answer" : "Java集合框架提供常用的算法实现，比如排序和搜索。Collections类包含这些方法实现。大部分算法是操作List的，但一部分对所有类型的集合都是可用的。部分算法有排序、搜索、混编、最大最小值。",
    "ID" : "55f2e484e4b0152a611431b4",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "集合框架里实现的通用算法有哪些？"
  },
  {
    "ID" : "55e58d70e4b0152a610d39fe",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "容器保存的是对象的引用",
    "optionC" : "定义在接口中的方法默认是public的",
    "optionAnswer" : "B",
    "answer" : "子类应该是可以置换掉父类的同步方法的。",
    "optionB" : "一个子类不可以覆盖掉父类的同步方法",
    "type" : "1",
    "optionA" : "构造方法不需要同步化",
    "question" : "下面有关java的一些细节问题，描述错误的是？"
  },
  {
    "ID" : "55b227dfe4b0bb7ded0a8cad",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "10",
    "optionC" : "4",
    "optionAnswer" : "D",
    "answer" : "由于case中没有break语句，因此程序继续向下执行。在执行case2后result的值为4，继续执行case3后result的值为10。",
    "optionB" : "2",
    "type" : "1",
    "optionA" : "0",
    "question" : "下面的方法，当输入为2的时候返回值是多少?\n    public int getValue(int i) {\n        int result = 0;\n        switch (i) {\n            case 1:\n                result = result + i;\n            case 2:\n                result = result + i * 2;\n            case 3:\n                result = result + i * 3;\n        }\n        return result;\n}\n\n（ ）\n"
  },
  {
    "ID" : "55e59381e4b0152a610d3c22",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "内存回收线程不能释放内存对象",
    "optionC" : "内存回收线程负责释放无用内存",
    "optionAnswer" : "C",
    "answer" : "A，java的内存回收是自动的，Gc在后台运行，不需要用户手动操作\nB，java中不允许使用指针\nD，内存回收线程可以释放无用的对象内存",
    "optionB" : "Java程序允许用户使用指针来释放内存",
    "type" : "1",
    "optionA" : "Java程序要求用户必须手工创建一个线程来释放内存",
    "question" : "关于Java语言的内存回收机制，下列选项中最正确的一项是"
  },
  {
    "ID" : "55e592e6e4b0152a610d3ae2",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "protected",
    "optionC" : "public",
    "optionAnswer" : "B",
    "answer" : "private当前类使用，public无使用限制 protected同一包或子类中使用   ",
    "optionB" : "无修饰符",
    "type" : "1",
    "optionA" : "private",
    "question" : "下列哪个修饰符可以使在一个类中定义的成员变量只能被同一包中的类访问？"
  },
  {
    "ID" : "55e592e7e4b0152a610d3b07",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "HashMap中的key-value都是存储在Entry数组中的",
    "optionC" : "HashMap通过开放地址法解决哈希冲突",
    "optionAnswer" : "C",
    "answer" : "使用的是链地址法。HashMap实际上是一个“链表散列”的数据结构，即数组和链表的结合体。\nHashMap底层就是一个数组结构，数组中的每一项又是一个链表。",
    "optionB" : "HashMap 的实现不是同步的，意味着它不是线程安全的",
    "type" : "1",
    "optionA" : "HashMap 的实例有两个参数影响其性能：“初始容量” 和 “加载因子”。",
    "question" : "下面有关java hashmap的说法错误的是？"
  },
  {
    "answer" : "JVM中类的装载是由类加载器（ClassLoader）和它的子类来实现的，Java中的类加载器是一个重要的Java运行时系统组件，它负责在运行时查找和装入类文件中的类。  由于Java的跨平台性，经过编译的Java源程序并不是一个可执行程序，而是一个或多个类文件。当Java程序需要使用某个类时，JVM会确保这个类已经被加载、连接（验证、准备和解析）和初始化。类的加载是指把类的.class文件中的数据读入到内存中，通常是创建一个字节数组读入.class文件，然后产生与所加载类对应的Class对象。加载完成后，Class对象还不完整，所以此时的类还不可用。当类被加载后就进入连接阶段，这一阶段包括验证、准备（为静态变量分配内存并设置默认的初始值）和解析（将符号引用替换为直接引用）三个步骤。最后JVM对类进行初始化，包括：1)如果类存在直接的父类并且这个类还没有被初始化，那么就先初始化父类；2)如果类中存在初始化语句，就依次执行这些初始化语句。  类的加载是由类加载器完成的，类加载器包括：根加载器（BootStrap）、扩展加载器（Extension）、系统加载器（System）和用户自定义类加载器（java.lang.ClassLoader的子类）。从Java 2（JDK 1.2）开始，类加载过程采取了父亲委托机制（PDM）。PDM更好的保证了Java平台的安全性，在该机制中，JVM自带的Bootstrap是根加载器，其他的加载器都有且仅有一个父类加载器。类的加载首先请求父类加载器加载，父类加载器无能为力时才由其子类加载器自行加载。JVM不会向Java程序提供对Bootstrap的引用。下面是关于几个类加载器的说明： 1、Bootstrap：一般用本地代码实现，负责加载JVM基础核心类库（rt.jar）； 2、Extension：从java.ext.dirs系统属性所指定的目录中加载类库，它的父加载器是Bootstrap； 3、System：又叫应用类加载器，其父类是Extension。它是应用最广泛的类加载器。它从环境变量classpath或者系统属性java.class.path所指定的目录中记载类，是用户自定义加载器的默认父加载器。",
    "ID" : "21cf7354bdf111e6a0e100163e0021c8",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "描述一下JVM加载class文件的原理机制？ "
  },
  {
    "answer" : "int getMax(int a[],int len)\n{  \n   int max1 = a[0];\/\/表示maxSum(n-2);  \n   int max2 = a[0]>a[1]? a[0]:a[1]; \/\/表示maxSum(n-1);  \n   int max3 = 0; \/\/ n \n   for(int i =2; i<len; i++){    \n    max3 = Max(a[i],Max(max1+a[i],max2));\n\/\/       max3 = a[i]+max1> max2 ? a[i]+max1:max2;  \/\/ 全部是负数也需要考虑的,这个没有\n        max1 = max2; \n        max2  = max3; \n   } \nreturn max3;\n}\n\nint Max(int a,int b){\nif(a>b)\nreturn a;else\nreturn b;\n}",
    "ID" : "55f2e54fe4b0152a611434d1",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "给定一个整数的数组，相邻的数不能同时选，求从该数组选取若干整数，使得他们的和最大，要求只能使用o(1)的空间复杂度。要求给出伪码。"
  },
  {
    "answer" : "结构：扩展名为properties的文件，内容为key、value的映射，例如”a=2″\n\n用法：\n\npublic class Test {\n\npublic static void main(String args[]) {\n\ntry {\n\nString name = “test.properties”;\n\nInputStream in = new BufferedInputStream(new FileInputStream(name));\n\nProperties p = new Properties();\n\np.load(in);\n\nSystem.out.println(“a的值==” + p.getProperty(“a”));\n\n} catch (Exception err) {\n\nerr.printStackTrace();\n\n}\n\n}\n\n}",
    "ID" : "5602715ee4b043d0cb1d3a24",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "简述properties文件的结构和基本用法"
  },
  {
    "ID" : "55b227dee4b0bb7ded0a8c93",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "public  int  aMethod（int a，int  b）throws IOException{ }",
    "optionC" : "public  float  aMethod（float  p，float q）{ }",
    "optionAnswer" : "A",
    "answer" : "子类重写了父类的方法。父类中定义的方法为public。也就是说子类重写这个方法的时候必须也为public。当子类重写父类的方法时访问权限不能变小，但可以变大。例如父类的方法为default的时候子类重写后为public则是正确的。",
    "optionB" : "public  int  aMethod（int a，int b）throws  Exception{ }",
    "type" : "1",
    "optionA" : "float  aMethod（float  a，float  b）{ }",
    "question" : "类Test1、Test2定义如下：\n1．  public  class  Test1\n2．{ public  float  aMethod（float a，float b） throws\n3．  IOException {      }\n4． }\n5． public  class  Test2  extends  Test1{\n6．\n7．}\n将以下哪种方法插入行6是不合法的。（)\n"
  },
  {
    "ID" : "55e59382e4b0152a610d3c4b",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "getLocalPort()",
    "optionC" : "getReuseAddress()",
    "optionAnswer" : "B",
    "answer" : "public InetAddress getLocalAddress()",
    "optionB" : "getLocalAddress()",
    "type" : "1",
    "optionA" : "getInetAddress()",
    "question" : "java socket如何获取本地ip地址？"
  },
  {
    "answer" : "JVM的堆是运行时数据区，所有类的实例和数组都是在堆上分配内存。它在JVM启动的时候被创建。对象所占的堆内存是由自动内存管理系统也就是垃圾收集器回收。  堆内存是由存活和死亡的对象组成的。存活的对象是应用可以访问的，不会被垃圾回收。死亡的对象是应用不可访问尚且还没有被垃圾收集器回收掉的对象。一直到垃圾收集器把这些对象回收掉之前，他们会一直占据堆内存空间。",
    "ID" : "d8c417d8bdef11e6a0e100163e0021c8",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "Java堆的结构是什么样子的？什么是堆中的永久代(Perm Gen space)?"
  },
  {
    "ID" : "05ea0efebde911e6a0e100163e0021c8",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "3",
    "optionC" : "2",
    "optionAnswer" : "A",
    "answer" : "这里有点迷惑人，大家都知道默认ArrayList的长度是10个，所以如果你要往list里添加20个元素肯定要扩充一次（扩充为原来的1.5倍），但是这里显示指明了需要多少空间，所以就一次性为你分配这么多空间，也就是不需要扩充了。",
    "optionB" : "1",
    "type" : "1",
    "optionA" : "0",
    "question" : "ArrayList list = new ArrayList(20);中的list扩充几次（）"
  },
  {
    "ID" : "55b227dee4b0bb7ded0a8c9a",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "public class MyClass{ }",
    "optionC" : "class OtherClass{   }",
    "optionAnswer" : "D",
    "answer" : "public修饰的类名必须java文件名跟一致，所以一个.java文件中不能出现两个或两个以上的公有类。",
    "optionB" : "package mypackage; ",
    "type" : "1",
    "optionA" : "import java.awt.*;",
    "question" : "有以下程序片段，下列哪个选项不能插入到行1。（）\n1.\n2.public  class  Interesting{\n3.\/\/do sth   \n4. }\n"
  },
  {
    "ID" : "55e59381e4b0152a610d3c34",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "溢出",
    "optionC" : "2",
    "optionAnswer" : "D",
    "answer" : "array[2][2]代表第三个一维数组的第三个元素，故溢出",
    "optionB" : "6",
    "type" : "1",
    "optionA" : "9",
    "question" : "C# 或是 Java 程序段的结果： int[][] array = new int[3][]{ new int[3]{5,6,2}, new int[5]{6,9,7,8,3}, new int[2]{3,2} }; array[2][2] 返回（）"
  },
  {
    "ID" : "55e6d765e4b0152a610de71b",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "如果在一个线程构造了一个不可变对象之后（对象仅包含final字段），就可以保证了这个对象被其他线程正确的查看",
    "optionC" : "“volatile” — 保证修饰后在对变量读写前都会与主内存更新。",
    "optionAnswer" : "D",
    "answer" : "Java线程之间的通信由Java内存模型（简称为JMM）控制，JMM决定一个线程对共享变量的写入何时对另一个线程可见。从抽象的角度来看，JMM定义了线程和主内存之间的抽象关系：线程之间的共享变量存储在主内存（main memory）中，每个线程都有一个私有的本地内存（local memory），本地内存中存储了该线程以读\/写共享变量的副本。本地内存是JMM的一个抽象概念，并不真实存在。它涵盖了缓存，写缓冲区，寄存器以及其他的硬件和编译器优化\rvolatile变量的写-读可以实现线程之间的通信。\r从内存语义的角度来说，volatile与监视器锁有相同的效果：volatile写和监视器的释放有相同的内存语义；volatile读与监视器的获取有相同的内存语义。",
    "optionB" : "“synchronized” — 保证在块开始时都同步主内存的值到工作内存，而块结束时将变量同步回主内存",
    "type" : "1",
    "optionA" : "JMM通过控制主内存与每个线程的本地内存之间的交互，来为java程序员提供内存可见性保证",
    "question" : "下面有关java内存模型的描述，说法错误的是？"
  },
  {
    "ID" : "55e59381e4b0152a610d3c08",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "3",
    "optionC" : "2",
    "optionAnswer" : "D",
    "answer" : "构造方法没有返回值",
    "optionB" : "1",
    "type" : "1",
    "optionA" : "0",
    "question" : "在如下所示的类Test中，共有（）个构造方法。public class Test\n{\n    private int x;\n    public Test()\n    {\n        x = 35;\n    }\n \n    public void Test(double f)\n    {\n        this.x = (int)f;\n    }\n \n    public Test(double f)\n    {\n        this.x = (int)f;\n    }\n \n    public Test(String s) {}\n}?"
  },
  {
    "ID" : "55e6d765e4b0152a610de719",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "final修饰的方法不允许被子类覆盖",
    "optionC" : "final修饰的局部变量即为常量，只能赋值一次。",
    "optionAnswer" : "B",
    "answer" : "final所修饰的成员变量只能赋值一次，可以在类方法中赋值，也可以在声明的时候直接赋值，而final修饰的局部变量可以在声明的时候初始化，也可以在第一次使用的通过方法或者表达式给它赋值。",
    "optionB" : "final修饰的成员变量只允许赋值一次，且只能在类方法赋值",
    "type" : "1",
    "optionA" : "final修饰的类不能被继承",
    "question" : "下面有关java final的基本规则，描述错误的是？"
  },
  {
    "ID" : "55e592e6e4b0152a610d3ad6",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "3",
    "optionC" : "2",
    "optionAnswer" : "A",
    "answer" : "ArrayList的构造函数总共有三个：\n（1）ArrayList()构造一个初始容量为 10 的空列表。\n（2）ArrayList(Collection<? extends E> c)构造一个包含指定 collection 的元素的列表，这些元素是按照该 collection 的迭代器返回它们的顺序排列的。\n（3）ArrayList(int initialCapacity)构造一个具有指定初始容量的空列表。\n调用的是第三个构造函数，直接初始化为大小为20的list，没有扩容，所以选择A",
    "optionB" : "1",
    "type" : "1",
    "optionA" : "0",
    "question" : "ArrayList list = new ArrayList(20);中的list扩充几次"
  },
  {
    "answer" : "(a):根据uid,msg分库记录用户的消息.直接通过sql查询实现\n\n(b):A follow B, B发消息的时候主动发送消息id到A的新鲜事列表.\n如果A是僵死用户就通过拉的方式,登陆后获取所有关注用户的微薄",
    "ID" : "55f2e54fe4b0152a61143506",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "微博上，每个用户可以发送一条消息，可以 follow 另一个用户， 当用户发送消息时，所有 follow 他的用户都能看见这条消息。如 A follow B，则 B 的消息，A 都能看见。\n实现一个微博客消息存储系统，可以使用多台机器来满足性能要求， 可以再海量的用户和消息下，快速的实现以下两种查询：\na）给定一个用户，查询他发送的消息，按消息发送时间排序，新 的消息在前。\nb）给定一个用户，查询他 follow 的所有人的消息，按消息发送时 间排序，新的消息在前."
  },
  {
    "answer" : "1、CreateRemoteThread + LoadLibraryA\/W\n2、SetWindowsHook\/SetWindowsHookEx\n3、QueueUserAPC + LoadLibraryA",
    "ID" : "55f2e54fe4b0152a611434d6",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : " 列举两种应用层中简单的跨进程<span>DLL<\/span>注入的方法。"
  },
  {
    "ID" : "55b9d326e4b08f89c6185bcb",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "Java中接口支持多继承",
    "optionC" : "最终类可以作为其他类的父类",
    "optionAnswer" : "D",
    "answer" : "java中接口支持多继承。选项A)Java语言只允许类间有单继承关系。选项D)抽象类是专门为别的类继承它而定义的。选项C)final声明一个类后，这个类不能被其他类继承，它是最终类。",
    "optionB" : "抽象类不能有子类",
    "type" : "1",
    "optionA" : "Java中的类可以有多个直接父类",
    "question" : "下列关于Java的说法正确的是"
  },
  {
    "ID" : "55b5a91fe4b0ef2b575583ee",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "4",
    "optionC" : "3",
    "optionAnswer" : "C",
    "answer" : "a的值为3，符合a>0的情况，进入第二层判断；而a不大于3，执行else操作，c的值为3。",
    "optionB" : "2",
    "type" : "1",
    "optionA" : "1",
    "question" : "若a的值为3时，下列程序段被执行后，c的值是多少？（ ）\n    if ( a>0 )  \n        if ( a>3 )  c = 2;   \n        else c = 3; \n     else c = 4;"
  },
  {
    "ID" : "55e59382e4b0152a610d3c56",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "迭代HashMap采用快速失败机制，而Hashtable不是",
    "optionC" : "HashMap不是同步的，而Hashtable是同步的",
    "optionAnswer" : "B",
    "answer" : "A：HashMap和Hashtable两个类都实现了Map接口，二者保存K-V对（key-value对）\nB：HashTable不允许null值(key和value都不可以),HashMap允许null值(key和value都可以)。\nC：Hashtable的方法是Synchronize的，而HashMap不是，在多个线程访问Hashtable时，不需要自己为它的方法实现同步，而HashMap 就必须为之提供外同步。\nD：由所有HashMap类的“collection 视图方法”所返回的迭代器都是快速失败的：在迭代器创建之后，如果从结构上对映射进行修改，除非通过迭代器本身的 remove 方法，其他任何时间任何方式的修改，迭代器都将抛出ConcurrentModificationException。Hashtable和HashMap的区别主要是前者是同步的，后者是快速失败机制保证",
    "optionB" : "Hashtable允许null值作为key和value，而HashMap不可以",
    "type" : "1",
    "optionA" : "两者都是用key-value方式获取数据",
    "question" : "关于HashMap与HashTbale，以下说法错误的是（）"
  },
  {
    "answer" : "当对象对当前使用这个对象的应用程序变得不可触及的时候，这个对象就可以被回收了。",
    "ID" : "f92c9450bdef11e69a7900163e0021c8",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "在Java中，对象什么时候可以被垃圾回收？"
  },
  {
    "ID" : "55e592e6e4b0152a610d3ab7",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "m. length+1",
    "optionC" : "m. length()+1",
    "optionAnswer" : "B ",
    "answer" : "选B。数组有.length方法，String类型是.length()方法，数组下标从0开始。",
    "optionB" : "m. length-1",
    "type" : "1",
    "optionA" : "m. length()",
    "question" : " 已知表达式int m[]={0，1，2，3，4，5，6}；下面哪个表达式的值与数组下标量最大值相等？"
  },
  {
    "ID" : "55b227dee4b0bb7ded0a8c9e",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "public void methodName() throws IOException",
    "optionC" : "public void methodName() throw IOException ",
    "optionAnswer" : "D",
    "answer" : "为了明确指出一个方法不捕获某类异常，而让调用该方法的其他方法捕获该异常，可以在定义方法的时候，使用throws可选项，用以抛出该类异常。\n语法格式：\nMethodName（formalArgumentList）throws Exception{\n\/\/方法的代码块\n}\n",
    "optionB" : " public void methodName()",
    "type" : "1",
    "optionA" : "public IOException methodName() ",
    "question" : "有如下代码段: \n1) \n2) { if(unsafe()){\/\/do something…} \n3) else if(safe()){\/\/do the other…} \n4) } \n其中，方法unsafe() 将抛出IOException, 请问可将以下哪项填入第1行？（ ）\n"
  },
  {
    "answer" : "SELECT account_type,COUNT(account_type)\nFROM t_account\nGROUP BY account_type\nHAVING COUNT ( account_type )>5000; \n",
    "ID" : "55f2e54fe4b0152a611434bf",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : " 在SQL中，一个表的定义如下：CREATE TABLE t_account(\n     account varchar(100),\n     account_type TINYTEXT,\n     PRIMARY KEY (account),\n};\naccount为账号，account_type为该账号的类型，写出一个sql，统计账号数累计超过5000个账号类型，并显示对应的账号数，即结果中每行是（账号类型，账号数）"
  },
  {
    "ID" : "55e59380e4b0152a610d3bfb",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "car.taxi",
    "optionC" : "1234",
    "optionAnswer" : "B",
    "answer" : "Java标识符由数字，字母和下划线（_），美元符号（$）组成。在Java中是区分大小写的，而且还要求首位不能是数字。最重要的是，Java关键字?不能当作Java标识符。",
    "optionB" : "$Usdollars",
    "type" : "1",
    "optionA" : "new",
    "question" : "下列标识符合法的有（ ）"
  },
  {
    "answer" : "import java.io.*;\nimport java.net.URL;\nimport java.net.URLConnection;\npublic class ReadURL {\npublic static void main(String[] args) throws Exception {\nURL url = new URL(“http:\/\/bbs.tarena.com.cn”); \/\/建立封装统一资源定位符的类\nURLConnection uc = url.openConnection(); \/\/打开连接\nInputStreamReader isr = new InputStreamReader(uc.getInputStream());\nBufferedReader br = new BufferedReader(isr);\n\n\/\/传输数据\nwhile(true){\nString temp = br.readLine();\nif(temp==null){\nbreak;\n}\nSystem.out.println(temp);\n}\nbr.close();\n}\n}",
    "ID" : "5602715fe4b043d0cb1d3a3e",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "代码示例：使用URL流，读取网页代码"
  },
  {
    "ID" : "55e592e7e4b0152a610d3b24",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "final变量指的是用final 修饰的变量",
    "optionC" : "类变量指的是用static修饰的属性",
    "optionAnswer" : "B",
    "answer" : "B，局部变量必须有初始值。",
    "optionB" : "局部变量指的是在方法中定义的变量，如果没有初始化，会有默认值",
    "type" : "1",
    "optionA" : "实例变量指的是类中定义的变量，即类成员变量，如果没有初始化，会有默认值。",
    "question" : "下面有关java实例变量,局部变量,类变量和final变量的说法，错误的是？"
  },
  {
    "ID" : "55e59380e4b0152a610d3bee",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "Short",
    "optionC" : "Character",
    "optionAnswer" : "A",
    "answer" : "在JDK中针对各种基本类型分别定义相应的引用类型–称为封装类 \nBoolean Byte Short Integer Long Float Double Character",
    "optionB" : "Long",
    "type" : "1",
    "optionA" : "String",
    "question" : "下面不属于java包装类的是？"
  },
  {
    "ID" : "55e592e7e4b0152a610d3b33",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "throw子句",
    "optionC" : "finally子句",
    "optionAnswer" : "C",
    "answer" : "C。finally子句一般是用来清理这些资源的。",
    "optionB" : "catch子句",
    "type" : "1",
    "optionA" : "try子句",
    "question" : "在异常处理中，入释放资源，关闭数据库、关闭文件应由（ ）语句来完成。"
  },
  {
    "answer" : "一种是assert<<布尔表达式>>；另一种是assert<<布尔表达式>>：<<细节描述>>。\n\nassert a= =10 : “这里a等于10″;",
    "ID" : "5602715fe4b043d0cb1d3a36",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "如何使用断言？举例说明"
  },
  {
    "answer" : "10盏，1，4，9，16，25，36，49，64，81，100\n按照同学来看，每个同学只会按是自己的倍数的灯。\n那么我们转换成灯来看的话，每个灯只会被是自己的因子的同学按。\n那么一个初始化为灭的灯，如何最后变成一盏亮的灯呢？\n很明显，只有它有奇数个因子的时候，才有可能。\n那么什么时候一个数可以有奇数个因子呢？\n对于任意一个数N ，都可以分解成 N = a * b的乘积，即任意一个数都可以分解成 M个(a * b) 的乘积。\n所以若想满足存在奇数个因子，a 必须等于 b.\n即 N = a2,所以只有平方数最后才满足要求，故可以在0(n)的时间复杂度解决该问题。 ",
    "ID" : "55f2e54fe4b0152a611434d2",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "有编号1~100个灯泡，起初所有的灯都是灭的。有100个同学来按灯泡开关，如果灯是亮的，那么按过开关之后，灯会灭掉。如果灯是灭的，按过开关之后灯会亮。\n现在开始按开关。\n第1个同学，把所有的灯泡开关都按一次(按开关灯的编号： 1,2,3,......100)。\n第2个同学，隔一个灯按一次(按开关灯的编号： 2,4,6,......,100)。\n第3个同学，隔两个灯按一次(按开关灯的编号： 3,6,9,......,99)。\n......\n问题是，在第100个同学按过之后，有多少盏灯是亮着的？这些灯的编号是多少？要求给出解题思路或给出伪码。"
  },
  {
    "ID" : "55e59380e4b0152a610d3bf6",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "修改程序也应修改注释",
    "optionC" : "可使用空行或缩进，以便很容易区分注释和程序",
    "optionAnswer" : "B",
    "answer" : "在必要时候添加合理的注释，不需要每行都加注释",
    "optionB" : "注释用来说明程序段，需要在每一行都要加注释",
    "type" : "1",
    "optionA" : "功能性注释嵌在源程序中，用于说明程序段或语句的功能以及数据的状态",
    "question" : "下列关于功能性注释不正确的说法是()"
  },
  {
    "answer" : "定义抽象类的目的是提供可由其子类共享的一般形式、子类可以根据自身需要扩展抽象类、抽象类不能实例化、抽象方法没有函数体、抽象方法必须在子类中给出具体实现。他使用extends来继承。  \n\n接口：一个接口允许一个类从几个接口继承而来，Java 程序一次只能继承一个类但可以实现几个接口，接口不能有任何具体的方法，接口也可用来定义可由类使用的一组常量。其实现方式是interface来实现。",
    "ID" : "5602715de4b043d0cb1d39d9",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "谈谈你对抽象类和接口的理解。"
  },
  {
    "ID" : "55e592e7e4b0152a610d3afa",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "Long long",
    "optionC" : "Unsigned int",
    "optionAnswer" : "D",
    "answer" : "long long是8个",
    "optionB" : "Int C long",
    "type" : "1",
    "optionA" : "short int",
    "question" : "在 32 位操作系统中，下列类型占用 8 个字符的为______。"
  },
  {
    "ID" : "55b9d326e4b08f89c6185bc9",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "java.awt",
    "optionC" : "java.nio",
    "optionAnswer" : "B",
    "answer" : "FileOutputStream属于java. io包，FileOutputStream是字节流类，使用流类时必须导入java.io包。",
    "optionB" : "java.io",
    "type" : "1",
    "optionA" : "java.util",
    "question" : "FileOutputStream类属于Java的哪一个包?"
  },
  {
    "answer" : "构造器不能被继承，因此不能被重写，但可以被重载。",
    "ID" : "689761dabdf011e6a0e100163e0021c8",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "构造器（constructor）是否可被重写（override）？ "
  },
  {
    "ID" : "55b9d326e4b08f89c6185bc8",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "同步",
    "optionC" : "接口",
    "optionAnswer" : "C",
    "answer" : "本题考查Java中多重继承的概念。首先要区分选项中各个概念。内部类是在一个类中的内部嵌套定义的类，主要用来生成事件适配器。适配器定义一个包装类，包装有不兼容接口的对象。这个包装类指的就是适配器 (Adapter)，它包装的对象就是适配者 (Adaptee)，适配器提供客户类需要的接口。接口是一种只含有抽象方法或常量的一种特殊的抽象类，因为接口不包括任何实现，所以与存储空间没有任何关系，将多个接口合并，即多重继承就可以很容易实现，选项C正确。同步主要用在多线程程序设计中。",
    "optionB" : "适配器",
    "type" : "1",
    "optionA" : "内部类",
    "question" : "在Java中，能实现多重继承效果的方式是"
  },
  {
    "answer" : "Java.util.Collections是一个工具类仅包含静态方法，它们操作或返回集合。它包含操作集合的多态算法，返回一个由指定集合支持的新集合和其它一些内容。这个类包含集合框架算法的方法，比如折半搜索、排序、混编和逆序等。",
    "ID" : "55f2e484e4b0152a611431ae",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "Collections类是什么？"
  },
  {
    "ID" : "55b227dee4b0bb7ded0a8c99",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "public",
    "optionC" : "private",
    "optionAnswer" : "A",
    "answer" : "类域即静态成员，类方法即静态方法",
    "optionB" : "package",
    "type" : "1",
    "optionA" : "static ",
    "question" : "若需要定义一个类域或类方法，应使用哪种修饰符？（ ）"
  },
  {
    "answer" : "5",
    "ID" : "55f2e54fe4b0152a611434b8",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "一个具有3个节点的二叉树可以有（）种形态。"
  },
  {
    "ID" : "55b9d326e4b08f89c6185bcf",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "Java程序经过编译后的字节代码是二进制文件，可以在Java虚拟机上执行",
    "optionC" : "Java程序经过编译后的字节代码是二进制文件，可以在操作系统上直接执行",
    "optionAnswer" : "D",
    "answer" : "Java语言的执行模式是半编译和半解释型，未经编译的Java程序不能直接执行。 Java程序编过编译后的字节代码是二进制文件，但不能直接在操作系统上执行，它可看作虚拟机的机器码，由Java虚拟机解释执行。",
    "optionB" : "Java程序经过编译后的字节代码仍然是ASCII文件",
    "type" : "1",
    "optionA" : "Java程序不需编译也可直接执行",
    "question" : "下面说法中正确的是( )。"
  },
  {
    "answer" : "多重继承\n\n封装、隔离\n\n功能,实现的分离\n\n多态\n\n便于后期维护\n\n接口是可插入性的保证。",
    "ID" : "5602715ee4b043d0cb1d3a26",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "接口的作用？为什么使用接口？"
  },
  {
    "ID" : "55b227dee4b0bb7ded0a8ca5",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "过程调用",
    "optionC" : "类、封装",
    "optionAnswer" : "D",
    "answer" : "对象、消息、继承、多态、类、封装都是面向对象方法中的概念。过程调用属于面向过程方法，通过调用函数来实现。",
    "optionB" : "继承、多态",
    "type" : "1",
    "optionA" : "对象、消息",
    "question" : "下述概念中不属于面向对象方法的是（ ）"
  },
  {
    "ID" : "55e592e6e4b0152a610d3ab0",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "只要没有定义不带参数的构造函数，JVM都会为类生成一个默认构造函数",
    "optionC" : "使用别的类的方法仅仅需要引用方法的名字即可",
    "optionAnswer" : "B ",
    "answer" : "答案：B  A：不可以使用  C：通过类的对象引用方法的名字 D：只要没有定义任何构造方法，JVM都会为类生成一个默认的构造方法",
    "optionB" : "局部变量的作用范围仅仅在定义它的方法内，或者是在定义它的控制流块中",
    "type" : "1",
    "optionA" : "在类中定义的变量称为类的成员变量，在别的类中可以直接使用",
    "question" : "关于类的叙述正确的是（）。"
  },
  {
    "answer" : "-*+ABC*-DE+FG",
    "ID" : "55f2e54fe4b0152a611434b6",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "写出表达式((A+B)*C-(D-E)*(F+G))的前缀表达式"
  },
  {
    "answer" : "5，2，6，5",
    "ID" : "55f2e54fe4b0152a611434bb",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "32位系统上char c1[]={'a','b','\\0','d','e'};\nchar c2[]=\"hello\";sizeof(c1),strlen(c1),sizeof(c2),strlen(c2)值分别是"
  },
  {
    "answer" : "实现Runnable接口\n\n    class Thread1 implements Runnable{\n\n        public void run( ){\n\n            \/\/run里一般写一个while(true)循环\n\n            System.out.println(“Runnable“);\n\n        }\n\n    }\n\npublic class Test{\n\n        public static void main(String[] a){\n\n            Thread1 r = new Thread1();\n\n            Thread t1 = new Thread(r);\n\n            Thread t2 = new Thread(r);\n\n            t1.start();\n\n            t2.start();\n\n        }\n\n    }\n\n    继承Thread\n\n    class Thread2 extends Thread{\n\n        public void run(){\n\n            System.out.println(“extends“);\n\n        }\n\n    }\n\n\n\n    public class Test{\n\n        public static void main(String[] a){\n\n            Thread t = new Thread2();\n\n            t.start();\n\n        }\n\n        }",
    "ID" : "5602715fe4b043d0cb1d3a46",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "代码示例：Java中实现多线程的两种方式，包括如何定义多线程，如何使用多线程"
  },
  {
    "answer" : "5，2,1",
    "ID" : "55f2e54fe4b0152a611434ba",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "有一个数组（53,83,18,59,38,35），依次将其存储在hash表中，其中哈希函数为h(k)=k%7,如采用线性探测（每次向后查找1位）的方式解决冲突，则该hash表上查找38,35,53访问hash表的表项次数分别为 "
  },
  {
    "ID" : "55b227dee4b0bb7ded0a8ca6",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "主程序、子程序、函数",
    "optionC" : "顺序、选择、循环",
    "optionAnswer" : "C",
    "answer" : "结构化程序设计所规定的三种基本控制结构是顺序结构、选择结构（分支结构）、循环结构",
    "optionB" : "树形、网形、环形",
    "type" : "1",
    "optionA" : "输入、处理、输出 ",
    "question" : "结构化程序设计所规定的三种基本控制结构是 （ ）"
  },
  {
    "answer" : "IP代表网络位置\n\nPort代表端口号\n\nTCP可保证不同厂家生产的计算机能在共同网络环境下运行，解决异构网通信问题，是目前网络通信的基本协议",
    "ID" : "5602715fe4b043d0cb1d3a4a",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "简述IP,Port,TCP的基本功能"
  },
  {
    "answer" : "监视器和锁在Java虚拟机中是一块使用的。监视器监视一块同步代码块，确保一次只有一个线程执行同步代码块。每一个监视器都和一个对象引用相关联。线程在获取锁之前不允许执行同步代码。",
    "ID" : "d99c909cbded11e69a7900163e0021c8",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "在监视器(Monitor)内部，是如何做线程同步的？程序应该做哪种级别的同步？"
  },
  {
    "ID" : "55e592e6e4b0152a610d3aaf",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "0 15 20",
    "optionC" : "20 0 20",
    "optionAnswer" : "A",
    "answer" : "这题选A，考察的是值传递与引用传递，Java中原始数据类型都是值传递，传递的是值得副本，形参的改变不会影响实际参数的值， 引用传递传递的是引用类型数据，包括String,数组，列表, map,类对象等类型，形参与实参指向的是同一内存地址，因此形参改变会影响实参的值",
    "optionB" : "15 0 15",
    "type" : "1",
    "optionA" : "15 0 20",
    "question" : "Given the following code,what will be the output? class Value{\n    public int i=15;\n}\npublic class Test{\n    public static void main(String argv[]){\n        Test t=new Test( );\n        t.first( );\n    }\n \npublic void first( ){\n    int i=5;\n    Value v=new Value( );\n    v.i=25;\n    second(v,i);\n    System.out.println(v.i);\n}\n \npublic void second(Value v,int i){\n    i = 0;\n    v.i = 20;\n    Value val = new Value( );\n    v = val;\n    System.out.println(v.i+\" \"+i);\n   }\n}"
  },
  {
    "answer" : "大O符号描述了当数据结构里面的元素增加的时候，算法的规模或者是性能在最坏的场景下有多么好。 大O符号也可用来描述其他的行为，比如：内存消耗。因为集合类实际上是数据结构，我们一般使用大O符号基于时间，内存和性能来选择最好的实现。大O符号可以对大量数据的性能给出一个很好的说明。",
    "ID" : "130678e2bdef11e6a0e100163e0021c8",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "你了解大O符号(big-O notation)么？你能给出不同数据结构的例子么？"
  },
  {
    "answer" : "抛出（throws）和catch语句处理",
    "ID" : "5602715ee4b043d0cb1d3a2d",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "简述处理异常的两种方式？"
  },
  {
    "ID" : "55e592e6e4b0152a610d3ae7",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "12",
    "optionC" : "1",
    "optionAnswer" : "D",
    "answer" : "当执行try{}时，遇到算算术异常，然后抛出异常，catch捕捉到异常，打印出1，最后执行finally打印2",
    "optionB" : "123",
    "type" : "1",
    "optionA" : "3",
    "question" : "下面代码的输出结果是什么？public class ZeroTest {\n    public static void main(String[] args) {\n     try{\n       int i = 100 \/ 0;\n       System.out.print(i);\n  }catch(Exception e){\n       System.out.print(1);\n       throw new RuntimeException();\n  }finally{\n       System.out.print(2);\n  }\n      System.out.print(3);\n }\n }"
  },
  {
    "ID" : "55b9d327e4b08f89c6185be3",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "import java.awt.evcnt.*；",
    "optionC" : "import java.io.*；",
    "optionAnswer" : "D",
    "answer" : "本题考查事件响应的基本知识。选项A错误，引入的是awt下级的类；选项 B错误，引入的是关于applet的类；选项C错误，引入的是系统输入输出包；选项D正确，对事件做出响应，需要引入java.awt. event.*包。",
    "optionB" : "import java.applet.*；",
    "type" : "1",
    "optionA" : "import java.awt.*；",
    "question" : "在编写Java Applet程序时，若需要对发生的事件做出响应和处理，一般需要在程序的开头写上( )语句。"
  },
  {
    "ID" : "0ebfa3bebde311e69a7900163e0021c8",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "getPriority()",
    "optionC" : "exit()",
    "optionAnswer" : "C",
    "answer" : "exit()是System类的方法，如System.exit(0)。",
    "optionB" : "run()",
    "type" : "1",
    "optionA" : "start()",
    "question" : "下面哪些不是Thread类的方法（）"
  },
  {
    "answer" : "Collection接口指定一组对象，对象即为它的元素。如何维护这些元素由Collection的具体实现决定。\r例如，一些如List的Collection实现允许重复的元素，而其它的如Set就不允许。很多Collection实现有一个公有的clone方法。然而，把它放到集合的所有实现中也是没有意义的。这是因为Collection是一个抽象表现。重要的是实现。\r当与具体实现打交道的时候，克隆或序列化的语义和含义才发挥作用。所以，具体实现应该决定如何对它进行克隆或序列化，或它是否可以被克隆或序列化。\r在所有的实现中授权克隆和序列化，最终导致更少的灵活性和更多的限制。特定的实现应该决定它是否可以被克隆和序列化。",
    "ID" : "55f2e483e4b0152a61143192",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "为何Collection不从Cloneable和Serializable接口继承？"
  },
  {
    "answer" : "以字母、$、下划线开头，其后可以跟字母、下划线、$和数字；\n首字母小写，中间单词用大写字母隔开；\n名称具有一定含义；",
    "ID" : "5602715de4b043d0cb1d39da",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "变量的定义规则？"
  },
  {
    "ID" : "55e592e7e4b0152a610d3b04",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "覆盖是指不同的函数使用相同的函数名，但是函数的参数个数或类型不同",
    "optionC" : "隐藏是指派生类中的函数把基类中相同名字的函数屏蔽掉了",
    "optionAnswer" : "D",
    "answer" : "选D，使用相同函数名但参数个数不同或参数类型不同应该是函数重载，函数覆盖发生在父类与子类之间，其函数名、参数类型、返回值类型必须同父类中的相对应被覆盖的函数严格一致，覆盖函数和被覆盖函数只有函数体不同，当派生类对象调用子类中该同名函数时会自动调用子类中的覆盖版本，而不是父类中的被覆盖函数版本，这种机制就叫做函数覆盖。",
    "optionB" : "继承可以使用现有类的所有功能，并在无需重新编写原来的类的情况下对这些功能进行扩展",
    "type" : "1",
    "optionA" : "封装，把客观事物封装成抽象的类，并且类可以把自己的数据和方法只让可信的类或者对象操作，对不可信的进行信息隐藏",
    "question" : "下面有关继承、多态、组合的描述，说法错误的是?"
  },
  {
    "ID" : "55e5937fe4b0152a610d3bcb",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "676",
    "optionC" : "677",
    "optionAnswer" : "B",
    "answer" : "a++可以理解为当访问a之后再对a进行加一操作",
    "optionB" : "667",
    "type" : "1",
    "optionA" : "666",
    "question" : "以下程序的运行结果是( )\npublic class Increment\n{\n    public static void main(String args[])\n    {\n        int a;\n        a = 6;\n        System.out.print(a);\n        System.out.print(a++);\n        System.out.print(a);\n    }\n}"
  },
  {
    "answer" : "1.Collection为集合层级的根接口。一个集合代表一组对象，这些对象即为它的元素。Java平台不提供这个接口任何直接的实现。\r2.Set是一个不能包含重复元素的集合。这个接口对数学集合抽象进行建模，被用来代表集合，就如一副牌。\r3.List是一个有序集合，可以包含重复元素。你可以通过它的索引来访问任何元素。List更像长度动态变换的数组。  \r4.Map是一个将key映射到value的对象.一个Map不能包含重复的key：每个key最多只能映射一个value。\r一些其它的接口有Queue、Dequeue、SortedSet、SortedMap和ListIterator。",
    "ID" : "55f2e483e4b0152a61143191",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "Java集合框架的基础接口有哪些？"
  },
  {
    "answer" : "a)     Hadoop\n基于分布式文件系统HDFS的分布式批处理计算框架。适用于数据量大，SPMD(单程序多数据)的应用。\nb)     Spark\n基于内存计算的并行计算框架。适用于需要迭代多轮计算的应用。\nc)      MPI\n基于消息传递的并行计算框架。适用各种复杂应用的并行计算。支持MPMD( 多程序多数据) ，开发复杂度高",
    "ID" : "55f2e54fe4b0152a611434d0",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "请简要描述一下Hadoop, Spark, MPI三种计算框架的特点以及分别适用于什么样的场景"
  },
  {
    "answer" : "ARP(AddressResolutionProtocol)（地址解析协议)",
    "ID" : "55f2e550e4b0152a61143518",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : " Internet物理地址和IP地址转换采用什么协议？"
  },
  {
    "ID" : "55e59381e4b0152a610d3c24",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "寄存器",
    "optionC" : "字符串常量区",
    "optionAnswer" : "C",
    "answer" : "用new创建的对象在堆区\n函数中的临时变量在栈去\njava中的字符串在字符串常量区",
    "optionB" : "栈",
    "type" : "1",
    "optionA" : "堆",
    "question" : "String str1 = “abc”，“abc”分配在内存哪个区域？"
  },
  {
    "ID" : "55e59381e4b0152a610d3c37",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "volatile能禁止进行指令重排序",
    "optionC" : "JVM保证从主内存加载到线程工作内存的值是最新的",
    "optionAnswer" : "A",
    "answer" : "出于运行速率的考虑，java编译器会把经常经常访问的变量放到缓存（严格讲应该是工作内存）中，读取变量则从缓存中读。但是在多线程编程中,内存中的值和缓存中的值可能会出现不一致。volatile用于限定变量只能从内存中读取，保证对所有线程而言，值都是一致的。但是volatile不能保证原子性，也就不能保证线程安全。",
    "optionB" : "volatile关键字用在多线程同步中，可保证读取的可见性",
    "type" : "1",
    "optionA" : "能保证线程安全",
    "question" : "volatile关键字的说法错误的是"
  },
  {
    "answer" : "是。线程分为守护线程和非守护线程（即用户线程）。  只要当前JVM实例中尚存在任何一个非守护线程没有结束，守护线程就全部工作；只有当最后一个非守护线程结束时，守护线程随着JVM一同结束工作。 守护线程最典型的应用就是 GC (垃圾回收器)",
    "ID" : "cc7b5f26bde611e6a0e100163e0021c8",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "GC线程是否为守护线程？（）"
  },
  {
    "ID" : "55b227dfe4b0bb7ded0a8cb0",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "数组属于基本数据类型；",
    "optionC" : "复合数据类型变量包括布尔型、字符型、浮点型；",
    "optionAnswer" : "A",
    "answer" : "Java语言的标识符是以字母、下划线(_)、和符号$为首字符的字符串，在首字符后面可以跟字母、下划线、$和数字，且标识符是区分大小写的，标识符的字符数没有限制，所以A选项是正确的，B选项是错误的；选项C错误，复合数据类型应该包括数组、类和接口：数组属于复合数据类型，故D选项是错误的。",
    "optionB" : "标识符不区分大小写；",
    "type" : "1",
    "optionA" : "标识符首字符的后面可以跟数字",
    "question" : "下列描述中正确的一项是（）："
  },
  {
    "answer" : "1",
    "ID" : "55f2e54fe4b0152a611434c7",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "a=1,b=2,c=3,d=4;a<b ? a:c < d ? a:d的结果是（）"
  },
  {
    "ID" : "55e6d766e4b0152a610de724",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "implement extend",
    "optionC" : "extend implement",
    "optionAnswer" : "B",
    "answer" : "extends表继承父类\r implements表是实现接口",
    "optionB" : "extends implements",
    "type" : "1",
    "optionA" : "implements extends",
    "question" : "java中用()字指明继承关系.用()关键字指明对接口的实现。"
  },
  {
    "answer" : "011011110100， 011011100000",
    "ID" : "55f2e54fe4b0152a611434ef",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "二进制地址为011011110000，大小为（4）10和（16）10块的伙伴地址分别为：（），（）"
  },
  {
    "ID" : "55e592e7e4b0152a610d3af2",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "和是：43，finally语句块",
    "optionC" : "finally语句块，和是：43",
    "optionAnswer" : "C",
    "answer" : "程序先执行try块中return之前（包括return语句中的表达式运算）的代码； 再执行finally块，最后执行try块中的return;    而 finally块之后的return语句，因为程序在try块中已经return了，所以不再执行。",
    "optionB" : "编译异常",
    "type" : "1",
    "optionA" : "catch语句块，和是：43",
    "question" : "下面代码运行结果是（）public class Test{ \n    public int add(int a,int b){   \n         try {\n             return a+b;      \n         } \n        catch (Exception e) {  \n            System.out.println(\"catch语句块\");\n         }\n         finally{ \n             System.out.println(\"finally语句块\");\n         }\n         return 0;\n    } \n     public static void main(String argv[]){ \n         Test test =new Test(); \n         System.out.println(\"和是：\"+test.add(9, 34)); \n     }\n}"
  },
  {
    "answer" : "TCP\/IP协议\n从上往下依次为：应用层，传输层，网络层，网络接口层",
    "ID" : "55f2e550e4b0152a61143521",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : " Internet采用哪种网络协议？该协议的主要层次结构？"
  },
  {
    "answer" : "Java中的HashMap是以键值对(key-value)的形式存储元素的。HashMap需要一个hash函数，它使用hashCode()和equals()方法来向集合\/从集合添加和检索元素。当调用put()方法的时候，HashMap会计算key的hash值，然后把键值对存储在集合中合适的索引上。如果key已经存在了，value会被更新成新值。HashMap的一些重要的特性是它的容量(capacity)，负载因子(load factor)和扩容极限(threshold resizing)。",
    "ID" : "6479d404bdee11e6a0e100163e0021c8",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "Java中的HashMap的工作原理是什么？"
  },
  {
    "ID" : "55e592e6e4b0152a610d3aab",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "以上说法均正确",
    "optionC" : "HashTable使用Enumeration，HashMap使用Iterator",
    "optionAnswer" : "D",
    "answer" : "A、B、C的描述均正确",
    "optionB" : "HashMap是非synchronized，而Hashtable是synchronized",
    "type" : "1",
    "optionA" : "HashMap和Hashtable都实现了Map接口",
    "question" : "关hashMap跟hashTable的区别，说法正确的是？"
  },
  {
    "ID" : "55e6d765e4b0152a610de717",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "ArrayIndexOutOfBoundsException",
    "optionC" : "IOException",
    "optionAnswer" : "D",
    "answer" : "定义的数组长度为10，角标即为0-9\r访问数组角标10会出现数组角标越界异常",
    "optionB" : "NullPointException",
    "type" : "1",
    "optionA" : "ArithmeticException",
    "question" : "下面所示的java代码，运行时，会产生（）类型的异常\rint Arry_a[] = new int[10];\rSystem.out.println(Arry_a[10]);"
  },
  {
    "ID" : "a190fbd0bde711e6a0e100163e0021c8",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "InputStreamReader",
    "optionC" : "ObjectInputStream",
    "optionAnswer" : "D",
    "answer" : "Java的IO操作中有面向字节(Byte)和面向字符(Character)两种方式。 面向字节的操作为以8位为单位对二进制的数据进行操作，对数据不进行转换，这些类都是InputStream和OutputStream的子类。 面向字符的操作为以字符为单位对数据进行操作，在读的时候将二进制数据转为字符，在写的时候将字符转为二进制数据，这些类都是Reader和Writer的子类。  总结：以InputStream（输入）\/OutputStream（输出）为后缀的是字节流；            以Reader（输入）\/Writer（输出）为后缀的是字符流。",
    "optionB" : "FileInputStream",
    "type" : "1",
    "optionA" : "BufferedWriter",
    "question" : "下面哪个流类属于面向字符的输入流(  )"
  },
  {
    "answer" : "*\/3 14-15 * * 1,2,3,4,5 \/home\/script\/check.sh\n周一到周五每天14-15点内，每隔3分钟执行一次check.sh脚本\nLinux crontab定时执行任务 \n基本格式 : \n*　　*　　*　　*　　*　　command \n分　时　日　月　周　命令 \n第1列表示分钟1～59 每分钟用*或者 *\/1表示 \n第2列表示小时1～23（0表示0点） \n第3列表示日期1～31 \n第4列表示月份1～12 \n第5列标识号星期0～6（0表示星期天） \n第6列要运行的命令 ",
    "ID" : "55f2e54fe4b0152a611434bd",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "现有\/home\/script\/check.sh脚本，要求每周一到周五14点内每三分钟运行一次，相应的crontab配置是()"
  },
  {
    "ID" : "55b9d327e4b08f89c6185be5",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "产生一个编译时错误",
    "optionC" : "什么都没有",
    "optionAnswer" : "D",
    "answer" : "该题考查对Applet具体编程的理解。实际上就是考查APplet编程与 Application编程的区别。在应用程序编程中，通常由主类的构造函数和main()方法，在主类的构造函数里面进行一些一次性的初始化工作。而在小程序的编程中，也有主类，既然有类也就有相应的构造函数。但是要知道，Applet是在浏览器或者是通过专门的工具运行的，在创建Applet时，不能通过任何手段给Applet传递参数，所以构造函数应该是不能有参数的。但是，这种错误在编译时并不报错，因为它并没有任何的语法错误，只是会在运行时出错，系统会告诉你无法实例化小程序。注意，本题如果将构造函数改成下面的形式，则编译与运行时都不会出错。public Sample (String string){text=\"aaaaa\"；}它的效果与将语句text=\"aaaaa\"放在init()函数里的效果是—样的。也就是说，创建Applet时的初始化工作能放在构造函数里实现的，完全可以放到init()函数里实现。但是，反之，能在init()函数里实现的代码却不一定能在构造函数里实现。这也就是为什么在小程序编程中不用构造函数的原因。故本题答案是D。",
    "optionB" : "将会产生一个运行时错误",
    "type" : "1",
    "optionA" : "将会出现“Hello World\"",
    "question" : "下面的代码实现一个简单的Applet：\nimport java.applet.Applet；\nimport java.awt.*；\npublic class Sample extends Applet {\n    private String text=\"Hello World\"；\n    public void init() {\n        add(new Label(text))；\n    }\n    public Sample(String string) {\n        text=string；\n    }\n}\n通过下面的HTML文件访问：\n<html>\n    <title>Sample Applet<\/title>\n    <body>\n        <applet code=\"Sample.class\"width=200 height=200><\/applet>\n    <\/body>\n<\/html>\n当编译和运行该小程序时会出现什么结果，请选择正确的答案。( )"
  },
  {
    "ID" : "55e58d70e4b0152a610d39ec",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "c1.equals(m).",
    "optionC" : "m==c1;",
    "optionAnswer" : "B",
    "answer" : "c1 = new Cat(10L);\r c2 = new Cat(10L);\rA ,c1和c2是两个参数相同的不同对象，c1!=c2，返回false\rB ,c2和c3指向同一个引用，所以c2==c3，返回true\rC, m与c1是不同类型，不相等，返回false\rD，c1没有定义equals方法，默认调用Object类的equals方法，返回false",
    "optionB" : "c2==c3;",
    "type" : "1",
    "optionA" : "c1==c2;",
    "question" : "Given the following class:\rpublic class Cat\r{\r    long length;\r    public Cat(long l)\r    {\r        length = 1;\r    }\r    public static void main(String arg[])\r    {\r        Cat c1, c2, c3;\r        c1 = new Cat(10L);\r        c2 = new Cat(10L);\r        c3 = c2;\r        long m = 21L;\r    }\r}\r \r    \rWhich expression returns true?"
  },
  {
    "answer" : "ptr 定义在 buf 的前面。在栈上开变量的话，后开的内存地址较小，也就是 ptr 是恰好接在 buf 数组的后面。所以如果数组越界就可以修改 ptr 指向的内存地址。",
    "ID" : "55f2e54fe4b0152a61143501",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "在审计某一开源项目的代码时，假设有下面一个foo()子函数的实现。 从安全的角度看，会存在安全漏洞吗？有的话，请\n(1)描述漏洞细节，\n(2)说明可以利用的方法, \n(3) 还有该怎么修补漏洞。没有的话，也请说明为什么。int foo((void*funcp)()) {\n    char *ptr = pointer_to_an_array;\n    char buf[128];\n    gets(buf);\n    strncpy(ptr,buf,8)\n    (*funcp)();\n}"
  },
  {
    "ID" : "55e6d765e4b0152a610de706",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "public int setVar(int a， float c){return a;}",
    "optionC" : "public int setVar(int a， float c， int b){return a;}",
    "optionAnswer" : "B",
    "answer" : "重载是在同一个类中，有多个方法名相同，参数列表不同(参数个数不同，参数类型不同),与方法的返回值无关，与权限修饰符无关，B中的参数列表和题目的方法完全一样了。",
    "optionB" : "protected void setVar(int a， int b， float c){}",
    "type" : "1",
    "optionA" : "private void setVar(int a， float c， int b){}",
    "question" : "A,B,C,D 中哪个不是 setvar的重载？\rpublic class methodover\r{\r    public void setVar(int a, int b, float c) {}\r}\r"
  },
  {
    "ID" : "55e59380e4b0152a610d3bfe",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "Java程序在执行时．JVM把Java字节码解释成机器码",
    "optionC" : "JVM是在计算机硬件系统上用软件实现的一台假想机",
    "optionAnswer" : "B",
    "answer" : "JVM也就是Java Virtual Machine，即java虚拟机，是在现有的平台上，如Windows，Linux等，运行一个软件，虚拟出一台接口统一的计算机，依次实现java语言的跨平台特性。",
    "optionB" : "JVM是一种计算机硬件技术，它是Java程序的运行平台",
    "type" : "1",
    "optionA" : "JVM的全称是Java Virtual Machine",
    "question" : "下面对JVM叙述不正确的是："
  },
  {
    "ID" : "55e59380e4b0152a610d3bed",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "call by reference能改变实际参数的内容",
    "optionC" : "call by reference不能改变实际参数的参考地址",
    "optionAnswer" : "B",
    "answer" : "1 基本类型和基本类型变量被当作参数传递给方法时，是值传递。\n在方法实体中，无法给原变量重新赋值，也无法改变它的值。\n2 对象和引用型变量被当作参数传递给方法时，是引用传递。\n在方法实体中，无法给原变量重新赋值，但是可以改变它所指向对象的属性。",
    "optionB" : "call by reference能改变实际参数的参考地址",
    "type" : "1",
    "optionA" : "all by value不会改变实际参数的数值",
    "question" : "下列错误的有（ ）"
  },
  {
    "ID" : "55e592e7e4b0152a610d3b2c",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "classes目录",
    "optionC" : "lib目录",
    "optionAnswer" : "A ",
    "answer" : "web.xml文件是用来初始化配置信息，web.xml是放置在WEB-INF目录中",
    "optionB" : "conf目录",
    "type" : "1",
    "optionA" : "WEB-INF目录",
    "question" : "在Web应用程序的文件与目录结构中，web.xml是放置在(    )中。"
  },
  {
    "ID" : "55e592e5e4b0152a610d3aa5",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "Compiles fine and output is prints”It is a account type”four times followed by”FIXED”",
    "optionC" : "Compiles fine and output is prints”It is a account type”thrice followed by”FIXED”",
    "optionAnswer" : "C",
    "answer" : "答案：C\n枚举类有三个实例，故调用三次构造方法，打印三次It is a account type",
    "optionB" : "Compiles fine and output is prints”It is a account type”twice followed by”FIXED”",
    "type" : "1",
    "optionA" : "Compiles fine and output is prints”It is a account type”once followed by”FIXED”",
    "question" : "what is the result of the following code?  enum AccountType\n{\n    SAVING, FIXED, CURRENT;\n    private AccountType()\n    {\n        System.out.println(“It is a account type”);\n    }\n}\nclass EnumOne\n{\n    public static void main(String[]args)\n    {\n        System.out.println(AccountType.FIXED);\n    }\n}"
  },
  {
    "answer" : "（1）轮询调度的原理是每一次把来自用户的请求轮流分配给内部中的服务器，从1开始，直到N(内部服务器个数)，然后重新开始循环。只有在当前任务主动放弃CPU控制权的情况下（比如任务挂起），才允许其他任务（包括高优先级的任务）控制CPU。其优点是其简洁性，它无需记录当前所有连接的状态，所以它是一种无状态调度。但不利于后面的请求及时得到响应。\n（2）抢占式调度允许高优先级的任务打断当前执行的任务，抢占CPU的控制权。这有利于后面的高优先级的任务也能及时得到响应。但实现相对较复杂且可能出现低优先级的任务长期得不到调度。",
    "ID" : "55f2e54fe4b0152a61143508",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "轮询任务调度和可抢占式调度有什么区别？"
  },
  {
    "ID" : "55b9d327e4b08f89c6185bd4",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "Java中没有提供检测与避免死锁的专门机制，但应用程序员可以采用某些策略防止死锁的发生",
    "optionC" : "共享数据的访问权限都必须定义为private",
    "optionAnswer" : "B",
    "answer" : "本题考查多线程的并发控制机制。Java中对共享数据操作的并发控制采用传统的封锁技术，也就是给对象加锁，选项A说法正确。线程之间的交互，提倡采用wait()和 notify()方法，这两个方法是java．lang．object类的方法，是实现线程通信的两个方法，不提倡使用 suspend()和resume()方法，它们容易造成死锁，所以选项B说法错误。共享数据的访问权限都必须定义为private，不能为public或其他，选项C说法正确。Java中没有提供检测与避免死锁的专门机制，因此完全由程序进行控制，应用程序员可以采用某些策略防止死锁的发生，选项D说法正确。",
    "optionB" : "线程之间的交互，提倡采用suspend()\/resume()方法",
    "type" : "1",
    "optionA" : "Java中对共享数据操作的并发控制是采用加锁技术",
    "question" : "下列关于Java多线程并发控制机制的叙述中，错误的是"
  },
  {
    "ID" : "55e59380e4b0152a610d3bd8",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "Struts可以有效地降低项目的类文件数目",
    "optionC" : "Struts框架容易引起流程复杂、结构不清晰等问题",
    "optionAnswer" : "B",
    "answer" : "A，structs可以进行文件上传\nB，structs基于MVC模式，MVC是模型，视图，控制器，是一种设计模式\nC，structs框架让流程结构更清晰\nD，structs需要很多 action类，会增加类文件数目",
    "optionB" : "Struts框架基于MVC模式",
    "type" : "1",
    "optionA" : "Struts中无法完成上传功能",
    "question" : "关于struts框架，下面那些说法是正确的？"
  },
  {
    "ID" : "55e592e6e4b0152a610d3ae3",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "数组的大小可以任意改变",
    "optionC" : "int number=[]={31,23,33,43,35,63}",
    "optionAnswer" : "A",
    "answer" : "ava把数组当作一个java类来处理\njava是纯面向对象的语言，他的数组也是一个对象。",
    "optionB" : "数组属于一种原生类",
    "type" : "1",
    "optionA" : "数组是一种对象",
    "question" : "下列说法正确的有（ ）"
  },
  {
    "ID" : "55e59381e4b0152a610d3c3b",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "初始化上下应用对象ApplicationContext",
    "optionC" : "实现业务操作",
    "optionAnswer" : "C",
    "answer" : "DispatcherServlet是的servlet，所以肯定负责手http\n可以在web.xml中配置spring-mvc.xml，用于加载配置信息。\n当没有上下文时，该它会新创建一个上下文。\nDispatcherServlet用于分发http到具体的业务方法，所以实现业务的其实是具体的bean的方法",
    "optionB" : "加载配置文件",
    "type" : "1",
    "optionA" : "它负责接收HTTP请求",
    "question" : "关于Spring MVC的核心控制器DispatcherServlet的作用，以下说法错误的是（? ）？"
  },
  {
    "answer" : "\"每种编程语言中都有集合，最初的Java版本包含几种集合类：Vector、Stack、HashTable和Array。\r\r随着集合的广泛使用，Java1.2提出了囊括所有集合接口、实现和算法的集合框架。在保证线程安全的情况下使用泛型和并发集合类，Java已经经历了很久。它还包括在Java并发包中，阻塞接口以及它们的实现。\"",
    "ID" : "55f2e39fe4b0152a61143063",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "Java集合框架是什么？说出一些集合框架的优点？"
  },
  {
    "ID" : "55e59380e4b0152a610d3bf0",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "public static void main(String args[])",
    "optionC" : "public void int()",
    "optionAnswer" : "B",
    "answer" : "要写一个线程类，可以继承Thread方法，然后override他的run（）方法\n另一种方法是实现Runable接口，即为实现run（）方法。",
    "optionB" : "public void run()",
    "type" : "1",
    "optionA" : "public void start()",
    "question" : "Which method you define as the starting point of new thread in a class from which n thread can be excution?"
  },
  {
    "answer" : "Java平台提供了两种类型的字符串：String和StringBuffer\/StringBuilder，它们可以储存和操作字符串。其中String是只读字符串，也就意味着String引用的字符串内容是不能被改变的。而StringBuffer\/StringBuilder类表示的字符串对象可以直接进行修改。StringBuilder是Java 5中引入的，它和StringBuffer的方法完全相同，区别在于它是在单线程环境下使用的，因为它的所有方面都没有被synchronized修饰，因此它的效率也比StringBuffer要高。",
    "ID" : "e559a700bdf011e6a0e100163e0021c8",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "什么情况下用+运算符进行字符串连接比调用StringBuffer\/StringBuilder对象的append方法连接字符串性能更好？"
  },
  {
    "ID" : "55b9d326e4b08f89c6185bc6",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "Java调试器",
    "optionC" : "Java文档生成器",
    "optionAnswer" : "C",
    "answer" : "javadoc用于生成API文档。根据Java源码及说明语句生成HTML文档。所以本题选C。",
    "optionB" : "Java解释器",
    "type" : "1",
    "optionA" : "Java编译器",
    "question" : "Java程序的执行过程中用到一套JDK 工具，其中javadoc.exe是指"
  },
  {
    "ID" : "55e592e7e4b0152a610d3af5",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "A和B都不是",
    "optionC" : "A和B",
    "optionAnswer" : "C",
    "answer" : "两种。1、继承Thread类，Override它的run方法；2、实现Runnable接口，实现run方法；\n",
    "optionB" : "实现Runnable接口",
    "type" : "1",
    "optionA" : "继承Thread类",
    "question" : "Java多线程有几种实现方法？"
  },
  {
    "ID" : "55b227dfe4b0bb7ded0a8cb3",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "类变量的作用域是整个类；",
    "optionC" : "类变量能在类的方法中声明；",
    "optionAnswer" : "C",
    "answer" : "类变量在类中声明，作用域是整个类，它不能在类的方法中声明。局部变量在类的方法中声明，作用域只能是它所在的方法中。",
    "optionB" : "局部变量作用域只能是它所在方法的代码段；",
    "type" : "1",
    "optionA" : "变量属性是用来描述变量作用域的；",
    "question" : "下列关于变量作用域的描述中，不正确的一项是：()"
  },
  {
    "ID" : "55e59380e4b0152a610d3bd7",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "效率比较String<StringBuffer<StringBuilder，但是在 String S1 = “This is only a” + “ simple” + “ test”时，String效率最高。",
    "optionC" : "StringBuffer对 String 类型进行改变的时候其实都等同于生成了一个新的 String 对象，然后将指针指向新的 String 对象。",
    "optionAnswer" : "C",
    "answer" : "String对String  类型进行改变的时候其实都等同于生成了一个新的  String  对象，然后将指针指向新的  String  对象，而不是StringBuffer；StringBuffer每次结果都会对  StringBuffer  对象本身进行操作，而不是生成新的对象，再改变对象引用。 ",
    "optionB" : "StringBuilder是非线程安全的",
    "type" : "1",
    "optionA" : "StringBuffer是线程安全的",
    "question" : "java中，StringBuilder和StringBuffer的区别，下面说法错误的是？"
  },
  {
    "ID" : "55e592e7e4b0152a610d3b01",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "内存回收线程不能释放内存对象",
    "optionC" : "内存回收线程负责释放无用内存",
    "optionAnswer" : "C",
    "answer" : "答案：C； A，java的内存回收是自动的，Gc在后台运行，不需要用户手动操作B，java中不允许使用指针；D，内存回收线程可以释放无用的对象内存",
    "optionB" : "Java程序允许用户使用指针来释放内存",
    "type" : "1",
    "optionA" : "Java程序要求用户必须手工创建一个线程来释放内存",
    "question" : "关于Java语言的内存回收机制，下列选项中最正确的一项是"
  },
  {
    "answer" : "Java提供了只包含一个compareTo()方法的Comparable接口。这个方法可以个给两个对象排序。具体来说，它返回负数，0，正数来表明输入对象小于，等于，大于已经存在的对象。  Java提供了包含compare()和equals()两个方法的Comparator接口。compare()方法用来给两个输入参数排序，返回负数，0，正数表明第一个参数是小于，等于，大于第二个参数。equals()方法需要一个对象作为参数，它用来决定输入参数是否和comparator相等。只有当输入参数也是一个comparator并且输入参数和当前comparator的排序结果是相同的时候，这个方法才返回true。",
    "ID" : "e0454406bdee11e6a0e100163e0021c8",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "Comparable和Comparator接口是干什么的？列出它们的区别。"
  },
  {
    "answer" : "存在 。比如Double.NaN或Float.NaN",
    "ID" : "35569a92bde711e6a0e100163e0021c8",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "存在使i > j || i <= j不成立的数吗（）"
  },
  {
    "answer" : "Sleeping睡眠的意思 : sleep() 方法用来暂时中止执行的线程。在睡眠后，线程将进入就绪状态。  \n\nwaiting等待的意思: 如果调用了 wait() 方法，线程将处于等待状态。用于在两个或多个线程并发运行时。",
    "ID" : "5602715de4b043d0cb1d39d8",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "结合Java视频Lesson5（多线程），分析sleep()和wait()方法的区别。"
  },
  {
    "ID" : "55e59381e4b0152a610d3c29",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "PROPAGATION_NESTED：支持当前事务，新增Savepoint点，与当前事务同步提交或回滚",
    "optionC" : "PROPAGATION_REQUIRES_NEW：新建事务，如果当前存在事务，把当前事务挂起",
    "optionAnswer" : "B",
    "answer" : "PROPAGATION_REQUIRED???如果当前方法产生了事务就用当前方法产生的事务，否则就创建一个新的事务",
    "optionB" : "PROPAGATION_REQUIRED：支持当前事务，如果当前没有事务，就抛出异常",
    "type" : "1",
    "optionA" : "PROPAGATION_SUPPORTS：支持当前事务，如果当前没有事务，就以非事务方式执行",
    "question" : "以下哪几种方式可用来实现线程间通知和唤醒：( )"
  },
  {
    "ID" : "55e59382e4b0152a610d3c4a",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "java的单一继承使代码更可靠",
    "optionC" : "在java中一个类不能同时继承一个类和实现一个接口",
    "optionAnswer" : "D",
    "answer" : "java为单继承，但可以实现多个接口",
    "optionB" : "在java中一个类只能实现一个接口",
    "type" : "1",
    "optionA" : "在java中允许多重继承",
    "question" : "下列关于继承的哪项叙述是正确的？"
  },
  {
    "ID" : "55b227dee4b0bb7ded0a8ca1",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "public",
    "optionC" : "private  protected",
    "optionAnswer" : "D",
    "answer" : "接口是为了让别的类实现，因此不能使用private和protected",
    "optionB" : "protected ",
    "type" : "1",
    "optionA" : "private",
    "question" : " 在使用interface声明一个接口时，只可以使用（ ）修饰符修饰该接口。"
  },
  {
    "answer" : "1.建立连接\n\n2.准备输出的数据，流式输出\n\n3.流式输入，编程业务需要的格式\n\n4.关闭连接\n\n服务器分配一个端口号。如果客户请求一个连接，服务器使用accept( )方法打开socket连接。\n\n客户在host的port端口建立连接。\n\n服务器和客户使用InputStream和OutputStream进行通信。",
    "ID" : "5602715fe4b043d0cb1d3a4c",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "简述Java网络编程究竟做些什么？如何做？"
  },
  {
    "ID" : "55e59382e4b0152a610d3c50",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "float",
    "optionC" : "byte",
    "optionAnswer" : "B",
    "answer" : "java规定类名首字母必须大写，这里可以直观的看出来Boolean是一个引用类型，不是基本数据类型。\njava中的基本数据类型都对应一个引用类型，如Float是float的引用类型，Integer是int的引用类型",
    "optionB" : "Boolean",
    "type" : "1",
    "optionA" : "short",
    "question" : "Which is not Java primitive types?"
  },
  {
    "ID" : "55b9d327e4b08f89c6185bde",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "\/**...*\/",
    "optionC" : "\/\/",
    "optionAnswer" : "D",
    "answer" : "以“\/\/”开始的是单行注释语句，以“\/*”开始、“*\/”结束的是C语言风格的注释语句，在“\/**...*\/”内的文档注释是自由形式的文本，支持javadoe命令，被javadoc处理，可以建立类的一个外部说明性文件。",
    "optionB" : "\/*...*\/",
    "type" : "1",
    "optionA" : "\/**...\/\/",
    "question" : "能够支持javadoc命令的注释语句是( )。"
  },
  {
    "ID" : "5a25913cbde411e6a0e100163e0021c8",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "一个class只能定义一个constructor",
    "optionC" : "constructor在一个对象被new时执行",
    "optionAnswer" : "C",
    "answer" : "Java异常的基类为java.lang.Throwable，java.lang.Error和java.lang.Exception继承 Throwable，RuntimeException和其它的Exception等继承Exception，具体的RuntimeException继承RuntimeException。",
    "optionB" : "constructor必须与class同名，但方法不能与class同名",
    "type" : "1",
    "optionA" : "class中的constructor不可省略",
    "question" : "下列说法正确的有（）"
  },
  {
    "ID" : "55e592e7e4b0152a610d3af7",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "+",
    "optionC" : "%",
    "optionAnswer" : "C",
    "answer" : "答案：C ABD选项的操作符都可用于float和double；只有%取余操作，只适用于整型",
    "optionB" : "\/",
    "type" : "1",
    "optionA" : "*",
    "question" : "Java中只有整型才能使用的运算符为？"
  },
  {
    "ID" : "55b5a91fe4b0ef2b575583f1",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "javadoc",
    "optionC" : "java                      ",
    "optionAnswer" : "B",
    "answer" : "javac 是java语言编程编译器。javac工具读由java语言编写的类和接口的定义，并将它们编译成字节代码的class文件。javac 可以隐式编译一些没有在命令行中提及的源文件。",
    "optionB" : "javac",
    "type" : "1",
    "optionA" : "appletviewer               ",
    "question" : "编译Java程序的命令是：  ( )"
  },
  {
    "ID" : "55e59381e4b0152a610d3c2a",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "Servlet",
    "optionC" : "Application",
    "optionAnswer" : "A",
    "answer" : "Java程序的种类有：\n（a）内嵌于Web文件中，由浏览器来观看的_Applet\n（b）可独立运行的 Application\n（c）服务器端的 Servlets",
    "optionB" : "Applet",
    "type" : "1",
    "optionA" : "类（Class）",
    "question" : "Java程序的种类不包括（ ）"
  },
  {
    "ID" : "55e58d70e4b0152a610d39da",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "Thread.wait\/notify\/notifyAll",
    "optionC" : "Condition.await\/signal\/signalAll",
    "optionAnswer" : "A",
    "answer" : "wait\/notify\/notifyAll是Object类的方法，而不是Thread类的。Thread类对线程执行控制的的方法是sleep。",
    "optionB" : "ReentrantLock.wait\/notify\/notifyAll",
    "type" : "1",
    "optionA" : "Object.wait\/notify\/notifyAll",
    "question" : "以下哪几种方式可用来实现线程间通知和唤醒：( )"
  },
  {
    "answer" : "返回一个String类型\n\npublic String toString(){\n\nreturn “”;\n\n}",
    "ID" : "5602715ee4b043d0cb1d3a1f",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "toString方法的功能和基本写法"
  },
  {
    "ID" : "55e592e6e4b0152a610d3ae9",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "None of them",
    "optionC" : "if(s==null)||(s.length()==0))",
    "optionAnswer" : "B",
    "answer" : "A，与操作，前半部分判断为假，后面不再执行 B，这里跟 & 和&& 的区别类似，后面必定执行，因此抛出异常 C，或语句，前面为真，整个结果必定为真，后面不执行",
    "optionB" : "if((s==null)|(s.length()==0))",
    "type" : "1",
    "optionA" : "if((s!=null)&&(s.length()>0))",
    "question" : "Consider the following code:\nString s=null;\nWhich code fragments cause an object of type NullPointerException to be thrown?"
  },
  {
    "ID" : "55e58d70e4b0152a610d39e1",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "每当用户端运行JSP时，jsp destroy()方法都会运行一次",
    "optionC" : "每当用户端运行JSP时，jsp service()方法都会运行一次",
    "optionAnswer" : "C",
    "answer" : "init()和destroy()方法分别在创建和销毁时执行一次（仅此一次）\rservice()方法是接收请求，返回响应的方法。每次请求都执行一次，该方法被HttpServlet封装为doGet和doPost方法",
    "optionB" : "每当用户端运行JSP时，jsp init()方法都会运行一次",
    "type" : "1",
    "optionA" : "JSP直接编译成Servlet类文件",
    "question" : "关于JSP生命周期的叙述，下列哪些为真?"
  },
  {
    "answer" : "\"Iterator的fail-fast属性与当前的集合共同起作用，因此它不会受到集合中任何改动的影响。\n\nJava.util包中的所有集合类都被设计为fail-fast的，而java.util.concurrent中的集合类都为fail-safe的。Fail-fast迭代器抛出ConcurrentModificationException，而fail-safe迭代器从不抛出ConcurrentModificationException。\"",
    "ID" : "55f2e39fe4b0152a6114306f",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "fail-fast与fail-safe有什么区别？"
  },
  {
    "ID" : "55e6d765e4b0152a610de71a",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "HashMap中的key-value都是存储在Entry数组中的",
    "optionC" : "HashMap通过开放地址法解决哈希冲突",
    "optionAnswer" : "C",
    "answer" : "源码程序中用到了一个重要的内部接口：Map.Entry，每个 Map.Entry 其实就是一个 key-value 对。当系统决定存储 HashMap 中的 key-value 对时，完全没有考虑 Entry 中的 value，仅仅只是根据 key 来计算并决定每个 Entry 的存储位置。Entry是数组，数组中的每个元素上挂这个一条链表。。\r链表法就是将相同hash值的对象组织成一个链表放在hash值对应的槽位；开放地址法是通过一个探测算法，当某个槽位已经被占据的情况下继续查找下一个可以使用的槽位。很显然我们使用的不是开放地址法。",
    "optionB" : "HashMap 的实现不是同步的，意味着它不是线程安全的",
    "type" : "1",
    "optionA" : "HashMap 的实例有两个参数影响其性能：“初始容量” 和 “加载因子”。",
    "question" : "下面有关java hashmap的说法错误的是？"
  },
  {
    "answer" : "如果我们需要对一个对象数组进行排序，我们可以使用Arrays.sort()方法。如果我们需要排序一个对象列表，我们可以使用Collection.sort()方法。\r\r两个类都有用于自然排序（使用Comparable）或基于标准的排序（使用Comparator）的重载方法sort()。Collections内部使用数组排序方法，所有它们两者都有相同的性能，只是Collections需要花时间将列表转换为数组。",
    "ID" : "55f2e484e4b0152a611431b1",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "我们如何对一组对象进行排序？"
  },
  {
    "ID" : "55b227dfe4b0bb7ded0a8cae",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "就绪状态",
    "optionC" : "阻塞状态（对象wait池内）",
    "optionAnswer" : "D",
    "answer" : "线程的状态分为：1、新建状态：新创建了一个线程对象。\n2、就绪状态：线程对象创建后，其他线程调用了该对象的start()方法。该状态的线程位于可运行线程池中，变得可运行，等待获取CPU的使用权。\n3、运行状态：就绪状态的线程获取了CPU，执行程序代码。\n4、阻塞状态：阻塞状态是线程因为某种原因放弃CPU使用权，暂时停止运行。直到线程进入就绪状态，才有机会转到运行状态。阻塞的情况分三种：\n（一）、等待阻塞：运行的线程执行wait()方法，JVM会把该线程放入等待池中。\n（二）、同步阻塞：运行的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则JVM会把该线程放入锁池中。\n（三）、其他阻塞：运行的线程执行sleep()或join()方法，或者发出了I\/O请求时，JVM会把该线程置为阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I\/O处理完毕时，线程重新转入就绪状态。\n5、死亡状态：线程执行完了或者因异常退出了run()方法，该线程结束生命周期。\n",
    "optionB" : "阻塞状态（对象lock池内）",
    "type" : "1",
    "optionA" : "死亡状态",
    "question" : "一个线程在任何时刻都处于某种线程状态（thread state）,例如运行状态、阻塞状态、就绪状态等。一个线程可以由选项中的哪种线程状态直接到达运行状态？( )"
  },
  {
    "ID" : "55e59380e4b0152a610d3bd0",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "通过registerDriver方法注册",
    "optionC" : "通过添加系统的jdbc.drivers属性",
    "optionAnswer" : "A",
    "answer" : "DriverManager.getConnection方法返回一个Connection对象，这是加载驱动之后才能进行的",
    "optionB" : "调用方法 Class.forName",
    "type" : "1",
    "optionA" : "通过DriverManager.getConnection方法加载",
    "question" : "下面哪一项不是加载驱动程序的方法？"
  },
  {
    "answer" : "不可以，静态方法只能访问静态成员，因为非静态方法的调用要先创建对象，在调用静态方法时可能对象并没有被初始化。",
    "ID" : "a2d36284bdf211e6a0e100163e0021c8",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "是否可以从一个静态（static）方法内部发出对非静态（non-static）方法的调用？ "
  },
  {
    "ID" : "55e59380e4b0152a610d3bd1",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "AB都是",
    "optionC" : "利用覆盖来实现多态.即在同一个类中定义多个同名的不同方法来实现多态。",
    "optionAnswer" : "D",
    "answer" : "Java通过方法重写和方法重载实现多态\n方法重写是指子类重写了父类的同名方法\n方法重载是指在同一个类中，方法的名字相同，但是参数列表不同",
    "optionB" : "利用重载来实现多态.即在同一个类中定义多个同名的不同方法来实现多态。",
    "type" : "1",
    "optionA" : "通过子类对父类抽象方法的覆盖实现多态",
    "question" : "java中提供了哪两种用于多态的机制"
  },
  {
    "answer" : "线程在执行过程中，可以处于下面几种状态：  1、就绪(Runnable):线程准备运行，不一定立马就能开始执行。 2、运行中(Running)：进程正在执行线程的代码。 3、等待中(Waiting):线程处于阻塞的状态，等待外部的处理结束。 4、睡眠中(Sleeping)：线程被强制睡眠。 5、I\/O阻塞(Blocked on I\/O)：等待I\/O操作完成。 6、同步阻塞(Blocked on Synchronization)：等待获取锁。 7、死亡(Dead)：线程完成了执行。",
    "ID" : "a60d2c64bded11e6a0e100163e0021c8",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "概括的解释下线程的几种可用状态。"
  },
  {
    "answer" : "HashMap使用Key对象的hashCode()和equals()方法去决定key-value对的索引。当我们试着从HashMap中获取值的时候，这些方法也会被用到。如果这些方法没有被正确地实现，在这种情况下，两个不同Key也许会产生相同的hashCode()和equals()输出，HashMap将会认为它们是相同的，然后覆盖它们，而非把它们存储到不同的地方。\r同样的，所有不允许存储重复数据的集合类都使用hashCode()和equals()去查找重复，所以正确实现它们非常重要。equals()和hashCode()的实现应该遵循以下规则：\r（1）如果o1.equals(o2)，那么o1.hashCode() == o2.hashCode()总是为true的。\r（2）如果o1.hashCode() == o2.hashCode()，并不意味着o1.equals(o2)会为true。",
    "ID" : "55f2e483e4b0152a611431a0",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "hashCode()和equals()方法有何重要性？"
  },
  {
    "ID" : "55e592e6e4b0152a610d3aac",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "在try块中不可以抛出异常",
    "optionC" : "try是用于检测被包住的语句块是否出现异常，如果有异常，则抛出异常，并执行catch语句。",
    "optionAnswer" : "C",
    "answer" : "Java语言中的异常处理包括声明异常、抛出异常、捕获异常和处理异常四个环节。\nthrow用于抛出异常。\nthrows关键字可以在方法上声明该方法要抛出的异常，然后在方法内部通过throw抛出异常对象。\ntry是用于检测被包住的语句块是否出现异常，如果有异常，则抛出异常，并执行catch语句。\ncacth用于捕获从try中抛出的异常并作出处理。\nfinally语句块是不管有没有出现异常都要执行的内容。",
    "optionB" : "throws用于抛出异常对象。",
    "type" : "1",
    "optionA" : "throw关键字可以在方法上声明该方法要抛出的异常。",
    "question" : "以下关于JAVA语言异常处理描述正确的有？"
  },
  {
    "answer" : "java程序中预先定义好的异常叫做预定义异常",
    "ID" : "5602715fe4b043d0cb1d3a33",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "什么是预定义异常"
  },
  {
    "answer" : "（1）动态链接库(Dynamic Linked Library)：Windows为应用程序提供了丰富的函数调用，这些函数调用都包含在动态链接库中。其中有3个最重要的DLL，Kernel32.dll、User32.dll和GDI32.dll。有两种使用方式：一种是静态加载，即在应用程序启动时被加载；一种是动态加载，即是该动态链接库在被使用时才被应用程序加载。优点如下：\na. 共享：多个应用程序可以使用同一个动态库，启动多个应用程序的时候，只需要将动态库加载到内存一次即可；\nb. 开发模块好：要求设计者对功能划分的比较好。\n缺点是不能解决引用计数等问题。\n（2）静态库(Static Library)：函数和数据被编译进一个二进制文件(通常扩展名为.LIB)。在使用静态库的情况下，在编译链接可执行文件时，链接器从库中复制这些函数和数据并把它们和应用程序的其它模块组合起来创建最终的可执行文件(.EXE文件)。静态链接库作为代码的一部分，在编译时被链接。优缺点如下：\n代码的装载速度快，因为编译时它只会把你需要的那部分链接进去，应用程序相对比较大。但是如果多个应用程序使用的话，会被装载多次，浪费内存。",
    "ID" : "55f2e54fe4b0152a61143507",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : " 动态链接库和静态链接库的优缺点"
  },
  {
    "ID" : "55b5a91fe4b0ef2b575583f5",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "false与false",
    "optionC" : "true与false",
    "optionAnswer" : "A",
    "answer" : "==是操作符，它的主要作用是比较两个对象之间是否是同一个，也就是说比较操作符两端的对象在对内存当中是否是同一个地址。s2与s1指向的是同一个对象，因此在进行==比较时a与b、s1与s2分别指向相同的地址，所以比较结果为true。",
    "optionB" : "false与true",
    "type" : "1",
    "optionA" : "true与true",
    "question" : "有如下程序段:\n       int a = b = 5;\n       String s1 = \"祝你今天考出好成绩！\";\n       String s2 = s1;\n则表达式a == b与s2 == s1的结果分别是：（  )\n"
  },
  {
    "answer" : "0.75， 0.833",
    "ID" : "55f2e54fe4b0152a611434e3",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : " 在一个请求页式存储管理系统中，进程P共有5页，访问序列为3，2，1，0，3，2，4，3，2，1，0，4，当分配给该进程的页帧数为3时，使用FIFO置换算法访问过程中缺页率为（），使用LRU算法的缺页率为  。(小数点后保留三位) "
  },
  {
    "ID" : "55e592e6e4b0152a610d3abb",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "12",
    "optionC" : "1",
    "optionAnswer" : "D",
    "answer" : "当执行try{}时，遇到算算术异常，然后抛出异常，catch捕捉到异常，打印出1，最后执行finally打印2",
    "optionB" : "123",
    "type" : "1",
    "optionA" : "3",
    "question" : "下面代码的输出结果是什么？public class ZeroTest {\n    public static void main(String[] args) {\n     try{\n       int i = 100 \/ 0;\n       System.out.print(i);\n  }catch(Exception e){\n       System.out.print(1);\n       throw new RuntimeException();\n  }finally{\n       System.out.print(2);\n  }\n      System.out.print(3);\n }\n }"
  },
  {
    "answer" : "程序中的主线程向各个子线程发送一个退出消息信号，各个线程收到这个消息信号后退出线程函数，则可以安全有效的推出所有的线程。",
    "ID" : "55f2e54fe4b0152a6114350d",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "假设你在编写一个使用多线程技术的程序,当程序中止运行时,需要怎样一 个机制来安全有效的中止所有的线程?请描述其具体流程."
  },
  {
    "ID" : "55b5a920e4b0ef2b575583fe",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : " 程序会运行和启动",
    "optionC" : "第六行会产生运行错误",
    "optionAnswer" : "D",
    "answer" : "方法start()来启动一个线程，方法run()称为线程体，它包含了要执行的这个线程的内容，程序运行结果为输出“this is run()”。",
    "optionB" : "第六行会产生编译错误",
    "type" : "1",
    "optionA" : "第一行会产生编译错误",
    "question" : "运行下列程序, 会产生什么结果 （   ）\npublic class X extends Thread implements Runnable{ \n     public void run(){ \n         System.out.println(\"this is run()\"); \n     } \n     public static void main(String args[]) { \n         Thread t=new Thread(new X()); \n         t.start(); \n     } \n} \n"
  },
  {
    "ID" : "55e59381e4b0152a610d3c40",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "原则上讲，所有的对象都在堆区上分配内存，是线程之间共享的",
    "optionC" : "方法区用于存储JVM加载的类信息、常量、静态变量、即使编译器编译后的代码等数据，是线程隔离的",
    "optionAnswer" : "C",
    "answer" : "方法区在JVM中也是一个非常重要的区域，它与堆一样，是被 线程共享 的区域。 在方法区中，存储了每个类的信息（包括类的名称、方法信息、字段信息）、静态变量、常量以及编译器编译后的代码等",
    "optionB" : "Java方法执行内存模型，用于存储局部变量，操作数栈，动态链接，方法出口等信息，是线程隔离的",
    "type" : "1",
    "optionA" : "程序计数器是一个比较小的内存区域，用于指示当前线程所执行的字节码执行到了第几行，是线程隔离的",
    "question" : "下面有关JVM内存，说法错误的是？"
  },
  {
    "answer" : "66.70%",
    "ID" : "55f2e550e4b0152a61143527",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "到商店里花 200块钱买商品返还 100 优惠券(可以在本商店代替现金)。请问实际上折扣是多少?"
  },
  {
    "ID" : "55b5a91fe4b0ef2b575583f7",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "空方法",
    "optionC" : "抽象方法",
    "optionAnswer" : "C",
    "answer" : "abstract修饰符可以用于类、方法、属性、事件和索引指示器（indexer），表示其为抽象成员，抽象方法是没有方法体的方法。",
    "optionB" : "最终方法",
    "type" : "1",
    "optionA" : "接口方法",
    "question" : "若在某一个类定义中定义有如下的方法：abstract void performDial( );该方法属于（ )"
  },
  {
    "ID" : "55b9d327e4b08f89c6185bea",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "都嵌入在HTML文件中执行",
    "optionC" : "都通过\"javac\"命令编译",
    "optionAnswer" : "C",
    "answer" : "本题考查Java Application与Applet的区别。Applet与Application的主要区别在执行方式上，Application以main()方法为入口点运行，Applet要在浏览器或appletviewer中运行，运行过程比Application更复杂。两者都是通过“javac”命令编译，所以只有选项C说法正确。",
    "optionB" : "都通过“appletviewer”命令执行",
    "type" : "1",
    "optionA" : "都包含main()方法",
    "question" : "下列关于JavaApplication与Applet的说法中，正确的是( )。"
  },
  {
    "answer" : "40",
    "ID" : "55f2e54fe4b0152a611434fd",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "小支欲用积分兑换安仔娃娃。兑换的规则是10积分可以兑一个安仔并返还5积分。小支有200积分，最多可以兑到（）个安仔？(假设可以借积分)"
  },
  {
    "ID" : "55e592e7e4b0152a610d3b15",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "System.io.out System.io.in",
    "optionC" : "System.io.in System.io.out",
    "optionAnswer" : "A",
    "answer" : "标准输入system.in 标准输出system.out\ninputstream,outputstream都位于system.io包中",
    "optionB" : "System.out System.in",
    "type" : "1",
    "optionA" : "System.in System.out",
    "question" : "一般用()创建InputStream对象,表示从标准输入中获取数据,用()创建OutputStream对象，表示输出到标准输出设备中。"
  },
  {
    "ID" : "55e592e6e4b0152a610d3adb",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "false false",
    "optionC" : "true false",
    "optionAnswer" : "B",
    "answer" : "B。这里由于List没有规定数据类型，任何类型数据加入到List中后都会默认为Object类型，当再要拿出时就要进行强制类型转换，否则编译不通过。所以list1.get(0)应该是一个Object对象，这里理解为Object对象是任何对象类型的实例。",
    "optionB" : "true true",
    "type" : "1",
    "optionA" : "编译错误",
    "question" : "以下代码将打印出public static void main(String[] args)\n{\n    Listlist1 = new ArrayList();\n    list1.add(O);\n    Listlist2 = list1;\n    System.out.println(list1.get(O) instanceof Integer);\n    System.out.println(list2.get(O) instanceof Integer);\n}"
  },
  {
    "ID" : "55b227dee4b0bb7ded0a8c9c",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "public int  aMethod ( int m){...}",
    "optionC" : "public void  aMethod ( ){...}",
    "optionAnswer" : "D",
    "answer" : "重载，一般是用于在一个类内实现若干重载的方法，这些方法的名称相同而参数形式不同。重载的规则：\n   1、在使用重载时只能通过相同的方法名、不同的参数形式实现。不同的参数类型可以是不同的参数类型，不同的参数个数，不同的参数顺序（参数类型必须不一样）；\n   2、不能通过访问权限、返回类型、抛出的异常进行重载；\n   3、方法的异常类型和数目不会对重载造成影响；\n",
    "optionB" : "public int  aMethod(){...}",
    "type" : "1",
    "optionA" : "void  aMethod( ){...}",
    "question" : "下面哪个函数是public void  aMethod(){...}的重载函数？（）"
  },
  {
    "ID" : "55b227dee4b0bb7ded0a8c9b",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "interface  B\n{  \n    void  print( );\n}\n",
    "optionC" : "abstract  interface  B  extends  A1,A2  \/\/A1、A2为已定义的接口\n{ \n    abstract  void  print( ){  \n    };\n}\n",
    "optionAnswer" : "D",
    "answer" : "接口定义同类的定义类似，也是分为接口的声明和接口体，其中接口体由常量定义和方法定义两部分组成。修饰符：可选，用于指定接口的访问权限，可选值为public。如果省略则使用默认的访问权限。接口名：必选参数，用于指定接口的名称，接口名必须是合法的Java标识符。一般情况下，要求首字母大写。extends 父接口名列表：可选参数，用于指定要定义的接口继承于哪个父接口。当使用extends关键字时，父接口名为必选参数。方法：接口中的方法只有定义而没有被实现。",
    "optionB" : " abstract  interface  B\n{ \n    void print( ) ;\n}\n",
    "type" : "1",
    "optionA" : "interface  B\n{  \n    void print( )  { \n    } ;\n}\n",
    "question" : "  以下哪项是接口的正确定义？（ ）"
  },
  {
    "answer" : "0x800002",
    "ID" : "55f2e54fe4b0152a611434b9",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "char *p1;int64 *p2;\np1=(char *)0x800000;\np2=(int64 *)0x800000;\nchar *a=p1+2\nint64_t *b=p2+2 那么a=（）"
  },
  {
    "answer" : "大写的O描述的是，就数据结构中的一系列元素而言，一个算法的性能。\r\rCollection类就是实际的数据结构，我们通常基于时间、内存和性能，使用大写的O来选择集合实现。比如：\r\r例子1：ArrayList的get(index i)是一个常量时间操作，它不依赖list中元素的数量。所以它的性能是O(1)。\r例子2：一个对于数组或列表的线性搜索的性能是O(n)，因为我们需要遍历所有的元素来查找需要的元素。",
    "ID" : "55f2e484e4b0152a611431b5",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "大写的O是什么？举几个例子？"
  },
  {
    "ID" : "55b9d326e4b08f89c6185bc2",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "局部变量在使用之前可以不初始化，系统使用默认的初始值",
    "optionC" : "变量不可以在其作用域之外使用",
    "optionAnswer" : "D",
    "answer" : "局部变量在使用之前必须初始化，否则编译错误，类的成员变量则不一定要在使用之前初始化，系统赋予其默认的初始值。",
    "optionB" : "变量声明语句可以在程序的任何地方，只要在变量使用之前即可",
    "type" : "1",
    "optionA" : "在Java程序中要使用一个变量，必须先对其进行声明",
    "question" : "下列关于Java变量作用域的说法中，不正确的是"
  },
  {
    "ID" : "55b9d327e4b08f89c6185be6",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "实现java.lang.Thread类并实现start()方法",
    "optionC" : "继承java.lang.Thread类并重写run()方法",
    "optionAnswer" : "C",
    "answer" : "本题考查创建线程的使用。创建线程有两种方法：通过实现Runnable接口创建线程和通过继承Thread类创建线程。通过实现Runnable接口创建线程，当实现 Runnable接口的类的对象用来创建线程以后，该线程的启动将使得对象的run()方法被调用。通过继承Thread类创建线程，可以通过继承 Thread类，并重写其中的run()方法定义线程体，然后创建该子类的对象创建线程。",
    "optionB" : "实现java.lang.Runnable接口并重写run()方法",
    "type" : "1",
    "optionA" : "实现java.lang.Runnable接口并重写start()方法",
    "question" : "下列方法中可以用来创建一个新线程的是( )。"
  },
  {
    "ID" : "55e58d70e4b0152a610d39e7",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "final修饰的方法不允许被子类覆盖",
    "optionC" : "final修饰的局部变量即为常量，只能赋值一次。",
    "optionAnswer" : "B",
    "answer" : "final所修饰的成员变量只能赋值一次，可以在类方法中赋值，也可以在声明的时候直接赋值，而final修饰的局部变量可以在声明的时候初始化，也可以在第一次使用的通过方法或者表达式给它赋值。\r",
    "optionB" : "final修饰的成员变量只允许赋值一次，且只能在类方法赋值",
    "type" : "1",
    "optionA" : "final修饰的类不能被继承",
    "question" : "下面有关java final的基本规则，描述错误的是？"
  },
  {
    "ID" : "55e592e6e4b0152a610d3ac0",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "不能执行，因为编译有错",
    "optionC" : "2",
    "optionAnswer" : "D",
    "answer" : "D。final类型的变量一定要初始化，因为final的变量不可更改。",
    "optionB" : "1",
    "type" : "1",
    "optionA" : "0",
    "question" : "class Foo {\n    final int i;\n    int j;\n    public void doSomething() {\n        System.out.println(++j + i);\n    }\n}的输出是？"
  },
  {
    "answer" : "public interface Animal(){\n\npublic void tt( );\n\n}\n\npublic class Dog implements Animal{\n\npublic void tt ( ){}\n\n}\n\nAnimal ani = new Dog();",
    "ID" : "5602715ee4b043d0cb1d3a2a",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "举例说明如何把接口当作类型使用"
  },
  {
    "ID" : "55e592e6e4b0152a610d3ad8",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "浮点型",
    "optionC" : "字符串",
    "optionAnswer" : "D",
    "answer" : "switch语句后的控制表达式只能是short、char、int、long整数类型和枚举类型，不能是float，double和boolean类型。String类型是java7开始支持。 ",
    "optionB" : "枚举类型",
    "type" : "1",
    "optionA" : "整型",
    "question" : "在java7中，下列不能做switch()的参数类型是？"
  },
  {
    "ID" : "55e59380e4b0152a610d3bdf",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "ClassLoader就是用来动态加载class文件到内存当中用的",
    "optionC" : "JVM在判定两个class是否相同时，只用判断类名相同即可，和类加载器无关",
    "optionAnswer" : "C",
    "answer" : "?JVM在判定两个class是否相同时，不仅要判断两个类名是否相同，而且要判断是否由同一个类加载器实例加载的。",
    "optionB" : "ClassLoader使用的是双亲委托模型来搜索类的",
    "type" : "1",
    "optionA" : "Java默认提供的三个ClassLoader是BootStrap ClassLoader，Extension ClassLoader，App ClassLoader",
    "question" : "下面有关java classloader说法错误的是?"
  },
  {
    "answer" : "在Java 5以前，switch(expr)中，expr只能是byte、short、char、int。从Java 5开始，Java中引入了枚举类型，expr也可以是enum类型，从Java 7开始，expr还可以是字符串（String），但是长整型（long）在目前所有的版本中都是不可以的。",
    "ID" : "1f5ebe50bdf011e6a0e100163e0021c8",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "switch 是否能作用在byte 上，是否能作用在long 上，是否能作用在String上？ "
  },
  {
    "ID" : "55e592e6e4b0152a610d3aaa",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "java没有函数指针机制，c++支持函数指针",
    "optionC" : "Java不支持操作符重载，操作符重载被认为是c++的突出特征",
    "optionAnswer" : "B ",
    "answer" : "JAVA没有指针的概念，被封装起来了，而C++有;JAVA不支持类的多继承，但支持接口多继承，C++支持类的多继承;C++支持操作符重载，JAVA不支持;JAVA的内存管理比C++方便，而且错误处理也比较好;C++的速度比JAVA快。\nC++更适用于有运行效率要求的情况，JAVA适用于效率要求不高，但维护性要好的情况。",
    "optionB" : "c++和java支持多重继承",
    "type" : "1",
    "optionA" : "java是一次编写多处运行，c++是一次编写多处编译",
    "question" : "下面有关java和c++的描述，错误的是？"
  },
  {
    "ID" : "55e592e7e4b0152a610d3b09",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "Java还实现了真数组，避免了覆盖数据类型的可能",
    "optionC" : "Java自己操纵内存减少了内存出错的可能性",
    "optionAnswer" : "D",
    "answer" : "D 避免数据覆盖不是覆盖数据类型",
    "optionB" : "Java能运行虚拟机实现跨平台",
    "type" : "1",
    "optionA" : "Java致力于检查程序在编译和运行时的错误",
    "question" : "下列不属于Java语言性特点的是"
  },
  {
    "answer" : "385",
    "ID" : "55f2e54fe4b0152a611434f6",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "一个完全二叉树有770个节点，那么其叶子的个数为 "
  },
  {
    "answer" : "不能。volatile关键字用在多线程同步中，可保证读取的可见性，JVM只是保证从主内存加载到线程工作内存的值是最新的读取值，而非cache中。但多个线程对volatile的写操作，无法保证线程安全。例如假如线程1，线程2 在进行read,load 操作中，发现主内存中count的值都是5，那么都会加载这个最新的值，在线程1堆count进行修改之后，会write到主内存中，主内存中的count变量就会变为6；线程2由于已经进行read,load操作，在进行运算之后，也会更新主内存count的变量值为6；导致两个线程及时用volatile关键字修改之后，还是会存在并发的情况。",
    "ID" : "ef93690ebde611e6a0e100163e0021c8",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "volatile关键字是否能保证线程安全？（）"
  },
  {
    "ID" : "55e59380e4b0152a610d3bf4",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "在类方法中绝对不能调用实例方法",
    "optionC" : "在类方法中只能调用本类中的类方法",
    "optionAnswer" : "B",
    "answer" : "成员方法又称为实例方法\n静态方法又称为类方法\n其次：\na，静态方法中没有this指针\nc，可以通过类名作用域的方式调用Class::fun();\nd，太绝对化了，在类中申请一个类对象或者参数传递一个对象或者指针都可以调用;",
    "optionB" : "在类方法中调用本类的类方法时可直接调用",
    "type" : "1",
    "optionA" : "在类方法中可用this来调用本类的类方法",
    "question" : "下列说法正确的有（ ）"
  },
  {
    "ID" : "55e59381e4b0152a610d3c18",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "spring提供了AOP方式的日志系统",
    "optionC" : "使用spring可以实现声明事务",
    "optionAnswer" : "D",
    "answer" : "Spring并没有提供日志系统，我们需要使用AOP（面向方面编程）的方式，借助Spring与日志系统log4j实现我们自己的日志系统",
    "optionB" : "spring是“依赖注入”模式的实现",
    "type" : "1",
    "optionA" : "spring是一个轻量级JAVA EE的框架集合",
    "question" : "关于spring说法错误的是（）"
  },
  {
    "ID" : "55e592e7e4b0152a610d3b31",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "以上说法均正确",
    "optionC" : "重载是父类与子类之间多态性的一种表现",
    "optionAnswer" : "B",
    "answer" : "重写是子类继承父类方法并对其进行修改，可选择调用父类方法或子类重写后的同名方法；重载是在一个类可以存在同名但参数列表不同的方法，可根据传入的参数调用相应的方法",
    "optionB" : "重载是一个类中多态性的一种表现",
    "type" : "1",
    "optionA" : "重写是一个类中多态性的一种表现",
    "question" : "Java语言中，方法的重写（Overriding）和重载（Overloading）是多态性的不同表现。下边哪些说法是对的？"
  },
  {
    "ID" : "55e59380e4b0152a610d3c03",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "abstract类的子类必须实现其超类的所有abstract方法",
    "optionC" : "abstract类不能实例化",
    "optionAnswer" : "D",
    "answer" : "A 正确的；\nB 正确的；\/\/final类中只能含有非抽象的方法；\nC 正确的；\nD 错误的；\/\/对于abstract类的子类来说有两种途径，一种是实现其超类的所有abstract方法；或者是           \/\/子类也声明为abstract类，将全部实现抽象方法的责任交给它的子类。",
    "optionB" : "final类的方法都不能是abstract，因为final类不能有子类",
    "type" : "1",
    "optionA" : "abstract关键字可以修饰类或方法",
    "question" : "下面关于abstract关键字描述错误的是（）"
  },
  {
    "answer" : "Java1.5引入了泛型，所有的集合接口和实现都大量地使用它。泛型允许我们为集合提供一个可以容纳的对象类型，因此，如果你添加其它类型的任何元素，它会在编译时报错。这避免了在运行时出现ClassCastException，因为你将会在编译时得到报错信息。\r泛型也使得代码整洁，我们不需要使用显式转换和instanceOf操作符。它也给运行时带来好处，因为不会产生类型检查的字节码指令。",
    "ID" : "55f2e483e4b0152a61143190",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "集合框架中的泛型有什么优点？"
  },
  {
    "ID" : "55b9d327e4b08f89c6185be4",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "Java",
    "optionC" : "HTML",
    "optionAnswer" : "D",
    "answer" : "FORTRAN语言主要用于科学计算领域。超文本标记语言HTML是一种过程标记语言，它定义了一个标记的几何以及与之相关的格式化规则。C或C++语言是通用程序设计语言，C语言常用于系统程序设计领域。Java是一种通用的、面向对象的程序设计语言，尤其适用于网络程序设计。在网络中，服务器和客户端之间一般传输两种对象：被动的信息与主动和动态的程序。现在也可将自我执行的动态程序传到客户端，这种程序在客户端将是活动的代理程序，由服务器启动。用Java编写的Applet代码的半编译版本可以在Internet上传输并由浏览器执行。",
    "optionB" : "C++或C",
    "type" : "1",
    "optionA" : "FORTRAN",
    "question" : "（）语言可以编写Applet并通过Script程序调用执行。"
  },
  {
    "ID" : "55e59382e4b0152a610d3c52",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "request.getWriter()",
    "optionC" : "request.getParameter()",
    "optionAnswer" : "C",
    "answer" : "String userName = request.getParameter(\"userName\")方法。",
    "optionB" : "request. getAttribute()",
    "type" : "1",
    "optionA" : "request.getRequestURL()",
    "question" : "java如何接受request域中的参数？"
  },
  {
    "ID" : "55e59382e4b0152a610d3c57",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "sleep()方法导致了程序暂停执行指定的时间，让出cpu给其他线程",
    "optionC" : "调用sleep()方法的过程中，线程不会释放对象锁",
    "optionAnswer" : "D",
    "answer" : "sleep和wait的区别有：\n  1，这两个方法来自不同的类分别是Thread和Object\n  2，最主要是sleep方法没有释放锁，而wait方法释放了锁，使得敏感词线程可以使用同步控制块或者方法。\n  3，wait，notify和notifyAll只能在同步控制方法或者同步控制块里面使用，而sleep可以在\n    任何地方使用\n   synchronized(x){\n      x.notify()\n     \/\/或者wait()\n   }\n   4,sleep必须捕获异常，而wait，notify和notifyAll不需要捕获异常",
    "optionB" : "调用wait()方法的时候，线程会放弃对象锁",
    "type" : "1",
    "optionA" : "wait()方法属于Object类，二sleep()属于Thread类",
    "question" : "下列关于java 中的 wait()方法和 sleep()方法的区别描述错误的是？"
  },
  {
    "ID" : "55e592e7e4b0152a610d3b13",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "http:\/\/127.0.0.1:8080\/myjsp\/forward.htm",
    "optionC" : "http:\/\/127.0.0.1:8080\/myjsp\/index.htm",
    "optionAnswer" : "A",
    "answer" : "forward和redirect是最常问的两个问题\nforward，服务器获取跳转页面内容传给用户，用户地址栏不变\nredirect，是服务器向用户发送转向的地址，redirect后地址栏变成新的地址\n因此这个题是A",
    "optionB" : "http:\/\/127.0.0.1:8080\/myjsp\/index.jsp",
    "type" : "1",
    "optionA" : "http:\/\/127.0.0.1:8080\/myjsp\/forward.jsp",
    "question" : "看以下代码： \n文件名称：forward.jsp <html>  \n     <head><title> 跳转  <\/title> <\/head> \n     <body>  \n         <jsp:forward page=\"index.htm\"\/>     \n     <\/body>\n <\/html> \n如果运行以上jsp文件，地址栏的内容为"
  },
  {
    "answer" : "Collection col = new ArrayList();\n\nString oldValue = “abcd”;\n\nString newValue = “1234″;\n\n\/\/增加\n\ncol.add(oldValue);\n\nIterator it = col.iterator();\n\nwhile(it.hasNext()){\n\n\/\/取值\n\nString str = (String)it.next();\n\nif(str.equals(oldValue)){\n\n\/\/删除\n\ncol.remove(oldValue);\n\n\/\/修改\n\ncol.add(newValue);\n\n}\n\n}",
    "ID" : "5602715fe4b043d0cb1d3a39",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "代码示例：Collection接口的使用，包括如何定义、初始化、赋值、取值、修改值除值"
  },
  {
    "ID" : "55e592e7e4b0152a610d3b00",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "15",
    "optionC" : "-6",
    "optionAnswer" : "C",
    "answer" : "公式-n=~n+1可推出~n=-n-1，所以~10=-11再加5结果为-6",
    "optionB" : "-5",
    "type" : "1",
    "optionA" : "Compilation error because”~”doesn’t operate on integers",
    "question" : "What results from the following code fragment?int i = 5;\nint j = 10;\nSystem.out.println(i + ~j);"
  },
  {
    "answer" : "堆栈溢出一般是循环的递归调用导致的,如果使用的大数据结构的局部变量,也可能导致",
    "ID" : "55f2e550e4b0152a6114351d",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "堆栈溢出一般是由什么原因导致的？"
  },
  {
    "ID" : "55b9d326e4b08f89c6185bc4",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "已经默认地全部解除",
    "optionC" : "可以在安全策略的控制下解除",
    "optionAnswer" : "C",
    "answer" : "本题考查Applet的安全限制。Java2中的安全机制建立一个策略文件给Applet授予所需的权限，并使用这个安全策略实施对该 rippler的安全控制，选项C说法正确。要注意分析题目，本题通过仔细分析题目，也可以正确回答。",
    "optionB" : "只有部分限制可以解除，而其他限制无法解除",
    "type" : "1",
    "optionA" : "根本无法解除",
    "question" : "Java中对Applet设置了严格的安全限制。下列关于Applet在Java2中的安全限制叙述正确的是"
  },
  {
    "answer" : "53",
    "ID" : "55f2e54fe4b0152a611434dd",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "由权值分别为3，8，6，2，5的叶子结点生成一棵哈夫曼树，它的带权路径长度为 "
  },
  {
    "ID" : "55e6d766e4b0152a610de71e",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "run",
    "optionC" : "main",
    "optionAnswer" : "A",
    "answer" : "这个类虽然继承了Thread类，但是并没有真正创建一个线程。\r创建一个线程需要覆盖Thread类的run方法，然后调用Thread类的start()方法启动\r这里直接调用run()方法并没有创建线程，跟普通方法调用一样，是顺序执行的",
    "optionB" : "main run",
    "type" : "1",
    "optionA" : "run main",
    "question" : "以下程序运行的结果为( )\rpublic class Example extends Thread{\r     @Override\r     public void run(){\r        try{\r             Thread.sleep(1000);\r             }catch (InterruptedException e){\r             e.printStackTrace();\r             }\r             System.out.print(\"run\");\r     }\r     public static void main(String[] args){\r             Example example=new Example();\r             example.run();\r             System.out.print(\"main\");\r     }\r}"
  },
  {
    "ID" : "55e59381e4b0152a610d3c17",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "JDBC驱动程序",
    "optionC" : "数据库系统",
    "optionAnswer" : "C",
    "answer" : "A，我们写java程序的时候只是设定事物的隔离级别，而不是去实现它\nB，Hibernate是一个java的数据持久化框架，方便数据库的访问\nC，事物隔离级别由数据库系统实现，是数据库系统本身的一个功能\nD，JDBC是java database connector，也就是java访问数据库的驱动",
    "optionB" : "Hibernate",
    "type" : "1",
    "optionA" : "Java应用程序",
    "question" : "事务隔离级别是由谁实现的？"
  },
  {
    "answer" : "Java.util.concurrent.BlockingQueue是一个队列，在进行检索或移除一个元素的时候，它会等待队列变为非空；当在添加一个元素时，它会等待队列中的可用空间。\r\rBlockingQueue接口是Java集合框架的一部分，主要用于实现生产者-消费者模式。我们不需要担心等待生产者有可用的空间，或消费者有可用的对象，因为它都在BlockingQueue的实现类中被处理了。\r\rJava提供了集中BlockingQueue的实现，比如ArrayBlockingQueue、LinkedBlockingQueue、PriorityBlockingQueue,、SynchronousQueue等。",
    "ID" : "55f2e484e4b0152a611431ac",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "BlockingQueue是什么？"
  },
  {
    "answer" : "int  solve()\n{\n    int  i , j , s;\n    int  dp[N+1][SUM\/2+2];\n    memset(dp,0,sizeof (dp));\n    for (i = 1 ; i <= 2*N ; ++i)\n    {\n        for (j = 1 ; j <= min(i,N) ; ++j)\n        {\n            for (s = SUM\/2+1 ; s >= arr[i] ; --s)\n             {\n                 dp[j][s] = max(dp[j-1][s-arr[i]]+arr[i] , dp[j][s]);\n             }\n         }\n    }\n    return  dp[N][SUM\/2+1];\n}\n",
    "ID" : "55f2e54fe4b0152a611434c1",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "任意2n个整数，从其中选出n个整数，使得选出的n个整数和同剩下的n个整数之和的差最小。"
  },
  {
    "ID" : "55e59382e4b0152a610d3c47",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "JDBC驱动程序",
    "optionC" : "数据库系统",
    "optionAnswer" : "C",
    "answer" : "在数据库操作中，为了有效保证并发读取数据的正确性，提出的事务隔离级别；为了解决更新丢失，脏读，不可重读（包括虚读和幻读）等问题在标准SQL规范中，定义了4个事务隔离级别，分别为未授权读取，也称为读未提交（read uncommitted）；授权读取，也称为读提交（read committed）；可重复读取（repeatable read）；序列化（serializable）.",
    "optionB" : "Hibernate",
    "type" : "1",
    "optionA" : "Java应用程序",
    "question" : "事务隔离级别是由谁实现的？"
  },
  {
    "answer" : "Java语言支持的8中基本数据类型是：byte、short、int、long、float、double、boolean、char 自动装箱是Java编译器在基本数据类型和对应的对象包装类型之间做的一个转化。比如：把int转化成Integer，double转化成double，等等。反之就是自动拆箱。",
    "ID" : "cae0e7a2bdec11e6a0e100163e0021c8",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "Java支持的数据类型有哪些？什么是自动拆装箱？"
  },
  {
    "answer" : "char类型可以存储一个中文汉字，因为Java中使用的编码是Unicode（不选择任何特定的编码，直接使用字符在字符集中的编号，这是统一的唯一方法），一个char类型占2个字节（16比特），所以放一个中文是没问题的。",
    "ID" : "6198b7debdf111e6a0e100163e0021c8",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "char 型变量中能不能存贮一个中文汉字，为什么？ "
  },
  {
    "ID" : "aa98646ebde911e69a7900163e0021c8",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "new ObjectInputStream(new FileInputStream(\"a.dat\"));",
    "optionC" : "new GZIPOutputStream(new FileOutputStream(\"a.zip\"));",
    "optionAnswer" : "B",
    "answer" : "Reader只能用FileReader进行实例化。   ",
    "optionB" : "new BufferedReader(new FileInputStream(\"a.dat\"));",
    "type" : "1",
    "optionA" : "new BufferedWriter(new FileWriter(\"a.txt\"));",
    "question" : "新建一个流对象，下面哪个选项的代码是错误的？（）"
  },
  {
    "answer" : "调用一个DLL中的函数有两种方法： 1．载入时动态链接（load-time dynamic linking），模块非常明确调用某个导出函数，使得他们就像本地函数一样。这需要链接时链接那些函数所在DLL的导入库，导入库向系统提供了载入DLL时所需的信息及DLL函数定位。 2．运行时动态链接（run-time dynamic linking），运行时可以通过LoadLibrary或LoadLibraryEx函数载入DLL。DLL载入后，模块可以通过调用GetProcAddress获取DLL函数的出口地址，然后就可以通过返回的函数指针调用DLL函数了。如此即可避免导入库文件了。",
    "ID" : "55f2e54fe4b0152a611434ce",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "调用动态连接库的函数有哪几种方法？"
  },
  {
    "answer" : "父类的构造方法不可以被子类覆盖，因为父类和子类的类名是不可能一样的。  ",
    "ID" : "5602715de4b043d0cb1d39d5",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "父类的构造方法是否可以被子类覆盖（重写）？"
  },
  {
    "answer" : "int rand7()\n{\n    int n=25;\n    while(n>21){\n        n=5*(rand5()-1)+rand5();\n    }\n    return (n%7)+1;\n}",
    "ID" : "55f2e550e4b0152a6114352a",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "给定能随机生成整数 1 到 5 的函数,写出能随机生成整数 1 到 7 的函数。"
  },
  {
    "answer" : "Java运行时环境(JRE)是将要执行Java程序的Java虚拟机。它同时也包含了执行applet需要的浏览器插件。Java开发工具包(JDK)是完整的Java软件开发包，包含了JRE，编译器和其他的工具(比如：JavaDoc，Java调试器)，可以让开发者开发、编译、执行Java应用程序。",
    "ID" : "6d9c9ecebdec11e6a0e100163e0021c8",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "JDK和JRE的区别是什么？"
  },
  {
    "ID" : "55b227dee4b0bb7ded0a8ca3",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "String t=s+”!”;",
    "optionC" : "String ts=s.trim(); ",
    "optionAnswer" : "B",
    "answer" : "String不能按位运算",
    "optionB" : "s>>>=3;",
    "type" : "1",
    "optionA" : "int i=s.length(); ",
    "question" : "有语句String s=”hello world”; ，以下操作哪个是不合法的？（ ）"
  },
  {
    "ID" : "55e6d766e4b0152a610de71f",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "System.out.println(i02== i04);",
    "optionC" : "System.out.println(i03== i04);",
    "optionAnswer" : "C",
    "answer" : "JVM中一个字节以下的整型数据会在JVM启动的时候加载进内存，除非用new Integer()显式的创建对象，否则都是同一个对象\r所有只有i04是一个新对象，其他都是同一个对象。所有A，B选项为true\rC选项i03和i04是两个不同的对象，返回false\rD选项i02是基本数据类型，比较的时候比较的是数值，返回true",
    "optionB" : "System.out.println(i01== i03);",
    "type" : "1",
    "optionA" : "System.out.println(i01== i02);",
    "question" : "在jdk1.5的环境下，有如下4条语句：\rInteger i01 = 59;\rint i02 = 59;\rInteger i03 =Integer.valueOf(59);\rInteger i04 = new Integer(59)。\r以下输出结果为false的是："
  },
  {
    "ID" : "55b9d326e4b08f89c6185bd2",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "有类库",
    "optionC" : "跨平台",
    "optionAnswer" : "C",
    "answer" : "本题考查Java语言的特性。Java语言与C++语言都是面向对象的语言。因此，选项A是错误的。Java语言与C++语言都是高性能的编程语言。Java字节码的设计使之能很容易地直接转换成对应于特定CPU的机器码，从而得到较高的性能。C++由于其极高的灵活性、强大的功能和非常高的效率，常常用于专业应用程序的开发，C++非常适合于编写各种编程环境下的高性能代码。因此，选项B是错误的。Java是平台无关的语言是指用Java写的应用程序不用修改就可在不同的软硬件平台上运行。平台无关有两种：源代码级和目标代码级。C和C++具有一定程度的源代码级平台无关，C++语言支持程序员编写一些非常低级的程序，从而能够访问机器硬件，并操纵实际内存地址。但这些是以牺牲可移植性为代价的，因为这时每个程序都是针对某种具体硬件环境的。而Java主要靠Java虚拟机(JVM)在目标码级实现平台无关性。Java编程人员在编写完软件后，通过Java编译器将Java源程序编译为JVM的字节代码。任何一台机器只要配备了Java解释器，就可以运行这个程序，而不管这种字节码是在何种平台上生成的。显然，Java语言与c补语言相比，最突出的特点是跨平台。因此，选项C是正确的。Java语言和C++语言中都包含有类库，提供了大量的类以满足用户的多方面需要。因此，选项D是错误的。",
    "optionB" : "高性能",
    "type" : "1",
    "optionA" : "面向对象",
    "question" : "Java语言与C++语言相比，最突出的特点是"
  },
  {
    "ID" : "55b9d326e4b08f89c6185bbe",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "Java中，构造方法可以有返回值",
    "optionC" : "Java中，接口是不包含成员变量和方法实现的抽象类",
    "optionAnswer" : "D",
    "answer" : "构造方法是一种特殊的方法，是为对象初始化操作编写的方法，用它来定义对象的初始状态。Java中的每个类都有构造方法，它也是由方法名、参数和方法体组成的。构造方法的名字必须与类名相同，并且构造方法不返回任何数据。",
    "optionB" : "Java中，用abstract装饰的类称为抽象类，它不能实例化",
    "type" : "1",
    "optionA" : "Java中，方法的重载是指多个方法可以共享同一个名字",
    "question" : "下列叙述中，错误的是"
  },
  {
    "ID" : "55b9d326e4b08f89c6185bbd",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "import java．applet．*；",
    "optionC" : ".import java．awt．*；",
    "optionAnswer" : "C",
    "answer" : "本题考查对Java常用的各种包所包含的一些类的基本功能的理解。java．awt包是抽象窗口工具包，里面包括各种容器、组件、窗口布局管理器以及一些常用的类如Color、Font等，选项C满足题意。而java．applet包里面包括了小程序执行时必须要重载的一个类Applet，也就只有这一个类，选项D错误。java．io包主要是提供一些输入／输出类的，选项B不满足题意。java．awt．event包就包含了一些能够对事件做出响应和处理的一些标准类，选项A不满足题意。",
    "optionB" : "import java．io．*；",
    "type" : "1",
    "optionA" : "import java．awt．event．*；",
    "question" : "在Java Applet程序中，如果对发生的事件做出响应和处理的时候，应该使用下列（ 语句。"
  },
  {
    "answer" : "N = 4\nM = 5\nl = []\nfor i in xrange(1, 1 + N*M):\n?l.append(i)\n?\nm = [[None]*M for i in xrange(N)]\nstep = [(0, 1), (1, 0), (0, -1), (-1, 0)]\nd = 0\ns = (0, 0)\n?\nfor num in l:\n?m[s[0]][s[1]] = num\n?ns = (step[d][0] + s[0], step[d][1] + s[1])\n?if ns[0] >= N or ns[1] >= M or m[ns[0]][ns[1]] is not None:\n?d = (d + 1) % 4\n?ns = (step[d][0] + s[0], step[d][1] + s[1])\n?s = ns\n?\nfor i in m:\n?print i",
    "ID" : "55f2e54fe4b0152a611434de",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "反螺旋矩阵：随机给定N*M个数（无重复），先将这N*M个数排序，然后升序放置到螺旋矩阵当中：\n如，给定3*5共15个数1-15，则螺旋矩阵输出如下：\n1   2  3  4  5\n14 15 16 17 6\n13 20 19 18 7\n12 11 10 9 8"
  },
  {
    "ID" : "c2f30f90bdea11e69a7900163e0021c8",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "IndexOutOfBoundsException",
    "optionC" : "FileNotFoundException",
    "optionAnswer" : "C",
    "answer" : "Java异常的基类为java.lang.Throwable，java.lang.Error和java.lang.Exception继承 Throwable，RuntimeException和其它的Exception等继承Exception，具体的RuntimeException继承RuntimeException。 扩展：错误和异常的区别(Error vs Exception)   1) java.lang.Error: Throwable的子类，用于标记严重错误。合理的应用程序不应该去try\/catch这种错误。绝大多数的错误都是非正常的，就根本不该出现的。 java.lang.Exception: Throwable的子类，用于指示一种合理的程序想去catch的条件。即它仅仅是一种程序运行条件，而非严重错误，并且鼓励用户程序去catch它。  2)  Error和RuntimeException 及其子类都是未检查的异常（unchecked exceptions），而所有其他的Exception类都是检查了的异常（checked exceptions）. checked exceptions: 通常是从一个可以恢复的程序中抛出来的，并且最好能够从这种异常中使用程序恢复。比如FileNotFoundException, ParseException等。检查了的异常发生在编译阶段，必须要使用try…catch（或者throws）否则编译不通过。 unchecked exceptions: 通常是如果一切正常的话本不该发生的异常，但是的确发生了。发生在运行期，具有不确定性，主要是由于程序的逻辑问题所引起的。比如ArrayIndexOutOfBoundException, ClassCastException等。从语言本身的角度讲，程序不该去catch这类异常，虽然能够从诸如RuntimeException这样的异常中catch并恢复，但是并不鼓励终端程序员这么做，因为完全没要必要。因为这类错误本身就是bug，应该被修复，出现此类错误时程序就应该立即停止执行。 因此，面对Errors和unchecked exceptions应该让程序自动终止执行，程序员不该做诸如try\/catch这样的事情，而是应该查明原因，修改代码逻辑。  RuntimeException：RuntimeException体系包括错误的类型转换、数组越界访问和试图访问空指针等等。  处理RuntimeException的原则是：如果出现 RuntimeException，那么一定是程序员的错误。例如，可以通过检查数组下标和数组边界来避免数组越界访问异常。其他（IOException等等）checked异常一般是外部错误，例如试图从文件尾后读取数据等，这并不是程序本身的错误，而是在应用环境中出现的外部错误。 ",
    "optionB" : "ClassCastException",
    "type" : "1",
    "optionA" : "NullPointerException",
    "question" : "下列哪种异常是检查型异常，需要在编写程序时声明 （）"
  },
  {
    "ID" : "55b227dfe4b0bb7ded0a8cb1",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "变量大小；",
    "optionC" : "变量初值；",
    "optionAnswer" : "D",
    "answer" : "选项A、B和C均属于变量的组成部分：选项D不是，因为Java的数据类型长度都固定，变量的大小并不是组成变量的一部分，而应该是变量的类型，有了变量的类型，变量的大小就能确定了。",
    "optionB" : "变量属性；",
    "type" : "1",
    "optionA" : "变量名；",
    "question" : "下列哪一项不属于变量的组成部分：()"
  },
  {
    "ID" : "55e592e6e4b0152a610d3ad5",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "error.jsp 页面一定要有isErrorPage 属性且值为 true",
    "optionC" : "存在 errorPage 属性时，isErrorPage 是默认为 false",
    "optionAnswer" : "A",
    "answer" : "页面有isErrorPage属性且值为false，不可以使用 exception 对象",
    "optionB" : "该页面发生异常会转向 error.jsp",
    "type" : "1",
    "optionA" : "该页面可以使用 exception 对象",
    "question" : "在 myjsp.jsp 中，关于下面的代码说法错误的是： (  )   \n<%@ page language=\"java\" import=\"java.util.*\" errorPage=\"error.jsp\" isErrorPage=\"false\" %> "
  },
  {
    "answer" : "1.生存周期不同 全局变量:全局区（静态区）（static）：全局变量和静态变量是存储在一起的，初始化过的全局变量和静态变量在同一块区域，未初始化的全局变量和静态变量存放在一块相邻的区域内。此区域由系统在程序结束后释放 局部变量： 放在堆栈中。由编译器自动分配释放，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈\n2.作用范围不同 全局变量具有全局作用域。全局变量只需在一个源文件中定义，就可以作用于所有的源文件。当然，其他不包含全局变量定义的源文件需要用extern 关键字再次声明这个全局变量。 局部变量也只有局部作用域，它是自动对象（auto），它在程序运行期间不是一直存在，而是只在函数执行期间存在，函数的一次调用执行结束后，变量被撤销，其所占用的内存也被收回",
    "ID" : "55f2e550e4b0152a6114351b",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "全局变量和局部变量在内存中是否有区别？如果有，是什么区别？"
  },
  {
    "answer" : "类型声明符在C语言里面主要有三个用途：\n1.声明静态局部变量\n2.声明静态外部全局变量\n3.声明静态外部函数",
    "ID" : "55f2e550e4b0152a61143519",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "static有什么用途？（请至少说明两种）"
  },
  {
    "ID" : "55b227dfe4b0bb7ded0a8cb9",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "都对",
    "optionC" : " a1",
    "optionAnswer" : "A",
    "answer" : "Java是 plain text 文件，是可以人工编辑的文件。.class 是编译后产生的字节码文件，这是 JVM（java 虚拟机）解释执行的文件。",
    "optionB" : "a1.class ",
    "type" : "1",
    "optionA" : "a1.java",
    "question" : "有一段java 应用程序，它的主类名是a1，那么保存它的源文件名可以是()"
  },
  {
    "answer" : "Iterator接口提供遍历任何Collection的接口。我们可以从一个Collection中使用迭代器方法来获取迭代器实例。迭代器取代了Java集合框架中的Enumeration。迭代器允许调用者在迭代过程中移除元素。",
    "ID" : "55f2e483e4b0152a61143194",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "Iterator是什么？"
  },
  {
    "ID" : "55b227dfe4b0bb7ded0a8cb8",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "11",
    "optionC" : "_1 ",
    "optionAnswer" : "D",
    "answer" : "Java命名规则是以数字、字母、下划线、$组成，但是只能以字母、下划线、$开头，约定俗成的是首字母小写，后面的首字母大写，即采用驼峰标识，尽量做到见名只意。",
    "optionB" : "$1 ",
    "type" : "1",
    "optionA" : " a1   ",
    "question" : "下列不可作为java语言修饰符的是（)"
  },
  {
    "ID" : "55e592e6e4b0152a610d3ac9",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "0 2 0",
    "optionC" : "0 2 2",
    "optionAnswer" : "C",
    "answer" : "count是静态变量，为所有对象所共享，因此不管a.increment()还是b.increment()都会使count持续增加。",
    "optionB" : "1 2 3",
    "type" : "1",
    "optionA" : "1 1 1",
    "question" : "有以下一段代码，请选择其运行结果。( )public class Spike\n{\n    public static void main(String[] args)\n    {\n        Counter a = new Counter();\n        System.out.println(a.increment());\n        System.out.println(a.anotherIncrement());\n        Counter b = new Counter();\n        System.out.println(b.increment());\n    }\n}\nclass Counter\n{\n    private static int count = 0;\n    public int increment()\n    {\n        return count++;\n    }\n    public int anotherIncrement()\n    {\n        return ++count;\n    }\n}"
  },
  {
    "ID" : "55e592e7e4b0152a610d3b2a",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "让一个线程等待另一个线程的通知的方法是：thread. sleep()",
    "optionC" : "将一个线程标记成daemon线程，意味着当主线程结束，并且没有其它正在运行的非daemon线程时，该daemon线程也会自动结束。",
    "optionAnswer" : "C",
    "answer" : "答案:C；启动线程方法start();线程stop方法已经被弃用；守护线程在非守护线程结束后，会自动结束；等待其他线程通知方法是wait()",
    "optionB" : "结束一个线程的通常做法是：thread. stop()",
    "type" : "1",
    "optionA" : "启动一个线程的方法是：thread. run()",
    "question" : "下列有关Thread的描述，哪个是正确的？"
  },
  {
    "ID" : "55b9d326e4b08f89c6185bcc",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "$number",
    "optionC" : "Intnum",
    "optionAnswer" : "A",
    "answer" : "Java命名约定全部小写，不得使用关键字、只有A符合。",
    "optionB" : "super",
    "type" : "1",
    "optionA" : "fieldname",
    "question" : "下列变量名的定义中，符合Java命名约定的是"
  },
  {
    "answer" : "（1）根据需要选择正确的集合类型。比如，如果指定了大小，我们会选用Array而非ArrayList。如果我们想根据插入顺序遍历一个Map，我们需要使用TreeMap。如果我们不想重复，我们应该使用Set。\r\r（2）一些集合类允许指定初始容量，所以如果我们能够估计到存储元素的数量，我们可以使用它，就避免了重新哈希或大小调整。\r\r（3）基于接口编程，而非基于实现编程，它允许我们后来轻易地改变实现。\r\r（4）总是使用类型安全的泛型，避免在运行时出现ClassCastException。\r\r（5）使用JDK提供的不可变类作为Map的key，可以避免自己实现hashCode()和equals()。\r\r（6）尽可能使用Collections工具类，或者获取只读、同步或空的集合，而非编写自己的实现。它将会提供代码重用性，它有着更好的稳定性和可维护性。",
    "ID" : "55f2e484e4b0152a611431b6",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "与Java集合框架相关的有哪些最好的实践？"
  },
  {
    "ID" : "55e59380e4b0152a610d3be4",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "封装性",
    "optionC" : "多态性",
    "optionAnswer" : "B",
    "answer" : "注意不包括",
    "optionB" : "消息传递",
    "type" : "1",
    "optionA" : "继承性",
    "question" : "（）面向对象程序设计语言不同于其他语言的主要特点不包括。"
  },
  {
    "ID" : "55e59380e4b0152a610d3be3",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "a.equals(s)",
    "optionC" : "b == c",
    "optionAnswer" : "C",
    "answer" : "答案选C",
    "optionB" : "s == a",
    "type" : "1",
    "optionA" : "a == b",
    "question" : "根据下面的程序代码，哪些选项的值返回true？public class Square {  \n    long width;  \n    public Square(long l) {   \n        width = l;  \n    }  \n    public static void main(String arg[]) {   \n        Square a, b, c;  \n        a = new Square(42L);   \n        b = new Square(42L);   \n        c = b;   \n        long s = 42L;  \n    } \n}"
  },
  {
    "answer" : "被锁定的对象可以调用wait( )方法，这将导致当前线程被阻塞并放弃该对象的互斥锁，即解除了wait( )方法的当前对象的锁定状态，其他的线程就有机会访问该对象。\n\nnotify使等待队列上的一个线程离开阻塞状态\n\nnotifyAll使等待队列上的所有线程离开阻塞状态",
    "ID" : "5602715fe4b043d0cb1d3a49",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "简述wait和notify,notifyAll的使用"
  },
  {
    "answer" : "Enumeration的速度是Iterator的两倍，也使用更少的内存。Enumeration是非常基础的，也满足了基础的需要。但是，与Enumeration相比，Iterator更加安全，因为当一个集合正在被遍历的时候，它会阻止其它线程去修改集合。\r迭代器取代了Java集合框架中的Enumeration。迭代器允许调用者从集合中移除元素，而Enumeration不能做到。为了使它的功能更加清晰，迭代器方法名已经经过改善。",
    "ID" : "55f2e483e4b0152a61143195",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "Enumeration和Iterator接口的区别？"
  },
  {
    "ID" : "55e5937fe4b0152a610d3bcc",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "double d=Math.cos（Math.toDegrees（42））",
    "optionC" : "double d=Math.cos（Math.toRadians（42））",
    "optionAnswer" : "C",
    "answer" : "计算余弦值使用Math类的cos()方法\ntoRadians()是将角度转换为弧度\ntoDegrees()是将弧度转换为角度",
    "optionB" : "double d=Math.cosine（42）",
    "type" : "1",
    "optionA" : "double d=Math.cos（42）",
    "question" : "下列哪个选项是正确计算42度（角度）的余弦值？"
  },
  {
    "ID" : "55e59381e4b0152a610d3c27",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "java还实现了真数组，避免了覆盖数据的可能",
    "optionC" : "java自己操纵内存减少了内存出错的可能性",
    "optionAnswer" : "B",
    "answer" : "跨平台不属于鲁棒性",
    "optionB" : "java能运行虚拟机实现跨平台",
    "type" : "1",
    "optionA" : "java能检查程序在变异和运行时的错误",
    "question" : "下列不属于java语言鲁棒性特点的是"
  },
  {
    "answer" : "第一--五局：分成5个组，可以得出5个组的第一名\n第六局：5个第一名一起跑，这样可以得出最快的那一匹。\n第七局：可能成为2，3名的再赛一次，包括最快组的2，3名，次快组的1，2名，第三快组的第1名。\n\n所以一共是7次",
    "ID" : "55f2e54fe4b0152a611434fb",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "25匹马赛跑，每次只能跑5匹马，最快能赛几次找出跑得最快的3匹马？赛跑不能计时，并假设每匹马的速度是恒定不变的。请给出答案并描述比赛过程。\n"
  },
  {
    "ID" : "55e6d765e4b0152a610de709",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "20",
    "optionC" : "15",
    "optionAnswer" : "C",
    "answer" : "substring实际是new，5字符\rstr3和4也都是new，每个5字符\r分别都会创建新的对象\r常量池是PermGen的\r因此应该是一共15字符",
    "optionB" : "10",
    "type" : "1",
    "optionA" : "5",
    "question" : "static String str0=\"0123456789\";\rstatic String str1=\"0123456789\";\rString str2=str1.substring(5);\rString str3=new String(str2);\rString str4=new String(str3.toCharArray());\rstr0=null;\r假定str0,...,str4后序代码都是只读引用。\rJava 7中，以上述代码为基础，在发生过一次FullGC后，上述代码在Heap空间（不包括PermGen）保留的字符数为（）"
  },
  {
    "answer" : "int Find_Second_Max(int data[],int n)\n{\n    if(n<2) return -1;\n    int max_num = max(data[0],data[1]);\n    int sec_num = min(data[0],data[1]);\n    for(int i=2;i<n;i++)\n    {\n        if(data[i]>=max_num);\n        {\n            sec_num = max_num;\n            max_num = data[i];\n        }\n        else if(data[i] > sec_num)\/\/排除等于情况\n            sec_num = data[i];\n    }\n    return sec_num;\n}",
    "ID" : "55f2e54fe4b0152a61143502",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "写一个函数找出一个整数数组中，第二大的数"
  },
  {
    "ID" : "55b5a91fe4b0ef2b575583f6",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "void",
    "optionC" : "private ",
    "optionAnswer" : "A",
    "answer" : "静态方法是使用公共内存空间的，就是说所有对象都可以直接引用，不需要创建对象再使用该方法。",
    "optionB" : "final",
    "type" : "1",
    "optionA" : "static",
    "question" : "在Java中用什么关键字修饰的方法可以直接通过类名来调用？（ )"
  },
  {
    "answer" : "–只创建一个对象\n\n–StringBuffer 对象的内容是可以被修改的\n\n–除了字符的长度之外，还有容量的概念\n\n–通过动态改变容量的大小，加速字符管理",
    "ID" : "5602715ee4b043d0cb1d3a21",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "为什么使用StringBuffer类？有什么功能和优点？"
  },
  {
    "ID" : "55e6d765e4b0152a610de70b",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "配置需要事务管理的bean的代理时，通过parent引用这个配置模板，代码如下：\r<bean id=\"petBiz\" parent=\"txProxyTemplate\">\r         <property name=\"target\" ref=\"petTarget\"\/>\r<\/bean>",
    "optionC" : "缺少sessionFactory属性的注入",
    "optionAnswer" : "C",
    "answer" : "spring提供的事务管理可以分为两类：编程式的和声明式的。\r编程式的，比较灵活，但是代码量大，存在重复的代码比较多；\r声明式的比编程式的更灵活.",
    "optionB" : "对get方法采用只读事务",
    "type" : "1",
    "optionA" : "定义了声明式事务的配置模板",
    "question" : "对下面Spring声明式事务的配置含义的说明错误的是（）\r<bean id=\"txProxyTemplate\" abstract=\"true\"\rclass=\r\"org.springframework.transaction.interceptor.TransactionProxyFactoryBean\">\r    <property name=\"transactionManager\" ref=\"myTransactionManager\" \/>\r<property name=\"transactionAttributes\">      \r <props>\r        <prop key=\"get*\">PROPAGATION_REQUIRED,readOnly<\/prop>\r         <prop key=\"*\">PROPAGATION_REQUIRED<\/prop>\r     <\/props>\r<\/property> \r<\/bean>"
  },
  {
    "ID" : "55e592e7e4b0152a610d3b02",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "(double)-9.0",
    "optionC" : "(long)-8",
    "optionAnswer" : "D",
    "answer" : "D  Math.floor(x) 返回小于等于x的最接近整数，类型为double",
    "optionB" : "(long)-9",
    "type" : "1",
    "optionA" : "(float)-8.0",
    "question" : "Math.floor(-8.5)=( )"
  },
  {
    "ID" : "55b9d326e4b08f89c6185bce",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "接口",
    "optionC" : "整型",
    "optionAnswer" : "C",
    "answer" : "复合数据类型包括数组、类和接口。",
    "optionB" : "数组",
    "type" : "1",
    "optionA" : "类",
    "question" : "下面所列类型中，不是复合数据类型的是"
  },
  {
    "answer" : "substring(参数1,参数2); 功能:取字符串中参数1到参数2的的所有字符; “String”.subString(0,1);\n\nreplace(参数1,参数2); 功能:用参数1中的值替换字符串中所有参数2的值 “String”.replace(ing,tt);\n\nequals( ); 功能:判断两个字符串是否相等 “String”.equals(“tt”);\n\ntrim( ); 　 功能:去掉字符串两边的空格 “String”.trim();\n\nindexof( ); 功能:查找字符串中参数所在位置,并返回字符串第一个出该参数的下标\n\n“String”.indexOf(“ing”);\n\nsplit( ); 功能:根据参数分割该字符串 “String”.split(“-”);",
    "ID" : "5602715ee4b043d0cb1d3a20",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "String的方法的功能和基本使用方法，请描述5个以上"
  },
  {
    "ID" : "55b5a91fe4b0ef2b575583f2",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : ".exe",
    "optionC" : ".html",
    "optionAnswer" : "B",
    "answer" : "Java文件经过JVM编译成字节码文件，即.class文件，将字节码文件在不同的操作系统中运行时，操作系统再将字节码文件编译成机器码文件。这就是Java跨平台。",
    "optionB" : ".class",
    "type" : "1",
    "optionA" : ".byte",
    "question" : "编译Java源程序文件将产生相应的字节码文件，这些字节码文件的扩展名为(  )"
  },
  {
    "ID" : "55e592e7e4b0152a610d3b2d",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "An exception is thrown at runtime.",
    "optionC" : "Compilation fails.",
    "optionAnswer" : "A",
    "answer" : "答案:A；for循环执行过程，先执行初始化foo('A'),在执行条件foo('B'),满足条件执行foo('D'),判定是否满足下次执行条件foo('C');第二次初始化foo('A')语句不会再执行",
    "optionB" : "ABCDABCD",
    "type" : "1",
    "optionA" : "ABDCBDCB",
    "question" : "public class Test\n{\n    static boolean foo(char c)\n    {\n        System.out.print(c);\n        return true;\n    }\n    public static void main( String[] argv )\n    {\n        int i = 0;\n        for ( foo('A'); foo('B') && (i < 2); foo('C'))\n        {\n            i++ ;\n            foo('D');\n        }\n    }\n}\nWhat is the result?\n"
  },
  {
    "ID" : "55e59382e4b0152a610d3c59",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "一个类可以实现多个接口，但只能继承一个抽象类。",
    "optionC" : "抽象类中不可以包含静态方法，接口中可以包含静态方法",
    "optionAnswer" : "C",
    "answer" : "含有abstract修饰符的class即为抽象类，abstract类不能创建的实例对象。含有abstract方法的类必须定义为abstract class，abstract class类中的方法不必是抽象的。abstract class类中定义抽象方法必须在具体(Concrete)子类中实现，所以，不能有抽象构造方法或抽象静态方法。如果的子类没有实现抽象父类中的所有抽象方法，那么子类也必须定义为abstract类型。  \n接口（interface）可以说成是抽象类的一种特例，接口中的所有方法都必须是抽象的。接口中的方法定义默认为public abstract类型，接口中的成员变量类型默认为public static final。  ",
    "optionB" : "抽象类中可以有普通成员变量，接口中没有普通成员变量",
    "type" : "1",
    "optionA" : "抽象类可以有构造方法，接口中不能有构造方法",
    "question" : "abstract class和interface有什么区别，其中错误的是"
  },
  {
    "answer" : "你的第一感觉或许是，公司应该雇用 100 多人，或者 200 多人吧。答案或许会让你大吃一惊：公司应该雇用 365 个人。注意，雇用 365 个人并不意味着全体员工全年的总工作时间为 0 ，因为 365 个人的生日都是随机的，恰好每天都有一个人过生日的概率极小极小。下面我们就来证明，这个问题的最优解就是 365 人。\n由于期望值满足线性关系（即对于随机变量 X 和 Y 有 E(X) + E(Y) = E(X+Y) ），因此我们只需要让每一天员工总工作时间的期望值最大就可以了。假设公司里有 n 个人，那么在特定的一天里，没有人过生日的概率是 (364\/365)n 。因此，这一天的期望总工作时间就是 n · (364\/365)n 个工作日。为了考察函数 n · (364\/365)n 的增减性，我们来看一下 ((n+1) · (364\/365)n+1) \/ (n · (364\/365)n) 的值，它等于 (364 · (n+1)) \/ (365 · n) 。如果分子比分母小，解得 n > 364 。可见，要到 n = 365 以后，函数才是递减的。\n答案：365",
    "ID" : "55f2e54fe4b0152a611434ec",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "某公司有这么一个规定：只要有一个员工过生日，当天所有员工全部放假一天。但在其余时候，所有员工都没有假期，必须正常上班。假设一年有365天，每个员工的生日都概率均等地分布在这365天里。那么，这个公司需要雇用多少员工，才能让公司一年内所有员工的总工作时间期望值最大？"
  },
  {
    "ID" : "55b9d326e4b08f89c6185bbb",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "jre",
    "optionC" : "lib",
    "optionAnswer" : "D",
    "answer" : "本题考查JDK目录结构。JDK包含如下目录：\n(1)bin目录，包含有编译器、解释器和许多工具\n(2)demo目录，包含各种演示例子\n(3)include目录，包含Win子目录，都是本地方法文件\n(4)jre目录，是Java程序运行环境的根目录\n(5)lib目录，包含Java库文件．\n经过上述分析可知，本题的正确答案是选项D。",
    "optionB" : "demo",
    "type" : "1",
    "optionA" : "bin",
    "question" : "在JDK目录中，Java程序运行环境的根目录是"
  },
  {
    "ID" : "55e592e7e4b0152a610d3b22",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "一个类只能继承一个抽象类",
    "optionC" : "可以用抽象类直接去实例化创建对象",
    "optionAnswer" : "D",
    "answer" : "如果一个类的的父类是抽象类，那么，此类要么也是抽象类，要么就实现父类的所有抽象方法",
    "optionB" : "接口和抽象类是同一回事",
    "type" : "1",
    "optionA" : "某个抽象类的父类是抽象类，则这个子类必须重载父类的所有抽象方法",
    "question" : "下列关于java抽象类的说法哪个正确"
  },
  {
    "ID" : "55e6d766e4b0152a610de723",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "2false",
    "optionC" : "1false",
    "optionAnswer" : "A",
    "answer" : "基本类型作为形式参数传递不会改变实际参数，引用类型作为形式参数传递会改变实际参数，但是JDK1.5以后，对基本类型的包装类型（int-Integer,double-Double）提供了自动拆装箱的功能，把Integer类型作为参数传递，会自动拆箱为基本类型，不会改变实际参数的值",
    "optionB" : "2true",
    "type" : "1",
    "optionA" : "1true",
    "question" : "以下Java程序运行的结构是:\rpublic class Tester{\rpublic static void main(String[] args){\r   Integer var1=new Integer(1);\r   Integer var2=var1;\r   doSomething(var2);\r   System.out.print(var1.intValue());\r   System.out.print(var1==var2);\r}\rpublic static void doSomething(Integer integer){\r    integer=new Integer(2);\r    }\r}"
  },
  {
    "ID" : "55b227dee4b0bb7ded0a8c91",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : " 程序通过编译，输出结果为：x=102",
    "optionC" : "程序通过编译，输出结果为：x=103",
    "optionAnswer" : "D",
    "answer" : "不写在方法里面的变量叫做成员变量，也叫全局变量，定义了成员变量后，在同一个类里的每个方法都可以使用，而不局限在单个方法里，你的这个成员变量是用static修饰的，所以它是一个类变量，类变量资源共享，所以在第一次实例化后x+1后x=101，第二次实例化hs2.x++就是101+1=102,之后的hs1又实例化一次做++操作x=103，最后做--操作，最终结果为102。",
    "optionB" : "10行不能通过编译，因为x是私有静态变量",
    "type" : "1",
    "optionA" : "5行不能通过编译，因为引用了私有静态变量",
    "question" : "关于以下程序代码的说明正确的是（   ）\n1．class  HasStatic{\n2．    private  static  int  x=100；\n3．    public  static  void  main(String  args[  ]){\n4．        HasStatic  hs1=new  HasStatic(  );\n5．        hs1.x++;\n6．        HasStatic  hs2=new  HasStatic(  );\n7．        hs2.x++;\n8．        hs1=new  HasStatic( );\n9．        hs1.x++;\n10．       HasStatic.x- -;\n11．       System.out.println(“x=”+x);\n12．    }\n13． }\n"
  },
  {
    "answer" : "DQFXAPBNMYCW",
    "ID" : "55f2e54fe4b0152a611434ed",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "设有字母序列{Q,D,F,X,A,P,N,B,Y,M,C,W}，请写出按二路归并方法对该序列进行一趟扫描后的结果为 1 。\n(输出结果请按照以下格式：ABCDEFG，字母之间没有逗号)"
  },
  {
    "ID" : "55b5a91fe4b0ef2b575583f3",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "2与2",
    "optionC" : "1与2 ",
    "optionAnswer" : "D",
    "answer" : "++i是先计算i的值，然后再使用这个值，而i++是先使用i，然后再计算i++。这里是先++i得到i=2，然后将2赋给j，所以i和j都是2。",
    "optionB" : "2与1",
    "type" : "1",
    "optionA" : "1与1",
    "question" : "执行语句int i = 1, j = ++i; 后i与j的值分别为（ )"
  },
  {
    "ID" : "55e592e7e4b0152a610d3b20",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "System.out.println(i02== i04);",
    "optionC" : "System.out.println(i03== i04);",
    "optionAnswer" : "C",
    "answer" : "答案：C\n思路：i02为基本数据类型，有基本数据类型的都是比较值，所以A、D为TRUE。i01和i03在-128--127之间分配机制是一样的，所以i01==i03。i03和i04分配内存的机制是不一样的，所以为false。",
    "optionB" : "System.out.println(i01== i03);",
    "type" : "1",
    "optionA" : "System.out.println(i01== i02);",
    "question" : "在jdk1.5的环境下，有如下4条语句：Integer i01 = 59;\nint i02 = 59;\nInteger i03 =Integer.valueOf(59);\nInteger i04 = new Integer(59)。\n以下输出结果为false的是："
  },
  {
    "ID" : "55e592e6e4b0152a610d3add",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "事件和字段",
    "optionC" : "索引器和字段",
    "optionAnswer" : "B",
    "answer" : "在接口中可以声明方法，属性信息和属性，但不能实例化方法，不能有字段。",
    "optionB" : "方法、属性信息、属性",
    "type" : "1",
    "optionA" : "方法、属性、索引器和事件",
    "question" : "接口是一种引用类型，在接口中可以声明（ ），但不可以声明公有的域或私有的成员变量。"
  },
  {
    "answer" : "假设每个网页有价值为wi.\nwi的值为浮点数,通过堆实现.\nwi为整数,则通过桶式排序记录每个价值对应的网页数量",
    "ID" : "55f2e54fe4b0152a61143504",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "百度Spider如何在不超过抓取限额的情况下使得抓取的网页价值之和最大，要求一个最佳抓取方案。请详细描述你的算法思路（可以用伪代码），并分析时间复杂度和空间复杂度。"
  },
  {
    "answer" : "1和2 先过。1返回，5和10先过，2返回，1和2一起过。一共时间=2+1+10+2+2=17分钟",
    "ID" : "55f2e54fe4b0152a611434fa",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "有ABCD四个人要在夜里过一座桥，他们通过这座桥分别需要耗时1、2、5、10分钟，现在只有一支手电，过桥时必须带有手电，并且同时最多只能两个人一起过桥。请问如何安排能够让四个人尽快都过桥。"
  },
  {
    "ID" : "55b5a91fe4b0ef2b575583e9",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "代码得到编译，但捕获到 NullPointException异常",
    "optionC" : "由于String s没有初始化，代码不能编译通过",
    "optionAnswer" : "C",
    "answer" : "Java中所有定义的基本类型或对象都必须初始化才能输出值",
    "optionB" : "代码得到编译，并输出“s=null”",
    "type" : "1",
    "optionA" : "代码得到编译，并输出“s=”",
    "question" : " 阅读以下代码：\nimport java.io.*;\nimport java.util.*;\npublic class foo{\n    public static void main (String[] args){\n        String s;\n        System.out.println(\"s=\" + s);\n    }\n}\n\n输出结果应该是：（）\n"
  },
  {
    "answer" : "垃圾回收不会发生在永久代，如果永久代满了或者是超过了临界值，会触发完全垃圾回收(Full GC)。如果你仔细查看垃圾收集器的输出信息，就会发现永久代也是被回收的。这就是为什么正确的永久代大小对避免Full GC是非常重要的原因。",
    "ID" : "024bdfbebdf011e6a0e100163e0021c8",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "JVM的永久代中会发生垃圾回收么？"
  },
  {
    "answer" : "这段代码是在固定字符串里面搜索字符 ‘d’\n用C语言实现if (strstr (“Hello, World!”, “d”) != NULL))\n    exitProcess(1);\nexitProcess (0);",
    "ID" : "55f2e54fe4b0152a611434d7",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "以下是一段汇编代码，请用C语言实现相同功能。.data\nSourceStringdb \"Hello, World!\",0\n.code\nstart:\ncld\nxoreax, eax\nmovedi, offset SourceString\nmov al, 'd'\nmovecx, 13\nrepnescas\njz wow\ninvokeExitProcess, 0\nwow:\ninvokeExitProcess, 1\nend start\n"
  },
  {
    "ID" : "55b227dfe4b0bb7ded0a8cb2",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "浮点型；",
    "optionC" : "字符型； ",
    "optionAnswer" : "B",
    "answer" : "java简单数据类型有float、double、byte、short、int、long、char、boolean。",
    "optionB" : "数组； ",
    "type" : "1",
    "optionA" : "整数型；",
    "question" : "下列选项中，哪一项不属于JAVA语言的简单数据类型：（）"
  },
  {
    "answer" : "UnsupportedOperationException是用于表明操作不支持的异常。在JDK类中已被大量运用，在集合框架java.util.Collections.UnmodifiableCollection将会在所有add和remove操作中抛出这个异常。",
    "ID" : "55f2e483e4b0152a6114319e",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "UnsupportedOperationException是什么？"
  },
  {
    "ID" : "55b5a91fe4b0ef2b575583e8",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "只能被同一个包中的类访问",
    "optionC" : "只能被该类自身所访问和修改",
    "optionAnswer" : "C",
    "answer" : "对于private修饰的成员变量来说，只允许同一个类访问和修改，同一个包、不同包中的子类、不同包中的非子类都是不允许访问和修改的。",
    "optionB" : "可以被两种类访问和引用：该类本身、该类的所有子类",
    "type" : "1",
    "optionA" : "可以被三种类所引用：该类自身、与它在同一个包中的其他类、在其他包中的该类的子类",
    "question" : "关于被私有访问控制符private修饰的成员变量，以下说法正确的是（ )"
  },
  {
    "ID" : "55e592e7e4b0152a610d3b03",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "prints:3",
    "optionC" : "prints:2",
    "optionAnswer" : "D",
    "answer" : "D.1.JVM加载class文件时，就会执行静态代码块，静态代码块中初始化了一个变量x并初始化为5，由于该变量是个局部变量，静态代码快执行完后变被释放。\n2.申明了两个静态成员变量x，y，并没有赋初值，会有默认出值，int类型为0，\n3.执行x--操作，变量单独进行自增或自减操作x--和--x的效果一样，此时x变为了-1\n4.调用MyMethod()方法，在该方法中对x和y进行计算，由于x和y都是静态成员变量，所以在整个类的生命周期内的x和y都是同一个\n5.y=x++ + ++x可以看成是y=(x++)+(++x)，当++或者--和其它变量进行运算时，x++表示先运算，再自增，++x表示先自增再参与运算\n所以就时x为-1参与运算，然后自增，x此时为0，++x后x为1，然后参与运算，那么y=-1+1就为0，此时x为1\n6.执行并打印x+y + ++x运算方式和第5步相同，最后计算结果就为3.\n",
    "optionB" : "prints:1",
    "type" : "1",
    "optionA" : "compiletime error",
    "question" : "What will happen when you attempt to compile and run the following code?public class test{\nstatic{\n   int x=5;\n}\nstatic int x,y;\npublic static void main(String args[]){\n   x--;\n   myMethod( );\n   System.out.println(x+y+ ++x);\n}\npublic static void myMethod( ){\n  y=x++ + ++x;\n }\n}"
  },
  {
    "ID" : "55b5a91fe4b0ef2b575583f8",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "6",
    "optionC" : "3",
    "optionAnswer" : "A",
    "answer" : "break是结束整个循环体，continue是结束单次循环。",
    "optionB" : "1",
    "type" : "1",
    "optionA" : "0",
    "question" : "有如下程序段:\nint total = 0;\nfor ( int i = 0; i < 4; i++ ){\n  if ( i == 1) continue;\n  if ( i == 2) break;                           \n  total += i;\n}\n则执行完该程序段后total的值为：（ )\n"
  },
  {
    "answer" : "static变量在Java中是属于类的，它在所有的实例中的值是一样的。当类被Java虚拟机载入的时候，会对static变量进行初始化。如果你的代码尝试不用实例来访问非static的变量，编译器会报错，因为这些变量还没有被创建出来，还没有跟任何实例关联上。",
    "ID" : "8baa4678bdec11e69a7900163e0021c8",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "是否可以在static环境中访问非static变量？"
  },
  {
    "ID" : "55e59380e4b0152a610d3bdc",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "AB都是",
    "optionC" : "servlet.http",
    "optionAnswer" : "D",
    "answer" : "javax是Sun公司提供的一个扩展包，算是对原?JAVA?包的一些优化处理，现在已经有很多都是基于JAVAX的程序开发而不是java包，就像?netbeans?里的图形处理都是使用jabax包",
    "optionB" : "javax.servlet",
    "type" : "1",
    "optionA" : "javax.servlet.http",
    "question" : "常用的servlet包的名称是？"
  },
  {
    "ID" : "55b5a920e4b0ef2b57558402",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "行9",
    "optionC" : "行6",
    "optionAnswer" : "D",
    "answer" : "构造方法Test中需要参数，行9中实例化t1时没有传递参数。",
    "optionB" : "行4 ",
    "type" : "1",
    "optionA" : "行1",
    "question" : " 给出下面代码段, 哪行将引起一个编译时错误？（   ）\n1) public class Test { \n2)   int n = 0; \n3)   int m = 0; \n4)   public Test(int a) { m=a; } \n5)   public static void main(String arg[]) { \n6)     Test t1,t2; \n7)     int j,k; \n8)     j=3; k=5; \n9)     t1=new Test(); \n10)    t2=new Test(k); \n11)  } \n12) }\n"
  },
  {
    "answer" : "ArrayList和LinkedList都实现了List接口，他们有以下的不同点： 1、ArrayList是基于索引的数据接口，它的底层是数组。它可以以O(1)时间复杂度对元素进行随机访问。与此对应，LinkedList是以元素列表的形式存储它的数据，每一个元素都和它的前一个和后一个元素链接在一起，在这种情况下，查找某个元素的时间复杂度是O(n)。 2、相对于ArrayList，LinkedList的插入，添加，删除操作速度更快，因为当元素被添加到集合任意位置的时候，不需要像数组那样重新计算大小或者是更新索引。 3、LinkedList比ArrayList更占内存，因为LinkedList为每一个节点存储了两个引用，一个指向前一个元素，一个指向下一个元素。",
    "ID" : "bdda297cbdee11e6a0e100163e0021c8",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "ArrayList和LinkedList有什么区别？"
  },
  {
    "ID" : "55e592e7e4b0152a610d3aee",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "JAF：JAVA安全认证框架。提供一些安全控制方面的框架。",
    "optionC" : "JMS：JAVA消息服务。主要实现各个应用程序之间的通讯。包括点对点和广播。",
    "optionAnswer" : "B",
    "answer" : "B. JNDI(Java Naming and Directory Interface)Java命名和目录接口, JNDI提供统一的客户端 API，通过不同的访问提供者接口JNDI服务供应接口(SPI)的实现，由管理者将JNDI API映射为特定的命名服务和目录系统，使得Java应用程序 可以和这些命名服务和目录服务 之间进行交互。",
    "optionB" : "JNDI：JAVA事务服务。提供各种分布式事务服务。应用程序只需调用其提供的接口即可。",
    "type" : "1",
    "optionA" : "EJB容器：Enterprise java bean 容器",
    "question" : "以下J2EE中常用的名词解释错误的是？"
  },
  {
    "answer" : "这道题想等概率产生0、1，就需要找到两个独立事件，这个两个独立事件发生的概率相同，已知随机数生成器可以以p产生0，以1-p产生1，所以有下面4个独立事件，用随机数生成器产生00，01，10，11，各自的概率分别为p*p，p*(1-p)，(1-p)*p，(1-p)*(1-p)可以发现生成01，10的概率相同，因此只保留这两种情况敏感词舍弃，然后将01映射为0，10映射为1，则等概率0，1随机数生成器可得到",
    "ID" : "55f2e54fe4b0152a61143509",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "有一个随机数发生器，以概率P产生0，概率(1-P)产生1，请问能否利用这个随机数发生器，构造出新的发生器，以1\/2的概率产生0和1。请写明结论及推理过程。"
  },
  {
    "answer" : "静态变量是被static修饰符修饰的变量，也称为类变量，它属于类，不属于类的任何一个对象，一个类不管创建多少个对象，静态变量在内存中有且仅有一个拷贝；实例变量必须依存于某一实例，需要先创建对象然后通过对象才能访问到它。静态变量可以实现让多个对象共享内存。",
    "ID" : "73ed7608bdf211e69a7900163e0021c8",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "阐述静态变量和实例变量的区别。 "
  },
  {
    "ID" : "55e592e6e4b0152a610d3ac1",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "10",
    "optionC" : "4",
    "optionAnswer" : "D",
    "answer" : "D.switch结构中没有break;switch case 方法中若，没有break跳出执行则程序就会从第一个匹配上的case一直执行到整个结构结束。",
    "optionB" : "2",
    "type" : "1",
    "optionA" : "0",
    "question" : "下面的方法，当输入为2的时候返回值是多少?\npublic static int getValue(int i) {\n        int result = 0;\n        switch (i) {\n        case 1:\n            result = result + i;\n        case 2:\n            result = result + i * 2;\n        case 3:\n            result = result + i * 3;\n        }\n        return result;\n}"
  },
  {
    "ID" : "55e592e7e4b0152a610d3af1",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "都不输出",
    "optionC" : "pingpong和pongping都有可能",
    "optionAnswer" : "B",
    "answer" : "B.这里需要注意Thread的start和run方法\n用start方法才能真正启动线程，此时线程会处于就绪状态，一旦得到时间片，则会调用线程的run方法进入运行状态。\n而run方法只是普通方法，如果直接调用run方法，程序只会按照顺序执行主线程这一个线程。",
    "optionB" : "pongping",
    "type" : "1",
    "optionA" : "pingpong",
    "question" : "下列程序的运行结果public static void main(String args[]) {\n   Thread t = new Thread() {\n            public void run() {\n                pong();\n            }\n        };\n        t.run();\n        System.out.print(\"ping\");\n    }\n    static void pong() {\n        System.out.print(\"pong\");\n    }"
  },
  {
    "answer" : "1．对于每盏灯，拉动的次数是奇数时，灯就是亮着的，拉动的次数是偶数时，灯就是关着的。\n2．每盏灯拉动的次数与它的编号所含约数的个数有关，它的编号有几个约数，这盏灯就被拉动几次。 \n3．1——100这100个数中有哪几个数，约数的个数是奇数。我们知道一个数的约数都是成对出现的，只有完全平方数约数的个数才是奇数个。 所以这100盏灯中有10盏灯是亮着的。 它们的编号分别是： 1、4、9、16、25、36、49、64、81、100。",
    "ID" : "55f2e54fe4b0152a611434e8",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "现在有100个灯泡，每个灯泡都是关着的，第一趟把所有的灯泡灯泡打开，第二趟把偶数位的灯泡制反（也就是开了的关掉，关了的打开），第三趟让第3,6,9....的灯泡制反.......第100趟让第100个灯泡制反，问经过一百趟以后有多少灯泡亮着。"
  },
  {
    "answer" : "都不能。抽象方法需要子类重写，而静态的方法是无法被重写的，因此二者是矛盾的。本地方法是由本地代码（如C代码）实现的方法，而抽象方法是没有实现的，也是矛盾的。synchronized和方法的实现细节有关，抽象方法不涉及实现细节，因此也是相互矛盾的。",
    "ID" : "f4c8758abdf111e6a0e100163e0021c8",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "抽象的（abstract）方法是否可同时是静态的（static）,是否可同时是本地方法（native），是否可同时被synchronized修饰？ "
  },
  {
    "ID" : "55e592e7e4b0152a610d3aed",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "内存回收线程不能释放内存对象",
    "optionC" : "内存回收线程负责释放无用内存",
    "optionAnswer" : "C",
    "answer" : "答案：C A，java的内存回收是自动的，Gc在后台运行，不需要用户手动操作B，java中不允许使用指针 D，内存回收线程可以释放无用的对象内存",
    "optionB" : "Java程序允许用户使用指针来释放内存",
    "type" : "1",
    "optionA" : "Java程序要求用户必须手工创建一个线程来释放内存",
    "question" : "关于Java语言的内存回收机制，下列选项中最正确的一项是"
  },
  {
    "answer" : "1. 指针是一个实体，而引用仅是个别名；\n2. 引用使用时无需解引用(*)，指针需要解引用；\n3. 引用只能在定义时被初始化一次，之后不可变；指针可变；\n4. 引用没有 const，指针有 const；\n5. 引用不能为空，指针可以为空；\n6. “sizeof 引用”得到的是所指向的变量(对象)的大小，而“sizeof 指针”得到的是指针本身(所指向的变量或对象的地址)的大小；\n7. 指针和引用的自增(++)运算意义不一样；\n8.从内存分配上看：程序为指针变量分配内存区域，而引用不需要分配内存区域。",
    "ID" : "55f2e550e4b0152a6114351a",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : " 引用与指针有什么区别？"
  },
  {
    "answer" : "接口是抽象方法和常量值的定义的集合。从本质上讲，接口是一种特殊的抽象类，这种抽象类中只包含常量和方法的定义，而没有变量和方法的实现。\n\npublic interface Tt {\n\npublic void outPut( );\n\npublic int tt( );\n\n}",
    "ID" : "5602715ee4b043d0cb1d3a25",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "什么是接口？接口的定义规则？"
  },
  {
    "ID" : "55e59381e4b0152a610d3c1b",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "protected",
    "optionC" : "public",
    "optionAnswer" : "B",
    "answer" : "不添加修饰符的话就是 package 变量。",
    "optionB" : "无修饰符",
    "type" : "1",
    "optionA" : "private",
    "question" : "下列哪个修饰符可以使在一个类中定义的成员变量只能被同一包中的类访问？"
  },
  {
    "ID" : "55e592e7e4b0152a610d3b10",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "HashMap实现Map接口，它允许任何类型的键和值对象，并允许将null用作键或值",
    "optionC" : "添加和删除元素时，ArrayList的表现更佳",
    "optionAnswer" : "C",
    "answer" : "A正确，因为ArrayList和LinkedList都实现List接口。\nB正确，ArrayList底层是数组，所以查询快，增删慢；而LinkedList底层是链表，查询慢，增删快。\nC错误，见B解析。\nD正确，描述正确，有一个Hashtable类，是不允许null作键和值的。",
    "optionB" : "ArrayList的访问速度比LinkedList快",
    "type" : "1",
    "optionA" : "ArrayList和LinkedList均实现了List接口",
    "question" : "Java中的集合类包括ArrayList、LinkedList、HashMap等类，下列关于集合类描述错误的是"
  },
  {
    "answer" : "翻手算法：\n设置有个函数为倒序排列：void Rorder(char *pF,char *pE);void Rorder(char *pF, char *pE)\n{\n    char temp;\n    while (pF <= pE)\n    {\n        temp = *pF;\n        *pF = *pE;\n        *pE = temp;\n    }\n}\n \nvoid *pszStringRotate(char *pszString, int nCharsRotate)\n{\n    char *pR = pszString;\n    int n = 0;\n    while (pszString + n++ ！ = ‘\\n’); \/\/得到字符串长度\n    if (n < nCharsRotate) return pR; \/\/入口参数检测\n \n    Rorder(pszString, pszString + nCharsRotate ); \/\/C B A\n    pszString = pR;\/\/归位\n    Rorder( pszString + nCharsRotate, pszString + n - 1); \/\/GFED\n    pszString = pR;\n    Rorder(pszString, pszString + n - 1); \/\/DEFGABC\n    return pR;\n}大致过程如下：\nABCDEFG\n第一步：局部翻转\nABC DEFG == = 》 CBA GFED\n第二步：整体翻转\nCBA GFED    == = 》 DEFGABC\n",
    "ID" : "55f2e54fe4b0152a611434ea",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "字符串左移:void *pszStringRotate(char *pszString, intnCharsRotate)比如ABCDEFG，移3位变DEFGABC，要求空间复杂度O（1），时间复杂度O（n）。"
  },
  {
    "answer" : "Java中的方法重载发生在同一个类里面两个或者是多个方法的方法名相同但是参数不同的情况。与此相对，方法重写是说子类重新定义了父类的方法。方法重写必须有相同的方法名，参数列表和返回类型。重写者可能不会限制它所重写的方法的访问。",
    "ID" : "fb93dbacbdec11e69a7900163e0021c8",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "Java中的方法重写(Overriding)和方法重载(Overloading)是什么意思？"
  },
  {
    "ID" : "55e592e7e4b0152a610d3b28",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "能被Appletviewer成功运行的java class文件必须有main()方法",
    "optionC" : "Appletviewer.exe可利用jar选项运行.jar文件",
    "optionAnswer" : "A",
    "answer" : "B选项中J2SDK是编程工具，不是API.C选项中 Appletviewer.exe 就是用来解释执行java applet应用程序的,简单理解就是没有main函数的继承applet类的java类。D选项中 能被Appletviewer成功运行的java class文件没有main()方法",
    "optionB" : "J2SDK就是Java API",
    "type" : "1",
    "optionA" : "能被java.exe成功运行的java class文件必须有main()方法",
    "question" : "下列说法错误的有（ ）"
  },
  {
    "ID" : "55b227dee4b0bb7ded0a8ca8",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "Java Swing",
    "optionC" : "Servlet                        ",
    "optionAnswer" : "A",
    "answer" : "JavaScript是Netscape公司的产品，其目的是为了扩展Netscape Navigator功能而开发的一种可以嵌入Web页面中的基于对象和事件驱动的解释性语言, 它的前身是Live Script。一般认为，当时 Netscape 之所以将 LiveScript 命名为 JavaScript，是因为 Java 是当时最流行的编程语言，带有 \"Java\" 的名字有助于这门新生语言的传播。",
    "optionB" : "Applet",
    "type" : "1",
    "optionA" : "JavaScript                     ",
    "question" : "下面这些类型的应用，那个不使用Java语言来编写？ （ ）"
  },
  {
    "ID" : "55e59381e4b0152a610d3c15",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "Properties",
    "optionC" : "StringBuffer",
    "optionAnswer" : "B",
    "answer" : "A，Vector相当于一个线程安全的ListB，Arraylist是非线程安全的，其对应的线程安全类是VectorC，StringBuffer是线程安全的，相当于一个线程安全的StringBuilderD，Properties实现了Map接口，是线程安全的",
    "optionB" : "ArrayList",
    "type" : "1",
    "optionA" : "Vector",
    "question" : "以下哪些类是非线程安全的（）"
  },
  {
    "ID" : "55e6d765e4b0152a610de70a",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "以上都不正确",
    "optionC" : "当前类 当前类的父类",
    "optionAnswer" : "C",
    "answer" : "this代表当前对象，也就是当前类的对象的引用\rsuper代表其父类对象",
    "optionB" : "当前类的父类 当前类",
    "type" : "1",
    "optionA" : "当前类 当前类",
    "question" : "this代表了()的对象引用,super表示的是当前对象的()对象?"
  },
  {
    "answer" : "RW表示文件时可读写的\n\n读：\n\ntry{\n\nRandomAccessFile f = new RandomAccessFile(“test.txt”, “rw”);\n\nlong len = 0L;\n\nlong allLen = f.length();\n\nint i = 0;\n\nwhile (len < allLen) {\n\nString s = f.readLine();\n\nif (i > 0) {\n\ncol.add(s);\n\n}\n\ni++;\n\n\/\/游标\n\nlen = f.getFilePointer();\n\n}\n\n}catch(Exception err){\n\nerr.printStackTrace();\n\n}\n\n \n\n写：\n\n \n\ntry{\n\nRandomAccessFile f = new RandomAccessFile(“test.txt”, “rw”);\n\nStringBuffer buffer = new StringBuffer(“\\n”);\n\nIterator it = col.iterator();\n\nwhile (it.hasNext()) {\n\nbuffer.append(it.next() + “\\n”);\n\n}\n\nf.writeUTF(buffer.toString());\n\n}catch(Exception err){\n\nerr.printStackTrace();\n\n}\n",
    "ID" : "5602715fe4b043d0cb1d3a44",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "代码示例：如何使用随机文件读写类来读写文件内容"
  },
  {
    "ID" : "55e592e6e4b0152a610d3ab4",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "Set",
    "optionC" : "Iterator",
    "optionAnswer" : "C",
    "answer" : "A，List接口的定义为public interface List<E>extends Collection<E>   B，Vector定义为public class Vector<E>extends AbstractList<E>implements List<E>, RandomAccess, Cloneable, Serializable    Vector实现了List接口自然实现了Collection接口   C,Iterator接口未实现Collection接口  D，\npublic interface Set<E>extends Collection<E>\nSet接口继承自Collection接口",
    "optionB" : "vector",
    "type" : "1",
    "optionA" : "List",
    "question" : "没有实现或继承了collection接口的是（）"
  },
  {
    "answer" : "不对，如果两个对象x和y满足x.equals(y) == true，它们的哈希码（hash code）应当相同。Java对于eqauls方法和hashCode方法是这样规定的：(1)如果两个对象相同（equals方法返回true），那么它们的hashCode值一定要相同；(2)如果两个对象的hashCode相同，它们并不一定相同。当然，你未必要按照要求去做，但是如果你违背了上述原则就会发现在使用容器时，相同的对象可以出现在Set集合中，同时增加新元素的效率会大大下降（对于使用哈希存储的系统，如果哈希码频繁的冲突将会造成存取性能急剧下降）。",
    "ID" : "827af562bdf011e6a0e100163e0021c8",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "两个对象值相同(x.equals(y) == true)，但却可有不同的hash code，这句话对不对？ "
  },
  {
    "ID" : "55b9d326e4b08f89c6185bca",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "Throwable类分为Error和Exception两子类",
    "optionC" : "Java语言中的类库中已定义有许多异常类可利用",
    "optionAnswer" : "A",
    "answer" : "一个方法中为某种类型的异常对象提供对应的处理时，调用该方法就可捕获这种异常，也就是说当异常已被定义时，必须通过try-catch-finally语句处理它。",
    "optionB" : "异常对象用new来创建",
    "type" : "1",
    "optionA" : "捕获异常在调用方法时用throw子句捕获并处理",
    "question" : "下列说法中错误的是"
  },
  {
    "answer" : "用栈来出现，凡是左括号就压栈，凡是右括号就出栈，最后如果栈为空就匹配正确",
    "ID" : "55f2e54fe4b0152a61143503",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : " 判断一个括号字符串是否匹配正确，如果括号有多种，怎么做？如（（[]））正确，[[(()错误。"
  },
  {
    "answer" : "优先选用接口，尽量少用抽象类\n\n在下列情况下选择抽象类：需要定义子类的行为，又要为子类提供共性的功能。",
    "ID" : "5602715ee4b043d0cb1d3a2b",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "如何选择接口和抽象类？为什么？"
  },
  {
    "ID" : "55b9d327e4b08f89c6185bdf",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "数据库厂家的连接协议",
    "optionC" : "数据库厂家驱动程序",
    "optionAnswer" : "B",
    "answer" : "ODBC，开放数据库联接(Open DatebaseConnectivity)，它是用C语言定义的。由于J2EE要求与Java绑定，因此规定使用JDBC，Java数据库连接(JavaDataBaseConnecttvity)，作为Java与数据库连接的技术。",
    "optionB" : "Java数据库连接",
    "type" : "1",
    "optionA" : "开放数据库联接",
    "question" : "在Java中，与数据库连接的技术是( )。"
  },
  {
    "answer" : "网络号和主机号",
    "ID" : "55f2e550e4b0152a61143522",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : " IP地址的编码分为哪俩部分？"
  },
  {
    "answer" : "HashSet是由一个hash表来实现的，因此，它的元素是无序的。add()，remove()，contains()方法的时间复杂度是O(1)。  另一方面，TreeSet是由一个树形的结构来实现的，它里面的元素是有序的。因此，add()，remove()，contains()方法的时间复杂度是O(logn)。",
    "ID" : "6e8ba660bdef11e69a7900163e0021c8",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "HashSet和TreeSet有什么区别？"
  },
  {
    "ID" : "55e58d70e4b0152a610d39db",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "调用start方法后，一旦得到cpu时间片，就开始执行run()方法。",
    "optionC" : "run方法是thread的一个普通方法调用。",
    "optionAnswer" : "B",
    "answer" : "通过调用Thread类的start()方法来启动一个线程，这时此线程是处于就绪状态，并没有运行。\r获得CPU使用权才会执行。",
    "optionB" : "他们都可以实现了多线程运行。",
    "type" : "1",
    "optionA" : "通过调用Thread类的start()方法来启动一个线程，这时此线程是处于就绪状态，并没有运行。",
    "question" : "java Thread中，run方法和start方法的区别，下面说法错误的是？"
  },
  {
    "ID" : "55b5a91fe4b0ef2b575583fa",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : " abstract  void  method( )",
    "optionC" : " final  void  method( )",
    "optionAnswer" : "A",
    "answer" : "静态方法是使用公共内存空间的，就是说所有对象都可以直接引用，不需要创建对象再使用该方法。",
    "optionB" : " public  void  method( )",
    "type" : "1",
    "optionA" : "static  void  method( ) ",
    "question" : " 为AB类的一个无形式参数无返回值的方法method书写方法头，使得使用类名AB作为前缀就可以调用它，该方法头的形式为(   )"
  },
  {
    "ID" : "55e59380e4b0152a610d3bfc",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "forward是内部重定向，redirect是外部重定向",
    "optionC" : "执行redirect时，服务器端告诉浏览器重新去请求地址",
    "optionAnswer" : "A",
    "answer" : "request的forward和response的redirect\n1.redirect地址栏变化，forward发生在服务器端内部从而导致浏览器不知道响应资源来自哪里\n2.redirect可以重定向到同一个站点上的其他应用程序中的资源，forward 只能将请求 转发给同一个WEB应用中的组件\n3.redirect默认是302码，包含两次请求和两次响应\n4.redirect效率较低",
    "optionB" : "执行forward时，浏览器不知道服务器发送的内容是从何处来，浏览器地址栏中还是原来的地址",
    "type" : "1",
    "optionA" : "forward是服务器将控制权转交给另外一个内部服务器对象，由新的对象来全权负责响应用户的请求",
    "question" : "下面有关forward和redirect的描述，错误的是？"
  },
  {
    "ID" : "55b9d327e4b08f89c6185be8",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "Java是具有多线程并发机制的语言",
    "optionC" : "Java是面向对象语言",
    "optionAnswer" : "A",
    "answer" : "本题考查Java语言的特点。Java语言是一种高级语言，它具有简单、面向对象、分布式、解释型、鲁棒性、安全、结构中立、可移植、高效率、多线程、动态等特点。",
    "optionB" : "Java是跨平台的语言",
    "type" : "1",
    "optionA" : "Java语言不支持分布式计算",
    "question" : "下列说法不正确的是 ( )"
  },
  {
    "ID" : "55e592e6e4b0152a610d3ac4",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "以上均是",
    "optionC" : "关闭连接",
    "optionAnswer" : "D",
    "answer" : "载入JDBC驱动程序 建立连接 执行查询或更新 关闭连接是JDBC访问数据的四个步骤",
    "optionB" : "执行查询或更新",
    "type" : "1",
    "optionA" : "载入JDBC驱动程序和建立连接",
    "question" : "通过JDBC访问数据库包含下面哪几步？"
  },
  {
    "answer" : "\/\/读\n\ntry {\n\nString str = “123″;\n\nFileOutputStream f = new FileOutputStream(“test.txt”);\n\nObjectOutputStream s = new ObjectOutputStream(f);\n\ns.writeObject(str);\n\nf.close( );\n\n}catch(Exception e) {\n\ne.printStackTrace( );\n\n}\n\n\/\/写\n\ntry {\n\nFileInputStream f = new    FileInputStream(“test.txt”);\n\nObjectInputStream s = new    ObjectInputStream(f);\n\nstr =(String)s.readObject( );\n\nf.close( );\n\n}catch(Exception e){\n\ne.printStackTrace( );\n\n}",
    "ID" : "5602715fe4b043d0cb1d3a42",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "代码示例：如何读写对象流"
  },
  {
    "ID" : "55e592e6e4b0152a610d3aa9",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "上述说法都不正确",
    "optionC" : "Vector是通过链表结构存储数据，ArrayList是通过数组存储数据",
    "optionAnswer" : "A",
    "answer" : "答案：A\nVector支持线程的同步，也就是内部加锁的\n但是效率低，因此在新版jdk中加入线程不安全的Arraylist",
    "optionB" : "Vector与ArrayList一样，也是通过数组实现的，不同的是ArrayList支持线程的同步",
    "type" : "1",
    "optionA" : "Vector与ArrayList一样，也是通过数组实现的，不同的是Vector支持线程的同步",
    "question" : "ArrayList和Vector主要区别是什么？"
  },
  {
    "ID" : "55e59382e4b0152a610d3c55",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "使用垃圾收集的语言没有内在泄漏问题",
    "optionC" : "垃圾收集能提高程序员效率",
    "optionAnswer" : "D",
    "answer" : "java也有内存泄漏 只不过范围比c++小   c++中会存在不可达却又无用的对象  在内存中永远收不回来  而这些在java里不会  因为有gc  但一些情况下可达无用的对象  gc也回收不到 ",
    "optionB" : "现代垃圾收集能够处理循环引用问题",
    "type" : "1",
    "optionA" : "使用垃圾收集的程序不需要明确释放对象",
    "question" : "下面关于垃圾收集的描述哪个是错误的？"
  },
  {
    "ID" : "55b227dfe4b0bb7ded0a8cbe",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "二者没有区别，可以互换使用",
    "optionC" : "前者是字符读写，后者是字节读写",
    "optionAnswer" : "C",
    "answer" : "字节流是最基本的，所有的InputStream和OutputStream的子类都是,主要用在处理二进制数据，它是按字节来处理的。但实际中很多的数据是文本，又提出了字符流的概念，它是按虚拟机的encode来处理，也就是要进行字符集的转化",
    "optionB" : "前者带有缓冲，后者没有",
    "type" : "1",
    "optionA" : "每次读入的字节数不同  ",
    "question" : "Character流与Byte流的区别是（)"
  },
  {
    "ID" : "55e592e7e4b0152a610d3b12",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "读取路径信息",
    "optionC" : "设定响应的content类型",
    "optionAnswer" : "C",
    "answer" : "HttpServletRequest类主要处理：\n1.读取和写入HTTP头标\n2.取得和设置cookies\n3.取得路径信息\n4.标识HTTP会话",
    "optionB" : "读取HTTP头",
    "type" : "1",
    "optionA" : "读取cookie",
    "question" : "下面不属于HttpServletRequest接口完成功能的是？"
  },
  {
    "answer" : "主要两个问题，一是没有为字符串结束符‘\\0’申请空间，一是没有拷贝结束符。\n代码如下void memcpy(const char* src,char* dest){   \n int len=strlen(src);    \ndest=(char*)malloc(len+1);    \nchar* d=dest;    \nchar* s=src;    \nwhile(len--!=0)\n{        \n*d=*s;        \nd++;       \n s++;    \n}\n*d=’\\0’;\n}",
    "ID" : "55f2e54fe4b0152a611434bc",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "请找出下面用于拷贝内存的代码中的逻辑错误，并修正。void memcpy(const char* src,char* dest){\n    int len=strlen(src);\n    dest=(char*)malloc(len);\n    char* d=dest;\n    char* s=src;\n    while(len--!=0){\n        *d=*s;\n        d++;\n        s++;\n    }\n}\n"
  },
  {
    "ID" : "55e592e7e4b0152a610d3b2e",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "引用变量被final修饰之后，不能再指向其他对象，它指向的对象的内容也是不可变的。",
    "optionC" : "finalize是Object类的一个方法，在垃圾收集器执行的时候会调用被回收对象的此方法，可以覆盖此方法提供垃圾收集时的其他资源的回收，例如关闭文件等。",
    "optionAnswer" : "D",
    "answer" : "D错。使用 final 关键字修饰一个变量时，是指引用变量不能变，引用变量所指向的对象中的内容还是可以改变的。",
    "optionB" : "finally是异常处理语句结构的一部分，表示总是执行。",
    "type" : "1",
    "optionA" : "final用于声明属性，方法和类，分别表示属性不可变，方法不可覆盖，类不可继承。",
    "question" : "final、finally和finalize的区别中，下述说法错误的有？"
  },
  {
    "ID" : "55e6d765e4b0152a610de718",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "forward是内部重定向，redirect是外部重定向",
    "optionC" : "执行redirect时，服务器端告诉浏览器重新去请求地址",
    "optionAnswer" : "A",
    "answer" : "request的forward和response的redirect\r1.redirect地址栏变化，forward发生在服务器端内部从而导致浏览器不知道响应资源来自哪里\r2.redirect可以重定向到同一个站点上的其他应用程序中的资源，forward 只能将请求 转发给同一个WEB应用中的组件\r3.redirect默认是302码，包含两次请求和两次响应\r4.redirect效率较低",
    "optionB" : "执行forward时，浏览器不知道服务器发送的内容是从何处来，浏览器地址栏中还是原来的地址",
    "type" : "1",
    "optionA" : "forward是服务器将控制权转交给另外一个内部服务器对象，由新的对象来全权负责响应用户的请求",
    "question" : "下面有关forward和redirect的描述，错误的是？"
  },
  {
    "answer" : "110",
    "ID" : "55f2e54fe4b0152a6114350f",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "写出下列代码的输出内容int inc(int a)\n{\n　return(++a);\n}\nint multi(int*a,int*b,int*c)\n{\n　return(*c=*a**b);\n}\ntypedef int(FUNC1)(int in);\ntypedef int(FUNC2) (int*,int*,int*);\n \nvoid show(FUNC2 fun,int arg1, int*arg2)\n{\n　FUNC1 * p=&inc;\n　int temp =p(arg1);\n　fun(&temp,&arg1, arg2);\n　printf(\"%d\\n\",*arg2);\n}\n \nmain( )\n{\n　int a;\n　show(multi,10,&a);\n　return 0;\n}\n"
  },
  {
    "ID" : "55e59381e4b0152a610d3c16",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "以上都对",
    "optionC" : "一个类可以实现多个接口，但只能继承一个抽象类",
    "optionAnswer" : "D",
    "answer" : "A，抽象类可以有普通成员变量，接口中只能有final类型的成员变量\nB，都可以包含静态成员，这方面没有特殊规定\nC，java是单继承的，就是只能有一个直接父类，但是可以实现多个接口",
    "optionB" : "抽象类和接口中都可以包含静态成员变量。",
    "type" : "1",
    "optionA" : "抽象类中可以有普通成员变量，接口中没有普通成员变量。",
    "question" : "下述说法中抽象类与接口的区别正确的有哪些？"
  },
  {
    "ID" : "55b9d327e4b08f89c6185be9",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "安全性",
    "optionC" : "健壮性",
    "optionAnswer" : "D",
    "answer" : "选项A，Java语言跨平台的特点，保证了软件的可移植性。此外，Java本身的编译器也用Java语言编写，运行系统的虚拟机用C语言实现，这样，Java系统本身也具有可移植性。选项B，Java语言用字节码进行解释执行，字节本身带有许多编译时产生的信息。选项C，健壮性也称为鲁棒性。Java语言在编译和运行时都有比较严格的检查。选项D，Java语言在运行程序时，有严格的访问权限检查。对字节代码执行前要检查，不允许使用指针，可防止对内存的非法入侵。",
    "optionB" : "解释执行",
    "type" : "1",
    "optionA" : "可移植",
    "question" : "在Java语言中，不允许使用指针体现出的Java特性是"
  },
  {
    "ID" : "55e59381e4b0152a610d3c0f",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "可以用#include关键词来标明来自其它包中的类",
    "optionC" : "包（package）由一组类（class）和接口（interface）组成",
    "optionAnswer" : "C",
    "answer" : "C.包（package）由一组类（class）和界面（interface）组成",
    "optionB" : "package语句只能放在import语句后面",
    "type" : "1",
    "optionA" : "java中包的主要作用是实现跨平台功能",
    "question" : "下列说法正确的是"
  },
  {
    "ID" : "55e592e6e4b0152a610d3aba",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "输出返回数据",
    "optionC" : "读取路径信息",
    "optionAnswer" : "C",
    "answer" : "HttpServletResponse完成：设置http头标，设置cookie，设置返回数据类型，输出返回数据；读取路径信息是HttpServletRequest做的",
    "optionB" : "设置cookie",
    "type" : "1",
    "optionA" : "设置HTTP头标",
    "question" : "下面哪个不属于HttpServletResponse接口完成的功能？"
  },
  {
    "answer" : "产生死锁的原因主要是：\n（1） 因为系统资源不足。\n（2） 进程运行推进的顺序不合适。\n（3） 资源分配不当等。\n产生死锁的四个必要条件：\n（1）互斥条件：一个资源每次只能被一个进程使用。\n（2）请求与保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放。\n（3）不剥夺条件:进程已获得的资源，在末使用完之前，不能强行剥夺。\n（4）循环等待条件:若干进程之间形成一种头尾相接的循环等待资源关系。",
    "ID" : "55f2e54fe4b0152a611434e5",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : " 数据库以及线程发生死锁的原理及必要条件，如何避免死锁"
  },
  {
    "answer" : "每种编程语言中都有集合，最初的Java版本包含几种集合类：Vector、Stack、HashTable和Array。\r\r随着集合的广泛使用，Java1.2提出了囊括所有集合接口、实现和算法的集合框架。在保证线程安全的情况下使用泛型和并发集合类，Java已经经历了很久。它还包括在Java并发包中，阻塞接口以及它们的实现。",
    "ID" : "55f2e483e4b0152a6114318f",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "Java集合框架是什么？说出一些集合框架的优点？"
  },
  {
    "answer" : "- 如果使用了构造器注入或者setter注入，那么将覆盖自动装配的依赖关系。  - 基本数据类型的值、字符串字面量、类字面量无法使用自动装配来注入。  - 优先考虑使用显式的装配来进行更精确的依赖注入而不是使用自动装配。",
    "ID" : "b6ef8702bdf211e6a0e100163e0021c8",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "Spring中的自动装配有哪些限制？ "
  },
  {
    "answer" : "17192",
    "ID" : "55f2e54fe4b0152a611434f7",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "有一个二维数组a[1...100 , 1...65]有100行，65列，我们以行序为主序，如果该数组的基地址是10000，且每个元素占2个存储单元，请问a[56 , 22]的存储地址是（）。注意是下标是从1开始的"
  },
  {
    "ID" : "55e59381e4b0152a610d3c31",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "reset（）",
    "optionC" : "mark（）",
    "optionAnswer" : "B",
    "answer" : "inputstream的close方法用来关闭流\nskip()用来跳过一些字节\nmark（）用来标记流\nreset（）复位流",
    "optionB" : "close（）",
    "type" : "1",
    "optionA" : "skip（）",
    "question" : "下列InputStream类中哪个方法可以用于关闭流？"
  },
  {
    "answer" : "硬件方面：\n1、增加带宽，多机房部署，购买CDN。\n2、增加服务器，增加服务器的硬件资源。\n软件方面：\n1、首先为了防止因为大量用户下载APP，带宽占用过高导致网站原有的功能瘫痪或者体验严重下降，需要将APP下载的地址和网站服务分开部署。\n2、动静态分离，使用CACHE。\n2、NGINX反响代理，多点集群。",
    "ID" : "55f2e54fe4b0152a611434c4",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "A公司打算搭建一个Andriod App下载的Web站点，计划将目前常见的手机APP都放到这个网站上提供下载。因为业务开展初期下载量很小，技术部门就用了1台服务器，给服务器配置了一个公网IP对外进行服务。随着销售部门的推广到位，用户量和下载量呈指数级上载，要求技术部门马上进行改造。如果你是技术部门经理，你会怎么改造这个站点，以满足高负载的需求。\n提示：短时间修改网站的代码不现实，其他方面的各种改造建议都可以，建议越多越好。"
  },
  {
    "ID" : "55b5a91fe4b0ef2b575583f9",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "5",
    "optionC" : "2",
    "optionAnswer" : "A",
    "answer" : "任何和字符串进行+运算的结果都相当于字符串的连接",
    "optionB" : "7",
    "type" : "1",
    "optionA" : "52",
    "question" : "System.out.println(\"5\" + 2); 的输出结果应该是()"
  },
  {
    "ID" : "55e58d70e4b0152a610d39f1",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "if(s==null)||(s.length()==0))",
    "optionC" : "if((s==null)|(s.length()==0))",
    "optionAnswer" : "C",
    "answer" : "s为null，因此只要调用了s.length()都会抛出空指针异常。因此这个题目就是考察if语句的后半部分会不会执行。\rA，单个与操作的符号& 用在整数上是按位与，用在布尔型变量上跟&&功能类似，但是区别是无论前面是否为真，后面必定执行，因此抛出异常\rB，与操作，前半部分判断为假，后面不再执行\rC，这里跟 & 和&& 的区别类似，后面必定执行，因此抛出异常\rD，或语句，前面为真，整个结果必定为真，后面不执行",
    "optionB" : "if((s!=null)&&(s.length()>0))",
    "type" : "1",
    "optionA" : "if((s!=null)&(s.length()>0))",
    "question" : "Consider the following code:\rString s=null;\rWhich code fragments cause an object of type NullPointerException to be thrown?"
  },
  {
    "answer" : "答：前一个循环一遍再判断，后一个判断以后再循环",
    "ID" : "55f2e54fe4b0152a61143514",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "do……while和while……do有什么区别？"
  },
  {
    "answer" : "TOP-K问题，用个数为K的最小堆归并处理",
    "ID" : "55f2e54fe4b0152a611434e9",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "有20个数组，每个数组有500个元素，并且是有序排列好的，现在在这20*500个数中找出排名前500的数。"
  },
  {
    "ID" : "55e592e7e4b0152a610d3b30",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "以上都不正确",
    "optionC" : "主机名 ip",
    "optionAnswer" : "B",
    "answer" : "B;超文本传输协议（HTTP）的统一资源定位符将从因特网获取信息的五个基本元素包括在一个简单的地址中：\n传送协议。\n服务器。\n端口号。（以数字方式表示，若为HTTP的默认值“:80”可省略）\n路径。（以“\/”字符区别路径中的每一个目录名称）\n查询。（GET模式的窗体参数，以“?”字符为起点，每个参数以“&”隔开，再以“=”分开参数名称与数据，通常以UTF8的URL编码，避开字符冲突的问题）",
    "optionB" : "协议 主机名",
    "type" : "1",
    "optionA" : "协议 用户名",
    "question" : "一个完整的URL地址由(),(),端口和文件四部分组成。"
  },
  {
    "ID" : "55e592e6e4b0152a610d3ac3",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "wait后进入等待锁定池，只有针对此对象发出notify方法后获得对象锁进入运行状态",
    "optionC" : "sleep暂停线程、但监控状态仍然保持，结束后会自动恢复",
    "optionAnswer" : "D",
    "answer" : "当线程执行任务，不满足条件时，调用锁对象的wait方法，进入“休息室”，当执行完某些任务时，调用notifyAll方法通知满足条件等待的线程竞争CPU资源。",
    "optionB" : "sleep不释放对象锁，wait放弃对象锁",
    "type" : "1",
    "optionA" : "sleep是线程类（Thread）的方法，wait是Object类的方法；",
    "question" : "关于sleep()和wait()，以下描述错误的一项是（ ）"
  },
  {
    "ID" : "55e592e7e4b0152a610d3b0b",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "Map提供key到value的映射。一个Map中不能包含相同的key，每个key只能映射一个value",
    "optionC" : "Set是一种不包含重复的元素的Collection",
    "optionAnswer" : "A",
    "answer" : "Map接口和Collection接口是同一等级的",
    "optionB" : "List是有序的Collection，使用此接口能够精确的控制每个元素插入的位置",
    "type" : "1",
    "optionA" : "他们都继承自Collection接口",
    "question" : "下面有关List接口、Set接口和Map接口的描述，错误的是？"
  },
  {
    "answer" : "集合类接口指定了一组叫做元素的对象。集合类接口的每一种具体的实现类都可以选择以它自己的方式对元素进行保存和排序。有的集合类允许重复的键，有些不允许。",
    "ID" : "19e55f08bdee11e69a7900163e0021c8",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "为什么集合类没有实现Cloneable和Serializable接口？"
  },
  {
    "ID" : "55e592e6e4b0152a610d3abe",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "3",
    "optionC" : "2",
    "optionAnswer" : "A",
    "answer" : "case 1和case 2后都没有break语句，故都会执行到打印Test2的语句",
    "optionB" : "1",
    "type" : "1",
    "optionA" : "0",
    "question" : "You have the following code.Which numbers will not cause “Test2” to be printed? switch (x)\n{\n    case 1: System.out.println(\"Test1\");\n    case 2:\n    case 3:\n        System.out.println(\"Test2\");\n        break;\n    System.out.println(\"Test3\");\n}"
  },
  {
    "ID" : "55b5a920e4b0ef2b575583ff",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "以上都不是",
    "optionC" : " java.util包",
    "optionAnswer" : "B",
    "answer" : "java编程必须的默认引用包为java.lang包。",
    "optionB" : " java.lang包",
    "type" : "1",
    "optionA" : " java.sys包",
    "question" : " Java编程所必须的默认引用包为( )"
  },
  {
    "ID" : "55e58d70e4b0152a610d39de",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "goodandgbc",
    "optionC" : "goodandabc",
    "optionAnswer" : "D",
    "answer" : "String类型和数组属于引用传递，但执行change方法后，数组改变的是ch[0]，也就是ch数组引用未改变，但其所指向内容的值被改变",
    "optionB" : "test okandgbc",
    "type" : "1",
    "optionA" : "test okandabc",
    "question" : "检查程序，是否存在问题，如果存在指出问题所在，如果不存在，说明输出结果。\rpackage algorithms.com.guan.javajicu; \rpublic class Example { \r  String str = new String(\"good\"); \r  char[] ch = {'a','b','c'}; \r  public static void main(String[] args) { \r     Example ex = new Example(); \r     ex.change(ex.str, ex.ch); \r     System.out.print(ex.str +\"and\"); \r     System.out.print(ex.ch);  \r  } \r    \r  public void change(String str, char ch[]){ \r     str= \"test ok\"; \r     ch[0]= 'g'; \r  } \r} "
  },
  {
    "answer" : "在释放对象占用的内存之前，垃圾收集器会调用对象的finalize()方法。一般建议在该方法中释放对象持有的资源。",
    "ID" : "a2428b72bdef11e6a0e100163e0021c8",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "finalize()方法什么时候被调用？析构函数(finalization)的目的是什么？"
  },
  {
    "ID" : "55e59380e4b0152a610d3c05",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "异步调用",
    "optionC" : "多个CPU",
    "optionAnswer" : "A",
    "answer" : "首先jvm中没有进程的概念 ，但是jvm中的线程映射为操作系统中的进程，对应关系为1：1。那这道题的问的就是jvm中线程如何异步执行 。 ?在jvm中 是使用监视器锁来实现不同线程的异步执行， ?在语法的表现就是synchronized?",
    "optionB" : "虚拟机",
    "type" : "1",
    "optionA" : "监视器",
    "question" : "java用（）机制实现了进程之间的异步执行"
  },
  {
    "ID" : "55e5937fe4b0152a610d3bcd",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "long类型默认是0，取值范围是-2^63—2^63-1",
    "optionC" : "字符型类型默认是0，取值范围是-2^15 —2^15-1",
    "optionAnswer" : "C",
    "answer" : "默认值         取值范围 示例字节型 ： 0 -2^7—2^7-1 byte b=10;字符型 ： ‘ \\u0000′ 0—2^16-1         char c=’c’ ;short : 0 -2^15—2^15-1 short s=10;int : 0 -2^31—2^31-1 int i=10;long : 0 -2^63—2^63-1     long o=10L;float : 0.0f -2^31—2^31-1 float f=10.0Fdouble : 0.0d -2^63—2^63-1 double d=10.0;boolean: false true\\false boolean flag=true;",
    "optionB" : "boolean类型默认值是false，取值范围是true\\false",
    "type" : "1",
    "optionA" : "字节型的类型默认值是0，取值范围是-2^7—2^7-1",
    "question" : "下面有关java基本类型的默认值和取值范围，说法错误的是？"
  },
  {
    "ID" : "55b5a91fe4b0ef2b575583e6",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "Java语言规定构造方法只能通过new自动调用",
    "optionC" : "Java语言规定构造方法不可以重载",
    "optionAnswer" : "C",
    "answer" : "构造方法可以重载，但不可以重写",
    "optionB" : "Java语言规定构造方法没有返回值，但不用void声明",
    "type" : "1",
    "optionA" : "Java语言规定构造方法名与类名必须相同",
    "question" : "下列关于构造方法的叙述中，错误的是（ ）"
  },
  {
    "answer" : "Vector、HashTable、Properties和Stack是同步类，所以它们是线程安全的，可以在多线程环境下使用。Java1.5并发API包括一些集合类，允许迭代时修改，因为它们都工作在集合的克隆上，所以它们在多线程环境中是安全的。",
    "ID" : "55f2e484e4b0152a611431aa",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "哪些集合类是线程安全的？"
  },
  {
    "ID" : "55b227dee4b0bb7ded0a8ca0",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "输出空",
    "optionC" : "输出零",
    "optionAnswer" : "C",
    "answer" : "int类型的数组在没有初始化时默认值为0",
    "optionB" : "编译时正确，运行时将产生错误",
    "type" : "1",
    "optionA" : "编译时将产生错误 ",
    "question" : "  给出下面代码，关于该程序以下哪个说法是正确的？（） \npublic class Person{ \n    static int arr[] = new int[5];\n    public static void main(String a[]) { \n        System.out.println(arr[0]);}\n    } \n}\n"
  },
  {
    "answer" : "Java中的HashMap使用hashCode()和equals()方法来确定键值对的索引，当根据键获取值的时候也会用到这两个方法。如果没有正确的实现这两个方法，两个不同的键可能会有相同的hash值，因此，可能会被集合认为是相等的。而且，这两个方法也用来发现重复元素。所以这两个方法的实现对HashMap的精确性和正确性是至关重要的。",
    "ID" : "6f6e1f64bdee11e69a7900163e0021c8",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "hashCode()和equals()方法的重要性体现在什么地方？"
  },
  {
    "answer" : "尽管Map接口和它的实现也是集合框架的一部分，但Map不是集合，集合也不是Map。因此，Map继承Collection毫无意义，反之亦然。\r如果Map继承Collection接口，那么元素去哪儿？Map包含key-value对，它提供抽取key或value列表集合的方法，但是它不适合“一组对象”规范。",
    "ID" : "55f2e483e4b0152a61143193",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "为何Map接口不继承Collection接口？"
  },
  {
    "ID" : "55e6d765e4b0152a610de710",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "sleep()方法导致了程序暂停执行指定的时间，让出cpu给其他线程",
    "optionC" : "调用sleep()方法的过程中，线程不会释放对象锁",
    "optionAnswer" : "D",
    "answer" : "sleep和wait的区别有：\r  1，这两个方法来自不同的类分别是Thread和Object\r  2，最主要是sleep方法没有释放锁，而wait方法释放了锁，使得敏感词线程可以使用同步控制块或者方法。\r  3，wait，notify和notifyAll只能在同步控制方法或者同步控制块里面使用，而sleep可以在\r    任何地方使用\r   synchronized(x){\r      x.notify()\r     \/\/或者wait()\r   }\r   4,sleep必须捕获异常，而wait，notify和notifyAll不需要捕获异常",
    "optionB" : "调用wait()方法的时候，线程会放弃对象锁",
    "type" : "1",
    "optionA" : "wait()方法属于Object类，二sleep()属于Thread类",
    "question" : "下列关于java 中的 wait()方法和 sleep()方法的区别描述错误的是？"
  },
  {
    "ID" : "55e58d70e4b0152a610d39eb",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "t.equals(new String (\"hello\"));",
    "optionC" : "s==t;",
    "optionAnswer" : "B",
    "answer" : "s和t指向同样的常量，jvm会进行优化。他们本质上是相同的东西。所以答案是B",
    "optionB" : "t.equals(c);",
    "type" : "1",
    "optionA" : "s.equals(t);",
    "question" : "假设有以下代码\r    String s = \"hello\";\r    String t = \"hello\";\r    char c[] = {'h', 'e', 'l', 'l', 'o'};\r下列选项中返回false的语句是："
  },
  {
    "ID" : "55b227dee4b0bb7ded0a8c9f",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "64",
    "optionC" : "32",
    "optionAnswer" : "B",
    "answer" : "一个UNICODE字符占两字节，一字节是8位，所以，每个UNICODE码占用16个比特位。",
    "optionB" : "16",
    "type" : "1",
    "optionA" : "8",
    "question" : "Java的字符类型采用的是Unicode编码方案，每个Unicode码占用（ ）个比特位。"
  },
  {
    "answer" : "每次我们尝试获取下一个元素的时候，Iterator fail-fast属性检查当前集合结构里的任何改动。如果发现任何改动，它抛出ConcurrentModificationException。Collection中所有Iterator的实现都是按fail-fast来设计的（ConcurrentHashMap和CopyOnWriteArrayList这类并发集合类除外）。",
    "ID" : "55f2e39fe4b0152a6114306e",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "通过迭代器fail-fast属性，你明白了什么？"
  },
  {
    "answer" : "ArrayList和LinkedList两者都实现了List接口，但是它们之间有些不同。\r\r（1）ArrayList是由Array所支持的基于一个索引的数据结构，所以它提供对元素的随机访问，复杂度为O(1)，但LinkedList存储一系列的节点数据，每个节点都与前一个和下一个节点相连接。所以，尽管有使用索引获取元素的方法，内部实现是从起始点开始遍历，遍历到索引的节点然后返回元素，时间复杂度为O(n)，比ArrayList要慢。\r\r（2）与ArrayList相比，在LinkedList中插入、添加和删除一个元素会更快，因为在一个元素被插入到中间的时候，不会涉及改变数组的大小，或更新索引。\r\r（3）LinkedList比ArrayList消耗更多的内存，因为LinkedList中的每个节点存储了前后节点的引用。",
    "ID" : "55f2e483e4b0152a611431a7",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "ArrayList和LinkedList有何区别？"
  },
  {
    "answer" : "400",
    "ID" : "55f2e54fe4b0152a611434f3",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "两个人，A的速度为a，B的速度为b,在一直路上相向而行。在A、B距离为s的时候，A放出一个鸽子C，速度为c，C飞到B后，立即掉头飞向A，遇到A在掉头飞向B......就这样在AB之间飞来飞去，直到A、B相遇，假设a=40， b=60， c=400， s=100，这期间鸽子共飞行路程为 （）"
  },
  {
    "ID" : "55b9d326e4b08f89c6185bc1",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "源文件名与程序类名必须一致",
    "optionC" : "一个Java源文件中可以有多个public类",
    "optionAnswer" : "C",
    "answer" : "一个完整的Java源程序应该包括下列5个部分：(1)package语句将源文件存入指定的包中，该部分至多只有一句，必须放在源程序的第一句，如果没有该语句，则源文件存入当前目录下。(2)import语句导入需要的包或类，该部分可以有若干import语句或者没有，必须放在所有的类定义前。(3)公共类定义公共类定义部分至多只有一个公共类的定义，Java语言规定该Java源程序的文件名必须与该公共类名完全一致。(4)类定义 类定义部分可以有0个或多个类定义。(5)接口定义 接口定义部分可以有0个或多个接口定义。",
    "optionB" : "一个Java源文件中可以包括多个类定义，但是只能有一个public类",
    "type" : "1",
    "optionA" : "一个Java源文件中可以包括一个package语句",
    "question" : "下列关于Java程序结构的描述中，不正确的一项是"
  },
  {
    "ID" : "55e59381e4b0152a610d3c3c",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "C#",
    "optionC" : "objectC",
    "optionAnswer" : "B",
    "answer" : "A，C，D都是类C语言，B不是\nPython是解释执行的，其他语言都需要先编译",
    "optionB" : "Python",
    "type" : "1",
    "optionA" : "JAVA",
    "question" : "从运行层面上来看，从四个选项选出不同的一个。"
  },
  {
    "answer" : "（1）HashMap允许key和value为null，而HashTable不允许。\r\r（2）HashTable是同步的，而HashMap不是。所以HashMap适合单线程环境，HashTable适合多线程环境。\r\r（3）在Java1.4中引入了LinkedHashMap，HashMap的一个子类，假如你想要遍历顺序，你很容易从HashMap转向LinkedHashMap，但是HashTable不是这样的，它的顺序是不可预知的。\r\r（4）HashMap提供对key的Set进行遍历，因此它是fail-fast的，但HashTable提供对key的Enumeration进行遍历，它不支持fail-fast。\r\r（5）HashTable被认为是个遗留的类，如果你寻求在迭代的时候修改Map，你应该使用CocurrentHashMap。",
    "ID" : "55f2e483e4b0152a611431a3",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "HashMap和HashTable有何不同？"
  },
  {
    "ID" : "55e59380e4b0152a610d3c01",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "编译不通过",
    "optionC" : "Base Son SonB",
    "optionAnswer" : "D",
    "answer" : "有关对象的上转型对象 Base base = newSon();--》\n** base.method();\/\/等同于son调用重写的method()方法\n** base.methodB(); \/\/非法，因为methodB()（是子类新加的方法 子类新加的属性也是不可访问的）--》 报错-》D\n**插入Son son=new (Son)base \/\/把上转型对象强制转化为子类对象即刻通过编译--》B",
    "optionB" : "Son SonB",
    "type" : "1",
    "optionA" : "Base SonB",
    "question" : "package Wangyi;\nclass Base\n{\n    public void method()\n    {\n        System.out.println(\"Base\");\n    } \n}\nclass Son extends Base\n{\n    public void method()\n    {\n        System.out.println(\"Son\");\n    }\n     \n    public void methodB()\n    {\n        System.out.println(\"SonB\");\n    }\n}\npublic class Test01\n{\n    public static void main(String[] args)\n    {\n        Base base = new Son();\n        base.method();\n        base.methodB();\n    }\n}\n问这个程序的输出结果。"
  },
  {
    "ID" : "55e59380e4b0152a610d3c02",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "DynaValidatorActionForm",
    "optionC" : "ValidatorForm",
    "optionAnswer" : "D",
    "answer" : "在struts配置文件中配置具体的错误提示，再在FormBean中的validate()方法具体调用。",
    "optionB" : "ValidatorActionForm",
    "type" : "1",
    "optionA" : "ActionForm",
    "question" : "在Struts框架中如果要使用Validation作验证的话，需要使用以下哪个Form？"
  },
  {
    "ID" : "55b227dee4b0bb7ded0a8ca7",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "2",
    "optionC" : "11",
    "optionAnswer" : "C",
    "answer" : "sum是静态变量，是属于类的。虽然生成了两个对象，其实都是对一个变量做操作。在操作的过程中，加了两次5，所以等于11。",
    "optionB" : "6",
    "type" : "1",
    "optionA" : "0",
    "question" : "下面程序中类ClassDemo中定义了一个静态变量sum，分析程序段的输出结果( )。\nclass ClassDemo {\n   public static int sum=1;\n   public ClassDemo() {\n      sum = sum + 5;\n   }\n}\npublic class ClassDemoTest{\n   public static void main(String args[]) {\n   ClassDemo demo1=new ClassDemo();\n   ClassDemo demo2=new ClassDemo();\n   System.out.println(demo1.sum);\n   }\n}\n"
  },
  {
    "ID" : "55e6d765e4b0152a610de716",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "var3&",
    "optionC" : "_var2",
    "optionAnswer" : "C",
    "answer" : "标识符可以包括这4种字符：字母、下划线、$、数字；开头不能是数字；不能是关键字",
    "optionB" : "1var1",
    "type" : "1",
    "optionA" : "final",
    "question" : "下面属于java合法变量定义的是？"
  },
  {
    "answer" : "在Java语言中，每一个对象有一把锁。线程可以使用synchronized关键字来获取对象上的锁。synchronized关键字可应用在方法级别(粗粒度锁)或者是代码块级别(细粒度锁)。",
    "ID" : "ba090d5abded11e6a0e100163e0021c8",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "同步方法和同步代码块的区别是什么？"
  },
  {
    "ID" : "55e592e7e4b0152a610d3b18",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "abstract",
    "optionC" : "final",
    "optionAnswer" : "D",
    "answer" : "abstract public毋庸置疑是可以的，下面是java编程思想的原话：”就像类一样，可以在interface 关键字前面添加public 关键字（但仅限于该接口与其同名文件中被定义）。如果不添加public关键字，则他只能在同一包内可用，接口也可以包含域，但是这些域隐试的是static 和final\n“接口中被定义的方法必须被定义是public\"",
    "optionB" : "protected",
    "type" : "1",
    "optionA" : "private",
    "question" : "java接口的修饰符可以为？(忽略内部接口)"
  },
  {
    "answer" : "Enumeration速度是Iterator的2倍，同时占用更少的内存。但是，Iterator远远比Enumeration安全，因为其他线程不能够修改正在被iterator遍历的集合里面的对象。同时，Iterator允许调用者删除底层集合里面的元素，这对Enumeration来说是不可能的。",
    "ID" : "5e201c16bdef11e69a7900163e0021c8",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "Enumeration接口和Iterator接口的区别有哪些？"
  },
  {
    "ID" : "55e592e7e4b0152a610d3b0e",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "抽象",
    "optionC" : "继承",
    "optionAnswer" : "A",
    "answer" : "A.封装；反射破坏代码的封装性，破坏原有的访问修饰符访问限制  ",
    "optionB" : "多态",
    "type" : "1",
    "optionA" : "封装",
    "question" : "在为传统面向对象语言的程序做单元测试的时候,经常用到mock对象。Mock对象通过反射数。请问反射最大程度破坏了面向对象的以下哪个特性？"
  },
  {
    "answer" : "if (fabs(x) < 0.00001f)",
    "ID" : "55f2e550e4b0152a61143520",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "写出float x 与“零值”比较的if语句。"
  },
  {
    "answer" : "不会，在下一个垃圾回收周期中，这个对象将是可被回收的。",
    "ID" : "ca673b7abdef11e6a0e100163e0021c8",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "如果对象的引用被置为null，垃圾收集器是否会立即释放对象占用的内存？"
  },
  {
    "ID" : "55e6d765e4b0152a610de70d",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "test ok and ab",
    "optionC" : "hello and a",
    "optionAnswer" : "B",
    "answer" : "String类是final类型的，不能继承和修改这个类。str=“tesk ok”，其实是隐含的让Java生成一个新的String对象，那么就与原来的“Hello”没有任何关系，当函数结束，str作用结束，所以输出的还是“Hello”。 char ch[] 是传递引用，修改了原内容。",
    "optionB" : "hello and cb",
    "type" : "1",
    "optionA" : "hello and ab",
    "question" : "下列java程序的输出结果为____。\rpublic class Example{\r    String str=new String(\"hello\");\r    char[]ch={'a','b'};\r    public static void main(String args[]){\r        Example ex=new Example();\r        ex.change(ex.str,ex.ch);\r        System.out.print(ex.str+\" and \");\r        Sytem.out.print(ex.ch);\r    }\r    public void change(String str,char ch[]){\r        str=\"test ok\";\r        ch[0]='c';\r    }\r}"
  },
  {
    "answer" : "Iterator的安全失败是基于对底层集合做拷贝，因此，它不受源集合上修改的影响。java.util包下面的所有的集合类都是快速失败的，而java.util.concurrent包下面的所有的类都是安全失败的。快速失败的迭代器会抛出ConcurrentModificationException异常，而安全失败的迭代器永远不会抛出这样的异常。",
    "ID" : "58ab51acbdee11e6a0e100163e0021c8",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "快速失败(fail-fast)和安全失败(fail-safe)的区别是什么？"
  },
  {
    "ID" : "55e5937fe4b0152a610d3bca",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "const",
    "optionC" : "float",
    "optionAnswer" : "A",
    "answer" : "Java中final关键字表示最终的意思，该关键字可以修饰类，方法，成员变量\n被final修饰的类不能被继承\n被fianl修饰的方法不能被重写\n被fianl修饰的成员变量是常量\nconst是C和C++中的常量关键字",
    "optionB" : "#define",
    "type" : "1",
    "optionA" : "final",
    "question" : "java中，用（ ）关键字定义常量"
  },
  {
    "answer" : "内存断点通过将目标地址所在页属性改为PAGE_NOACCESS，当你尝试执行到目标地址时就会产生异常，调试器就会中断下来或者将目标地址内存改为0xCC (INT 3)指令，当执行到该地址时候会产生一个中断，调试器就会暂停下来。",
    "ID" : "55f2e54fe4b0152a611434d3",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "请解释下常见利用内存断点调试的原理?"
  },
  {
    "ID" : "55e59380e4b0152a610d3bda",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "JAVA程序的main方法中，如果只有一条语句，可以不用{}（大括号）括起来",
    "optionC" : "JAVA程序中类名必须与文件名一样",
    "optionAnswer" : "A",
    "answer" : "A，java是强类型语言，所有的方法必须放在类里面，包括main\nB ,java中可以有多个重载的main方法，只有public static void main(String[] args){}是函数入口\nC，内部类的类名一般与文件名不同\nD，函数都必须用{}括起来，不管是一条语句还是多条语句",
    "optionB" : "JAVA程序中只能有一个main方法",
    "type" : "1",
    "optionA" : "JAVA程序的main方法必须写在类里面",
    "question" : "下列说法正确的是（）"
  },
  {
    "answer" : "7",
    "ID" : "55f2e54fe4b0152a611434ff",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : " 赛马，有25匹马，每次只能5匹马进行比赛，比赛只能得到5匹马之间的快慢程度，而不是速度，请问，最少要比 1 次，才能获得最快的前3匹马？"
  },
  {
    "ID" : "55e59380e4b0152a610d3bf7",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "形式参数不可以是对象",
    "optionC" : "形式参数为方法被调用时，真正被传递的参数",
    "optionAnswer" : "A",
    "answer" : "A\n形式参数就是函数定义时设定的参数。例如函数头 int min(int x,int y,int z) 中 x,y,z 就是形参。实际参数是调用函数时所使用的实际的参数。\nC:真正被传递的是实参\nD:形参可以是对象,是对象的时候传递引用. \nB:对于形式参数只能用final修饰符，其它任何修饰符都会引起编译器错误 。但是用这个修饰符也有一定的限制，就是在方法中不能对参数做任何修改。 不过一般情况下，一个方法的形参不用final修饰。只有在特殊情况下，那就是：方法内部类。 ",
    "optionB" : "形式参数可被所有的字段修饰符修饰",
    "type" : "1",
    "optionA" : "形式参数可被视为local variable",
    "question" : "下列语句正确的是（ ）"
  },
  {
    "ID" : "82b00226d9de11e5a94600163e0021c8",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "javac Test",
    "optionC" : "java Test",
    "optionAnswer" : "C",
    "answer" : "javac命令用于编译Java程序，会将源代码程序编译成字节码文件，java 用于执行字节码文件，在执行时不能指定文件后缀",
    "optionB" : "javac Test.class",
    "type" : "1",
    "optionA" : "java Test.class",
    "question" : "在控制台运行一个 Java 程序 Test . class ，使用的命令正确的是（ ）"
  },
  {
    "ID" : "55b227dee4b0bb7ded0a8c97",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "一般在创建新对象时，系统会自动调用构造函数。",
    "optionC" : "构造函数的主要作用是完成对类的对象的初始化工作。",
    "optionAnswer" : "A",
    "answer" : "构造函数的功能主要用于在类的对象创建时定义初始化的状态。它没有返回值，也不能用void来修饰。",
    "optionB" : "构造函数是类的一种特殊函数，它的方法名必须与类名相同。",
    "type" : "1",
    "optionA" : "构造函数的返回类型只能是void型。",
    "question" : "以下关于构造函数的描述错误的是（）"
  },
  {
    "ID" : "55b9d327e4b08f89c6185be2",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "运行方式不同，程序结构不同，运行工具不同，受到的限制也不同",
    "optionC" : "运行方式相同，程序结构相同，运行工具不同，受到的限制也不同",
    "optionAnswer" : "D",
    "answer" : "Application和Java Applet的区别。Java语言是一种半编译半解释的语言。Java的用户程序分为两类：Java Application和Java Applet。这两类程序在组成结构和执行机制上都有一定的差异，主要体现在以下几方面：(1)运行方式不同。Java Application是完整的程序，可以独立运行；Java Applet程序不能单独运行，它必须嵌入到用HTML语言编写的Web页面中，通过与Java兼容的浏览器来控制执行。(2)运行工具不同。Java Application程序被编译以后，用普通的Java解释器就可以使其边解释边执行，而Java Applet必须通过网络浏览器或者Applet观察器才能执行。(3)程序结构不同。每个Java Application程序必定含有一个并且只有一个main方法，程序执行时，首先寻找main方法，并以此为入口点开始运行。含有main方法的那个类，常被称为主类，也就是说，Java Application程序都含有一个主类。而Applet程序则没有含main方法的主类，这也正是Applet程序不能独立运行的原因。尽管Applet没有含main方法的主类，但Applet一定有一个从java. applet. Applet派生的类，它是由Java系统提供的。(4)受到的限制不同。Java Application程序可以设计成能进行各种操作的程序，包括读\/写文件的操作，但是Java Applet对站点的磁盘文件既不能进行读操作，也不能进行写操作。然而，由于Applet的引入，使Web页面具有动态多媒体效果和可交互性能，这使由名为超文本、实为纯文本的HTML语言编写成的Web页面真正具有了超文本功能，不但可以显示文本信息，而且还可以有各种图片效果和动态图形效果，从而使页面显得生动美丽；另外，Applet使Web页面增加了按钮等功能，从而增加了交互性。",
    "optionB" : "运行方式相同，程序结构不同，运行工具不同，受到的限制相同",
    "type" : "1",
    "optionA" : "运行方式不同，程序结构相同，运行工具不同，受到的限制相同",
    "question" : "下列关于Java Application与Java Applet程序的差别描述正确的是( )。"
  },
  {
    "ID" : "55e58d70e4b0152a610d39ee",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "单例模式",
    "optionC" : "抽象工厂",
    "optionAnswer" : "B",
    "answer" : "B.桥接模式。JDBC提供两套接口，一个面向数据库厂商，一个面向JDBC使用者。",
    "optionB" : "桥接模式",
    "type" : "1",
    "optionA" : "生成器",
    "question" : "Java数据库连接库JDBC用到哪种设计模式?"
  },
  {
    "ID" : "ee4ac2e2bde911e6a0e100163e0021c8",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "FileNotFoundException!IOException!Exception!",
    "optionC" : "FileNotFoundException!IOException!",
    "optionAnswer" : "A",
    "answer" : "考察多个catch语句块的执行顺序。当用多个catch语句时，catch语句块在次序上有先后之分。从最前面的catch语句块依次先后进行异常类型匹配，这样如果父异常在子异常类之前，那么首先匹配的将是父异常类，子异常类将不会获得匹配的机会，也即子异常类型所在的catch语句块将是不可到达的语句。所以，一般将父类异常类即Exception老大放在catch语句块的最后一个。",
    "optionB" : "IOException!Exception!",
    "type" : "1",
    "optionA" : "IOException",
    "question" : "getCustomerInfo()方法如下，try中可以捕获三种类型的异常，如果在该方法运行中产生了一个IOException，将会输出什么结果（） public void getCustomerInfo() {     try {         \/\/ do something that may cause an Exception     } catch (java.io.FileNotFoundException ex) {         System.out.print(\"FileNotFoundException!\");     } catch (java.io.IOException ex) {         System.out.print(\"IOException!\");     } catch (java.lang.Exception ex) {         System.out.print(\"Exception!\");     } }"
  },
  {
    "ID" : "55e592e6e4b0152a610d3aca",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "Only when the main() method is executed.",
    "optionC" : "Once when the class is loaded into the Java virtual machine.",
    "optionAnswer" : "C",
    "answer" : "答案:C 类中静态语句块仅在类加载时被执行一次",
    "optionB" : "Each time a new object of type StaticTest is created.",
    "type" : "1",
    "optionA" : "Never.",
    "question" : "When is the text “Hi there”displayed? public class Static Test\n{\n    static\n    {\n        System.out.println(“Hi there”);\n    }\n \n    public void print()\n    {\n        System.out.println(“Hello”);\n    }\n \n    public static void main(String args[])\n    {\n        Static Test st1 = new StaticTest();\n        st1.print();\n        StaticTest st2 = new StaticTest();\n        st2.print();\n    }\n}\n"
  },
  {
    "answer" : "Comparable和Comparator接口被用来对对象集合或者数组进行排序。Comparable接口被用来提供对象的自然排序，我们可以使用它来提供基于单个逻辑的排序。\r \rComparator接口被用来提供不同的排序算法，我们可以选择需要使用的Comparator来对给定的对象集合进行排序。",
    "ID" : "55f2e484e4b0152a611431b0",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "Comparable和Comparator接口有何区别？"
  },
  {
    "ID" : "55e592e6e4b0152a610d3ada",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "以上均可以",
    "optionC" : "地址重写",
    "optionAnswer" : "D",
    "answer" : "A :session 捆绑到一个会话中 B：会一致保存着 C ： url 在后面加上参数",
    "optionB" : "Cookie",
    "type" : "1",
    "optionA" : "session",
    "question" : "下面哪项技术可以用在WEB开发中实现会话跟踪实现？"
  },
  {
    "ID" : "55e59381e4b0152a610d3c2f",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "x%=4",
    "optionC" : "a=x>y?x:y",
    "optionAnswer" : "B",
    "answer" : "A ,x右移三位\nB，++j是j自增1，+++j是不合法的，编译出错\nC，这是一个三目运算符，(exp1)?(exp2):(exp3)\n   当exp1为true时个表达式结果为exp2\n   当exp1为false时整个表达式结果为exp3\nD，取余运算，等价于x=x%4",
    "optionB" : "#NAME?",
    "type" : "1",
    "optionA" : "x>>3",
    "question" : "若下列所用变量均已经正确定义，一下表达式中不合法的是"
  },
  {
    "answer" : "N2",
    "ID" : "55f2e550e4b0152a6114351f",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "冒泡排序算法的时间复杂度是什么？"
  },
  {
    "ID" : "55e59381e4b0152a610d3c10",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "以上都是",
    "optionC" : "用来调用父类的构造函数",
    "optionAnswer" : "D",
    "answer" : "super代表父类对应的对象，所以用super访问在子类中无法直接使用的父类成员和方法",
    "optionB" : "用来调用父类中被重载的方法",
    "type" : "1",
    "optionA" : "用来访问父类被隐藏的成员变量",
    "question" : "关键字super的作用是？"
  },
  {
    "ID" : "55e592e6e4b0152a610d3ab8",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "重载函数名可以不同",
    "optionC" : "重载函数必须有不同的形参列表",
    "optionAnswer" : "C",
    "answer" : "重载：必须同名函数；必须参数表不同（包含参数个数不同；参数类型不同；或参数个数与类型都不同）",
    "optionB" : "重载函数形参个数必须不同",
    "type" : "1",
    "optionA" : "重载函数必须具有不同的返回值类型",
    "question" : "下面有关重载函数的说法中正确的是"
  },
  {
    "ID" : "55b227dee4b0bb7ded0a8ca4",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "Java支持多线程",
    "optionC" : "Java是面向过程的编程语言",
    "optionAnswer" : "C",
    "answer" : "Java是面向对象的编程语言",
    "optionB" : "Java支持分布式计算",
    "type" : "1",
    "optionA" : "Java是跨平台的编程语言",
    "question" : "下列关于Java语言的特点，描述错误的是（ ）"
  },
  {
    "answer" : "就是一个类实现多个接口",
    "ID" : "5602715ee4b043d0cb1d3a27",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "什么是多重接口"
  },
  {
    "ID" : "588ca22ebdea11e6a0e100163e0021c8",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "5",
    "optionC" : "2",
    "optionAnswer" : "A",
    "answer" : "Java会自动将2转换为字符串。",
    "optionB" : "7",
    "type" : "1",
    "optionA" : "52",
    "question" : "System.out.println(\"5\" + 2);的输出结果应该是（）。"
  },
  {
    "answer" : "int find(node * root, int val) {\n    int ret = 1;\n \n    if (root->get_data() == val) {\n        return ret;\n    } else {\n        int  ret1 = 1 + find(root->get_left(), val);\n        int  ret2 = 1 + find(root->get_right(), val);\n        if (ret1 > ret2)\n            ret = ret2;\n        else\n            ret = ret1;\n \n        return ret;\n    }\n}",
    "ID" : "55f2e54fe4b0152a611434e1",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : " 给出二叉树接口为class node\n{\n    node *get_left();\n    node *get_right();\n    int get_data();\n}\n找出值为val的最浅节点所在层数。int find(node *root, int val)."
  },
  {
    "ID" : "55e592e6e4b0152a610d3ae5",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "implement extend",
    "optionC" : "extend implement",
    "optionAnswer" : "B",
    "answer" : "答案：B extends表继承父类 implements表是实现接口",
    "optionB" : "extends implements",
    "type" : "1",
    "optionA" : "implements extends",
    "question" : "java中用()字指明继承关系.用()关键字指明对接口的实现"
  },
  {
    "answer" : "典型的贝叶斯公式，p(甲|废品) = p(甲 && 废品) \/ p(废品) = （0.4 × 0.01） \/（0.4 × 0.01 + 0.6 × 0.02） = 0.25",
    "ID" : "55f2e54fe4b0152a6114350b",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : " 一个汽车公司的产品，甲厂占40%，乙厂占60%，甲的次品率是1%，乙的次品率是2%，现在抽出一件汽车时次品，问是甲生产的可能性？"
  },
  {
    "ID" : "55e58d70e4b0152a610d39f7",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "以上都不是",
    "optionC" : "pubilc void add(int x,int y){}",
    "optionAnswer" : "B",
    "answer" : "方法重载是指在一个类中定义多个同名的方法，但要求每个方法具有不同的参数的类型或参数的个数。\r原则如下：\r一.方法名一定要相同。\r二.方法的参数表必须不同，包括参数的类型或个数，以此区分不同的方法体。\r1.如果参数个数不同，就不管它的参数类型了！\r2.如果参数个数相同，那么参数的类型或者参数的顺序必须不同。\r三.方法的返回类型、修饰符可以相同，也可不同。",
    "optionB" : "pubilc int add(int x,int y,int z){return 0;}",
    "type" : "1",
    "optionA" : "pubilc int add(int x,int y,float z){return 0;}",
    "question" : "以下方法，哪个不是对add方法的重载?\rpublic class Test\r{\r    public void add( int x,int y,int z){}\r}"
  },
  {
    "answer" : "错误（Error）： JVM 系统内部错误、资源耗尽等严重情况，程序员不可控制\n\n例外（Exception）：其它因编程错误或偶然的外在因素导致的一般性问题，程序可以控制",
    "ID" : "5602715ee4b043d0cb1d3a32",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "异常的分类？"
  },
  {
    "answer" : "在遍历一个集合的时候，我们可以使用并发集合类来避免ConcurrentModificationException，比如使用CopyOnWriteArrayList，而不是ArrayList。",
    "ID" : "55f2e483e4b0152a6114319c",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "在迭代一个集合的时候，如何避免ConcurrentModificationException？"
  },
  {
    "answer" : "两个进程都在等待对方执行完毕才能继续往下执行的时候就发生了死锁。结果就是两个进程都陷入了无限的等待中。",
    "ID" : "e6adf730bded11e6a0e100163e0021c8",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "什么是死锁(deadlock)？"
  },
  {
    "ID" : "3fce3678bde811e6a0e100163e0021c8",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "3、4",
    "optionC" : "1、3",
    "optionAnswer" : "D",
    "answer" : "（1）接口用于描述系统对外提供的所有服务,因此接口中的成员常量和方法都必须是公开(public)类型的,确保外部使用者能访问它们；  （2）接口仅仅描述系统能做什么,但不指明如何去做,所以接口中的方法都是抽象(abstract)方法；  （3）接口不涉及和任何具体实例相关的细节,因此接口没有构造方法,不能被实例化,没有实例变量，只有静态（static）变量；  （4）接口的中的变量是所有实现类共有的，既然共有，肯定是不变的东西，因为变化的东西也不能够算共有。所以变量是不可变(final)类型，也就是常量了。  （5） 接口中不可以定义变量？如果接口可以定义变量，但是接口中的方法又都是抽象的，在接口中无法通过行为来修改属性。有的人会说了，没有关系，可以通过 实现接口的对象的行为来修改接口中的属性。这当然没有问题，但是考虑这样的情况。如果接口 A 中有一个public 访问权限的静态变量 a。按照 Java 的语义，我们可以不通过实现接口的对象来访问变量 a，通过 A.a = xxx; 就可以改变接口中的变量 a 的值了。正如抽象类中是可以这样做的，那么实现接口 A 的所有对象也都会自动拥有这一改变后的 a 的值了，也就是说一个地方改变了 a，所有这些对象中 a 的值也都跟着变了。这和抽象类有什么区别呢，怎么体现接口更高的抽象级别呢，怎么体现接口提供的统一的协议呢，那还要接口这种抽象来做什么呢？所以接口中 不能出现变量，如果有变量，就和接口提供的统一的抽象这种思想是抵触的。所以接口中的属性必然是常量，只能读不能改，这样才能为实现接口的对象提供一个统 一的属性。  通俗的讲，你认为是要变化的东西，就放在你自己的实现中，不能放在接口中去，接口只是对一类事物的属性和行为更高层次的抽象。对修改关闭，对扩展（不同的实现 implements）开放，接口是对开闭原则的一种体现。  所以：  接口的方法默认是public abstract；  接口中不可以定义变量即只能定义常量(加上final修饰就会变成常量)。所以接口的属性默认是public static final 常量，且必须赋初值。  注意：final和abstract不能同时出现。",
    "optionB" : "2、4",
    "type" : "1",
    "optionA" : "1、2",
    "question" : "Java接口的修饰符可以为（） 1-private 2-protected 3-final 4-abstract"
  },
  {
    "answer" : "ArrayList、HashMap、TreeMap和HashTable类提供对元素的随机访问。",
    "ID" : "55f2e484e4b0152a611431a8",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "哪些集合类提供对元素的随机访问？"
  },
  {
    "answer" : "当新对象被创建的时候，构造函数会被调用。每一个类都有构造函数。在程序员没有给类提供构造函数的情况下，Java编译器会为这个类创建一个默认的构造函数。  Java中构造函数重载和方法重载很相似。可以为一个类创建多个构造函数。每一个构造函数必须有它自己唯一的参数列表。  Java不支持像C++中那样的复制构造函数，这个不同点是因为如果你不自己写构造函数的情况下，Java不会创建默认的复制构造函数。",
    "ID" : "0c608cf0bded11e6a0e100163e0021c8",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "Java中，什么是构造函数？什么是构造函数重载？什么是复制构造函数？"
  },
  {
    "ID" : "55e59380e4b0152a610d3bdd",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "static",
    "optionC" : "serialize",
    "optionAnswer" : "A",
    "answer" : "synchronized关键字是同步代码块关键字，对对象加互斥锁",
    "optionB" : "volatile",
    "type" : "1",
    "optionA" : "synchronized",
    "question" : "哪个关键字可以对对象加互斥锁？（）"
  },
  {
    "answer" : "实现comparable接口",
    "ID" : "5602715fe4b043d0cb1d3a3d",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "如何给集合排序？"
  },
  {
    "answer" : "输出结果为： 4 5\nstrlen只是对传递给Func 函数的那个字符串求长度，跟str_arg中的那个2 是没有任何关系的， 即使把2 改为200 也是不影响输出结果的",
    "ID" : "55f2e550e4b0152a61143529",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "下面程序的输出结果为多少？void Func(char str_arg[2])\n{\n int m = sizeof(str_arg); \/\/指针的大小为4\n int n = strlen(str_arg); \/\/对数组求长度，str_arg 后面的那个2没有任何意义，数组已经退化为指针了\n printf(\"%d\\n\",m);\n printf(\"%d\\n\",n);\n}\nint main(void)\n{\n char str[]=\"Hello\";\n Func(str);\n}"
  },
  {
    "ID" : "55e592e7e4b0152a610d3b2b",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : ":=",
    "optionC" : "if",
    "optionAnswer" : "A ",
    "answer" : "注解:java 中没有<> := 这种运算符， if else不算运算符，因此选a",
    "optionB" : "<>",
    "type" : "1",
    "optionA" : "&&",
    "question" : "下列运算符合法的是（ ）"
  },
  {
    "ID" : "55e59381e4b0152a610d3c30",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "Java还实现了真数组，避免了覆盖数据类型的可能",
    "optionC" : "Java自己操纵内存减少了内存出错的可能性",
    "optionAnswer" : "D",
    "answer" : "Java致力于检查程序在编译和运行时的错误。\nJava虚拟机实现了跨平台接口\n类型检查帮助检查出许多开发早期出现的错误。\nJava自己操纵内存减少了内存出错的可能性。\nJava还实现了真数组，避免了覆盖数据的可能。\n注意，是避免数据覆盖的可能，而不是数据覆盖类型 ",
    "optionB" : "Java能运行虚拟机实现跨平台",
    "type" : "1",
    "optionA" : "Java致力于检查程序在编译和运行时的错误",
    "question" : "列不属于Java语言性特点的是"
  },
  {
    "ID" : "55e592e6e4b0152a610d3ad4",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "dst=String.encode(String.decode(src，\"GBK\"))，\"UTF-8\" )",
    "optionC" : "dst=new String(\"GBK\"，src).getBytes()",
    "optionAnswer" : "B",
    "answer" : "选B，先通过GBK编码还原字符串，在该字符串正确的基础上得到“UTF-8”所对应的字节串",
    "optionB" : "dst=new String(src，\"GBK\").getBytes(\"UTF-8\")",
    "type" : "1",
    "optionA" : "dst=String.fromBytes(src，\"GBK\").getBytes(\"UTF-8\")",
    "question" : "下面哪段程序能够正确的实现了GBK编码字节流到UTF-8编码字节流的转换 byte[] src,dst;"
  },
  {
    "answer" : "如果程序中有多个线程竞争多个资源，就可能会产生死锁。当一个线程等待由另一个线程持有的锁，而后者正在等待已被第一个线程持有的锁时，就会发生死锁。\n\n要避免死锁，应该确保在获取多个锁时，在所有的线程中都以相同的顺序获取锁。尽量少用临界资源。",
    "ID" : "5602715fe4b043d0cb1d3a48",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "什么是死锁？如何避免？"
  },
  {
    "answer" : "52",
    "ID" : "55f2e54fe4b0152a6114350e",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "在32位机器上\n设有以下说明和定义：typedef union {\n    long i;\n    int k[5];\n    char c;\n} DATE;\nstruct data {\n    int cat;\n    DATE cow;\n    double dog;\n} too;\nDATE max;\n则语句 printf(\"%d\",sizeof(struct data)+sizeof(max));的执行结果是：（）"
  },
  {
    "answer" : "501",
    "ID" : "55f2e54fe4b0152a611434e4",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "2014! 的末尾有（）个0？"
  },
  {
    "ID" : "55b227dee4b0bb7ded0a8c94",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "行4、行6都不执行",
    "optionC" : "行6执行，行4不执行",
    "optionAnswer" : "C",
    "answer" : "String重写了Object的equals方法，重写的这个方法就是比较字符串的内容。而“==”比较的是内存地址，对于字符串来说，都要用equals来比较，因为比较一个String的地址是否相同没有意义。s2是新创建的对象，与s1的内存地址是不同的，因此执行行6。",
    "optionB" : "行4执行，行6不执行",
    "type" : "1",
    "optionA" : "行4与行6都将执行",
    "question" : "关于以下程序段，正确的说法是（）\n1．  String  s1=”abc”+”def”;\n2．  String  s2=new  String（s1）；\n3．  if（s1= =s2）\n4．     System.out.println(“= = succeeded”);\n5．  if (s1.equals(s2))\n6．     System.out.println(“.equals()  succeeded”);\n"
  },
  {
    "ID" : "55b9d327e4b08f89c6185bdd",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "非分时的",
    "optionC" : "非抢占式的",
    "optionAnswer" : "B",
    "answer" : "本题考查线程的调度。Java的线程调度策略是－种基于优先级的抢占式调度，选项B正确。Java这种抢占式调度可能是分时的，即每个等待池中的线程轮流执行，也可以不是，即线程逐个运行，具体呆用哪种方式，由具体JVM而定。线程－般通过使用sleep（等方法保证给其他线程运行时间。",
    "optionB" : "抢占式的",
    "type" : "1",
    "optionA" : "分时的",
    "question" : "在Java中，线程是（ ）。"
  },
  {
    "ID" : "55e59381e4b0152a610d3c0b",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "继承性",
    "optionC" : "简单性",
    "optionAnswer" : "C",
    "answer" : "如java中的import java.util.*;  就很好地体现了其中一个特性：封装性，隐藏内部功能的具体实现，只保留和外部交流数据的借口。然后就是多态性，即同一个动作作用不同的对象产生不同的具体行为，具体来说，可以用\"一个对外接口，多个内在实现方法\"表示。最后还有一个继承性，子类可以继承父类的方法和变量，然后调用。",
    "optionB" : "多态性",
    "type" : "1",
    "optionA" : "封装性",
    "question" : "面向对象的程序设计语言不具有（）等共同特性。"
  },
  {
    "ID" : "55b9d327e4b08f89c6185bd6",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "java.lang.StringBuffer",
    "optionC" : "java.lang.StringChar",
    "optionAnswer" : "D",
    "answer" : "在Java中，字符串是作为对象出现的，由java.lang.String和java.lang.StringBuffer定义，分别用来处理长度不变和长度可变字符串，这两类都被定义为final。",
    "optionB" : "java.io.StringBuffer",
    "type" : "1",
    "optionA" : "java.io.StringChar",
    "question" : "在Java中，字符串由java.lang.String和( )定义。"
  },
  {
    "answer" : "java.util.EnumSet是使用枚举类型的集合实现。当集合创建时，枚举集合中的所有元素必须来自单个指定的枚举类型，可以是显示的或隐示的。EnumSet是不同步的，不允许值为null的元素。它也提供了一些有用的方法，比如copyOf(Collection c)、of(E first,Erest)和complementOf(EnumSet s)。",
    "ID" : "55f2e484e4b0152a611431a9",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "EnumSet是什么？"
  },
  {
    "ID" : "55e59380e4b0152a610d3bf3",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "配置需要事务管理的bean的代理时，通过parent引用这个配置模板，代码如下：\n<bean id=\"petBiz\" parent=\"txProxyTemplate\">\n         <property name=\"target\" ref=\"petTarget\"\/>\n<\/bean>",
    "optionC" : "缺少sessionFactory属性的注入",
    "optionAnswer" : "C",
    "answer" : "spring提供的事务管理可以分为两类：编程式的和声明式的。\n编程式的，比较灵活，但是代码量大，存在重复的代码比较多；\n声明式的比编程式的更灵活.",
    "optionB" : "对get方法采用只读事务",
    "type" : "1",
    "optionA" : "定义了声明式事务的配置模板",
    "question" : "对下面Spring声明式事务的配置含义的说明错误的是（）<bean id=\"txProxyTemplate\" abstract=\"true\"\nclass=\n\"org.springframework.transaction.interceptor.TransactionProxyFactoryBean\">\n    <property name=\"transactionManager\" ref=\"myTransactionManager\" \/>\n<property name=\"transactionAttributes\">      \n <props>\n        <prop key=\"get*\">PROPAGATION_REQUIRED,readOnly<\/prop>\n         <prop key=\"*\">PROPAGATION_REQUIRED<\/prop>\n     <\/props>\n<\/property> \n<\/bean>"
  },
  {
    "answer" : "typedef char *String_t 定义了一个新的类型别名，有类型检查。而#define String_d char * 只是做了\n个简单的替换，无类型检查，前者在编译的时候处理，后者在预编译的时候处理。\n同时定义多个变量的时候有区别，主要区别在于这种使用方式String_t a,b; String_d c,d; a,b ,c 都是\nchar*类型，而d 为char 类型\n由于typedef 还要做类型检查。。#define 没有。。所以typedef 比#define 安全。。",
    "ID" : "55f2e550e4b0152a61143526",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : " typedef char *String_t; 和#define String_d char * 这两句在使用上有什么区别？"
  },
  {
    "ID" : "55e592e7e4b0152a610d3b16",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "GenericServlet",
    "optionC" : "ServletConfig",
    "optionAnswer" : "C",
    "answer" : "通过ServletConfig接口的getInitParameter(java.lang.String name)方法",
    "optionB" : "ServletContext",
    "type" : "1",
    "optionA" : "Servlet",
    "question" : "从以下哪一个选项中可以获得Servlet的初始化参数?"
  },
  {
    "answer" : "平衡二叉树（Balanced Binary Tree）又被称为AVL树（有别于AVL算法），且具有以下性质：它是一 棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。构造与调整方法 平衡二叉树的常用算法有红黑树、AVL、Treap等。 最小二叉平衡树的节点的公式如下 F(n)=F(n-1)+F(n-2)+1 这个类似于一个递归的数列，可以参考Fibonacci数列，1是根节点，F(n-1)是左子树的节点数量，F(n-2)是右子树的节点数量。",
    "ID" : "55f2e550e4b0152a6114351c",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "什么是平衡二叉树？"
  },
  {
    "ID" : "55e58d70e4b0152a610d39e6",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "java.swing",
    "optionC" : "java.lang",
    "optionAnswer" : "A",
    "answer" : "B，java.awt包是java图形界面的包\rC，java.lang是java语言的核心好，lang是language的简写\rD，java.swing是经过java封装的与操作系统无关的图形界面包",
    "optionB" : "java.awt",
    "type" : "1",
    "optionA" : "java.sql",
    "question" : "提供Java存取数据库能力的包是（ ）"
  },
  {
    "ID" : "55b9d327e4b08f89c6185bec",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "用户显示器的宽度",
    "optionC" : "框架的窗口宽度",
    "optionAnswer" : "B",
    "answer" : "可以对Java的任何组件调用getSize().width和getSize()。height，来改变用户界面的宽度和高度。",
    "optionB" : "在Java中任何图形用户界面的宽度",
    "type" : "1",
    "optionA" : "界面组件的窗口宽度",
    "question" : " getSize( ).width指的是什么?"
  },
  {
    "ID" : "55e592e7e4b0152a610d3b0a",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "run",
    "optionC" : "main",
    "optionAnswer" : "A",
    "answer" : "答案：A 这个类虽然继承了Thread类，但是并没有真正创建一个线程。\n创建一个线程需要覆盖Thread类的run方法，然后调用Thread类的start()方法启动\n这里直接调用run()方法并没有创建线程，跟普通方法调用一样，是顺序执行的",
    "optionB" : "main run",
    "type" : "1",
    "optionA" : "run main",
    "question" : "以下程序运行的结果为（）public class Example extends Thread{\n     @Override\n     public void run(){\n        try{\n             Thread.sleep(1000);\n             }catch (InterruptedException e){\n             e.printStackTrace();\n             }\n             System.out.print(\"run\");\n     }\n     public static void main(String[] args){\n             Example example=new Example();\n             example.run();\n             System.out.print(\"main\");\n     }\n}"
  },
  {
    "ID" : "55e592e7e4b0152a610d3b25",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "一个struts项目只能有一个Servlet",
    "optionC" : "ActionForm、Action都属于Model部分",
    "optionAnswer" : "D",
    "answer" : "一个struts项目可以有一个Servlet",
    "optionB" : "ActionServlet这一个类是整个struts项目的控制器",
    "type" : "1",
    "optionA" : "Jsp文件实现视图View的功能",
    "question" : "关于struts项目中的类与MVC模式的对应关系，说法错误的是"
  },
  {
    "ID" : "55e58d70e4b0152a610d39e2",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "The common practice of MVC in web applications is, the model receives GET or POST input from user and decides what to do with it, handing over to controller and which hand control to views(HTML-generating components)",
    "optionC" : "A controller is the link between a user and the system. It accepts input from the user and instructs the model and a view to perform actions based on that input",
    "optionAnswer" : "D",
    "answer" : "D应该是controller接收用户post或者get方式的请求",
    "optionB" : "A view is a (visual) representation of its model. It renders the model into a form suitable for interaction, typically a user interface element",
    "type" : "1",
    "optionA" : "Models often represent data and the business logics needed to manipulate the data in the application",
    "question" : "Model-View-Controller(MVC) is an architectural pattern that frequently used in web applications. Which of the following statement(s) is(are)not correct?"
  },
  {
    "answer" : "int rand10()\n{\n    int n=49;\n    while(n>40){\n        n=7*(rand7()-1)+rand7();\n    }\n    return n%10+1;\n}",
    "ID" : "55f2e550e4b0152a61143528",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "已知rand7()可以产生1~7的7个数(均匀概率),利用rand7() 产 生 rand10() 1~10(均匀概率)。"
  },
  {
    "answer" : "“static”关键字表明一个成员变量或者是成员方法可以在没有所属的类的实例变量的情况下被访问。 Java中static方法不能被覆盖，因为方法覆盖是基于运行时动态绑定的，而static方法是编译时静态绑定的。static方法跟类的任何实例都不相关，所以概念上不适用。",
    "ID" : "7f6043b8bdec11e6a0e100163e0021c8",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "”static”关键字是什么意思？Java中是否可以覆盖(override)一个private或者是static的方法？"
  },
  {
    "answer" : "throw 指编程人员主动抛出一个异常\n\nthrow new NullPointerExeption( );\n\nthrows指程序遇到异常情况自动的被动抛出一个异常\n\n    public void test( ) throws Exeption{}\n\n",
    "ID" : "5602715ee4b043d0cb1d3a31",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "简述throw和throws的功能和使用方法"
  },
  {
    "ID" : "55b227dfe4b0bb7ded0a8cbb",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "double",
    "optionC" : "int",
    "optionAnswer" : "D",
    "answer" : "short型除以double型，会强制类型转换成double型",
    "optionB" : "short",
    "type" : "1",
    "optionA" : "byte",
    "question" : "有以下方法的定义，请选择该方法的返回类型（   ）。\nReturnType  method(byte x, double y) {\n    return  (short)x\/y*2;\n}"
  },
  {
    "ID" : "55b5a920e4b0ef2b57558401",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "子类在构造函数中可以使用super( )来调用父类的构造函数；",
    "optionC" : "父类比它的子类的方法更多",
    "optionAnswer" : "C",
    "answer" : "继承是从已有的类中派生出新的类，新的类能吸收已有类的数据属性和行为，并能扩展新的能力。因此子类的方法不少于父类。",
    "optionB" : "当子类对象和父类对象能接收同样的消息时，它们针对消息产生的行为可能不同",
    "type" : "1",
    "optionA" : "一个子类的对象可以接收父类对象能接收的消息；",
    "question" : "下面说法不正确的是(  )"
  },
  {
    "answer" : "try {\n\nServerSocket s = new ServerSocket(8888);\n\nwhile (true) {\n\nSocket s1 = s.accept();\n\nOutputStream os = s1.getOutputStream();\n\nDataOutputStream dos = new DataOutputStream(os);\n\ndos.writeUTF(“Hello,” +s1.getInetAddress() + “port#” + s1.getPort() + “\\nbye!”);\n\n            dos.close();\n\ns1.close();\n\n}\n\n}catch (IOException e) {\n\nSystem.out.println(“程序运行出错:” + e);\n\n}",
    "ID" : "5602715fe4b043d0cb1d3a4d",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "代码示例：基于Socket编程"
  },
  {
    "ID" : "55b9d326e4b08f89c6185bcd",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "import java.io.*； import java.awt.*； public class Test{ }",
    "optionC" : "import java.io.*； class Person{ } public class Test{ }",
    "optionAnswer" : "B",
    "answer" : "Java中的package语句必须是源文件中除去说明以外的第一条语句，导入包语句可以有几个，但是必须位于package语句之后，其他类定义之前，一个源文件中可以有几个类，但最多只能有一个是public的，如果有，则源文件的文件名必须和该类的类名相同。",
    "optionB" : "import java.io.* ； package testpackage； public class Test{ }",
    "type" : "1",
    "optionA" : "package testpackage； public class Test{ }",
    "question" : "下列哪个选项的java源文件代码片段是不正确的? "
  },
  {
    "ID" : "55e59381e4b0152a610d3c11",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "类的复用",
    "optionC" : "类的组合",
    "optionAnswer" : "A",
    "answer" : "一个对外接口，多个内在实现方法",
    "optionB" : "多继承",
    "type" : "1",
    "optionA" : "多态性",
    "question" : "_______意味着一个操作在不同的类中可以有不同的实现方式。"
  },
  {
    "ID" : "55e59382e4b0152a610d3c4e",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "继承类使用显式多态",
    "optionC" : "配置对象缓存，不使用集合缓存",
    "optionAnswer" : "A",
    "answer" : "A.使用单向一对多关联，不使用双向一对多\nHibernate鼓励使用双向一对多关联，不使用单向一对多关联。单向一对多关联映射是在one端维护关系的，必须先保存many端后才可以保存one端，所以在保存many端时该端不知道one端是否存在相应的数据，所以只能将维护的关系字段设置为null，如果为非空则无法保存。因为是one端维护关系，所以在保存one端时，会发出多余的update语句维护many端的外键关系。",
    "optionB" : "不用一对一，用多对一取代",
    "type" : "1",
    "optionA" : "使用单向一对多关联，不使用双向一对多",
    "question" : "下面哪一项不属于优化Hibernate所鼓励的？"
  },
  {
    "answer" : ">6",
    "ID" : "55f2e54fe4b0152a611434c8",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : " 下面代码输出什么#include<stdio.h>\nint main( )\n{\n    unsigned int a = 6;\n    int b = -20;\n    (a + b > 6) ? printf(\">6\") : printf(\"<=6\");\n    return 0;\n}输出结果是（）"
  },
  {
    "ID" : "55e592e7e4b0152a610d3b06",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "表之间的参考关系对应类之间的依赖关系",
    "optionC" : "表的字段对应类的属性",
    "optionAnswer" : "D",
    "answer" : "一般关系数据模型和对象数据模型之间有以下对应关系：表对应类，记录对应对象，表的字段对应类的属性",
    "optionB" : "记录对应对象",
    "type" : "1",
    "optionA" : "表对应类",
    "question" : "一般情况下，以下哪个选项不是关系数据模型与对象模型之间匹配关系？"
  },
  {
    "ID" : "55e58d70e4b0152a610d3a06",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "只要在定义int类型的成员变量i的时候加上volatile关键字，那么多线程并发执行i++这样的操作的时候就是线程安全的了",
    "optionC" : "ConcurrentHashMap的写操作不需要加锁，读操作需要加锁",
    "optionAnswer" : "B",
    "answer" : "A，CopyOnWriteArrayList适用于写少读多的并发场景\rB，ReadWriteLock即为读写锁，他要求写与写之间互斥，读与写之间互斥，\r   读与读之间可以并发执行。在读多写少的情况下可以提高效率\rC，ConcurrentHashMap是同步的HashMap，读写都加锁\rD，volatile只保证多线程操作的可见性，不保证原子性",
    "optionB" : "ReadWriteLock适用于读多写少的并发场景",
    "type" : "1",
    "optionA" : "CopyOnWriteArrayList适用于写多读少的并发场景",
    "question" : "下列关于Java并发的说法中正确的是（）"
  },
  {
    "answer" : "在处理消息事件的时候，对WM_GETTEXT和EM_GETLINE事件进行过滤",
    "ID" : "55f2e54fe4b0152a611434d4",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : " 对于Edit控件，你如何抓防止密码框内容被抓取？"
  },
  {
    "ID" : "55e59380e4b0152a610d3bf8",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "视情况而定",
    "optionC" : "return后执行",
    "optionAnswer" : "C",
    "answer" : "首先 ，执行就意味着跳出函数（除非碰到exit函数！！），所以任何语句要执行都要在return之前执行！！但是貌似这个没什么说服力T..T\n    对于题目中括弧里面的解释：当finally语句中有return时，会覆盖掉函数中其他return语句。此外，，由于一个方法内部定义的变量都存储在栈中，当这个函数结束后，其对应的栈就会被回收，此时方法体中定义的变量就不存在了，因此return 时不是直接返回变量的值，而复制一份，然后返回！！   ",
    "optionB" : "return前执行",
    "type" : "1",
    "optionA" : "不执行finally代码",
    "question" : "在try的括号里面有return一个值，那在哪里执行finally里的代码？"
  },
  {
    "answer" : "在作为参数传递之前，我们可以使用Collections.unmodifiableCollection(Collection c)方法创建一个只读集合，这将确保改变集合的任何操作都会抛出UnsupportedOperationException。",
    "ID" : "55f2e484e4b0152a611431b2",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "当一个集合被作为参数传递给一个函数时，如何才可以确保函数不能修改它？"
  },
  {
    "ID" : "55e59381e4b0152a610d3c13",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "2",
    "optionC" : "1",
    "optionAnswer" : "C",
    "answer" : "HashMap可以插入null的key或value，插入的时候，检查是否已经存在相同的key，如果不存在，则直接插入，如果存在，则用新的value替换旧的value，在本题中，第一条put语句，会将key\/value对插入HashMap，而第二条put，因为已经存在一个key为name的项，所以会用新的value替换旧的vaue，因此，两条put之后，HashMap中只有一个key\/value键值对。那就是（name，jack）。所以，size为1.",
    "optionB" : "null",
    "type" : "1",
    "optionA" : "0",
    "question" : "以下java程序代码，执行后的结果是（）java.util.HashMap map=new java.util.HashMap(); \nmap.put(\"name\",null);      \nmap.put(\"name\",\"Jack\");\nSystem.out.println(map.size());"
  },
  {
    "ID" : "55b5a91fe4b0ef2b575583f0",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "int mm()",
    "optionC" : "void mmm(String s) ",
    "optionAnswer" : "D",
    "answer" : "重载要求方法名相同",
    "optionB" : "void mmm(int i)",
    "type" : "1",
    "optionA" : "void mmm() ",
    "question" : "下列方法头中哪一个不与其他方法形成重载(overload)关系?（ )"
  },
  {
    "answer" : "整数类型 默认为 int\n\n带小数的默认为 double",
    "ID" : "5602715de4b043d0cb1d39db",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "在基本类型中，如果不明确指定，整数型的默认是什么类型？带小数的默认是什么类型？"
  },
  {
    "answer" : "try{\n\nDataInputStream in =\n\nnew DataInputStream(\n\nnew BufferedInputStream(\n\nnew FileInputStream(“Test.java”)\n\n)\n\n);\n\nString currentLine=null;\n\nwhile ((currentLine = in.readLine()) != null){\n\nSystem.out.println(currentLine);\n\n}\n\n}catch (IOException e){\n\nSystem.err.println(“Error: ” + e);\n\n}\n\n",
    "ID" : "5602715fe4b043d0cb1d3a45",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "代码示例：如何使用流的基本接口来读写文件内容"
  },
  {
    "ID" : "55e592e7e4b0152a610d3b08",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "Compiler error at line 5",
    "optionC" : "Compiler error at line 3",
    "optionAnswer" : "A",
    "answer" : "答案：A 首先final声明的方法是不能被覆盖的，但是这里并不错误，因为方法是private的，也就是子类没有继承父类的run方法，因此子类的run方法跟父类的run方法无关，并不是覆盖。new Car().run()也是调用子类的run方法。",
    "optionB" : "Vehicle",
    "type" : "1",
    "optionA" : "Car",
    "question" : "观察以下代码：class Car extends Vehicle\n{\n    public static void main (String[] args)\n    {\n        new  Car(). run();\n    }\n    private final void run()\n    {\n        System. out. println (\"Car\");\n    }\n}\nclass Vehicle\n{\n    private final void run()\n    {\n        System. out. println(\"Vehicle\");\n    }\n}下列哪些针对代码运行结果的描述是正确的？"
  },
  {
    "answer" : "不可以，静态方法只能访问静态成员，因为非静态方法的调用要先创建对象，在调用静态方法时可能对象并没有被初始化。",
    "ID" : "83e6b088bdf211e6a0e100163e0021c8",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "是否可以从一个静态（static）方法内部发出对非静态（non-static）方法的调用？ "
  },
  {
    "answer" : "程序中导致程序中断的一些情况叫做异常，一般程序员可以处理。\n\n异常分为运行时异常和非运行时异常（一般异常）\n\n运行时异常是指因设计或实现方式不当导致的问题。也可以说，是程序员的原因导致的，本来可以避免发生的情况。例如：BufferOverflowException, ClassCastException，IndexOutOfBoundsException，ArithmeticException。出现这些异常的代码不需要try块包围。\n\n非运行时异常是指除运行时异常以外所有的异常，出现这些异常的代码必须用try块包围。例如：FileNotFoundException,EOFException,",
    "ID" : "5602715ee4b043d0cb1d3a2c",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "什么是异常，异常的分类？"
  },
  {
    "answer" : "有三种方式可以用来创建线程： 1、继承Thread类 2、实现Runnable接口 3、应用程序可以使用Executor框架来创建线程池 实现Runnable接口这种方式更受欢迎，因为这不需要继承Thread类。在应用设计中已经继承了别的对象的情况下，这需要多继承（而Java不支持多继承），只能实现接口。同时，线程池也是非常高效的，很容易实现和使用。",
    "ID" : "5b96f264bded11e69a7900163e0021c8",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "创建线程有几种不同的方式？你喜欢哪一种？为什么？"
  },
  {
    "ID" : "55e592e7e4b0152a610d3b21",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "Object",
    "optionC" : "Exception",
    "optionAnswer" : "D",
    "answer" : "D，java中Object是所有类的父亲,所有类的对象都是Class的实例。",
    "optionB" : "Dang",
    "type" : "1",
    "optionA" : "Father",
    "question" : "Java中所有类的父类是（ ）。"
  },
  {
    "answer" : "方案一：\n使用栈，碰到左括号入栈，碰到右括号出栈，看最后栈是否空，是否还有未匹配完的右括号。\n方案二：\n思路同上，但是检查压栈时要对括号做优先级检查。",
    "ID" : "55f2e54fe4b0152a611434d9",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : " 假设有如下字符串： (234453)[234]{2324} 现在，要求编程分析其括号配对是否正确。请自行选择下列两种方案之一实现该程序：\n方案一：不考虑括号优先级，只考虑配对正确性；方案二：考虑括号优先级，比如{1[2（3）4]5} 是正确的。但是[1{2}3]是不正确的。 "
  },
  {
    "ID" : "55e59380e4b0152a610d3be0",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "如果当前reqeust中的HttpSession 为null，当传入参数为false时，就创建一个新的Session，否则返回null",
    "optionC" : "如果当前reqeust中的HttpSession 为null，当传入参数为true时，就创建一个新的Session，否则返回null",
    "optionAnswer" : "C",
    "answer" : "HttpSession session = request.getSession(boolean create) \n返回当前请求的会话。如果当前请求不属于任何会话，而且create参数为true，则创建一个会话，否则返回null。此后所有来自同一个的请求都属于这个会话，通过它的getSession返回的是当前会话。  ",
    "optionB" : "如果当前reqeust中的HttpSession 为null，当传入参数为空时，就创建一个新的Session，否则返回null",
    "type" : "1",
    "optionA" : "没有区别",
    "question" : "HttpSession session = request.getSession(false)?与HttpSession session = request.getSession(true)的区别？"
  },
  {
    "ID" : "55e592e6e4b0152a610d3ad7",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "public abstract void anotherMethod() {}",
    "optionC" : "public int method();",
    "optionAnswer" : "A",
    "answer" : "答案是A；A是抽象方法，抽象类可以包含抽象方法，也可以不包含，虽然A 方法名是method，与题目中的方法同名，但是参数不同，是重载方法B 在类中不能constInt = constInt + 5;  方法中可以\nC的方法名与题目中的方法名相同，返回值不能作为重载的依据 D 抽象方法没有方法体",
    "optionB" : "constInt = constInt + 5;",
    "type" : "1",
    "optionA" : "public abstract void method(int a);",
    "question" : "选项中哪一行代码可以替换题目中而不产生编译错误？\npublic abstract class MyClass {\n     public int constInt = 5;\n     \/\/add code here\n     public void method() {\n     }\n}"
  },
  {
    "ID" : "55e59381e4b0152a610d3c12",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "一个抽象类和接口中的方法必须是抽象方法",
    "optionC" : "纯虚函数和虚函数的区别在于前者不包含定义，而后者可以包含函数体。",
    "optionAnswer" : "D",
    "answer" : "1、一个子类只能继承一个抽象类（虚类），但能实现多个接口；\n2、一个抽象类可以有构造方法，接口没有构造方法；\n3、一个抽象类中的方法不一定是抽象方法，即其中的方法可以有实现（有方法体），接口中的方法都是抽象方法，不能有方法体，只有声明；\n4、一个抽象类可以是public、private、protected、default,\n   接口只有public;\n5、一个抽象类中的方法可以是public、private、protected、default，\n   接口中的方法只能是public和default",
    "optionB" : "c++中没有接口的概念，与之对应的是纯虚类，对应的是java的接口",
    "type" : "1",
    "optionA" : "c++虚类相当与java里面的抽象类",
    "question" : "下述有关c++的虚类和java接口的描述，说法错误的是？"
  },
  {
    "answer" : "是值传递。Java语言的方法调用只支持参数的值传递。当一个对象实例作为一个参数被传递到方法中时，参数的值就是对该对象的引用。对象的属性可以在被调用过程中被改变，但对对象引用的改变是不会影响到调用者的。C++和C#中可以通过传引用或传输出参数来改变传入的参数的值，但是在Java中却做不到。",
    "ID" : "bf2c6c70bdf011e6a0e100163e0021c8",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "当一个对象被当作参数传递到一个方法后，此方法可改变这个对象的属性，并可返回变化后的结果，那么这里到底是值传递还是引用传递？ "
  },
  {
    "ID" : "55e58d70e4b0152a610d39e3",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "泛型编程",
    "optionC" : "统一接口",
    "optionAnswer" : "C",
    "answer" : "一条鞭法的主要思想是“税以银征收”，取消了原本的田赋、力役和其他杂税，促进自然经济的瓦解和商品经济的发展。面向过程是指以过程为中心的编程思想，形成模块化特点。万物皆数是毕达哥拉斯学派的数学哲学理念（特指有理数），属于世界观的一种。泛型编程是一种语言机制，能够帮助实现一个通用的标准容器库。所谓通用的标准容器库，就是要能够做到，比如用一个List类存放所有可能类型的对象这样的事；泛型编程让你编写完全一般化并可重复使用的算法，其效率与针对某特定数据类型而设计的算法相同。泛型即是指具有在多种数据类型上皆可操作的含意，与模板有些相似。一条鞭法的主要思想并不是以征税过程为中心的思想，同时也不是在多种类型上的操作。",
    "optionB" : "万物皆数",
    "type" : "1",
    "optionA" : "面向过程",
    "question" : "明朝时期张居正改革的一条鞭法的主要思想是()"
  },
  {
    "answer" : "Collection—-Set和List\n\nSet—-HashSet和SortedSet\n\nList—-ArrayList和LinkedList\n\nMap—-HashMap、SortedMap和TreeMap",
    "ID" : "5602715fe4b043d0cb1d3a38",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "描述出Java集合框架中集合的接口关系"
  },
  {
    "answer" : "const在前内容不能变,const在指针后则指针不能变",
    "ID" : "55f2e550e4b0152a61143524",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "说明以下包含 const 修饰符的语句的意义\na). double * ptr=&value；\nb). const double * ptr=&value;\nc). double *constptr =&value;\nd).const double *const ptr=&value;"
  },
  {
    "ID" : "55e58d70e4b0152a610d3a0b",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "编译器会抛出 \"possible reference before assignment\"的错误",
    "optionC" : "非静态变量不能够被静态方法引用",
    "optionAnswer" : "C",
    "answer" : "非静态成员只能被类的实例化对象引用，因此这里在静态方法中访问x会造成编译出错",
    "optionB" : "程序会抛出 NullPointerException",
    "type" : "1",
    "optionA" : "程序会打出 \"Value is 0\"",
    "question" : "public class Test\r{\r    public int x;\r    public static void main(String args[]\r    {\r        System. out. println(\"Value is\" + x);\r    }\r}\r\r对于上面这段代码，以下说法正确的是："
  },
  {
    "answer" : "- 根据应用的需要正确选择要使用的集合的类型对性能非常重要，比如：假如元素的大小是固定的，而且能事先知道，我们就应该用Array而不是ArrayList。 - 有些集合类允许指定初始容量。因此，如果我们能估计出存储的元素的数目，我们可以设置初始容量来避免重新计算hash值或者是扩容。 - 为了类型安全，可读性和健壮性的原因总是要使用泛型。同时，使用泛型还可以避免运行时的ClassCastException。 - 使用JDK提供的不变类(immutable class)作为Map的键可以避免为我们自己的类实现hashCode()和equals()方法。 - 编程的时候接口优于实现。 - 底层的集合实际上是空的情况下，返回长度是0的集合或者是数组，不要返回null。",
    "ID" : "4a4e8ae2bdef11e6a0e100163e0021c8",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "Java集合类框架的最佳实践有哪些？"
  },
  {
    "answer" : "List col = new ArrayList();\n\nString oldValue = “abcd”;\n\nString newValue = “1234″;\n\ncol.add(oldValue);\n\nIterator it = col.iterator();\n\nwhile(it.hasNext()){\n\nString str = (String)it.next();\n\nif(str.equals(oldValue)){\n\ncol.remove(oldValue);\n\ncol.add(newValue);\n\n}\n\n}\n\n",
    "ID" : "5602715fe4b043d0cb1d3a3a",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "代码示例：List接口的使用，包括如何定义、初始化、赋值、取值、修改值、删值"
  },
  {
    "ID" : "55e592e7e4b0152a610d3af4",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "以上都可以",
    "optionC" : "ClassLoader",
    "optionAnswer" : "C",
    "answer" : "ClassLoader类可以被继承。",
    "optionB" : "Math",
    "type" : "1",
    "optionA" : "Double",
    "question" : "下面哪些类可以被继承？ Java.lang.Thread、java.lang.Number、java.lang.Number.Double、java.lang.Number.Math、 java.lang.Number.ClassLoader"
  },
  {
    "ID" : "55e59381e4b0152a610d3c2b",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "以上都是",
    "optionC" : "对于新增和删除操作add和remove，LinedList比较占优势，因为ArrayList要移动数据。",
    "optionAnswer" : "D",
    "answer" : "A. ArrayList是实现了基于动态数组的数据结构，LinkedList基于链表的数据结构。  \/\/正确，这里的所谓动态数组并不是那个“ 有多少元素就申请多少空间 ”的意思，通过查看源码，可以发现，这个动态数组是这样实现的，如果没指定数组大小，则申请默认大小为10的数组，当元素个数增加，数组无法存储时，系统会另个申请一个长度为当前长度1.5倍的数组，然后，把之前的数据拷贝到新建的数组。\n- ---------------------------------------------------------------------\nB. 对于随机访问get和set，ArrayList觉得优于LinkedList，因为LinkedList要移动指针。\/\/正确，ArrayList是数组，所以，直接定位到相应位置取元素，LinkedLIst是链表，所以需要从前往后遍历。\n-----------------------------------------------------------------------\nC. 对于新增和删除操作add和remove，LinedList比较占优势，因为ArrayList要移动数据。\/\/正确，ArrayList的新增和删除就是数组的新增和删除，LinkedList与链表一致。\n-------------------------------------------------------------------------\nD. ArrayList的空间浪费主要体现在在list列表的结尾预留一定的容量空间，而LinkedList的空间花费则体现在它的每一个元素都需要消耗相当的空间。\/\/正确，因为ArrayList空间的增长率为1.5倍，所以，最后很可能留下一部分空间是没有用到的，因此，会造成浪费的情况。对于LInkedList的话，由于每个节点都需要额外的指针",
    "optionB" : "对于随机访问get和set，ArrayList觉得优于LinkedList，因为LinkedList要移动指针。",
    "type" : "1",
    "optionA" : "ArrayList是实现了基于动态数组的数据结构，LinkedList基于链表的数据结构。",
    "question" : "ArrayLists和LinkedList的区别，下述说法正确的有？"
  },
  {
    "answer" : "对于sleep()方法，我们首先要知道该方法是属于Thread类中的。而wait()方法，则是属于Object类中的。sleep()方法导致了程序暂停执行指定的时间，让出cpu该其他线程，但是他的监控状态依然保持者，当指定的时间到了又会自动恢复运行状态。\n在调用sleep()方法的过程中，线程不会释放对象锁。\n而当调用wait()方法的时候，线程会放弃对象锁，进入等待此对象的等待锁定池，只有针对此对象调用notify()方法后本线程才进入对象锁定池准备。",
    "ID" : "55f2e54fe4b0152a611434f2",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : " java 中的 wait()方法和 sleep()方法的区别是什么?"
  },
  {
    "ID" : "55e59380e4b0152a610d3be6",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "C，C++",
    "optionC" : "Java，Javascript",
    "optionAnswer" : "C",
    "answer" : "蔺相如 和 司马相如，都有 相如\n魏无忌 和 长孙无忌 都有 无忌\n名字里面由重复地方，但没有什么关系\n\n但是 D 选项 C 和 C plus plus ，后者是对前者的进阶版，不是很贴切",
    "optionB" : "JSP，servlet",
    "type" : "1",
    "optionA" : "PHP，Python",
    "question" : "蔺相如，司马相如；魏无忌，长孙无忌。下列哪一组对应关系与此类似()"
  },
  {
    "ID" : "55b5a91fe4b0ef2b575583ec",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "3 4 4",
    "optionC" : "2 2 3",
    "optionAnswer" : "C",
    "answer" : "c初始化的值为2，第二个输出中执行了自增操作，然而顺序为先输出，再自增。此时c的值变为3，因此输出结果依次为2 2 3。",
    "optionB" : "2 3 3",
    "type" : "1",
    "optionA" : "2 2 2",
    "question" : "以下程序的运行结果是:( )\npublic class Increment{\n    public static void main(String args[]){\n        int c;\n        c = 2;\n        System.out.println(c);\n        System.out.println(c++);\n        System.out.println(c);\n    }\n}\n"
  },
  {
    "ID" : "55e59380e4b0152a610d3c07",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "init",
    "optionC" : "dopost",
    "optionAnswer" : "A",
    "answer" : "HttpServlet容器响应Web客户请求流程如下：\n1）Web客户向Servlet容器发出Http请求；\n2）Servlet容器解析Web客户的Http请求；\n3）Servlet容器创建一个HttpRequest对象，在这个对象中封装Http请求信息；\n4）Servlet容器创建一个HttpResponse对象；\n5）Servlet容器调用HttpServlet的service方法，这个方法中会根据request的Method来判断具体是执行doGet还是doPost，把HttpRequest和HttpResponse对象作为service方法的参数传给HttpServlet对象；\n6）HttpServlet调用HttpRequest的有关方法，获取HTTP请求信息；\n7）HttpServlet调用HttpResponse的有关方法，生成响应数据；\n8）Servlet容器把HttpServlet的响应结果传给Web客户。\n\ndoGet() 或 doPost() 是创建HttpServlet时需要覆盖的方法.",
    "optionB" : "doget",
    "type" : "1",
    "optionA" : "service",
    "question" : "J2EE中，当把来自客户机的HTTP请求委托给servlet时，会调用HttpServlet的（? ??）方法"
  },
  {
    "ID" : "55e6d765e4b0152a610de70c",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "静态全局变量过大，可那会导致堆栈溢出",
    "optionC" : "设计和使用访问动态全局变量、静态全局变量、静态局部变量的函数时，需要考虑重入问题",
    "optionAnswer" : "D",
    "answer" : "静态变量放在程序的全局数据区，而不是在堆栈中分配，所以不可能导致堆栈溢出，D是错误的。",
    "optionB" : "若全局变量仅由单个函数访问，则可以将这个变量改为该函数的静态局部变量，以降低模块间的耦合度",
    "type" : "1",
    "optionA" : "若全局变量仅在单个C文件中访问，则可以将这个变量修改为静态全局变量，以降低模块间的耦合度",
    "question" : "关于static变量，请选择下面所有说法不正确的内容。"
  },
  {
    "answer" : "\/*实现字符串翻转*\/\nchar* reverse_str(char* str)\n{\n    if(NULL == str) \/\/字符串为空直接返回\n    {\n        return str;\n    }\n    char *begin;\n    char *end;\n    begin = end = str;\n    while(*end != '\\0') \/\/end指向字符串的末尾\n    {\n        end++;\n    }\n    --end;\n    char temp;\n    while(begin < end) \/\/交换两个字符\n    {\n        temp = *begin;\n        *begin = *end;\n        *end = temp;\n        begin++;\n        end--;\n    }\n    return str; \/\/返回结果\n}\nvoid main()\n{\n    char str[] = \"123456\";\n    printf(reverse_str(str));\n}",
    "ID" : "55f2e54fe4b0152a611434c0",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "使用C\/C++语言写一个函数，实现字符串的反转，要求不能用任何系统函数，且时间复杂度最小。\n函数原型是：char *reverse_str(char *str)"
  },
  {
    "answer" : "Ptr=(int *)&value;",
    "ID" : "55f2e550e4b0152a61143525",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "请问 c 语言中怎么去除 const 修饰？ 比如：\nconst double value=0.2f； double *ptr；\nptr 怎么样获取 value 的值？"
  },
  {
    "ID" : "55e58d70e4b0152a610d39e5",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "None of the above",
    "optionC" : "BAB",
    "optionAnswer" : "B",
    "answer" : "初始化过程是这样的： \r1.首先，初始化父类中的静态成员变量和静态代码块，按照在程序中出现的顺序初始化； \r2.然后，初始化子类中的静态成员变量和静态代码块，按照在程序中出现的顺序初始化； \r3.其次，初始化父类的普通成员变量和代码块，在执行父类的构造方法；\r4.最后，初始化子类的普通成员变量和代码块，在执行子类的构造方法； \r \r（1）初始化父类的普通成员变量和代码块，执行 C c = new C(); 输出C \r（2）super(\"B\"); 表示调用父类的构造方法，不调用父类的无参构造函数，输出B \r（3） System.out.print(\"B\"); \r 所以输出CBB",
    "optionB" : "CBB",
    "type" : "1",
    "optionA" : "BB",
    "question" : "What will be printed when you execute the following code?\rclass C {\r    C() {\r        System.out.print(\"C\");\r    }\r}\r \rclass A {\r    C c = new C();\r \r    A() {\r        this(\"A\");\r        System.out.print(\"A\");\r    }\r \r    A(String s) {\r        System.out.print(s);\r    }\r}\r \rclass Test extends A {\r    Test() {\r        super(\"B\");\r        System.out.print(\"B\");\r    }\r \r    public static void main(String[] args) {\r        new Test();\r    }\r}\r"
  },
  {
    "ID" : "dd89febabde811e6a0e100163e0021c8",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "4种",
    "optionC" : "3种",
    "optionAnswer" : "D",
    "answer" : "4中都是Java创建对象的方式。(1)和(2)都会明确的显式的调用构造函数 ；(3)是在内存上对已有对象的影印，所以不会调用构造函数 ；(4)是从文件中还原类的对象，也不会调用构造函数。",
    "optionB" : "2种",
    "type" : "1",
    "optionA" : "1种",
    "question" : "关于Java创建对象的几种方式的描述，正确的个数是？ (1) 用new语句创建对象，这是最常见的创建对象的方法。 (2) 运用反射手段,调用java.lang.Class或者java.lang.reflect.Constructor类的newInstance()实例方法。 (3) 调用对象的clone()方法。 (4) 运用反序列化手段，调用java.io.ObjectInputStream对象的 readObject()方法。"
  },
  {
    "ID" : "55b9d326e4b08f89c6185bd1",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "赋值语句",
    "optionC" : "循环语句",
    "optionAnswer" : "D",
    "answer" : "Java语言的流程控制结构包括分支语句、跳转语句、循环语句等，但是赋值语句是由赋值表达式构成的不能用于流程控制。",
    "optionB" : "跳转语句",
    "type" : "1",
    "optionA" : "分支语句",
    "question" : "以下各项中不属于Java语言流程控制结构的是( )。"
  },
  {
    "answer" : "2xx 4xx 5xx\nHTTP 1.1中的状态码被分为五大类： \n100-199 用于指定客户端应相应的某些动作。 \n200-299 用于表示请求成功。 \n300-399 用于已经移动的文件并且常被包含在定位头信息中指定新的地址信息。 \n400-499 用于指出客户端的错误。 \n500-599 用于支持服务器错误。 ",
    "ID" : "55f2e54fe4b0152a611434be",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : " http状态码中，()表示访问成功，()表示坏请求，()表示服务不可用"
  },
  {
    "ID" : "55e592e7e4b0152a610d3af8",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "父类Ｂ构造函数->父类Ｂ静态代码块->父类Ｂ非静态代码块->子类Ａ静态代码块->子类Ａ构造函数->子类Ａ非静态代码块",
    "optionC" : "父类Ｂ静态代码块->子类Ａ静态代码块->父类Ｂ非静态代码块->父类Ｂ构造函数->子类Ａ非静态代码块->子类Ａ构造函数",
    "optionAnswer" : "C",
    "answer" : "当实例化子类对象时，首先要加载父类的class文件进内存，静态代码块是随着类的创建而执行，所以父类静态代码块最先被执行，子类class文件再被加载，同理静态代码块被先执行；实例化子类对象要先调用父类的构造方法，而调用父类构造方法前会先执行父类的非静态代码块",
    "optionB" : "父类Ｂ静态代码块->父类Ｂ构造函数->父类Ｂ非静态代码块->子类Ａ静态代码块->子类Ａ构造函数->子类Ａ非静态代码块",
    "type" : "1",
    "optionA" : "父类Ｂ静态代码块->父类Ｂ构造函数->子类Ａ静态代码块->父类Ｂ非静态代码块->子类Ａ构造函数->子类Ａ非静态代码块",
    "question" : "子类A继承父类B \nA a = new A(); 则父类B构造函数、父类B静态代码块、父类B非静态代码块、子类A构造函数、子类A静态代码块、子类A非静态代码块 执行的先后顺序是？"
  },
  {
    "ID" : "55e58d70e4b0152a610d39f6",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "FileNotFoundException!IOException!Exception!",
    "optionC" : "FileNotFoundException!IOException!",
    "optionAnswer" : "A",
    "answer" : "题目说抛出一个异常，但是没说具体是什么异常，那么就要分情况了：\r1.如果抛出一个FileNotFoundException(或其子类)，那么最终结果就打印FileNotFoundException\r2.如果抛出一个IOException,或者IOException的子类(不包含FileNotFoundException及其子类)，那么最终结果就打印IOException\r3.如果抛出一个Exception(不包含IOException及其子类),那么最终结果就打印Exception.\r以上，所以3个皆有可能.但是，不管是哪一种情况，只会输出其中之一。\r从答案上来看，B,C，D的输出情况是不存在的。因此选A",
    "optionB" : "IOException!Exception!",
    "type" : "1",
    "optionA" : "IOException!",
    "question" : "下列程序的运行结果\rpublic void getCustomerInfo() {\r        try {\r            \/\/ do something that may cause an Exception\r        } catch (java.io.FileNotFoundException ex) {\r            System.out.print(\"FileNotFoundException!\");\r        } catch (java.io.IOException ex) {\r            System.out.print(\"IOException!\");\r        } catch (java.lang.Exception ex) {\r            System.out.print(\"Exception!\");\r        }\r    }"
  },
  {
    "ID" : "55e58d70e4b0152a610d39f5",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "不确定",
    "optionC" : "空",
    "optionAnswer" : "A",
    "answer" : "局部变量的作用域只在方法内部有效，在方法外无效",
    "optionB" : "welcome",
    "type" : "1",
    "optionA" : "1234",
    "question" : "public class Test\r{\r     public static void changeStr(String str)\r     {\r         str = \"welcome\";\r     }\r     public static void main(String[] args)\r     {\r         String str = \"1234\";\r         changeStr(str);\r         System.out.println(str);\r     }\r}\rPlease write the output result 。"
  },
  {
    "answer" : "1、将140克盐放天平两边平分两份各70克；\n2、将一份70克盐平分两份各35克；\n3、将7克和2克砝码各方天平一侧，取一份35克盐向天平两端加知道左右平衡，此时与7克砝码一侧为15克盐，与2克砝码一侧为20克盐；\n4、此时20克盐加70克盐为90克，剩余合并为50克。",
    "ID" : "55f2e54fe4b0152a611434f1",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "有7克，2克砝码各一个，天平一只，如何只用这些物品3次将140的盐分为50、90克各一份？"
  },
  {
    "ID" : "55e58d70e4b0152a610d39e8",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "运行时抛出异常",
    "optionC" : "编译错误",
    "optionAnswer" : "B",
    "answer" : "创建Object对象时，重写了equals方法。",
    "optionB" : " true",
    "type" : "1",
    "optionA" : "Fred",
    "question" : "以下java程序代码，执行后的结果是（）\rpublic class Test {\r    public static void main(String[] args) {   \r        Object o = new Object() {  \r             public boolean equals(Object obj) {  \r                 return true; \r         }\r     };   \r     System.out.println(o.equals(\"Fred\"));\r     }\r}"
  },
  {
    "ID" : "55e592e6e4b0152a610d3ae0",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "test.SuperTest.class",
    "optionC" : "test.SuperTest",
    "optionAnswer" : "C ",
    "answer" : "C.TestSuper和Date的getClass都没有重写，他们都是调用Object的getClass，而Object的getClass作用是返回的是运行时的类的名字。这个运行时的类就是当前类，所以\nsuper.getClass().getName()\n返回的是test.SuperTest，与Date类无关\n要返回Date类的名字需要写super.getClass().getSuperclass()",
    "optionB" : "SuperTest.class",
    "type" : "1",
    "optionA" : "SuperTest",
    "question" : "说明输出结果。package test;\nimport java.util.Date; \npublic class SuperTest extends Date{ \n    private static final long serialVersionUID = 1L; \n    private void test(){ \n       System.out.println(super.getClass().getName()); \n    } \n      \n    public static void main(String[]args){ \n       new SuperTest().test(); \n    } \n}"
  },
  {
    "ID" : "55e59381e4b0152a610d3c19",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "java.util",
    "optionC" : "java.io",
    "optionAnswer" : "A",
    "answer" : "Java会自动导入lang包",
    "optionB" : "java.system",
    "type" : "1",
    "optionA" : "java.lang",
    "question" : "在运行时，由java解释器自动引入，而不用import语句引入的包是()。"
  },
  {
    "answer" : "List接口中的对象按一定顺序排列，允许重复\n\nSet接口中的对象没有顺序，但是不允许重复\n\nMap接口中的对象是key、value的映射关系，key不允许重复",
    "ID" : "5602715fe4b043d0cb1d3a3c",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "描述List接口、Set接口和Map接口的特点"
  },
  {
    "answer" : "93 的二进制 为01011101\n-8 的原码为10001000 补码为11111000\n取与为 01011000 为88",
    "ID" : "55f2e54fe4b0152a611434f5",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "运算（93&-8）的结果为（）"
  },
  {
    "answer" : "Map map = new HashMap();\n\nString oldValue = “abcd”;\n\nString newValue = “1234″;\n\n\/\/增加\n\nmap.put(“1″,oldValue);\n\nSet set = map.keySet( );\n\nIterator it = set.iterator( );\n\nwhile(it.hasNext( )){\n\nString key = (String)it.next( );\n\n\/\/取值\n\nString value = map.get(key);\n\n}\n\n\/\/修改\n\nmap.put(“1″,newValue);\n\n\/\/删除\n\nmap.remove(“1″);\n\n}\n\n",
    "ID" : "5602715fe4b043d0cb1d3a3b",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "代码示例：Map接口的使用，包括如何定义、初始化、赋值、取值、修改值、删"
  },
  {
    "ID" : "55e59380e4b0152a610d3bd2",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "ABC都是",
    "optionC" : "ServletConfig接口定义了在Servlet初始化的过程中由Servlet容器传递给Servlet得配置信息对象",
    "optionAnswer" : "D",
    "answer" : "Servlet\n–GenericServlet\n–HttpServlet\n–自己的servlet\nServletRequest\n–HttpServletRequest\nServletResponse\n–HttpServletResponse",
    "optionB" : "大多数Servlet通过从GenericServlet或HttpServlet类进行扩展来实现",
    "type" : "1",
    "optionA" : "GenericServlet类：抽象类，定义一个通用的、独立于底层协议的Servlet。",
    "question" : "下面有关servlet的层级结构和常用的类，说法正确的有?"
  },
  {
    "ID" : "55e59380e4b0152a610d3beb",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "只要没有定义不带参数的构造函数，JVM都会为类生成一个默认构造函数",
    "optionC" : "使用别的类的方法仅仅需要引用方法的名字即可",
    "optionAnswer" : "B",
    "answer" : "A在类中定义的变量称为类的成员变量，在别的类中不可以直接使用局部变量的\nC使用别的类的方法需要通过该类的对象引用方法的名字\nD只要没有定义任何构造函数，JVM都会为类生成一个默认构造函数",
    "optionB" : "局部变量的作用范围仅仅在定义它的方法内，或者是在定义它的控制流块中",
    "type" : "1",
    "optionA" : "在类中定义的变量称为类的成员变量，在别的类中可以直接使用",
    "question" : "关于类的叙述正确的是（）。"
  },
  {
    "answer" : "写一个类继承Exception\n\n用户自定义异常通常属Exception范畴，依据惯例，应以Exception结尾，应该由人工创建并抛出。",
    "ID" : "5602715fe4b043d0cb1d3a34",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "简述自定义异常的规则"
  },
  {
    "answer" : "下面列出了Array和ArrayList的不同点：  1、Array可以包含基本类型和对象类型，ArrayList只能包含对象类型。 2、Array大小是固定的，ArrayList的大小是动态变化的。 3、ArrayList提供了更多的方法和特性，比如：addAll()，removeAll()，iterator()等等。 4、对于基本类型数据，集合使用自动装箱来减少编码工作量。但是，当处理固定大小的基本数据类型的时候，这种方式相对比较慢。",
    "ID" : "a4e5034cbdee11e6a0e100163e0021c8",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "数组(Array)和列表(ArrayList)有什么区别？什么时候应该使用Array而不是ArrayList？"
  },
  {
    "ID" : "55e59380e4b0152a610d3bce",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "abstract final double hyperbolicCosine( )",
    "optionC" : "abstract double d",
    "optionAnswer" : "B",
    "answer" : "A：java的访问权限有public、protected、private和default的，default不能修饰变量\nC：普通变量不能用abstract修饰，abstract一般修饰方法和类\nD：被定义为abstract的类需要被子类继承，但是被修饰为final的类是不能被继承和改写的\n心存疑问可以实验一下，看是否能通过编译",
    "optionB" : "public final static native int w( )",
    "type" : "1",
    "optionA" : "default String s",
    "question" : "以下声明合法的是"
  },
  {
    "answer" : "封装　隔离\n\n接口及相关机制的最基本作用在于：通过接口可以实现不相关类的相同行为，\n\n而不需考虑这些类之间的层次关系。\n\n    根据接口可以了解对象的交互界面，而不需了解对象所属的类。\n\n面向对象程序设计讲究”提高内聚，降低耦合”。",
    "ID" : "5602715ee4b043d0cb1d3a28",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "描述接口的基本思想？"
  },
  {
    "answer" : "\/Writer写入操作\n\n        FileOutputStream fos=new FileOutputStream(“a.txt”);\n\n        OutputStreamWriter osw=new OutputStreamWriter(fos);\n\n        BufferedWriter bw=new BufferedWriter(osw);\n\n        bw.write(“欢迎来到java快车”);\n\n        bw.close();\n\n        \/\/Reader读取操作\n\n        FileInputStream fis=new FileInputStream(“a.txt”);\n\n        InputStreamReader isr=new InputStreamReader(fis);\n\n        BufferedReader br=new BufferedReader(isr);\n\n        String str=br.readLine();\n\n        System.out.println(str);\n\n",
    "ID" : "5602715fe4b043d0cb1d3a40",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "代码示例：如何使用Reader和Writer来进行输入输出"
  },
  {
    "ID" : "55b227dfe4b0bb7ded0a8cbc",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "A和B都不对",
    "optionC" : "A和B都对",
    "optionAnswer" : "B",
    "answer" : "在调用函数时，会给参数赋一个临时名称用于函数内部，这个名称（参数名）叫做形参，实际传入方法的参数，叫实参。实参的作用域在方法外，形参的作用域在方法内。基本类型和对象在参数传递的过程中，有不同的形式：\n对于基本类型，传递的时候，将实参值复制，方法内获得的形参与实参没有关系，只是值相同，称为值传递，在方法中修改形参不影响实参；\n对于对象，传递的时候，将实参引用复制，形参与实参引用相同，指向的是同一个对象，称为引用传递，在方法中修改形参会影响实参。\n",
    "optionB" : "用对象作为参数",
    "type" : "1",
    "optionA" : "用基本数据类型作为参数",
    "question" : "在调用方法时，若要使方法改变实参的值，可以（)"
  },
  {
    "ID" : "55e592e6e4b0152a610d3abf",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : ">>>=",
    "optionC" : "<<<=",
    "optionAnswer" : "C",
    "answer" : "A.很明显是赋值符号 \nB.<<=左移赋值 \nC.不是 \nD.>>>= 右移赋值，左边空出的位以0填充",
    "optionB" : "<<=",
    "type" : "1",
    "optionA" : "+=",
    "question" : "以下哪一个不是赋值符号？"
  },
  {
    "answer" : "import java.util.ArrayList;\n \npublic class RangeTest {\n \n    public static void main(String[] args) {\n         \n        Range r1=new Range(4, 8);\n        Range r2=new Range(9, 13);\n        Range r3=new Range(6, 12);\n        Range r4=new Range(7, 10);\n        Range[] aR=new Range[]{r1,r2};\n        Range[] bR=new Range[]{r3,r4};\n        ArrayList<Range> result=getRangeSet(aR, bR);\n        for(int i=0;i<result.size();i++){\n            System.out.println(result.get(i));\n        }\n         \n    }\n    public static ArrayList<Range> getRangeSet(Range[] aR, Range[] bR){\n        ArrayList<Range> ranges=new ArrayList<Range>();\n        for(int i=0;i<bR.length;i++){\n            for(int j=0;j<aR.length;j++){\n                if(aR[j].right<bR[i].left){\n                    break;  \/\/无交集\n                }else if(aR[j].right>bR[i].left){\n                    int left=aR[j].left>bR[i].left ? aR[j].left:bR[i].left;   \/\/选大的那个\n                    int right=aR[j].right<bR[i].right ? aR[j].right:bR[i].right;   \/\/选小的那个\n                    Range range=new Range(left, right);\n                    ranges.add(range);\n                }\n            }\n        }\n        return ranges;\n    }\n}\nclass Range{\n    int left;\n    int right;\n    public Range(int num1, int num2){\n        left=num1;\n        right=num2;\n    }\n    @Override\n    public String toString() {\n        return \" [left=\" + left + \", right=\" + right + \"]\";\n    }\n     \n}\n",
    "ID" : "55f2e54fe4b0152a611434c2",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "有两个有序的集合，集合的每个元素都是一段范围，求其交集，例如集合{[4,8],[9,13]}和{[6,12]}的交集为{[6,8],[9,12]}"
  },
  {
    "answer" : "读：\n\nProperties props = System.getProperties();\n\nEnumeration prop_names = props.propertyNames();\n\nwhile (prop_names.hasMoreElements()) {\n\nString prop_name = (String) prop_names.nextElement();\n\nString property = props.getProperty(prop_name);\n\nSystem.out.println(“Property ‘” + prop_name + “‘ is ‘”+ property + “‘”);\n\n}\n\n    写：\n\n    System.setProperties(props);",
    "ID" : "5602715ee4b043d0cb1d3a23",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "如何使用Java读写系统属性"
  },
  {
    "answer" : "3:01",
    "ID" : "55f2e54fe4b0152a6114350a",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "一堆硬币，一个机器人，如果是反的就翻正，如果是正的就抛掷一次，无穷多次后，求正反的比例。"
  },
  {
    "ID" : "55e58d70e4b0152a610d3a07",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "service判断请求类型，决定是调用doGet还是doPost方法",
    "optionC" : "service()是在javax.servlet.Servlet接口中定义的",
    "optionAnswer" : "B",
    "answer" : "基本功能：service方法是在servlet生命周期中的服务期，根据HTTP请求方法（GET、POST等），将请求分发到doGet、doPost等方法\r实现：默认在HttpServlet类中实现。",
    "optionB" : "doGet\/doPost 则是在 javax.servlet.GenericServlet 中实现的",
    "type" : "1",
    "optionA" : "不管是post还是get方法提交过来的连接，都会在service中处理",
    "question" : "下面有关servlet service描述错误的是？"
  },
  {
    "answer" : "TCP（传输控制协议）和UDP（用户数据报协议）是传输层协议\n\nTCP是面向连接的可靠数据传输协议，能保证传输内容的完整和准确；数据传输的辅助开销大，效率低\n\nUDP: 是无连接的，不可靠地传输协议，不能保证传输内容的完整和准确，对信息的适时要求比较高",
    "ID" : "5602715fe4b043d0cb1d3a4e",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "TCP和UDP区别"
  },
  {
    "ID" : "55e59380e4b0152a610d3be1",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "以上都不正确",
    "optionC" : "Java程序经编译后会产生DLL",
    "optionAnswer" : "B",
    "answer" : "Java字节码是Java源文件编译产生的中间文件\njava虚拟机是可运行java字节码的假想计算机 java的跨平台性也是相对与其他编程语言而言的\n先介绍一下c语言的编译过程吧先是C语言源程序 也就是c的文件经过C编译程序编译后，生成windows可执行文件exe文件，然后在windows中执行。再介绍java的编译过程先是java源程序扩展名为java的文件，由java编译程序将java字节码文件，就是class文件然后在java虚拟机中执行。机器码是由CPU来执行的。Java编译后是字节码， 电脑只能运行机器码。Java在运行的时候把字节码变成机器码。C\/C++在编译的时候直接编译成机器码。",
    "optionB" : "Java程序经编译后会产生byte code",
    "type" : "1",
    "optionA" : "Java程序经编译后会产生machine code",
    "question" : "下列语句哪一个正确（ ）"
  },
  {
    "ID" : "55b227dee4b0bb7ded0a8c9d",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "第1行、第2行和第3行的声明都是正确的 ",
    "optionC" : "第1、2、3行能通过编译，但第2、3行运行时出错",
    "optionAnswer" : "D",
    "answer" : "子类继承父类的所有属性和方法，B为A的子类，用A可以实例化B；C为B的子类，用B可以实例化C；间接的，C也是A的子类，故有   A a2=new C();",
    "optionB" : "第1、2行能通过编译，但第3行编译出错",
    "type" : "1",
    "optionA" : "只有第1行能通过编译",
    "question" : "A派生出子类B，B派生出子类C，并且在Java源代码中有如下声明： \n1.    A  a0=new  A();\n2.    A  a1 =new  B();\n3.    A  a2=new  C();\n问以下哪个说法是正确的？ （ ）\n"
  },
  {
    "ID" : "55e59382e4b0152a610d3c49",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "File",
    "optionC" : "FileWriter",
    "optionAnswer" : "D",
    "answer" : "A按字节流输入\nB按字符流输入\nC：按字符流输出",
    "optionB" : "FileReader",
    "type" : "1",
    "optionA" : "FileInputStream",
    "question" : "在Java中，( )类提供定位本地文件系统，对文件或目录及其属性进行基本操作"
  },
  {
    "ID" : "55e592e6e4b0152a610d3acc",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "3",
    "optionC" : "2",
    "optionAnswer" : "A",
    "answer" : "先计算表达式的值，得0，然后i加1，此时i=1，最后赋值，赋值是把表达式的值赋值，所以，i又变成0了",
    "optionB" : "1",
    "type" : "1",
    "optionA" : "0",
    "question" : "检查程序，是否存在问题，如果存在指出问题所在，如果不存在，说明输出结果。package algorithms.com.guan.javajicu; \npublic class Inc { \n    public static void main(String[] args) { \n       Inc inc = new Inc(); \n       int i = 0; \n       inc.fermin(i); \n       i= i ++; \n       System.out.println(i);\n    \n    } \n    void fermin(int i){ \n       i++; \n    } \n}"
  },
  {
    "answer" : "功能：可以截获所声明的异常，并在语句块内对其进行处理\n\n规则：catch(Exeption e){\n\ne.printStackTrace( );\n\n     }\n\n",
    "ID" : "5602715ee4b043d0cb1d3a2f",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "简述catch块的功能和规则"
  },
  {
    "ID" : "55b5a91fe4b0ef2b575583ef",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "()",
    "optionC" : "!",
    "optionAnswer" : "D",
    "answer" : "指针最优，单目运算优于双目运算。如正负号。先乘除（模），后加减。先算术运算，后移位运算，最后位运算。逻辑运算最后计算。ABC选项都属于逻辑运算，D选项优先级最高。",
    "optionB" : "||",
    "type" : "1",
    "optionA" : "&&",
    "question" : "下面哪一个操作符的优先级最高？  （ )"
  },
  {
    "ID" : "55e59380e4b0152a610d3bf5",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "The code may ruin with output “A A A B C A B C C “, then exit.",
    "optionC" : "The code may rum with output “A B C A B C A B C “, then exit.",
    "optionAnswer" : "C",
    "answer" : "首先应当明确  ，打印发生在至少添加了一次或两次ABC，而且第一次打印长度至少为3，第二次打印长度一定为6，而且第二次打印的顺序一定是ABCABC这种情况。所以这个打印的结果一定是A(X1)B(X2)C(X3)ABCABC。Xi的取值是集合{ABC}的子集（这个说法不一定准确，可以自己体会一下）。这道题的结果 后六位必须是ABCABC 所以只能选C",
    "optionB" : "The code may rum with output “A B A B C C “, then exit.",
    "type" : "1",
    "optionA" : "The code may run with no output, exiting normally(正常地).",
    "question" : "public class NameList\n{\n    private List names = new ArrayList();\n    public synchronized void add(String name)\n    {\n        names.add(name);\n    }\n    public synchronized void printAII()\n    {\n        for (int i = 0; i < names.size(); i++)\n        {\n            System.out.print(names.get(i) + ””);\n        }\n    }\n \n    public static void main(String[]args)\n    {\n        final NameList sl = new NameList();\n        for (int i = 0; i < 2; i++)\n        {\n            new Thread()\n            {\n                public void run()\n                {\n                    sl.add(“A”);\n                    sl.add(“B”);\n                    sl.add(“C”);\n                    sl.printAll();\n                }\n            } .start();\n        }\n    }\n}\nWhich two statements are true if this class is compiled and run?"
  },
  {
    "answer" : "使用多线程的时候，一种非常简单的避免死锁的方式就是：指定获取锁的顺序，并强制线程按照指定的顺序获取锁。因此，如果所有的线程都是以同样的顺序加锁和释放锁，就不会出现死锁了。",
    "ID" : "f1ece2fabded11e69a7900163e0021c8",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "如何确保N个线程可以访问N个资源同时又不导致死锁？"
  },
  {
    "answer" : "Array可以容纳基本类型和对象，而ArrayList只能容纳对象。\rArray是指定大小的，而ArrayList大小是固定的。\rArray没有提供ArrayList那么多功能，比如addAll、removeAll和iterator等。尽管ArrayList明显是更好的选择，但也有些时候Array比较好用。\r\r（1）如果列表的大小已经指定，大部分情况下是存储和遍历它们。\r\r（2）对于遍历基本数据类型，尽管Collections使用自动装箱来减轻编码任务，在指定大小的基本类型的列表上工作也会变得很慢。\r\r（3）如果你要使用多维数组，使用[][]比List<List<>>更容易。",
    "ID" : "55f2e483e4b0152a611431a6",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "Array和ArrayList有何区别？什么时候更适合用Array？"
  },
  {
    "answer" : "#include <iostream>\nusing namespace std;\nint sum(int n,int m)\n{\n    int res=1;\n    int A[100];\n    A[0]=1;\n    A[1]=0;\n    A[2]=0;\n    if(n<3)\n        return res;\n    for(int i=3;i<=n;i++)\n    {   \n        A[i]=(res-A[i-1]-A[i-2])*m;\n        res+=A[i];\n        if(i>=5)\n            res-=A[i-5];\n    }\n    return res;\n}\nint main()\n{\n    int n,m;\n    cin>>n>>m;\n    cout<<sum(n,m)<<endl;\n    return 0;\n}",
    "ID" : "55f2e54fe4b0152a611434da",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "某星球上出现了一种怪物， 这种怪物是单亲繁殖，从出生起第3个月起每个月就能繁衍一批后代共m个，但是这种怪物很短命，生存第5个月后就会毙命。目前该星球有一个这样的怪物，请编写程序计算n个月后怪物的总数。(这里我们假定第5个月怪物繁衍后再毙命)"
  },
  {
    "ID" : "55b227dee4b0bb7ded0a8ca2",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "不能成功编译，行3出错",
    "optionC" : "行2出错，不能成功编译",
    "optionAnswer" : "D",
    "answer" : "Object类没有equals()方法 只有equals(Object obj)方法。",
    "optionB" : "编译通过但运行时出错",
    "type" : "1",
    "optionA" : "编译通过运行无异常",
    "question" : " 编译并运行以下程序，以下描述哪个选项是正确的（ ）\n1.  class  A{\n2.      protected  boolean  equals(){\n3.           return  super.equals();\n4． }\n5. }\n"
  },
  {
    "answer" : "Iterator接口提供了很多对集合元素进行迭代的方法。每一个集合类都包含了可以返回迭代器实例的 迭代方法。迭代器可以在迭代的过程中删除底层集合的元素。  克隆(cloning)或者是序列化(serialization)的语义和含义是跟具体的实现相关的。因此，应该由集合类的具体实现来决定如何被克隆或者是序列化。",
    "ID" : "25e821e6bdee11e69a7900163e0021c8",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "什么是迭代器(Iterator)？"
  },
  {
    "answer" : "String 类所定义的对象是用于存放”长度固定”的字符串。  \n\nStringBuffer类所定义的对象是用于存放”长度可变动”的字符串。  ",
    "ID" : "5602715de4b043d0cb1d39d6",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "请讲述String 和StringBuffer的区别。  "
  },
  {
    "answer" : "我们可以使用Collections.synchronizedCollection(Collection c)根据指定集合来获取一个synchronized（线程安全的）集合。",
    "ID" : "55f2e484e4b0152a611431b3",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "我们如何从给定集合那里创建一个synchronized的集合？"
  },
  {
    "answer" : "可以包含其他对象的简单对象就叫集合\n\n集合框架中所包含的对象就叫做元素",
    "ID" : "5602715fe4b043d0cb1d3a37",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "什么是集合？什么是元素？"
  },
  {
    "answer" : "垃圾回收的目的是识别并且丢弃应用不再使用的对象来释放和重用资源。",
    "ID" : "8cbc7e84bdef11e69a7900163e0021c8",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "Java中垃圾回收有什么目的？什么时候进行垃圾回收？"
  },
  {
    "answer" : "hosts文件篡改， 本机DNS服务器IP地址篡改，DNS通讯包篡改。",
    "ID" : "55f2e54fe4b0152a611434d5",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "DNS欺骗的方式有哪些？"
  },
  {
    "ID" : "55e592e6e4b0152a610d3ad0",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "Java平台的java.lang.ThreadLocal是TLS技术的一种实现",
    "optionC" : "每一个线程都拥有自己的变量副本，从而也就没有必要对该变量进行同步了",
    "optionAnswer" : "C",
    "answer" : "C：同一全局变量或者静态变量每个线程访问的是同一变量，多个线程同时访存同一全局变量或者静态变量时会导致冲突，尤其是多个线程同时需要修改这一变量时，通过TLS机制，为每一个使用该全局变量的线程都提供一个变量值的副本，每一个线程均可以独立地改变自己的副本，而不会和其它线程的副本冲突。",
    "optionB" : "TLS会为每一个线程维护一个和该线程绑定的变量的副本",
    "type" : "1",
    "optionA" : "解决多线程中的对同一变量的访问冲突的一种技术",
    "question" : "对于线程局部存储TLS(thread local storage)，以下表述不正确的是"
  },
  {
    "ID" : "55e59380e4b0152a610d3bf9",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "以上都不对",
    "optionC" : "进入”Dead”状态的线程将被垃圾回收器回收",
    "optionAnswer" : "D",
    "answer" : "A：垃圾收集器（GC）程序开发者只能推荐JVM进行回收，但何时回收，回收哪些，程序员不能控制。\nB：垃圾回收机制只是回收不再使用的JVM内存，如果程序有严重BUG，照样内存溢出。\nC：进入DEAD的线程，它还可以恢复，GC不会回收",
    "optionB" : "垃圾回收机制保证了JAVA程序不会出现 内存溢出",
    "type" : "1",
    "optionA" : "垃圾收集允许程序开发者明确指定释放 哪一个对象",
    "question" : "以下哪项陈述是正确的？"
  },
  {
    "ID" : "55e592e6e4b0152a610d3aa8",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "声明抽象方法不可写出大括号",
    "optionC" : "声明抽象方法，大括号可有可无",
    "optionAnswer" : "D",
    "answer" : "选d，abstract修饰符用来修饰类和成员方法\n1：用abstract修饰的类表示抽象类，抽象类位于继承树的抽象层，抽象类不能被实例化。\n2：用abstract修饰的方法表示抽象方法,抽象方法没有方法体。抽象方法用来描述系统具有什么功能，但不提供具体的实现。\nAbstract是Java中的一个重要关键字，可以用来修饰一个类或者一个方法。 修饰一个方法时，表示该方法只有特征签名（signature），没有具体实现，而是把具体实现留给继承该类的子类。一个类中只要有一个abstract 方法，那么这个类就要被声明为abstract，但是其中可以有非abstract方法。 abstract类可以使得类的设计者能够创建方法的原型，而真正的实现留给使用这个类的人。",
    "optionB" : "抽象方法的body部分必须用一对大括号{ }包住",
    "type" : "1",
    "optionA" : "abstract修饰符可修饰字段、方法和类",
    "question" : "下列哪一种叙述是正确的（ ）"
  },
  {
    "ID" : "75eada48bdf411e69a7900163e0021c8",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "array index out of boundary",
    "optionC" : "recursive function calling",
    "optionAnswer" : "C",
    "answer" : "Java程序在运行时也可能会遭遇StackOverflowError，这是一个无法恢复的错误，只能重新修改代码了。如果写了不能迅速收敛的递归，则很有可能引发栈溢出的错误，如下所示： class StackOverflowErrorTest {     public static void main(String[] args) {         main(null);     } } 提示：用递归编写程序时一定要牢记两点：1. 递归公式；2. 收敛条件（什么时候就不再继续递归）。",
    "optionB" : "write on an invalid memory space",
    "type" : "1",
    "optionA" : "lack of memory",
    "question" : "If a process reports a stack overflow run-time error, what’s the most possible cause?"
  },
  {
    "ID" : "55b9d326e4b08f89c6185bd0",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "exe",
    "optionC" : "html",
    "optionAnswer" : "B",
    "answer" : "该题考查对Applet运行中所需要的几种文件的理解。Applet源程序与任何Java源程序一样，其文件扩展名都为java，编译之后生成的目标文件的扩展名为class，但要执行该小程序，必须有相应的html文件；而.exe文件根本就与JavaApplet不沾边。",
    "optionB" : "class",
    "type" : "1",
    "optionA" : "java",
    "question" : "编译Java Applet源程序文件产生的字节码文件的扩展名为( )。"
  },
  {
    "ID" : "55b227dee4b0bb7ded0a8cac",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "nt[][] a4=new int[3][3];",
    "optionC" : "String a3[]=new String(3);",
    "optionAnswer" : "C",
    "answer" : "应为String a3[]=new String[3];",
    "optionB" : "String a2[]={\"string1\",\"string1\",\"string1\"};",
    "type" : "1",
    "optionA" : "int a1[]={3,4,5};",
    "question" : "下面关于数组声明和初始化的语句那个有语法错误？（）"
  },
  {
    "ID" : "55e592e7e4b0152a610d3b1b",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "java还实现了真数组，避免了覆盖数据的可能",
    "optionC" : "java自己操纵内存减少了内存出错的可能性",
    "optionAnswer" : "B",
    "answer" : "答案：B 跨平台不属于鲁棒性",
    "optionB" : "java能运行虚拟机实现跨平台",
    "type" : "1",
    "optionA" : "java能检查程序在变异和运行时的错误",
    "question" : " 下列不属于java语言鲁棒性特点的是"
  },
  {
    "answer" : "存在 。如果i为int型，那么当i为int能表示的最大整数时，i+1就溢出变成负数了，此时不就<i了吗。",
    "ID" : "27f94c28bde711e69a7900163e0021c8",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "存在使i + 1 < i的数吗（）"
  },
  {
    "ID" : "55e59380e4b0152a610d3c00",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "结果不确定",
    "optionC" : "Hello",
    "optionAnswer" : "B",
    "answer" : "其实这个题还有一个考察点是synchronized关键字，但因为并没有用start()另起一个线程，所以调用run()和调用Sogou()方法都是同一个对象，所以不会产生死锁",
    "optionB" : "SogouHello",
    "type" : "1",
    "optionA" : "HelloSogou",
    "question" : "以下JAVA程序的输出是什么（）public class HelloSogou{\n     public static synchronized void main(String[] a){\n         Thread t=new Thread(){\n             public void run(){Sogou();}\n     };\n     t.run();\n     System.out.print(\"Hello\");\n     }\n     static synchronized void Sogou(){\n     System.out.print(\"Sogou\");\n    }\n}"
  },
  {
    "ID" : "55b9d326e4b08f89c6185bc5",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "默认参数",
    "optionC" : "带多个参数",
    "optionAnswer" : "A",
    "answer" : "本题考查对默认构造方法的理解。要熟记构造方法的几个特点：①构造方法用来初始化类的一个对象。②构造方法具有和类一样的名称，并且没有返回类型还可以重载。③只能用运算符new调用构造方法。④如果没有定义构造方法，在Java运行时，系统会自动提供默认的构造方法，它没有任何参数。",
    "optionB" : "带一个参数",
    "type" : "1",
    "optionA" : "不带参数",
    "question" : "在没有为类定义任何构造方法时，Java编译器会自动建立一个(  )的构造方法"
  },
  {
    "ID" : "55e592e7e4b0152a610d3b05",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "程序通过编译，输出结果为：x=102",
    "optionC" : "5行不能通过编译，因为引用了私有静态变量",
    "optionAnswer" : "D",
    "answer" : "main是HasStatic的静态方法，在其内部可直接访问静态变量，不存在因为私有变量不能通过编译的问题；如果在其他类中，包括HasStatic的派生类中，均不能访问其私有静态变量",
    "optionB" : "10行不能通过编译，因为x是私有静态变量",
    "type" : "1",
    "optionA" : "程序通过编译，输出结果为：x=103",
    "question" : "关于以下程序代码的说明正确的是?1. public class HasStatic{\n2.     private static int x=100;\n3.     public static void main(String args[]){\n4.          HasStatic hs1=new HasStatic();\n5.          hs1.x++;\n6.          HasStatic  hs2=new HasStatic();\n7.          hs2.x++;\n8.          hs1=new HasStatic();\n9.          hs1.x++;\n10.        HasStatic.x--;\n11.        System.out.println(\"x=\"+x);\n12.     }\n13.   } "
  },
  {
    "answer" : "下面列出了他们的区别：  1、Iterator可用来遍历Set和List集合，但是ListIterator只能用来遍历List。 2、Iterator对集合只能是前向遍历，ListIterator既可以前向也可以后向。 3、ListIterator实现了Iterator接口，并包含其他的功能，比如：增加元素，替换元素，获取前一个和后一个元素的索引，等等。",
    "ID" : "3bff16cebdee11e6a0e100163e0021c8",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "Iterator和ListIterator的区别是什么？"
  },
  {
    "ID" : "55e592e6e4b0152a610d3ac7",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "静态全局变量过大，可那会导致堆栈溢出",
    "optionC" : "设计和使用访问动态全局变量、静态全局变量、静态局部变量的函数时，需要考虑重入问题",
    "optionAnswer" : "D",
    "answer" : "对于D：静态变量放在程序的全局数据区，而不是在堆栈中分配，所以不可能导致堆栈溢出，D是错误的。",
    "optionB" : "若全局变量仅由单个函数访问，则可以将这个变量改为该函数的静态局部变量，以降低模块间的耦合度",
    "type" : "1",
    "optionA" : "若全局变量仅在单个C文件中访问，则可以将这个变量修改为静态全局变量，以降低模块间的耦合度",
    "question" : "关于static变量，请选择下面所有说法错误的选项（）"
  },
  {
    "ID" : "55e592e6e4b0152a610d3ade",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "new String(String.getBytes(\"GB2312\"))",
    "optionC" : "new String(String.getBytes(\"ISO8859-1\"))",
    "optionAnswer" : "A",
    "answer" : "答案：A 注意这里\"ISO8859-1\"是一个普通字符串，不要被迷惑了\nString.getBytes(\"ISO8859-1\"）表示获取这个字符串的byte数组，\n然后new String(String.getBytes(\"ISO8859-1\"），GB2312)是上面的字符数组按照GB2312编码成新的字符串",
    "optionB" : "new String(String.getBytes(\"GB2312\"），ISO8859-1)",
    "type" : "1",
    "optionA" : "new String(String.getBytes(\"ISO8859-1\"），GB2312)",
    "question" : "java中将ISO8859-1字符串转成GB2312编码，语句为 ？  "
  },
  {
    "ID" : "55e59382e4b0152a610d3c4f",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "response对象：response对象包含了响应客户请求的有关信息",
    "optionC" : "application对象：application对象实现了用户间数据的共享，可存放全局变量，可以有多个",
    "optionAnswer" : "C",
    "answer" : "application对象，为多个应用程序保存信息，只有一个",
    "optionB" : "request对象：客户端的请求信息被封装在request对象中，通过它才能了解到客户的需求，然后做出响应",
    "type" : "1",
    "optionA" : "session对象：session对象指的是客户端与服务器的一次会话，从客户连到服务器的一个WebApplication开始，直到客户端与服务器断开连接为止",
    "question" : "下面有关JSP内置对象的描述，说法错误的是？"
  },
  {
    "ID" : "55e59381e4b0152a610d3c1d",
    "typeID" : "54993704e4b06783458bdee5",
    "optionD" : "The text“false”is displayed.",
    "optionC" : "The text“true” is displayed.",
    "optionAnswer" : "C",
    "answer" : "JAVA的赋值运算是有返回值的，赋了什么值，就返回什么值，大家可以拿这个做理解\nint a=b=1;\n选d的都是有一定基础的人，因为第一行Boolean，包装类，不是基本类型boolean，有些高手可能觉得，包装类被重新赋值后返回的是旧值，但并不是这样。",
    "optionB" : "An exception is thrown at run-time at the “if” statement.",
    "type" : "1",
    "optionA" : "The code fails to compile at the “if” statement.",
    "question" : "What is the result of compiling and executing the following fragment of code:Boolean flag = false;\nif (flag = true)\n{\n    System.out.println(“true”);\n}\nelse\n{\n    System.out.println(“false”);\n}"
  },
  {
    "answer" : "List<String> strList = new ArrayList<>();\r\r\/\/使用for-each循环\rfor(String obj : strList){\r  System.out.println(obj);\r}\r\r\/\/using iterator\rIterator<String> it = strList.iterator();\rwhile(it.hasNext()){\r  String obj = it.next();\r  System.out.println(obj);\r}",
    "ID" : "55f2e483e4b0152a61143199",
    "typeID" : "54993704e4b06783458bdee5",
    "type" : "2",
    "question" : "遍历一个List有哪些不同的方式？"
  },{"ID":"1250","typeID":"11","question":"Java\u4e2d\u4f60\u600e\u6837\u5524\u9192\u4e00\u4e2a\u963b\u585e\u7684\u7ebf\u7a0b\uff1f","answer":"\u5982\u679c\u7ebf\u7a0b\u56e0\u4e3a\u8c03\u7528wait()\u3001sleep()\u3001\u6216\u8005join()\u65b9\u6cd5\u800c\u5bfc\u81f4\u7684\u963b\u585e\uff0c\u53ef\u4ee5\u4e2d\u65ad\u7ebf\u7a0b\uff0c\u5e76\u4e14\u901a\u8fc7\u629b\u51faInterruptedException\u6765\u5524\u9192\u5b83\u3002"},{"ID":"1249","typeID":"11","question":"\u4e3a\u4ec0\u4e48\u6211\u4eec\u8c03\u7528start()\u65b9\u6cd5\u65f6\u4f1a\u6267\u884crun()\u65b9\u6cd5\uff0c\u4e3a\u4ec0\u4e48\u6211\u4eec\u4e0d\u80fd\u76f4\u63a5\u8c03\u7528run()\u65b9\u6cd5\uff1f","answer":"\u5f53\u8c03\u7528start()\u65b9\u6cd5\u65f6\u4f60\u5c06\u521b\u5efa\u65b0\u7684\u7ebf\u7a0b\uff0c\u5e76\u4e14\u6267\u884c\u5728run()\u65b9\u6cd5\u91cc\u7684\u4ee3\u7801\u3002\u4f46\u662f\u5982\u679c\u76f4\u63a5\u8c03\u7528run()\u65b9\u6cd5\uff0c\u5b83\u4e0d\u4f1a\u521b\u5efa\u65b0\u7684\u7ebf\u7a0b\u4e5f\u4e0d\u4f1a\u6267\u884c\u8c03\u7528\u7ebf\u7a0b\u7684\u4ee3\u7801\u3002"},{"ID":"1248","typeID":"11","question":"\u4f60\u5c06\u5982\u4f55\u4f7f\u7528thread dump\uff1f\u4f60\u5c06\u5982\u4f55\u5206\u6790Thread dump\uff1f","answer":"\u5728UNIX\u4e2d\u4f60\u53ef\u4ee5\u4f7f\u7528kill -3\uff0c\u7136\u540ethread dump\u5c06\u4f1a\u6253\u5370\u65e5\u5fd7\uff0c\u5728windows\u4e2d\u4f60\u53ef\u4ee5\u4f7f\u7528\u201dCTRL+Break\u201d\u3002\u975e\u5e38\u7b80\u5355\u548c\u4e13\u4e1a\u7684\u7ebf\u7a0b\u9762\u8bd5\u95ee\u9898\uff0c\u4f46\u662f\u5982\u679c\u4ed6\u95ee\u4f60\u600e\u6837\u5206\u6790\u5b83\uff0c\u5c31\u4f1a\u5f88\u68d8\u624b\u3002"},{"ID":"1247","typeID":"11","question":"\u7528Java\u7f16\u7a0b\u4e00\u4e2a\u4f1a\u5bfc\u81f4\u6b7b\u9501\u7684\u7a0b\u5e8f\uff0c\u4f60\u5c06\u600e\u4e48\u89e3\u51b3\uff1f","answer":"\u56e0\u4e3a\u5373\u4f7f\u6b7b\u9501\u95ee\u9898\u5728\u5199\u591a\u7ebf\u7a0b\u5e76\u53d1\u7a0b\u5e8f\u65f6\u975e\u5e38\u666e\u904d\uff0c\u4f46\u662f\u5f88\u591a\u4faf\u9009\u8005\u5e76\u4e0d\u80fd\u5199deadlock free code\uff08\u65e0\u6b7b\u9501\u4ee3\u7801\uff1f\uff09\uff0c\u4ed6\u4eec\u5f88\u6323\u624e\u3002\u53ea\u8981\u544a\u8bc9\u4ed6\u4eec\uff0c\u4f60\u6709N\u4e2a\u8d44\u6e90\u548cN\u4e2a\u7ebf\u7a0b\uff0c\u5e76\u4e14\u4f60\u9700\u8981\u6240\u6709\u7684\u8d44\u6e90\u6765\u5b8c\u6210\u4e00\u4e2a\u64cd\u4f5c\u3002\u4e3a\u4e86\u7b80\u5355\u8fd9\u91cc\u7684n\u53ef\u4ee5\u66ff\u6362\u4e3a2\uff0c\u8d8a\u5927\u7684\u6570\u636e\u4f1a\u4f7f\u95ee\u9898\u770b\u8d77\u6765\u66f4\u590d\u6742\u3002\u901a\u8fc7\u907f\u514dJava\u4e2d\u7684\u6b7b\u9501\u6765\u5f97\u5230\u5173\u4e8e\u6b7b\u9501\u7684\u66f4\u591a\u4fe1\u606f\u3002"},{"ID":"1246","typeID":"11","question":"\u7528Java\u5199\u4ee3\u7801\u6765\u89e3\u51b3\u751f\u4ea7\u8005\u2014\u2014\u6d88\u8d39\u8005\u95ee\u9898\uff1f","answer":"\u8fd9\u4e2a\u95ee\u9898\u66f4\u7ecf\u5178\uff0c\u6709\u4e9b\u65f6\u5019\u9762\u8bd5\u90fd\u4f1a\u95ee\u4e0b\u9762\u7684\u95ee\u9898\u3002\u5728Java\u4e2d\u600e\u4e48\u89e3\u51b3\u751f\u4ea7\u8005\u2014\u2014\u6d88\u8d39\u8005\u95ee\u9898\uff0c\u5f53\u7136\u6709\u5f88\u591a\u89e3\u51b3\u65b9\u6cd5\uff0c\u4e00\u79cd\u7528\u963b\u585e\u961f\u5217\u5b9e\u73b0\u7684\u65b9\u6cd5\u3002\u6709\u4e9b\u65f6\u5019\u4ed6\u4eec\u751a\u81f3\u4f1a\u95ee\u600e\u4e48\u5b9e\u73b0\u54f2\u5b66\u5bb6\u8fdb\u9910\u95ee\u9898\u3002"},{"ID":"1245","typeID":"11","question":"\u5982\u4f55\u7528Java\u5b9e\u73b0\u963b\u585e\u961f\u5217\uff1f","answer":"\u8fd9\u662f\u4e00\u4e2a\u76f8\u5bf9\u8270\u96be\u7684\u591a\u7ebf\u7a0b\u9762\u8bd5\u95ee\u9898\uff0c\u5b83\u80fd\u8fbe\u5230\u5f88\u591a\u7684\u76ee\u7684\u3002\u7b2c\u4e00\uff0c\u5b83\u53ef\u4ee5\u68c0\u6d4b\u4faf\u9009\u8005\u662f\u5426\u80fd\u5b9e\u9645\u7684\u7528Java\u7ebf\u7a0b\u5199\u7a0b\u5e8f\uff1b\u7b2c\u4e8c\uff0c\u53ef\u4ee5\u68c0\u6d4b\u4faf\u9009\u8005\u5bf9\u5e76\u53d1\u573a\u666f\u7684\u7406\u89e3\uff0c\u5e76\u4e14\u4f60\u53ef\u4ee5\u6839\u636e\u8fd9\u4e2a\u95ee\u5f88\u591a\u95ee\u9898\u3002\u5982\u679c\u4ed6\u7528wait()\u548cnotify()\u65b9\u6cd5\u6765\u5b9e\u73b0\u963b\u585e\u961f\u5217\uff0c\u4f60\u53ef\u4ee5\u8981\u6c42\u4ed6\u7528\u6700\u65b0\u7684Java 5\u4e2d\u7684\u5e76\u53d1\u7c7b\u6765\u518d\u5199\u4e00\u6b21\u3002"},{"ID":"1244","typeID":"11","question":"\u5728java\u4e2dwait\u548csleep\u65b9\u6cd5\u7684\u4e0d\u540c\uff1f","answer":"\u901a\u5e38\u4f1a\u5728\u7535\u8bdd\u9762\u8bd5\u4e2d\u7ecf\u5e38\u88ab\u95ee\u5230\u7684Java\u7ebf\u7a0b\u9762\u8bd5\u95ee\u9898\u3002\u6700\u5927\u7684\u4e0d\u540c\u662f\u5728\u7b49\u5f85\u65f6wait\u4f1a\u91ca\u653e\u9501\uff0c\u800csleep\u4e00\u76f4\u6301\u6709\u9501\u3002Wait\u901a\u5e38\u88ab\u7528\u4e8e\u7ebf\u7a0b\u95f4\u4ea4\u4e92\uff0csleep\u901a\u5e38\u88ab\u7528\u4e8e\u6682\u505c\u6267\u884c\u3002"},{"ID":"1243","typeID":"11","question":"\u5728Java\u4e2dLock\u63a5\u53e3\u6bd4synchronized\u5757\u7684\u4f18\u52bf\u662f\u4ec0\u4e48\uff1f\u4f60\u9700\u8981\u5b9e\u73b0\u4e00\u4e2a\u9ad8\u6548\u7684\u7f13\u5b58\uff0c\u5b83\u5141\u8bb8\u591a\u4e2a\u7528\u6237\u8bfb\uff0c\u4f46\u53ea\u5141\u8bb8\u4e00\u4e2a\u7528\u6237\u5199\uff0c\u4ee5\u6b64\u6765\u4fdd\u6301\u5b83\u7684\u5b8c\u6574\u6027\uff0c\u4f60\u4f1a\u600e\u6837\u53bb\u5b9e\u73b0\u5b83\uff1f","answer":"lock\u63a5\u53e3\u5728\u591a\u7ebf\u7a0b\u548c\u5e76\u53d1\u7f16\u7a0b\u4e2d\u6700\u5927\u7684\u4f18\u52bf\u662f\u5b83\u4eec\u4e3a\u8bfb\u548c\u5199\u5206\u522b\u63d0\u4f9b\u4e86\u9501\uff0c\u5b83\u80fd\u6ee1\u8db3\u4f60\u5199\u50cfConcurrentHashMap\u8fd9\u6837\u7684\u9ad8\u6027\u80fd\u6570\u636e\u7ed3\u6784\u548c\u6709\u6761\u4ef6\u7684\u963b\u585e\u3002Java\u7ebf\u7a0b\u9762\u8bd5\u7684\u95ee\u9898\u8d8a\u6765\u8d8a\u4f1a\u6839\u636e\u9762\u8bd5\u8005\u7684\u56de\u7b54\u6765\u63d0\u95ee\u3002\u6211\u5f3a\u70c8\u5efa\u8bae\u5728\u4f60\u53bb\u53c2\u52a0\u591a\u7ebf\u7a0b\u7684\u9762\u8bd5\u4e4b\u524d\u8ba4\u771f\u8bfb\u4e00\u4e0bLocks\uff0c\u56e0\u4e3a\u5f53\u524d\u5176\u5927\u91cf\u7528\u4e8e\u6784\u5efa\u7535\u5b50\u4ea4\u6613\u7ec8\u7edf\u7684\u5ba2\u6237\u7aef\u7f13\u5b58\u548c\u4ea4\u6613\u8fde\u63a5\u7a7a\u95f4\u3002"},{"ID":"1242","typeID":"11","question":"\u73b0\u5728\u6709T1\u3001T2\u3001T3\u4e09\u4e2a\u7ebf\u7a0b\uff0c\u4f60\u600e\u6837\u4fdd\u8bc1T2\u5728T1\u6267\u884c\u5b8c\u540e\u6267\u884c\uff0cT3\u5728T2\u6267\u884c\u5b8c\u540e\u6267\u884c\uff1f","answer":"\u8fd9\u4e2a\u7ebf\u7a0b\u95ee\u9898\u901a\u5e38\u4f1a\u5728\u7b2c\u4e00\u8f6e\u6216\u7535\u8bdd\u9762\u8bd5\u9636\u6bb5\u88ab\u95ee\u5230\uff0c\u76ee\u7684\u662f\u68c0\u6d4b\u4f60\u5bf9\u201djoin\u201d\u65b9\u6cd5\u662f\u5426\u719f\u6089\u3002\u8fd9\u4e2a\u591a\u7ebf\u7a0b\u95ee\u9898\u6bd4\u8f83\u7b80\u5355\uff0c\u53ef\u4ee5\u7528join\u65b9\u6cd5\u5b9e\u73b0\u3002"},{"ID":"1241","typeID":"11","question":"Iterator\u662f\u4ec0\u4e48\uff1f","answer":"Iterator\u63a5\u53e3\u63d0\u4f9b\u904d\u5386\u4efb\u4f55Collection\u7684\u63a5\u53e3\u3002\u6211\u4eec\u53ef\u4ee5\u4ece\u4e00\u4e2aCollection\u4e2d\u4f7f\u7528\u8fed\u4ee3\u5668\u65b9\u6cd5\u6765\u83b7\u53d6\u8fed\u4ee3\u5668\u5b9e\u4f8b\u3002\u8fed\u4ee3\u5668\u53d6\u4ee3\u4e86Java\u96c6\u5408\u6846\u67b6\u4e2d\u7684Enumeration\u3002\u8fed\u4ee3\u5668\u5141\u8bb8\u8c03\u7528\u8005\u5728\u8fed\u4ee3\u8fc7\u7a0b\u4e2d\u79fb\u9664\u5143\u7d20\u3002"},{"ID":"1240","typeID":"11","question":"\u4e3a\u4f55Map\u63a5\u53e3\u4e0d\u7ee7\u627fCollection\u63a5\u53e3\uff1f","answer":"\u5c3d\u7ba1Map\u63a5\u53e3\u548c\u5b83\u7684\u5b9e\u73b0\u4e5f\u662f\u96c6\u5408\u6846\u67b6\u7684\u4e00\u90e8\u5206\uff0c\u4f46Map\u4e0d\u662f\u96c6\u5408\uff0c\u96c6\u5408\u4e5f\u4e0d\u662fMap\u3002\u56e0\u6b64\uff0cMap\u7ee7\u627fCollection\u6beb\u65e0\u610f\u4e49\uff0c\u53cd\u4e4b\u4ea6\u7136\u3002\r\n\u5982\u679cMap\u7ee7\u627fCollection\u63a5\u53e3\uff0c\u90a3\u4e48\u5143\u7d20\u53bb\u54ea\u513f\uff1fMap\u5305\u542bkey-value\u5bf9\uff0c\u5b83\u63d0\u4f9b\u62bd\u53d6key\u6216value\u5217\u8868\u96c6\u5408\u7684\u65b9\u6cd5\uff0c\u4f46\u662f\u5b83\u4e0d\u9002\u5408\u201c\u4e00\u7ec4\u5bf9\u8c61\u201d\u89c4\u8303\u3002"},{"ID":"1239","typeID":"11","question":"\u4e3a\u4f55Collection\u4e0d\u4eceCloneable\u548cSerializable\u63a5\u53e3\u7ee7\u627f\uff1f","answer":"Collection\u63a5\u53e3\u6307\u5b9a\u4e00\u7ec4\u5bf9\u8c61\uff0c\u5bf9\u8c61\u5373\u4e3a\u5b83\u7684\u5143\u7d20\u3002\u5982\u4f55\u7ef4\u62a4\u8fd9\u4e9b\u5143\u7d20\u7531Collection\u7684\u5177\u4f53\u5b9e\u73b0\u51b3\u5b9a\u3002\u4f8b\u5982\uff0c\u4e00\u4e9b\u5982List\u7684Collection\u5b9e\u73b0\u5141\u8bb8\u91cd\u590d\u7684\u5143\u7d20\uff0c\u800c\u5176\u5b83\u7684\u5982Set\u5c31\u4e0d\u5141\u8bb8\u3002\u5f88\u591aCollection\u5b9e\u73b0\u6709\u4e00\u4e2a\u516c\u6709\u7684clone\u65b9\u6cd5\u3002\u7136\u800c\uff0c\u628a\u5b83\u653e\u5230\u96c6\u5408\u7684\u6240\u6709\u5b9e\u73b0\u4e2d\u4e5f\u662f\u6ca1\u6709\u610f\u4e49\u7684\u3002\u8fd9\u662f\u56e0\u4e3aCollection\u662f\u4e00\u4e2a\u62bd\u8c61\u8868\u73b0\u3002\u91cd\u8981\u7684\u662f\u5b9e\u73b0\u3002\r\n\u5f53\u4e0e\u5177\u4f53\u5b9e\u73b0\u6253\u4ea4\u9053\u7684\u65f6\u5019\uff0c\u514b\u9686\u6216\u5e8f\u5217\u5316\u7684\u8bed\u4e49\u548c\u542b\u4e49\u624d\u53d1\u6325\u4f5c\u7528\u3002\u6240\u4ee5\uff0c\u5177\u4f53\u5b9e\u73b0\u5e94\u8be5\u51b3\u5b9a\u5982\u4f55\u5bf9\u5b83\u8fdb\u884c\u514b\u9686\u6216\u5e8f\u5217\u5316\uff0c\u6216\u5b83\u662f\u5426\u53ef\u4ee5\u88ab\u514b\u9686\u6216\u5e8f\u5217\u5316\u3002\r\n\u5728\u6240\u6709\u7684\u5b9e\u73b0\u4e2d\u6388\u6743\u514b\u9686\u548c\u5e8f\u5217\u5316\uff0c\u6700\u7ec8\u5bfc\u81f4\u66f4\u5c11\u7684\u7075\u6d3b\u6027\u548c\u66f4\u591a\u7684\u9650\u5236\u3002\u7279\u5b9a\u7684\u5b9e\u73b0\u5e94\u8be5\u51b3\u5b9a\u5b83\u662f\u5426\u53ef\u4ee5\u88ab\u514b\u9686\u548c\u5e8f\u5217\u5316\u3002"},{"ID":"1238","typeID":"11","question":"Java\u96c6\u5408\u6846\u67b6\u7684\u57fa\u7840\u63a5\u53e3\u6709\u54ea\u4e9b\uff1f","answer":"Collection\u4e3a\u96c6\u5408\u5c42\u7ea7\u7684\u6839\u63a5\u53e3\u3002\u4e00\u4e2a\u96c6\u5408\u4ee3\u8868\u4e00\u7ec4\u5bf9\u8c61\uff0c\u8fd9\u4e9b\u5bf9\u8c61\u5373\u4e3a\u5b83\u7684\u5143\u7d20\u3002Java\u5e73\u53f0\u4e0d\u63d0\u4f9b\u8fd9\u4e2a\u63a5\u53e3\u4efb\u4f55\u76f4\u63a5\u7684\u5b9e\u73b0\u3002\r\nSet\u662f\u4e00\u4e2a\u4e0d\u80fd\u5305\u542b\u91cd\u590d\u5143\u7d20\u7684\u96c6\u5408\u3002\u8fd9\u4e2a\u63a5\u53e3\u5bf9\u6570\u5b66\u96c6\u5408\u62bd\u8c61\u8fdb\u884c\u5efa\u6a21\uff0c\u88ab\u7528\u6765\u4ee3\u8868\u96c6\u5408\uff0c\u5c31\u5982\u4e00\u526f\u724c\u3002\r\nList\u662f\u4e00\u4e2a\u6709\u5e8f\u96c6\u5408\uff0c\u53ef\u4ee5\u5305\u542b\u91cd\u590d\u5143\u7d20\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u5b83\u7684\u7d22\u5f15\u6765\u8bbf\u95ee\u4efb\u4f55\u5143\u7d20\u3002List\u66f4\u50cf\u957f\u5ea6\u52a8\u6001\u53d8\u6362\u7684\u6570\u7ec4\u3002\r\nMap\u662f\u4e00\u4e2a\u5c06key\u6620\u5c04\u5230value\u7684\u5bf9\u8c61\u3002\u4e00\u4e2aMap\u4e0d\u80fd\u5305\u542b\u91cd\u590d\u7684key\uff1a\u6bcf\u4e2akey\u6700\u591a\u53ea\u80fd\u6620\u5c04\u4e00\u4e2avalue\u3002\r\n\u4e00\u4e9b\u5176\u5b83\u7684\u63a5\u53e3\u6709Queue\u3001Dequeue\u3001SortedSet\u3001SortedMap\u548cListIterator\u3002"},{"ID":"1237","typeID":"11","question":"\u96c6\u5408\u6846\u67b6\u4e2d\u7684\u6cdb\u578b\u6709\u4ec0\u4e48\u4f18\u70b9\uff1f","answer":"Java1.5\u5f15\u5165\u4e86\u6cdb\u578b\uff0c\u6240\u6709\u7684\u96c6\u5408\u63a5\u53e3\u548c\u5b9e\u73b0\u90fd\u5927\u91cf\u5730\u4f7f\u7528\u5b83\u3002\u6cdb\u578b\u5141\u8bb8\u6211\u4eec\u4e3a\u96c6\u5408\u63d0\u4f9b\u4e00\u4e2a\u53ef\u4ee5\u5bb9\u7eb3\u7684\u5bf9\u8c61\u7c7b\u578b\uff0c\u56e0\u6b64\uff0c\u5982\u679c\u4f60\u6dfb\u52a0\u5176\u5b83\u7c7b\u578b\u7684\u4efb\u4f55\u5143\u7d20\uff0c\u5b83\u4f1a\u5728\u7f16\u8bd1\u65f6\u62a5\u9519\u3002\u8fd9\u907f\u514d\u4e86\u5728\u8fd0\u884c\u65f6\u51fa\u73b0ClassCastException\uff0c\u56e0\u4e3a\u4f60\u5c06\u4f1a\u5728\u7f16\u8bd1\u65f6\u5f97\u5230\u62a5\u9519\u4fe1\u606f\u3002\u6cdb\u578b\u4e5f\u4f7f\u5f97\u4ee3\u7801\u6574\u6d01\uff0c\u6211\u4eec\u4e0d\u9700\u8981\u4f7f\u7528\u663e\u5f0f\u8f6c\u6362\u548cinstanceOf\u64cd\u4f5c\u7b26\u3002\u5b83\u4e5f\u7ed9\u8fd0\u884c\u65f6\u5e26\u6765\u597d\u5904\uff0c\u56e0\u4e3a\u4e0d\u4f1a\u4ea7\u751f\u7c7b\u578b\u68c0\u67e5\u7684\u5b57\u8282\u7801\u6307\u4ee4\u3002"},{"ID":"1236","typeID":"11","question":"Java\u96c6\u5408\u6846\u67b6\u662f\u4ec0\u4e48\uff1f\u8bf4\u51fa\u4e00\u4e9b\u96c6\u5408\u6846\u67b6\u7684\u4f18\u70b9\uff1f","answer":"\u6bcf\u79cd\u7f16\u7a0b\u8bed\u8a00\u4e2d\u90fd\u6709\u96c6\u5408\uff0c\u6700\u521d\u7684Java\u7248\u672c\u5305\u542b\u51e0\u79cd\u96c6\u5408\u7c7b\uff1aVector\u3001Stack\u3001HashTable\u548cArray\u3002\u968f\u7740\u96c6\u5408\u7684\u5e7f\u6cdb\u4f7f\u7528\uff0cJava1.2\u63d0\u51fa\u4e86\u56ca\u62ec\u6240\u6709\u96c6\u5408\u63a5\u53e3\u3001\u5b9e\u73b0\u548c\u7b97\u6cd5\u7684\u96c6\u5408\u6846\u67b6\u3002\u5728\u4fdd\u8bc1\u7ebf\u7a0b\u5b89\u5168\u7684\u60c5\u51b5\u4e0b\u4f7f\u7528\u6cdb\u578b\u548c\u5e76\u53d1\u96c6\u5408\u7c7b\uff0cJava\u5df2\u7ecf\u7ecf\u5386\u4e86\u5f88\u4e45\u3002\u5b83\u8fd8\u5305\u62ec\u5728Java\u5e76\u53d1\u5305\u4e2d\uff0c\u963b\u585e\u63a5\u53e3\u4ee5\u53ca\u5b83\u4eec\u7684\u5b9e\u73b0\u3002\u96c6\u5408\u6846\u67b6\u7684\u90e8\u5206\u4f18\u70b9\u5982\u4e0b\uff1a\r\n\uff081\uff09\u4f7f\u7528\u6838\u5fc3\u96c6\u5408\u7c7b\u964d\u4f4e\u5f00\u53d1\u6210\u672c\uff0c\u800c\u975e\u5b9e\u73b0\u6211\u4eec\u81ea\u5df1\u7684\u96c6\u5408\u7c7b\u3002\r\n\r\n\uff082\uff09\u968f\u7740\u4f7f\u7528\u7ecf\u8fc7\u4e25\u683c\u6d4b\u8bd5\u7684\u96c6\u5408\u6846\u67b6\u7c7b\uff0c\u4ee3\u7801\u8d28\u91cf\u4f1a\u5f97\u5230\u63d0\u9ad8\u3002\r\n\r\n\uff083\uff09\u901a\u8fc7\u4f7f\u7528JDK\u9644\u5e26\u7684\u96c6\u5408\u7c7b\uff0c\u53ef\u4ee5\u964d\u4f4e\u4ee3\u7801\u7ef4\u62a4\u6210\u672c\u3002\r\n\r\n\uff084\uff09\u590d\u7528\u6027\u548c\u53ef\u64cd\u4f5c\u6027\u3002"},{"ID":"1175","typeID":"11","question":"Java \u4e2d\u80fd\u521b\u5efa volatile \u6570\u7ec4\u5417\uff1f ","answer":"\u80fd\uff0cJava \u4e2d\u53ef\u4ee5\u521b\u5efa volatile \u7c7b\u578b\u6570\u7ec4\uff0c\u4e0d\u8fc7\u53ea\u662f\u4e00\u4e2a\u6307\u5411\u6570\u7ec4\u7684\u5f15\u7528\uff0c\u800c\u4e0d\u662f\u6574\u4e2a\u6570\u7ec4\u3002\u6211\u7684\u610f\u601d\u662f\uff0c\u5982\u679c\u6539\u53d8\u5f15\u7528\u6307\u5411\u7684\u6570\u7ec4\uff0c\u5c06\u4f1a\u53d7\u5230 volatile \u7684\u4fdd\u62a4\uff0c\u4f46\u662f\u5982\u679c\u591a\u4e2a\u7ebf\u7a0b\u540c\u65f6\u6539\u53d8\u6570\u7ec4\u7684\u5143\u7d20\uff0cvolatile \u6807\u793a\u7b26\u5c31\u4e0d\u80fd\u8d77\u5230\u4e4b\u524d\u7684\u4fdd\u62a4\u4f5c\u7528\u4e86\u3002 "},{"ID":"1174","typeID":"11","question":"volatile \u80fd\u4f7f\u5f97\u4e00\u4e2a\u975e\u539f\u5b50\u64cd\u4f5c\u53d8\u6210\u539f\u5b50\u64cd\u4f5c\u5417\uff1f ","answer":"\u4e00\u4e2a\u5178\u578b\u7684\u4f8b\u5b50\u662f\u5728\u7c7b\u4e2d\u6709\u4e00\u4e2a long \u7c7b\u578b\u7684\u6210\u5458\u53d8\u91cf\u3002\u5982\u679c\u4f60\u77e5\u9053\u8be5\u6210\u5458\u53d8\u91cf\u4f1a\u88ab\u591a\u4e2a\u7ebf\u7a0b\u8bbf\u95ee\uff0c\u5982\u8ba1\u6570\u5668\u3001\u4ef7\u683c\u7b49\uff0c\u4f60\u6700\u597d\u662f\u5c06\u5176\u8bbe\u7f6e\u4e3a volatile\u3002\u4e3a\u4ec0\u4e48\uff1f\u56e0\u4e3a Java \u4e2d\u8bfb\u53d6 long \u7c7b\u578b\u53d8\u91cf\u4e0d\u662f\u539f\u5b50\u7684\uff0c\u9700\u8981\u5206\u6210\u4e24\u6b65\uff0c\u5982\u679c\u4e00\u4e2a\u7ebf\u7a0b\u6b63\u5728\u4fee\u6539\u8be5 long \u53d8\u91cf\u7684\u503c\uff0c\u53e6\u4e00\u4e2a\u7ebf\u7a0b\u53ef\u80fd\u53ea\u80fd\u770b\u5230\u8be5\u503c\u7684\u4e00\u534a\uff08\u524d 32 \u4f4d\uff09\u3002\u4f46\u662f\u5bf9\u4e00\u4e2a volatile \u578b\u7684 long \u6216 double \u53d8\u91cf\u7684\u8bfb\u5199\u662f\u539f\u5b50\u3002 "},{"ID":"1173","typeID":"11","question":"volatile \u4fee\u9970\u7b26\u7684\u6709\u8fc7\u4ec0\u4e48\u5b9e\u8df5\uff1f ","answer":"\u4e00\u79cd\u5b9e\u8df5\u662f\u7528 volatile \u4fee\u9970 long \u548c double \u53d8\u91cf\uff0c\u4f7f\u5176\u80fd\u6309\u539f\u5b50\u7c7b\u578b\u6765\u8bfb\u5199\u3002double \u548c long \u90fd\u662f64\u4f4d\u5bbd\uff0c\u56e0\u6b64\u5bf9\u8fd9\u4e24\u79cd\u7c7b\u578b\u7684\u8bfb\u662f\u5206\u4e3a\u4e24\u90e8\u5206\u7684\uff0c\u7b2c\u4e00\u6b21\u8bfb\u53d6\u7b2c\u4e00\u4e2a 32 \u4f4d\uff0c\u7136\u540e\u518d\u8bfb\u5269\u4e0b\u7684 32 \u4f4d\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u4e0d\u662f\u539f\u5b50\u7684\uff0c\u4f46 Java \u4e2d volatile \u578b\u7684 long \u6216 double \u53d8\u91cf\u7684\u8bfb\u5199\u662f\u539f\u5b50\u7684\u3002volatile \u4fee\u590d\u7b26\u7684\u53e6\u4e00\u4e2a\u4f5c\u7528\u662f\u63d0\u4f9b\u5185\u5b58\u5c4f\u969c\uff08memory barrier\uff09\uff0c\u4f8b\u5982\u5728\u5206\u5e03\u5f0f\u6846\u67b6\u4e2d\u7684\u5e94\u7528\u3002\u7b80\u5355\u7684\u8bf4\uff0c\u5c31\u662f\u5f53\u4f60\u5199\u4e00\u4e2a volatile \u53d8\u91cf\u4e4b\u524d\uff0cJava \u5185\u5b58\u6a21\u578b\u4f1a\u63d2\u5165\u4e00\u4e2a\u5199\u5c4f\u969c\uff08write barrier\uff09\uff0c\u8bfb\u4e00\u4e2a volatile \u53d8\u91cf\u4e4b\u524d\uff0c\u4f1a\u63d2\u5165\u4e00\u4e2a\u8bfb\u5c4f\u969c\uff08read barrier\uff09\u3002\u610f\u601d\u5c31\u662f\u8bf4\uff0c\u5728\u4f60\u5199\u4e00\u4e2a volatile \u57df\u65f6\uff0c\u80fd\u4fdd\u8bc1\u4efb\u4f55\u7ebf\u7a0b\u90fd\u80fd\u770b\u5230\u4f60\u5199\u7684\u503c\uff0c\u540c\u65f6\uff0c\u5728\u5199\u4e4b\u524d\uff0c\u4e5f\u80fd\u4fdd\u8bc1\u4efb\u4f55\u6570\u503c\u7684\u66f4\u65b0\u5bf9\u6240\u6709\u7ebf\u7a0b\u662f\u53ef\u89c1\u7684\uff0c\u56e0\u4e3a\u5185\u5b58\u5c4f\u969c\u4f1a\u5c06\u5176\u4ed6\u6240\u6709\u5199\u7684\u503c\u66f4\u65b0\u5230\u7f13\u5b58\u3002 \r\n"},{"ID":"1172","typeID":"11","question":"volatile \u7c7b\u578b\u53d8\u91cf\u63d0\u4f9b\u4ec0\u4e48\u4fdd\u8bc1\uff1f ","answer":"volatile \u53d8\u91cf\u63d0\u4f9b\u987a\u5e8f\u548c\u53ef\u89c1\u6027\u4fdd\u8bc1\uff0c\u4f8b\u5982\uff0cJVM \u6216\u8005 JIT\u4e3a\u4e86\u83b7\u5f97\u66f4\u597d\u7684\u6027\u80fd\u4f1a\u5bf9\u8bed\u53e5\u91cd\u6392\u5e8f\uff0c\u4f46\u662f volatile \u7c7b\u578b\u53d8\u91cf\u5373\u4f7f\u5728\u6ca1\u6709\u540c\u6b65\u5757\u7684\u60c5\u51b5\u4e0b\u8d4b\u503c\u4e5f\u4e0d\u4f1a\u4e0e\u5176\u4ed6\u8bed\u53e5\u91cd\u6392\u5e8f\u3002 volatile \u63d0\u4f9b happens-before \u7684\u4fdd\u8bc1\uff0c\u786e\u4fdd\u4e00\u4e2a\u7ebf\u7a0b\u7684\u4fee\u6539\u80fd\u5bf9\u5176\u4ed6\u7ebf\u7a0b\u662f\u53ef\u89c1\u7684\u3002\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0cvolatile \u8fd8\u80fd\u63d0\u4f9b\u539f\u5b50\u6027\uff0c\u5982\u8bfb 64 \u4f4d\u6570\u636e\u7c7b\u578b\uff0c\u50cf long \u548c double \u90fd\u4e0d\u662f\u539f\u5b50\u7684\uff0c\u4f46 volatile \u7c7b\u578b\u7684 double \u548c long \u5c31\u662f\u539f\u5b50\u7684\u3002"},{"ID":"1171","typeID":"11","question":"\u4f60\u662f\u5982\u4f55\u8c03\u7528 wait\uff08\uff09\u65b9\u6cd5\u7684\uff1f\u4f7f\u7528 if \u5757\u8fd8\u662f\u5faa\u73af\uff1f\u4e3a\u4ec0\u4e48\uff1f ","answer":"wait() \u65b9\u6cd5\u5e94\u8be5\u5728\u5faa\u73af\u8c03\u7528\uff0c\u56e0\u4e3a\u5f53\u7ebf\u7a0b\u83b7\u53d6\u5230 CPU \u5f00\u59cb\u6267\u884c\u7684\u65f6\u5019\uff0c\u5176\u4ed6\u6761\u4ef6\u53ef\u80fd\u8fd8\u6ca1\u6709\u6ee1\u8db3\uff0c\u6240\u4ee5\u5728\u5904\u7406\u524d\uff0c\u5faa\u73af\u68c0\u6d4b\u6761\u4ef6\u662f\u5426\u6ee1\u8db3\u4f1a\u66f4\u597d\u3002\u4e0b\u9762\u662f\u4e00\u6bb5\u6807\u51c6\u7684\u4f7f\u7528 wait \u548c notify \u65b9\u6cd5\u7684\u4ee3\u7801\uff1a \r\n\r\n\/\/ The standard idiom for using the wait method \r\nsynchronized (obj) { \r\nwhile (condition does not hold) \r\nobj.wait(); \/\/ (Releases lock, and reacquires on wakeup) \r\n... \/\/ Perform action appropriate to condition \r\n} "},{"ID":"1170","typeID":"11","question":"\u4ec0\u4e48\u662f\u591a\u7ebf\u7a0b\u73af\u5883\u4e0b\u7684\u4f2a\u5171\u4eab\uff08false sharing\uff09\uff1f ","answer":"\u4f2a\u5171\u4eab\u662f\u591a\u7ebf\u7a0b\u7cfb\u7edf\uff08\u6bcf\u4e2a\u5904\u7406\u5668\u6709\u81ea\u5df1\u7684\u5c40\u90e8\u7f13\u5b58\uff09\u4e2d\u4e00\u4e2a\u4f17\u6240\u5468\u77e5\u7684\u6027\u80fd\u95ee\u9898\u3002\u4f2a\u5171\u4eab\u53d1\u751f\u5728\u4e0d\u540c\u5904\u7406\u5668\u7684\u4e0a\u7684\u7ebf\u7a0b\u5bf9\u53d8\u91cf\u7684\u4fee\u6539\u4f9d\u8d56\u4e8e\u76f8\u540c\u7684\u7f13\u5b58\u884c"},{"ID":"1169","typeID":"11","question":"\u4ec0\u4e48\u662f Busy spin\uff1f\u6211\u4eec\u4e3a\u4ec0\u4e48\u8981\u4f7f\u7528\u5b83\uff1f ","answer":"Busy spin \u662f\u4e00\u79cd\u5728\u4e0d\u91ca\u653e CPU \u7684\u57fa\u7840\u4e0a\u7b49\u5f85\u4e8b\u4ef6\u7684\u6280\u672f\u3002\u5b83\u7ecf\u5e38\u7528\u4e8e\u907f\u514d\u4e22\u5931 CPU \u7f13\u5b58\u4e2d\u7684\u6570\u636e\uff08\u5982\u679c\u7ebf\u7a0b\u5148\u6682\u505c\uff0c\u4e4b\u540e\u5728\u5176\u4ed6CPU\u4e0a\u8fd0\u884c\u5c31\u4f1a\u4e22\u5931\uff09\u3002\u6240\u4ee5\uff0c\u5982\u679c\u4f60\u7684\u5de5\u4f5c\u8981\u6c42\u4f4e\u5ef6\u8fdf\uff0c\u5e76\u4e14\u4f60\u7684\u7ebf\u7a0b\u76ee\u524d\u6ca1\u6709\u4efb\u4f55\u987a\u5e8f\uff0c\u8fd9\u6837\u4f60\u5c31\u53ef\u4ee5\u901a\u8fc7\u5faa\u73af\u68c0\u6d4b\u961f\u5217\u4e2d\u7684\u65b0\u6d88\u606f\u6765\u4ee3\u66ff\u8c03\u7528 sleep() \u6216 wait() \u65b9\u6cd5\u3002\u5b83\u552f\u4e00\u7684\u597d\u5904\u5c31\u662f\u4f60\u53ea\u9700\u7b49\u5f85\u5f88\u77ed\u7684\u65f6\u95f4\uff0c\u5982\u51e0\u5fae\u79d2\u6216\u51e0\u7eb3\u79d2\u3002LMAX \u5206\u5e03\u5f0f\u6846\u67b6\u662f\u4e00\u4e2a\u9ad8\u6027\u80fd\u7ebf\u7a0b\u95f4\u901a\u4fe1\u7684\u5e93\uff0c\u8be5\u5e93\u6709\u4e00\u4e2a BusySpinWaitStrategy \u7c7b\u5c31\u662f\u57fa\u4e8e\u8fd9\u4e2a\u6982\u5ff5\u5b9e\u73b0\u7684\uff0c\u4f7f\u7528 busy spin \u5faa\u73af EventProcessors \u7b49\u5f85\u5c4f\u969c\u3002"},{"ID":"1168","typeID":"11","question":"\u4ec0\u4e48\u662f\u7ebf\u7a0b\u5c40\u90e8\u53d8\u91cf\uff1f ","answer":"\u7ebf\u7a0b\u5c40\u90e8\u53d8\u91cf\u662f\u5c40\u9650\u4e8e\u7ebf\u7a0b\u5185\u90e8\u7684\u53d8\u91cf\uff0c\u5c5e\u4e8e\u7ebf\u7a0b\u81ea\u8eab\u6240\u6709\uff0c\u4e0d\u5728\u591a\u4e2a\u7ebf\u7a0b\u95f4\u5171\u4eab\u3002Java \u63d0\u4f9b ThreadLocal \u7c7b\u6765\u652f\u6301\u7ebf\u7a0b\u5c40\u90e8\u53d8\u91cf\uff0c\u662f\u4e00\u79cd\u5b9e\u73b0\u7ebf\u7a0b\u5b89\u5168\u7684\u65b9\u5f0f\u3002\u4f46\u662f\u5728\u7ba1\u7406\u73af\u5883\u4e0b\uff08\u5982 web \u670d\u52a1\u5668\uff09\u4f7f\u7528\u7ebf\u7a0b\u5c40\u90e8\u53d8\u91cf\u7684\u65f6\u5019\u8981\u7279\u522b\u5c0f\u5fc3\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5de5\u4f5c\u7ebf\u7a0b\u7684\u751f\u547d\u5468\u671f\u6bd4\u4efb\u4f55\u5e94\u7528\u53d8\u91cf\u7684\u751f\u547d\u5468\u671f\u90fd\u8981\u957f\u3002\u4efb\u4f55\u7ebf\u7a0b\u5c40\u90e8\u53d8\u91cf\u4e00\u65e6\u5728\u5de5\u4f5c\u5b8c\u6210\u540e\u6ca1\u6709\u91ca\u653e\uff0cJava \u5e94\u7528\u5c31\u5b58\u5728\u5185\u5b58\u6cc4\u9732\u7684\u98ce\u9669\u3002 "},{"ID":"1167","typeID":"11","question":"Java \u4e2d sleep \u65b9\u6cd5\u548c wait \u65b9\u6cd5\u7684\u533a\u522b\uff1f","answer":"\u867d\u7136\u4e24\u8005\u90fd\u662f\u7528\u6765\u6682\u505c\u5f53\u524d\u8fd0\u884c\u7684\u7ebf\u7a0b\uff0c\u4f46\u662f sleep() \u5b9e\u9645\u4e0a\u53ea\u662f\u77ed\u6682\u505c\u987f\uff0c\u56e0\u4e3a\u5b83\u4e0d\u4f1a\u91ca\u653e\u9501\uff0c\u800c wait() \u610f\u5473\u7740\u6761\u4ef6\u7b49\u5f85\uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u8be5\u65b9\u6cd5\u8981\u91ca\u653e\u9501\uff0c\u56e0\u4e3a\u53ea\u6709\u8fd9\u6837\uff0c\u5176\u4ed6\u7b49\u5f85\u7684\u7ebf\u7a0b\u624d\u80fd\u5728\u6ee1\u8db3\u6761\u4ef6\u65f6\u83b7\u53d6\u5230\u8be5\u9501\u3002 "},{"ID":"1166","typeID":"11","question":"\u4ec0\u4e48\u662f\u4e0d\u53ef\u53d8\u5bf9\u8c61\uff08immutable object\uff09\uff1fJava \u4e2d\u600e\u4e48\u521b\u5efa\u4e00\u4e2a\u4e0d\u53ef\u53d8\u5bf9\u8c61\uff1f ","answer":"\u4e0d\u53ef\u53d8\u5bf9\u8c61\u6307\u5bf9\u8c61\u4e00\u65e6\u88ab\u521b\u5efa\uff0c\u72b6\u6001\u5c31\u4e0d\u80fd\u518d\u6539\u53d8\u3002\u4efb\u4f55\u4fee\u6539\u90fd\u4f1a\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5bf9\u8c61\uff0c\u5982 String\u3001Integer\u53ca\u5176\u5b83\u5305\u88c5\u7c7b\u3002 \r\n"},{"ID":"1165","typeID":"11","question":"\u6211\u4eec\u80fd\u521b\u5efa\u4e00\u4e2a\u5305\u542b\u53ef\u53d8\u5bf9\u8c61\u7684\u4e0d\u53ef\u53d8\u5bf9\u8c61\u5417\uff1f ","answer":"\u662f\u7684\uff0c\u6211\u4eec\u662f\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u5305\u542b\u53ef\u53d8\u5bf9\u8c61\u7684\u4e0d\u53ef\u53d8\u5bf9\u8c61\u7684\uff0c\u4f60\u53ea\u9700\u8981\u8c28\u614e\u4e00\u70b9\uff0c\u4e0d\u8981\u5171\u4eab\u53ef\u53d8\u5bf9\u8c61\u7684\u5f15\u7528\u5c31\u53ef\u4ee5\u4e86\uff0c\u5982\u679c\u9700\u8981\u53d8\u5316\u65f6\uff0c\u5c31\u8fd4\u56de\u539f\u5bf9\u8c61\u7684\u4e00\u4e2a\u62f7\u8d1d\u3002\u6700\u5e38\u89c1\u7684\u4f8b\u5b50\u5c31\u662f\u5bf9\u8c61\u4e2d\u5305\u542b\u4e00\u4e2a\u65e5\u671f\u5bf9\u8c61\u7684\u5f15\u7528\u3002 \r\n"},{"ID":"1164","typeID":"11","question":"Java \u4e2d\u5e94\u8be5\u4f7f\u7528\u4ec0\u4e48\u6570\u636e\u7c7b\u578b\u6765\u4ee3\u8868\u4ef7\u683c\uff1f ","answer":"\u5982\u679c\u4e0d\u662f\u7279\u522b\u5173\u5fc3\u5185\u5b58\u548c\u6027\u80fd\u7684\u8bdd\uff0c\u4f7f\u7528BigDecimal\uff0c\u5426\u5219\u4f7f\u7528\u9884\u5b9a\u4e49\u7cbe\u5ea6\u7684 double \u7c7b\u578b\u3002 \r\n"},{"ID":"1163","typeID":"11","question":"\u600e\u4e48\u5c06 byte \u8f6c\u6362\u4e3a String\uff1f ","answer":"\u53ef\u4ee5\u4f7f\u7528 String \u63a5\u6536 byte[] \u53c2\u6570\u7684\u6784\u9020\u5668\u6765\u8fdb\u884c\u8f6c\u6362\uff0c\u9700\u8981\u6ce8\u610f\u7684\u70b9\u662f\u8981\u4f7f\u7528\u7684\u6b63\u786e\u7684\u7f16\u7801\uff0c\u5426\u5219\u4f1a\u4f7f\u7528\u5e73\u53f0\u9ed8\u8ba4\u7f16\u7801\uff0c\u8fd9\u4e2a\u7f16\u7801\u53ef\u80fd\u8ddf\u539f\u6765\u7684\u7f16\u7801\u76f8\u540c\uff0c\u4e5f\u53ef\u80fd\u4e0d\u540c\u3002 "},{"ID":"1162","typeID":"11","question":"\u6211\u4eec\u80fd\u5c06 int \u5f3a\u5236\u8f6c\u6362\u4e3a byte \u7c7b\u578b\u7684\u53d8\u91cf\u5417\uff1f\u5982\u679c\u8be5\u503c\u5927\u4e8e byte \u7c7b\u578b\u7684\u8303\u56f4\uff0c\u5c06\u4f1a\u51fa\u73b0\u4ec0\u4e48\u73b0\u8c61\uff1f ","answer":"\u662f\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u505a\u5f3a\u5236\u8f6c\u6362\uff0c\u4f46\u662f Java \u4e2d int \u662f 32 \u4f4d\u7684\uff0c\u800c byte \u662f 8 \u4f4d\u7684\uff0c\u6240\u4ee5\uff0c\u5982\u679c\u5f3a\u5236\u8f6c\u5316\u662f\uff0cint \u7c7b\u578b\u7684\u9ad8 24 \u4f4d\u5c06\u4f1a\u88ab\u4e22\u5f03\uff0cbyte \u7c7b\u578b\u7684\u8303\u56f4\u662f\u4ece -128 \u5230 128\u3002 "},{"ID":"1161","typeID":"11","question":"Java \u4e2d ++ \u64cd\u4f5c\u7b26\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\u5417\uff1f ","answer":"\u4e0d\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\u64cd\u4f5c\u3002\u5b83\u6d89\u53ca\u5230\u591a\u4e2a\u6307\u4ee4\uff0c\u5982\u8bfb\u53d6\u53d8\u91cf\u503c\uff0c\u589e\u52a0\uff0c\u7136\u540e\u5b58\u50a8\u56de\u5185\u5b58\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u53ef\u80fd\u4f1a\u51fa\u73b0\u591a\u4e2a\u7ebf\u7a0b\u4ea4\u5dee\u3002 "},{"ID":"1160","typeID":"11","question":"a = a + b \u4e0e a += b \u7684\u533a\u522b\uff1f ","answer":"+= \u9690\u5f0f\u7684\u5c06\u52a0\u64cd\u4f5c\u7684\u7ed3\u679c\u7c7b\u578b\u5f3a\u5236\u8f6c\u6362\u4e3a\u6301\u6709\u7ed3\u679c\u7684\u7c7b\u578b\u3002\u5982\u679c\u4e24\u8fd9\u4e2a\u6574\u578b\u76f8\u52a0\uff0c\u5982 byte\u3001short \u6216\u8005 int\uff0c\u9996\u5148\u4f1a\u5c06\u5b83\u4eec\u63d0\u5347\u5230 int \u7c7b\u578b\uff0c\u7136\u540e\u5728\u6267\u884c\u52a0\u6cd5\u64cd\u4f5c\u3002\u5982\u679c\u52a0\u6cd5\u64cd\u4f5c\u7684\u7ed3\u679c\u6bd4 a \u7684\u6700\u5927\u503c\u8981\u5927\uff0c\u5219 a+b \u4f1a\u51fa\u73b0\u7f16\u8bd1\u9519\u8bef\uff0c\u4f46\u662f a += b \u6ca1\u95ee\u9898\uff0c\u5982\u4e0b\uff1a \r\nbyte a = 127; \r\nbyte b = 127; \r\nb = a + b; \/\/ error : cannot convert from int to byte \r\nb += a; \/\/ ok \r\n\r\n\u6ce8\uff1a\u5176\u5b9e\u65e0\u8bba a+b \u7684\u503c\u4e3a\u591a\u5c11\uff0c\u7f16\u8bd1\u5668\u90fd\u4f1a\u62a5\u9519\uff0c\u56e0\u4e3a a+b \u64cd\u4f5c\u4f1a\u5c06 a\u3001b \u63d0\u5347\u4e3a int \u7c7b\u578b\uff0c\u6240\u4ee5\u5c06 int \u7c7b\u578b\u8d4b\u503c\u7ed9 byte \u5c31\u4f1a\u7f16\u8bd1\u51fa\u9519 \r\n"},{"ID":"1159","typeID":"11","question":"\u6211\u80fd\u5728\u4e0d\u8fdb\u884c\u5f3a\u5236\u8f6c\u6362\u7684\u60c5\u51b5\u4e0b\u5c06\u4e00\u4e2a double \u503c\u8d4b\u503c\u7ed9 long \u7c7b\u578b\u7684\u53d8\u91cf\u5417\uff1f ","answer":"\u4e0d\u884c\uff0c\u4f60\u4e0d\u80fd\u5728\u6ca1\u6709\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362\u7684\u524d\u63d0\u4e0b\u5c06\u4e00\u4e2a double \u503c\u8d4b\u503c\u7ed9 long \u7c7b\u578b\u7684\u53d8\u91cf\uff0c\u56e0\u4e3a double \u7c7b\u578b\u7684\u8303\u56f4\u6bd4 long \u7c7b\u578b\u66f4\u5e7f\uff0c\u6240\u4ee5\u5fc5\u987b\u8981\u8fdb\u884c\u5f3a\u5236\u8f6c\u6362\u3002 \r\n"},{"ID":"1158","typeID":"11","question":"3*0.1 == 0.3 \u5c06\u4f1a\u8fd4\u56de\u4ec0\u4e48\uff1ftrue \u8fd8\u662f false\uff1f ","answer":"false\uff0c\u56e0\u4e3a\u6709\u4e9b\u6d6e\u70b9\u6570\u4e0d\u80fd\u5b8c\u5168\u7cbe\u786e\u7684\u8868\u793a\u51fa\u6765\u3002 "},{"ID":"1157","typeID":"11","question":"int \u548c Integer \u54ea\u4e2a\u4f1a\u5360\u7528\u66f4\u591a\u7684\u5185\u5b58\uff1f ","answer":"Integer \u5bf9\u8c61\u4f1a\u5360\u7528\u66f4\u591a\u7684\u5185\u5b58\u3002Integer \u662f\u4e00\u4e2a\u5bf9\u8c61\uff0c\u9700\u8981\u5b58\u50a8\u5bf9\u8c61\u7684\u5143\u6570\u636e\u3002\u4f46\u662f int \u662f\u4e00\u4e2a\u539f\u59cb\u7c7b\u578b\u7684\u6570\u636e\uff0c\u6240\u4ee5\u5360\u7528\u7684\u7a7a\u95f4\u66f4\u5c11\u3002 "},{"ID":"1156","typeID":"11","question":"\u4e3a\u4ec0\u4e48 Java \u4e2d\u7684 String \u662f\u4e0d\u53ef\u53d8\u7684\uff08Immutable\uff09\uff1f ","answer":"Java \u4e2d\u7684 String \u4e0d\u53ef\u53d8\u662f\u56e0\u4e3a Java \u7684\u8bbe\u8ba1\u8005\u8ba4\u4e3a\u5b57\u7b26\u4e32\u4f7f\u7528\u975e\u5e38\u9891\u7e41\uff0c\u5c06\u5b57\u7b26\u4e32\u8bbe\u7f6e\u4e3a\u4e0d\u53ef\u53d8\u53ef\u4ee5\u5141\u8bb8\u591a\u4e2a\u5ba2\u6237\u7aef\u4e4b\u95f4\u5171\u4eab\u76f8\u540c\u7684\u5b57\u7b26\u4e32\u3002 "},{"ID":"1155","typeID":"11","question":"Java \u4e2d\u7684\u6784\u9020\u5668\u94fe\u662f\u4ec0\u4e48\uff1f ","answer":"\u5f53\u4f60\u4ece\u4e00\u4e2a\u6784\u9020\u5668\u4e2d\u8c03\u7528\u53e6\u4e00\u4e2a\u6784\u9020\u5668\uff0c\u5c31\u662fJava \u4e2d\u7684\u6784\u9020\u5668\u94fe\u3002\u8fd9\u79cd\u60c5\u51b5\u53ea\u5728\u91cd\u8f7d\u4e86\u7c7b\u7684\u6784\u9020\u5668\u7684\u65f6\u5019\u624d\u4f1a\u51fa\u73b0\u3002"},{"ID":"1154","typeID":"11","question":"64 \u4f4d JVM \u4e2d\uff0cint \u7684\u957f\u5ea6\u662f\u591a\u6570\uff1f ","answer":"Java \u4e2d\uff0cint \u7c7b\u578b\u53d8\u91cf\u7684\u957f\u5ea6\u662f\u4e00\u4e2a\u56fa\u5b9a\u503c\uff0c\u4e0e\u5e73\u53f0\u65e0\u5173\uff0c\u90fd\u662f 32 \u4f4d\u3002\u610f\u601d\u5c31\u662f\u8bf4\uff0c\u5728 32 \u4f4d \u548c 64 \u4f4d \u7684Java \u865a\u62df\u673a\u4e2d\uff0cint \u7c7b\u578b\u7684\u957f\u5ea6\u662f\u76f8\u540c\u7684\u3002 "},{"ID":"1153","typeID":"11","question":"Serial \u4e0e Parallel GC\u4e4b\u95f4\u7684\u4e0d\u540c\u4e4b\u5904\uff1f ","answer":"Serial \u4e0e Parallel \u5728GC\u6267\u884c\u7684\u65f6\u5019\u90fd\u4f1a\u5f15\u8d77 stop-the-world\u3002\u5b83\u4eec\u4e4b\u95f4\u4e3b\u8981\u4e0d\u540c serial \u6536\u96c6\u5668\u662f\u9ed8\u8ba4\u7684\u590d\u5236\u6536\u96c6\u5668\uff0c\u6267\u884c GC \u7684\u65f6\u5019\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\uff0c\u800c parallel \u6536\u96c6\u5668\u4f7f\u7528\u591a\u4e2a GC \u7ebf\u7a0b\u6765\u6267\u884c\u3002"},{"ID":"1152","typeID":"11","question":"32 \u4f4d\u548c 64 \u4f4d\u7684 JVM\uff0cint \u7c7b\u578b\u53d8\u91cf\u7684\u957f\u5ea6\u662f\u591a\u6570\uff1f ","answer":"32 \u4f4d\u548c 64 \u4f4d\u7684 JVM \u4e2d\uff0cint \u7c7b\u578b\u53d8\u91cf\u7684\u957f\u5ea6\u662f\u76f8\u540c\u7684\uff0c\u90fd\u662f 32 \u4f4d\u6216\u8005 4 \u4e2a\u5b57\u8282\u3002 \r\n"},{"ID":"1151","typeID":"11","question":"Java \u4e2d WeakReference \u4e0e SoftReference\u7684\u533a\u522b\uff1f ","answer":"\u867d\u7136 WeakReference \u4e0e SoftReference \u90fd\u6709\u5229\u4e8e\u63d0\u9ad8 GC \u548c \u5185\u5b58\u7684\u6548\u7387\uff0c\u4f46\u662f WeakReference \uff0c\u4e00\u65e6\u5931\u53bb\u6700\u540e\u4e00\u4e2a\u5f3a\u5f15\u7528\uff0c\u5c31\u4f1a\u88ab GC \u56de\u6536\uff0c\u800c\u8f6f\u5f15\u7528\u867d\u7136\u4e0d\u80fd\u963b\u6b62\u88ab\u56de\u6536\uff0c\u4f46\u662f\u53ef\u4ee5\u5ef6\u8fdf\u5230 JVM \u5185\u5b58\u4e0d\u8db3\u7684\u65f6\u5019\u3002 "},{"ID":"1150","typeID":"11","question":"WeakHashMap \u662f\u600e\u4e48\u5de5\u4f5c\u7684\uff1f ","answer":"WeakHashMap \u7684\u5de5\u4f5c\u4e0e\u6b63\u5e38\u7684 HashMap \u7c7b\u4f3c\uff0c\u4f46\u662f\u4f7f\u7528\u5f31\u5f15\u7528\u4f5c\u4e3a key\uff0c\u610f\u601d\u5c31\u662f\u5f53 key \u5bf9\u8c61\u6ca1\u6709\u4efb\u4f55\u5f15\u7528\u65f6\uff0ckey\/value \u5c06\u4f1a\u88ab\u56de\u6536\u3002 "},{"ID":"1149","typeID":"11","question":"JVM \u9009\u9879 -XX:+UseCompressedOops \u6709\u4ec0\u4e48\u4f5c\u7528\uff1f\u4e3a\u4ec0\u4e48\u8981\u4f7f\u7528\uff1f ","answer":"\u5f53\u4f60\u5c06\u4f60\u7684\u5e94\u7528\u4ece 32 \u4f4d\u7684 JVM \u8fc1\u79fb\u5230 64 \u4f4d\u7684 JVM \u65f6\uff0c\u7531\u4e8e\u5bf9\u8c61\u7684\u6307\u9488\u4ece 32 \u4f4d\u589e\u52a0\u5230\u4e86 64 \u4f4d\uff0c\u56e0\u6b64\u5806\u5185\u5b58\u4f1a\u7a81\u7136\u589e\u52a0\uff0c\u5dee\u4e0d\u591a\u8981\u7ffb\u500d\u3002\u8fd9\u4e5f\u4f1a\u5bf9 CPU \u7f13\u5b58\uff08\u5bb9\u91cf\u6bd4\u5185\u5b58\u5c0f\u5f88\u591a\uff09\u7684\u6570\u636e\u4ea7\u751f\u4e0d\u5229\u7684\u5f71\u54cd\u3002\u56e0\u4e3a\uff0c\u8fc1\u79fb\u5230 64 \u4f4d\u7684 JVM \u4e3b\u8981\u52a8\u673a\u5728\u4e8e\u53ef\u4ee5\u6307\u5b9a\u6700\u5927\u5806\u5927\u5c0f\uff0c\u901a\u8fc7\u538b\u7f29 OOP \u53ef\u4ee5\u8282\u7701\u4e00\u5b9a\u7684\u5185\u5b58\u3002\u901a\u8fc7 -XX:+UseCompressedOops \u9009\u9879\uff0cJVM \u4f1a\u4f7f\u7528 32 \u4f4d\u7684 OOP\uff0c\u800c\u4e0d\u662f 64 \u4f4d\u7684 OOP\u3002 \r\n"},{"ID":"1148","typeID":"11","question":"\u600e\u6837\u901a\u8fc7 Java \u7a0b\u5e8f\u6765\u5224\u65ad JVM \u662f 32 \u4f4d \u8fd8\u662f 64 \u4f4d\uff1f ","answer":"\u4f60\u53ef\u4ee5\u68c0\u67e5\u67d0\u4e9b\u7cfb\u7edf\u5c5e\u6027\u5982 sun.arch.data.model \u6216 os.arch \u6765\u83b7\u53d6\u8be5\u4fe1\u606f\u3002 \r\n"},{"ID":"1147","typeID":"11","question":"32 \u4f4d JVM \u548c 64 \u4f4d JVM \u7684\u6700\u5927\u5806\u5185\u5b58\u5206\u522b\u662f\u591a\u6570\uff1f ","answer":"\u7406\u8bba\u4e0a\u8bf4\u4e0a 32 \u4f4d\u7684 JVM \u5806\u5185\u5b58\u53ef\u4ee5\u5230\u8fbe 2^32\uff0c\u5373 4GB\uff0c\u4f46\u5b9e\u9645\u4e0a\u4f1a\u6bd4\u8fd9\u4e2a\u5c0f\u5f88\u591a\u3002\u4e0d\u540c\u64cd\u4f5c\u7cfb\u7edf\u4e4b\u95f4\u4e0d\u540c\uff0c\u5982 Windows \u7cfb\u7edf\u5927\u7ea6 1.5 GB\uff0cSolaris \u5927\u7ea6 3GB\u300264 \u4f4d JVM\u5141\u8bb8\u6307\u5b9a\u6700\u5927\u7684\u5806\u5185\u5b58\uff0c\u7406\u8bba\u4e0a\u53ef\u4ee5\u8fbe\u5230 2^64\uff0c\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u5927\u7684\u6570\u5b57\uff0c\u5b9e\u9645\u4e0a\u4f60\u53ef\u4ee5\u6307\u5b9a\u5806\u5185\u5b58\u5927\u5c0f\u5230 100GB\u3002\u751a\u81f3\u6709\u7684 JVM\uff0c\u5982 Azul\uff0c\u5806\u5185\u5b58\u5230 1000G \u90fd\u662f\u53ef\u80fd\u7684\u3002 "},{"ID":"1146","typeID":"11","question":"JRE\u3001JDK\u3001JVM \u53ca JIT \u4e4b\u95f4\u6709\u4ec0\u4e48\u4e0d\u540c\uff1f ","answer":"JRE \u4ee3\u8868 Java \u8fd0\u884c\u65f6\uff08Java run-time\uff09\uff0c\u662f\u8fd0\u884c Java \u5f15\u7528\u6240\u5fc5\u987b\u7684\u3002JDK \u4ee3\u8868 Java \u5f00\u53d1\u5de5\u5177\uff08Java development kit\uff09\uff0c\u662f Java \u7a0b\u5e8f\u7684\u5f00\u53d1\u5de5\u5177\uff0c\u5982 Java \u7f16\u8bd1\u5668\uff0c\u5b83\u4e5f\u5305\u542b JRE\u3002JVM \u4ee3\u8868 Java \u865a\u62df\u673a\uff08Java virtual machine\uff09\uff0c\u5b83\u7684\u8d23\u4efb\u662f\u8fd0\u884c Java \u5e94\u7528\u3002JIT \u4ee3\u8868\u5373\u65f6\u7f16\u8bd1\uff08Just In Time compilation\uff09\uff0c\u5f53\u4ee3\u7801\u6267\u884c\u7684\u6b21\u6570\u8d85\u8fc7\u4e00\u5b9a\u7684\u9608\u503c\u65f6\uff0c\u4f1a\u5c06 Java \u5b57\u8282\u7801\u8f6c\u6362\u4e3a\u672c\u5730\u4ee3\u7801\uff0c\u5982\uff0c\u4e3b\u8981\u7684\u70ed\u70b9\u4ee3\u7801\u4f1a\u88ab\u51c6\u6362\u4e3a\u672c\u5730\u4ee3\u7801\uff0c\u8fd9\u6837\u6709\u5229\u5927\u5e45\u5ea6\u63d0\u9ad8 Java \u5e94\u7528\u7684\u6027\u80fd\u3002 \r\n"},{"ID":"1145","typeID":"11","question":"\u89e3\u91ca Java \u5806\u7a7a\u95f4\u53ca GC\uff1f ","answer":"\u5f53\u901a\u8fc7 Java \u547d\u4ee4\u542f\u52a8 Java \u8fdb\u7a0b\u7684\u65f6\u5019\uff0c\u4f1a\u4e3a\u5b83\u5206\u914d\u5185\u5b58\u3002\u5185\u5b58\u7684\u4e00\u90e8\u5206\u7528\u4e8e\u521b\u5efa\u5806\u7a7a\u95f4\uff0c\u5f53\u7a0b\u5e8f\u4e2d\u521b\u5efa\u5bf9\u8c61\u7684\u65f6\u5019\uff0c\u5c31\u4ece\u5bf9\u7a7a\u95f4\u4e2d\u5206\u914d\u5185\u5b58\u3002GC \u662f JVM \u5185\u90e8\u7684\u4e00\u4e2a\u8fdb\u7a0b\uff0c\u56de\u6536\u65e0\u6548\u5bf9\u8c61\u7684\u5185\u5b58\u7528\u4e8e\u5c06\u6765\u7684\u5206\u914d\u3002 "},{"ID":"1144","typeID":"11","question":"\u4f60\u80fd\u4fdd\u8bc1 GC \u6267\u884c\u5417\uff1f ","answer":"\u4e0d\u80fd\uff0c\u867d\u7136\u4f60\u53ef\u4ee5\u8c03\u7528 System.gc() \u6216\u8005 Runtime.gc()\uff0c\u4f46\u662f\u6ca1\u6709\u529e\u6cd5\u4fdd\u8bc1 GC \u7684\u6267\u884c\u3002 \r\n"},{"ID":"1143","typeID":"11","question":"\u600e\u4e48\u83b7\u53d6 Java \u7a0b\u5e8f\u4f7f\u7528\u7684\u5185\u5b58\uff1f\u5806\u4f7f\u7528\u7684\u767e\u5206\u6bd4\uff1f ","answer":"\u53ef\u4ee5\u901a\u8fc7 java.lang.Runtime \u7c7b\u4e2d\u4e0e\u5185\u5b58\u76f8\u5173\u65b9\u6cd5\u6765\u83b7\u53d6\u5269\u4f59\u7684\u5185\u5b58\uff0c\u603b\u5185\u5b58\u53ca\u6700\u5927\u5806\u5185\u5b58\u3002\u901a\u8fc7\u8fd9\u4e9b\u65b9\u6cd5\u4f60\u4e5f\u53ef\u4ee5\u83b7\u53d6\u5230\u5806\u4f7f\u7528\u7684\u767e\u5206\u6bd4\u53ca\u5806\u5185\u5b58\u7684\u5269\u4f59\u7a7a\u95f4\u3002Runtime.freeMemory() \u65b9\u6cd5\u8fd4\u56de\u5269\u4f59\u7a7a\u95f4\u7684\u5b57\u8282\u6570\uff0cRuntime.totalMemory() \u65b9\u6cd5\u603b\u5185\u5b58\u7684\u5b57\u8282\u6570\uff0cRuntime.maxMemory() \u8fd4\u56de\u6700\u5927\u5185\u5b58\u7684\u5b57\u8282\u6570\u3002 "},{"ID":"1142","typeID":"11","question":"Java \u4e2d\u5806\u548c\u6808\u6709\u4ec0\u4e48\u533a\u522b\uff1f ","answer":"JVM \u4e2d\u5806\u548c\u6808\u5c5e\u4e8e\u4e0d\u540c\u7684\u5185\u5b58\u533a\u57df\uff0c\u4f7f\u7528\u76ee\u7684\u4e5f\u4e0d\u540c\u3002\u6808\u5e38\u7528\u4e8e\u4fdd\u5b58\u65b9\u6cd5\u5e27\u548c\u5c40\u90e8\u53d8\u91cf\uff0c\u800c\u5bf9\u8c61\u603b\u662f\u5728\u5806\u4e0a\u5206\u914d\u3002\u6808\u901a\u5e38\u90fd\u6bd4\u5806\u5c0f\uff0c\u4e5f\u4e0d\u4f1a\u5728\u591a\u4e2a\u7ebf\u7a0b\u4e4b\u95f4\u5171\u4eab\uff0c\u800c\u5806\u88ab\u6574\u4e2a JVM \u7684\u6240\u6709\u7ebf\u7a0b\u5171\u4eab\u3002 \r\n"},{"ID":"1141","typeID":"11","question":"\u201ca==b\u201d\u548c\u201da.equals(b)\u201d\u6709\u4ec0\u4e48\u533a\u522b\uff1f ","answer":"\u5982\u679c a \u548c b \u90fd\u662f\u5bf9\u8c61\uff0c\u5219 a==b \u662f\u6bd4\u8f83\u4e24\u4e2a\u5bf9\u8c61\u7684\u5f15\u7528\uff0c\u53ea\u6709\u5f53 a \u548c b \u6307\u5411\u7684\u662f\u5806\u4e2d\u7684\u540c\u4e00\u4e2a\u5bf9\u8c61\u624d\u4f1a\u8fd4\u56de true\uff0c\u800c a.equals(b) \u662f\u8fdb\u884c\u903b\u8f91\u6bd4\u8f83\uff0c\u6240\u4ee5\u901a\u5e38\u9700\u8981\u91cd\u5199\u8be5\u65b9\u6cd5\u6765\u63d0\u4f9b\u903b\u8f91\u4e00\u81f4\u6027\u7684\u6bd4\u8f83\u3002\u4f8b\u5982\uff0cString \u7c7b\u91cd\u5199 equals() \u65b9\u6cd5\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528\u4e8e\u4e24\u4e2a\u4e0d\u540c\u5bf9\u8c61\uff0c\u4f46\u662f\u5305\u542b\u7684\u5b57\u6bcd\u76f8\u540c\u7684\u6bd4\u8f83\u3002 \r\n"},{"ID":"1140","typeID":"11","question":"a.hashCode() \u6709\u4ec0\u4e48\u7528\uff1f\u4e0e a.equals(b) \u6709\u4ec0\u4e48\u5173\u7cfb\uff1f ","answer":"hashCode() \u65b9\u6cd5\u662f\u76f8\u5e94\u5bf9\u8c61\u6574\u578b\u7684 hash \u503c\u3002\u5b83\u5e38\u7528\u4e8e\u57fa\u4e8e hash \u7684\u96c6\u5408\u7c7b\uff0c\u5982 Hashtable\u3001HashMap\u3001LinkedHashMap\u7b49\u7b49\u3002\u5b83\u4e0e equals() \u65b9\u6cd5\u5173\u7cfb\u7279\u522b\u7d27\u5bc6\u3002\u6839\u636e Java \u89c4\u8303\uff0c\u4e24\u4e2a\u4f7f\u7528 equal() \u65b9\u6cd5\u6765\u5224\u65ad\u76f8\u7b49\u7684\u5bf9\u8c61\uff0c\u5fc5\u987b\u5177\u6709\u76f8\u540c\u7684 hash code\u3002 \r\n"},{"ID":"1139","typeID":"11","question":"final\u3001finalize \u548c finally \u7684\u4e0d\u540c\u4e4b\u5904\uff1f ","answer":"final \u662f\u4e00\u4e2a\u4fee\u9970\u7b26\uff0c\u53ef\u4ee5\u4fee\u9970\u53d8\u91cf\u3001\u65b9\u6cd5\u548c\u7c7b\u3002\u5982\u679c final \u4fee\u9970\u53d8\u91cf\uff0c\u610f\u5473\u7740\u8be5\u53d8\u91cf\u7684\u503c\u5728\u521d\u59cb\u5316\u540e\u4e0d\u80fd\u88ab\u6539\u53d8\u3002finalize \u65b9\u6cd5\u662f\u5728\u5bf9\u8c61\u88ab\u56de\u6536\u4e4b\u524d\u8c03\u7528\u7684\u65b9\u6cd5\uff0c\u7ed9\u5bf9\u8c61\u81ea\u5df1\u6700\u540e\u4e00\u4e2a\u590d\u6d3b\u7684\u673a\u4f1a\uff0c\u4f46\u662f\u4ec0\u4e48\u65f6\u5019\u8c03\u7528 finalize \u6ca1\u6709\u4fdd\u8bc1\u3002finally \u662f\u4e00\u4e2a\u5173\u952e\u5b57\uff0c\u4e0e try \u548c catch \u4e00\u8d77\u7528\u4e8e\u5f02\u5e38\u7684\u5904\u7406\u3002finally \u5757\u4e00\u5b9a\u4f1a\u88ab\u6267\u884c\uff0c\u65e0\u8bba\u5728 try \u5757\u4e2d\u662f\u5426\u6709\u53d1\u751f\u5f02\u5e38\u3002 \r\n"},{"ID":"1138","typeID":"11","question":"Java \u4e2d\u7684\u7f16\u8bd1\u671f\u5e38\u91cf\u662f\u4ec0\u4e48\uff1f\u4f7f\u7528\u5b83\u53c8\u4ec0\u4e48\u98ce\u9669\uff1f ","answer":"\u516c\u5171\u9759\u6001\u4e0d\u53ef\u53d8\uff08public static final \uff09\u53d8\u91cf\u4e5f\u5c31\u662f\u6211\u4eec\u6240\u8bf4\u7684\u7f16\u8bd1\u671f\u5e38\u91cf\uff0c\u8fd9\u91cc\u7684 public \u53ef\u9009\u7684\u3002\u5b9e\u9645\u4e0a\u8fd9\u4e9b\u53d8\u91cf\u5728\u7f16\u8bd1\u65f6\u4f1a\u88ab\u66ff\u6362\u6389\uff0c\u56e0\u4e3a\u7f16\u8bd1\u5668\u77e5\u9053\u8fd9\u4e9b\u53d8\u91cf\u7684\u503c\uff0c\u5e76\u4e14\u77e5\u9053\u8fd9\u4e9b\u53d8\u91cf\u5728\u8fd0\u884c\u65f6\u4e0d\u80fd\u6539\u53d8\u3002\u8fd9\u79cd\u65b9\u5f0f\u5b58\u5728\u7684\u4e00\u4e2a\u95ee\u9898\u662f\u4f60\u4f7f\u7528\u4e86\u4e00\u4e2a\u5185\u90e8\u7684\u6216\u7b2c\u4e09\u65b9\u5e93\u4e2d\u7684\u516c\u6709\u7f16\u8bd1\u65f6\u5e38\u91cf\uff0c\u4f46\u662f\u8fd9\u4e2a\u503c\u540e\u9762\u88ab\u5176\u4ed6\u4eba\u6539\u53d8\u4e86\uff0c\u4f46\u662f\u4f60\u7684\u5ba2\u6237\u7aef\u4ecd\u7136\u5728\u4f7f\u7528\u8001\u7684\u503c\uff0c\u751a\u81f3\u4f60\u5df2\u7ecf\u90e8\u7f72\u4e86\u4e00\u4e2a\u65b0\u7684jar\u3002\u4e3a\u4e86\u907f\u514d\u8fd9\u79cd\u60c5\u51b5\uff0c\u5f53\u4f60\u5728\u66f4\u65b0\u4f9d\u8d56 JAR \u6587\u4ef6\u65f6\uff0c\u786e\u4fdd\u91cd\u65b0\u7f16\u8bd1\u4f60\u7684\u7a0b\u5e8f\u3002 "},{"ID":"1137","typeID":"11","question":" List\u3001Set\u3001Map \u548c Queue \u4e4b\u95f4\u7684\u533a\u522b\uff1f ","answer":"List \u662f\u4e00\u4e2a\u6709\u5e8f\u96c6\u5408\uff0c\u5141\u8bb8\u5143\u7d20\u91cd\u590d\u3002\u5b83\u7684\u67d0\u4e9b\u5b9e\u73b0\u53ef\u4ee5\u63d0\u4f9b\u57fa\u4e8e\u4e0b\u6807\u503c\u7684\u5e38\u91cf\u8bbf\u95ee\u65f6\u95f4\uff0c\u4f46\u662f\u8fd9\u4e0d\u662f List \u63a5\u53e3\u4fdd\u8bc1\u7684\u3002Set \u662f\u4e00\u4e2a\u65e0\u5e8f\u96c6\u5408\u3002 \r\n"},{"ID":"1136","typeID":"11","question":"poll() \u65b9\u6cd5\u548c remove() \u65b9\u6cd5\u7684\u533a\u522b\uff1f ","answer":"poll() \u548c remove() \u90fd\u662f\u4ece\u961f\u5217\u4e2d\u53d6\u51fa\u4e00\u4e2a\u5143\u7d20\uff0c\u4f46\u662f poll() \u5728\u83b7\u53d6\u5143\u7d20\u5931\u8d25\u7684\u65f6\u5019\u4f1a\u8fd4\u56de\u7a7a\uff0c\u4f46\u662f remove() \u5931\u8d25\u7684\u65f6\u5019\u4f1a\u629b\u51fa\u5f02\u5e38\u3002 \r\n"},{"ID":"1135","typeID":"11","question":"Java \u4e2d LinkedHashMap \u548c PriorityQueue \u7684\u533a\u522b\u662f\u4ec0\u4e48\uff1f ","answer":"PriorityQueue \u4fdd\u8bc1\u6700\u9ad8\u6216\u8005\u6700\u4f4e\u4f18\u5148\u7ea7\u7684\u7684\u5143\u7d20\u603b\u662f\u5728\u961f\u5217\u5934\u90e8\uff0c\u4f46\u662f LinkedHashMap \u7ef4\u6301\u7684\u987a\u5e8f\u662f\u5143\u7d20\u63d2\u5165\u7684\u987a\u5e8f\u3002\u5f53\u904d\u5386\u4e00\u4e2a PriorityQueue \u65f6\uff0c\u6ca1\u6709\u4efb\u4f55\u987a\u5e8f\u4fdd\u8bc1\uff0c\u4f46\u662f LinkedHashMap \u8bfe\u4fdd\u8bc1\u904d\u5386\u987a\u5e8f\u662f\u5143\u7d20\u63d2\u5165\u7684\u987a\u5e8f\u3002 \r\n"},{"ID":"1134","typeID":"11","question":"ArrayList \u4e0e LinkedList \u7684\u4e0d\u533a\u522b\uff1f ","answer":"\u6700\u660e\u663e\u7684\u533a\u522b\u662f ArrrayList \u5e95\u5c42\u7684\u6570\u636e\u7ed3\u6784\u662f\u6570\u7ec4\uff0c\u652f\u6301\u968f\u673a\u8bbf\u95ee\uff0c\u800c LinkedList \u7684\u5e95\u5c42\u6570\u636e\u7ed3\u6784\u4e66\u94fe\u8868\uff0c\u4e0d\u652f\u6301\u968f\u673a\u8bbf\u95ee\u3002\u4f7f\u7528\u4e0b\u6807\u8bbf\u95ee\u4e00\u4e2a\u5143\u7d20\uff0cArrayList \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(1)\uff0c\u800c LinkedList \u662f O(n)\u3002 "},{"ID":"1133","typeID":"11","question":"\u7528\u54ea\u4e24\u79cd\u65b9\u5f0f\u6765\u5b9e\u73b0\u96c6\u5408\u7684\u6392\u5e8f\uff1f ","answer":"\u4f60\u53ef\u4ee5\u4f7f\u7528\u6709\u5e8f\u96c6\u5408\uff0c\u5982 TreeSet \u6216 TreeMap\uff0c\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528\u6709\u987a\u5e8f\u7684\u7684\u96c6\u5408\uff0c\u5982 list\uff0c\u7136\u540e\u901a\u8fc7 Collections.sort() \u6765\u6392\u5e8f\u3002 "},{"ID":"1132","typeID":"11","question":"Java \u4e2d\u600e\u4e48\u6253\u5370\u6570\u7ec4\uff1f ","answer":"\u4f60\u53ef\u4ee5\u4f7f\u7528 Arrays.toString() \u548c Arrays.deepToString() \u65b9\u6cd5\u6765\u6253\u5370\u6570\u7ec4\u3002\u7531\u4e8e\u6570\u7ec4\u6ca1\u6709\u5b9e\u73b0 toString() \u65b9\u6cd5\uff0c\u6240\u4ee5\u5982\u679c\u5c06\u6570\u7ec4\u4f20\u9012\u7ed9 System.out.println() \u65b9\u6cd5\uff0c\u5c06\u65e0\u6cd5\u6253\u5370\u51fa\u6570\u7ec4\u7684\u5185\u5bb9\uff0c\u4f46\u662f Arrays.toString() \u53ef\u4ee5\u6253\u5370\u6bcf\u4e2a\u5143\u7d20\u3002 \r\n"},{"ID":"1131","typeID":"11","question":"Hashtable \u4e0e HashMap \u6709\u4ec0\u4e48\u4e0d\u540c\u4e4b\u5904\uff1f ","answer":"\u8fd9\u4e24\u4e2a\u7c7b\u6709\u8bb8\u591a\u4e0d\u540c\u7684\u5730\u65b9\uff0c\u4e0b\u9762\u5217\u51fa\u4e86\u4e00\u90e8\u5206\uff1a \r\na) Hashtable \u662f JDK 1 \u9057\u7559\u4e0b\u6765\u7684\u7c7b\uff0c\u800c HashMap \u662f\u540e\u6765\u589e\u52a0\u7684\u3002 \r\nb\uff09Hashtable \u662f\u540c\u6b65\u7684\uff0c\u6bd4\u8f83\u6162\uff0c\u4f46 HashMap \u6ca1\u6709\u540c\u6b65\u7b56\u7565\uff0c\u6240\u4ee5\u4f1a\u66f4\u5feb\u3002 \r\nc\uff09Hashtable \u4e0d\u5141\u8bb8\u6709\u4e2a\u7a7a\u7684 key\uff0c\u4f46\u662f HashMap \u5141\u8bb8\u51fa\u73b0\u4e00\u4e2a null key\u3002 "},{"ID":"1130","typeID":"11","question":"Java \u4e2d\u7684 HashSet\uff0c\u5185\u90e8\u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff1f ","answer":"HashSet \u7684\u5185\u90e8\u91c7\u7528 HashMap\u6765\u5b9e\u73b0\u3002\u7531\u4e8e Map \u9700\u8981 key \u548c value\uff0c\u6240\u4ee5\u6240\u6709 key \u7684\u90fd\u6709\u4e00\u4e2a\u9ed8\u8ba4 value\u3002\u7c7b\u4f3c\u4e8e HashMap\uff0cHashSet \u4e0d\u5141\u8bb8\u91cd\u590d\u7684 key\uff0c\u53ea\u5141\u8bb8\u6709\u4e00\u4e2anull key\uff0c\u610f\u601d\u5c31\u662f HashSet \u4e2d\u53ea\u5141\u8bb8\u5b58\u50a8\u4e00\u4e2a null \u5bf9\u8c61\u3002 "},{"ID":"1129","typeID":"11","question":"\u5199\u4e00\u6bb5\u4ee3\u7801\u5728\u904d\u5386 ArrayList \u65f6\u79fb\u9664\u4e00\u4e2a\u5143\u7d20\uff1f ","answer":"\u8be5\u95ee\u9898\u7684\u5173\u952e\u5728\u4e8e\u9762\u8bd5\u8005\u4f7f\u7528\u7684\u662f ArrayList \u7684 remove() \u8fd8\u662f Iterator \u7684 remove()\u65b9\u6cd5\u3002\u8fd9\u6709\u4e00\u6bb5\u793a\u4f8b\u4ee3\u7801\uff0c\u662f\u4f7f\u7528\u6b63\u786e\u7684\u65b9\u5f0f\u6765\u5b9e\u73b0\u5728\u904d\u5386\u7684\u8fc7\u7a0b\u4e2d\u79fb\u9664\u5143\u7d20\uff0c\u800c\u4e0d\u4f1a\u51fa\u73b0 ConcurrentModificationException \u5f02\u5e38\u7684\u793a\u4f8b\u4ee3\u7801\u3002 "},{"ID":"1128","typeID":"11","question":"\u6211\u4eec\u80fd\u81ea\u5df1\u5199\u4e00\u4e2a\u5bb9\u5668\u7c7b\uff0c\u7136\u540e\u4f7f\u7528 for-each \u5faa\u73af\u7801\uff1f ","answer":"\u53ef\u4ee5\uff0c\u4f60\u53ef\u4ee5\u5199\u4e00\u4e2a\u81ea\u5df1\u7684\u5bb9\u5668\u7c7b\u3002\u5982\u679c\u4f60\u60f3\u4f7f\u7528 Java \u4e2d\u589e\u5f3a\u7684\u5faa\u73af\u6765\u904d\u5386\uff0c\u4f60\u53ea\u9700\u8981\u5b9e\u73b0 Iterable \u63a5\u53e3\u3002\u5982\u679c\u4f60\u5b9e\u73b0 Collection \u63a5\u53e3\uff0c\u9ed8\u8ba4\u5c31\u5177\u6709\u8be5\u5c5e\u6027\u3002 \r\n"},{"ID":"1127","typeID":"11","question":"ArrayList \u548c HashMap \u7684\u9ed8\u8ba4\u5927\u5c0f\u662f\u591a\u6570\uff1f ","answer":"\u5728 Java 7 \u4e2d\uff0cArrayList \u7684\u9ed8\u8ba4\u5927\u5c0f\u662f 10 \u4e2a\u5143\u7d20\uff0cHashMap \u7684\u9ed8\u8ba4\u5927\u5c0f\u662f16\u4e2a\u5143\u7d20\uff08\u5fc5\u987b\u662f2\u7684\u5e42\uff09\u3002\u8fd9\u5c31\u662f Java 7 \u4e2d ArrayList \u548c HashMap \u7c7b\u7684\u4ee3\u7801\u7247\u6bb5\uff1a \r\n\r\n\/\/ from ArrayList.java JDK 1.7 \r\nprivate static final int DEFAULT_CAPACITY = 10; \r\n\r\n\/\/from HashMap.java JDK 7 \r\nstatic final int DEFAULT_INITIAL_CAPACITY = 1 << 4; \/\/ aka 16 "},{"ID":"1126","typeID":"11","question":"\u6709\u6ca1\u6709\u53ef\u80fd\u4e24\u4e2a\u4e0d\u76f8\u7b49\u7684\u5bf9\u8c61\u6709\u6709\u76f8\u540c\u7684 hashcode\uff1f ","answer":"\u6709\u53ef\u80fd\uff0c\u4e24\u4e2a\u4e0d\u76f8\u7b49\u7684\u5bf9\u8c61\u53ef\u80fd\u4f1a\u6709\u76f8\u540c\u7684 hashcode \u503c\uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u5728 hashmap \u4e2d\u4f1a\u6709\u51b2\u7a81\u3002\u76f8\u7b49 hashcode \u503c\u7684\u89c4\u5b9a\u53ea\u662f\u8bf4\u5982\u679c\u4e24\u4e2a\u5bf9\u8c61\u76f8\u7b49\uff0c\u5fc5\u987b\u6709\u76f8\u540c\u7684hashcode \u503c\uff0c\u4f46\u662f\u6ca1\u6709\u5173\u4e8e\u4e0d\u76f8\u7b49\u5bf9\u8c61\u7684\u4efb\u4f55\u89c4\u5b9a\u3002"},{"ID":"1125","typeID":"11","question":"\u4e24\u4e2a\u76f8\u540c\u7684\u5bf9\u8c61\u4f1a\u6709\u4e0d\u540c\u7684\u7684 hash code \u5417\uff1f ","answer":"\u4e0d\u80fd\uff0c\u6839\u636e hash code \u7684\u89c4\u5b9a\uff0c\u8fd9\u662f\u4e0d\u53ef\u80fd\u7684\u3002 "},{"ID":"1124","typeID":"11","question":"\u6211\u4eec\u53ef\u4ee5\u5728 hashcode() \u4e2d\u4f7f\u7528\u968f\u673a\u6570\u5b57\u5417\uff1f ","answer":"\u4e0d\u884c\uff0c\u56e0\u4e3a\u5bf9\u8c61\u7684 hashcode \u503c\u5fc5\u987b\u662f\u76f8\u540c\u7684\u3002\u53c2\u89c1\u7b54\u6848\u83b7\u53d6\u66f4\u591a\u5173\u4e8e Java \u4e2d\u91cd\u5199 hashCode() \u65b9\u6cd5\u7684\u77e5\u8bc6\u3002"},{"ID":"1123","typeID":"11","question":"Java \u4e2d\uff0cComparator \u4e0e Comparable \u6709\u4ec0\u4e48\u4e0d\u540c\uff1f ","answer":"Comparable \u63a5\u53e3\u7528\u4e8e\u5b9a\u4e49\u5bf9\u8c61\u7684\u81ea\u7136\u987a\u5e8f\uff0c\u800c comparator \u901a\u5e38\u7528\u4e8e\u5b9a\u4e49\u7528\u6237\u5b9a\u5236\u7684\u987a\u5e8f\u3002Comparable \u603b\u662f\u53ea\u6709\u4e00\u4e2a\uff0c\u4f46\u662f\u53ef\u4ee5\u6709\u591a\u4e2a comparator \u6765\u5b9a\u4e49\u5bf9\u8c61\u7684\u987a\u5e8f\u3002 "},{"ID":"1122","typeID":"11","question":"\u4e3a\u4ec0\u4e48\u5728\u91cd\u5199 equals \u65b9\u6cd5\u7684\u65f6\u5019\u9700\u8981\u91cd\u5199 hashCode \u65b9\u6cd5\uff1f ","answer":"\u56e0\u4e3a\u6709\u5f3a\u5236\u7684\u89c4\u8303\u6307\u5b9a\u9700\u8981\u540c\u65f6\u91cd\u5199 hashcode \u4e0e equal \u662f\u65b9\u6cd5\uff0c\u8bb8\u591a\u5bb9\u5668\u7c7b\uff0c\u5982 HashMap\u3001HashSet \u90fd\u4f9d\u8d56\u4e8e hashcode \u4e0e equals \u7684\u89c4\u5b9a\u3002 "},{"ID":"1121","typeID":"11","question":"Java \u4e2d\uff0c\u7f16\u5199\u591a\u7ebf\u7a0b\u7a0b\u5e8f\u7684\u65f6\u5019\u4f60\u4f1a\u9075\u5faa\u54ea\u4e9b\u6700\u4f73\u5b9e\u8df5\uff1f ","answer":"a\uff09\u7ed9\u7ebf\u7a0b\u547d\u540d\uff0c\u8fd9\u6837\u53ef\u4ee5\u5e2e\u52a9\u8c03\u8bd5\u3002 \r\nb\uff09\u6700\u5c0f\u5316\u540c\u6b65\u7684\u8303\u56f4\uff0c\u800c\u4e0d\u662f\u5c06\u6574\u4e2a\u65b9\u6cd5\u540c\u6b65\uff0c\u53ea\u5bf9\u5173\u952e\u90e8\u5206\u505a\u540c\u6b65\u3002 \r\nc\uff09\u5982\u679c\u53ef\u4ee5\uff0c\u66f4\u504f\u5411\u4e8e\u4f7f\u7528 volatile \u800c\u4e0d\u662f synchronized\u3002 \r\nd\uff09\u4f7f\u7528\u66f4\u9ad8\u5c42\u6b21\u7684\u5e76\u53d1\u5de5\u5177\uff0c\u800c\u4e0d\u662f\u4f7f\u7528 wait() \u548c notify() \u6765\u5b9e\u73b0\u7ebf\u7a0b\u95f4\u901a\u4fe1\uff0c\u5982 BlockingQueue\uff0cCountDownLatch \u53ca Semeaphore\u3002 \r\ne\uff09\u4f18\u5148\u4f7f\u7528\u5e76\u53d1\u96c6\u5408\uff0c\u800c\u4e0d\u662f\u5bf9\u96c6\u5408\u8fdb\u884c\u540c\u6b65\u3002\u5e76\u53d1\u96c6\u5408\u63d0\u4f9b\u66f4\u597d\u7684\u53ef\u6269\u5c55\u6027\u3002 "},{"ID":"1120","typeID":"11","question":"\u8bf4\u51fa\u51e0\u70b9 Java \u4e2d\u4f7f\u7528 Collections \u7684\u6700\u4f73\u5b9e\u8df5\uff1f ","answer":"a\uff09\u4f7f\u7528\u6b63\u786e\u7684\u96c6\u5408\u7c7b\uff0c\u4f8b\u5982\uff0c\u5982\u679c\u4e0d\u9700\u8981\u540c\u6b65\u5217\u8868\uff0c\u4f7f\u7528 ArrayList \u800c\u4e0d\u662f Vector\u3002 \r\nb\uff09\u4f18\u5148\u4f7f\u7528\u5e76\u53d1\u96c6\u5408\uff0c\u800c\u4e0d\u662f\u5bf9\u96c6\u5408\u8fdb\u884c\u540c\u6b65\u3002\u5e76\u53d1\u96c6\u5408\u63d0\u4f9b\u66f4\u597d\u7684\u53ef\u6269\u5c55\u6027\u3002 \r\nc\uff09\u4f7f\u7528\u63a5\u53e3\u4ee3\u8868\u548c\u8bbf\u95ee\u96c6\u5408\uff0c\u5982\u4f7f\u7528List\u5b58\u50a8 ArrayList\uff0c\u4f7f\u7528 Map \u5b58\u50a8 HashMap \u7b49\u7b49\u3002 \r\nd\uff09\u4f7f\u7528\u8fed\u4ee3\u5668\u6765\u5faa\u73af\u96c6\u5408\u3002 \r\ne\uff09\u4f7f\u7528\u96c6\u5408\u7684\u65f6\u5019\u4f7f\u7528\u6cdb\u578b\u3002 \r\n"},{"ID":"1119","typeID":"11","question":"\u8bf4\u51fa\u5728 Java \u4e2d\u4f7f\u7528\u7ebf\u7a0b\u7684\u6700\u4f73\u5b9e\u8df5\uff1f ","answer":"a\uff09\u5bf9\u7ebf\u7a0b\u547d\u540d \r\nb\uff09\u5c06\u7ebf\u7a0b\u548c\u4efb\u52a1\u5206\u79bb\uff0c\u4f7f\u7528\u7ebf\u7a0b\u6c60\u6267\u884c\u5668\u6765\u6267\u884c Runnable \u6216 Callable\u3002 \r\nc\uff09\u4f7f\u7528\u7ebf\u7a0b\u6c60 \r\n"},{"ID":"1118","typeID":"11","question":"\u8bf4\u51fa IO \u7684\u6700\u4f73\u5b9e\u8df5\uff1f ","answer":"a\uff09\u4f7f\u7528\u6709\u7f13\u51b2\u533a\u7684 IO \u7c7b\uff0c\u800c\u4e0d\u8981\u5355\u72ec\u8bfb\u53d6\u5b57\u8282\u6216\u5b57\u7b26\u3002 \r\nb\uff09\u4f7f\u7528 NIO \u548c NIO2 \r\nc\uff09\u5728 finally \u5757\u4e2d\u5173\u95ed\u6d41\uff0c\u6216\u8005\u4f7f\u7528 try-with-resource \u8bed\u53e5\u3002 \r\nd\uff09\u4f7f\u7528\u5185\u5b58\u6620\u5c04\u6587\u4ef6\u83b7\u53d6\u66f4\u5feb\u7684 IO\u3002 "},{"ID":"1117","typeID":"11","question":"\u5217\u51fa\u5e94\u8be5\u9075\u5faa\u7684 JDBC \u6700\u4f73\u5b9e\u8df5\uff1f ","answer":"a\uff09\u4f7f\u7528\u6279\u91cf\u7684\u64cd\u4f5c\u6765\u63d2\u5165\u548c\u66f4\u65b0\u6570\u636e \r\nb\uff09\u4f7f\u7528 PreparedStatement \u6765\u907f\u514d SQL \u5f02\u5e38\uff0c\u5e76\u63d0\u9ad8\u6027\u80fd\u3002 \r\nc\uff09\u4f7f\u7528\u6570\u636e\u5e93\u8fde\u63a5\u6c60 \r\nd\uff09\u901a\u8fc7\u5217\u540d\u6765\u83b7\u53d6\u7ed3\u679c\u96c6\uff0c\u4e0d\u8981\u4f7f\u7528\u5217\u7684\u4e0b\u6807\u6765\u83b7\u53d6\u3002 "},{"ID":"1116","typeID":"11","question":"\u8bf4\u51fa\u51e0\u6761 Java \u4e2d\u65b9\u6cd5\u91cd\u8f7d\u7684\u6700\u4f73\u5b9e\u8df5\uff1f ","answer":"a\uff09\u4e0d\u8981\u91cd\u8f7d\u8fd9\u6837\u7684\u65b9\u6cd5\uff1a\u4e00\u4e2a\u65b9\u6cd5\u63a5\u6536 int \u53c2\u6570\uff0c\u800c\u53e6\u4e2a\u65b9\u6cd5\u63a5\u6536 Integer \u53c2\u6570\u3002 \r\nb\uff09\u4e0d\u8981\u91cd\u8f7d\u53c2\u6570\u6570\u91cf\u4e00\u81f4\uff0c\u800c\u53ea\u662f\u53c2\u6570\u987a\u5e8f\u4e0d\u540c\u7684\u65b9\u6cd5\u3002 \r\nc\uff09\u5982\u679c\u91cd\u8f7d\u7684\u65b9\u6cd5\u53c2\u6570\u4e2a\u6570\u591a\u4e8e 5 \u4e2a\uff0c\u91c7\u7528\u53ef\u53d8\u53c2\u6570\u3002 "},{"ID":"1115","typeID":"11","question":"\u5728\u591a\u7ebf\u7a0b\u73af\u5883\u4e0b\uff0cSimpleDateFormat \u662f\u7ebf\u7a0b\u5b89\u5168\u7684\u5417\uff1f ","answer":"\u4e0d\u662f\uff0c\u975e\u5e38\u4e0d\u5e78\uff0cDateFormat \u7684\u6240\u6709\u5b9e\u73b0\uff0c\u5305\u62ec SimpleDateFormat \u90fd\u4e0d\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\uff0c\u56e0\u6b64\u4f60\u4e0d\u5e94\u8be5\u5728\u591a\u7ebf\u7a0b\u5e8f\u4e2d\u4f7f\u7528\uff0c\u9664\u975e\u662f\u5728\u5bf9\u5916\u7ebf\u7a0b\u5b89\u5168\u7684\u73af\u5883\u4e2d\u4f7f\u7528\uff0c\u5982 \u5c06 SimpleDateFormat \u9650\u5236\u5728 ThreadLocal \u4e2d\u3002\u5982\u679c\u4f60\u4e0d\u8fd9\u4e48\u505a\uff0c\u5728\u89e3\u6790\u6216\u8005\u683c\u5f0f\u5316\u65e5\u671f\u7684\u65f6\u5019\uff0c\u53ef\u80fd\u4f1a\u83b7\u53d6\u5230\u4e00\u4e2a\u4e0d\u6b63\u786e\u7684\u7ed3\u679c\u3002\u56e0\u6b64\uff0c\u4ece\u65e5\u671f\u3001\u65f6\u95f4\u5904\u7406\u7684\u6240\u6709\u5b9e\u8df5\u6765\u8bf4\uff0c\u6211\u5f3a\u529b\u63a8\u8350 joda-time \u5e93\u3002 \r\n"},{"ID":"1114","typeID":"11","question":"Java \u4e2d\u5982\u4f55\u683c\u5f0f\u5316\u4e00\u4e2a\u65e5\u671f\uff1f\u5982\u683c\u5f0f\u5316\u4e3a ddMMyyyy \u7684\u5f62\u5f0f\uff1f ","answer":"Java \u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528 SimpleDateFormat \u7c7b\u6216\u8005 joda-time \u5e93\u6765\u683c\u5f0f\u65e5\u671f\u3002DateFormat \u7c7b\u5141\u8bb8\u4f60\u4f7f\u7528\u591a\u79cd\u6d41\u884c\u7684\u683c\u5f0f\u6765\u683c\u5f0f\u5316\u65e5\u671f\u3002\u53c2\u89c1\u7b54\u6848\u4e2d\u7684\u793a\u4f8b\u4ee3\u7801\uff0c\u4ee3\u7801\u4e2d\u6f14\u793a\u4e86\u5c06\u65e5\u671f\u683c\u5f0f\u5316\u6210\u4e0d\u540c\u7684\u683c\u5f0f\uff0c\u5982 dd-MM-yyyy \u6216 ddMMyyyy\u3002"},{"ID":"1113","typeID":"11","question":"\u63a5\u53e3\u662f\u4ec0\u4e48\uff1f\u4e3a\u4ec0\u4e48\u8981\u4f7f\u7528\u63a5\u53e3\u800c\u4e0d\u662f\u76f4\u63a5\u4f7f\u7528\u5177\u4f53\u7c7b\uff1f ","answer":"\u63a5\u53e3\u7528\u4e8e\u5b9a\u4e49 API\u3002\u5b83\u5b9a\u4e49\u4e86\u7c7b\u5fc5\u987b\u5f97\u9075\u5faa\u7684\u89c4\u5219\u3002\u540c\u65f6\uff0c\u5b83\u63d0\u4f9b\u4e86\u4e00\u79cd\u62bd\u8c61\uff0c\u56e0\u4e3a\u5ba2\u6237\u7aef\u53ea\u4f7f\u7528\u63a5\u53e3\uff0c\u8fd9\u6837\u53ef\u4ee5\u6709\u591a\u91cd\u5b9e\u73b0\uff0c\u5982 List \u63a5\u53e3\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u53ef\u968f\u673a\u8bbf\u95ee\u7684 ArrayList\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u65b9\u4fbf\u63d2\u5165\u548c\u5220\u9664\u7684 LinkedList\u3002\u63a5\u53e3\u4e2d\u4e0d\u5141\u8bb8\u5199\u4ee3\u7801\uff0c\u4ee5\u6b64\u6765\u4fdd\u8bc1\u62bd\u8c61\uff0c\u4f46\u662f Java 8 \u4e2d\u4f60\u53ef\u4ee5\u5728\u63a5\u53e3\u58f0\u660e\u9759\u6001\u7684\u9ed8\u8ba4\u65b9\u6cd5\uff0c\u8fd9\u79cd\u65b9\u6cd5\u662f\u5177\u4f53\u7684\u3002 "},{"ID":"1112","typeID":"11","question":"Java \u4e2d\uff0c\u62bd\u8c61\u7c7b\u4e0e\u63a5\u53e3\u4e4b\u95f4\u6709\u4ec0\u4e48\u4e0d\u540c\uff1f ","answer":"Java \u4e2d\uff0c\u62bd\u8c61\u7c7b\u548c\u63a5\u53e3\u6709\u5f88\u591a\u4e0d\u540c\u4e4b\u5904\uff0c\u4f46\u662f\u6700\u91cd\u8981\u7684\u4e00\u4e2a\u662f Java \u4e2d\u9650\u5236\u4e00\u4e2a\u7c7b\u53ea\u80fd\u7ee7\u627f\u4e00\u4e2a\u7c7b\uff0c\u4f46\u662f\u53ef\u4ee5\u5b9e\u73b0\u591a\u4e2a\u63a5\u53e3\u3002\u62bd\u8c61\u7c7b\u53ef\u4ee5\u5f88\u597d\u7684\u5b9a\u4e49\u4e00\u4e2a\u5bb6\u65cf\u7c7b\u7684\u9ed8\u8ba4\u884c\u4e3a\uff0c\u800c\u63a5\u53e3\u80fd\u66f4\u597d\u7684\u5b9a\u4e49\u7c7b\u578b\uff0c\u6709\u52a9\u4e8e\u540e\u9762\u5b9e\u73b0\u591a\u6001\u673a\u5236\u3002\u5173\u4e8e\u8fd9\u4e2a\u95ee\u9898\u7684\u8ba8\u8bba\u8bf7\u67e5\u770b\u7b54\u6848\u3002 \r\n"},{"ID":"1111","typeID":"11","question":"\u9664\u4e86\u5355\u4f8b\u6a21\u5f0f\uff0c\u4f60\u5728\u751f\u4ea7\u73af\u5883\u4e2d\u8fd8\u7528\u8fc7\u4ec0\u4e48\u8bbe\u8ba1\u6a21\u5f0f\uff1f ","answer":"\u8fd9\u9700\u8981\u6839\u636e\u4f60\u7684\u7ecf\u9a8c\u6765\u56de\u7b54\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u4f60\u53ef\u4ee5\u8bf4\u4f9d\u8d56\u6ce8\u5165\uff0c\u5de5\u5382\u6a21\u5f0f\uff0c\u88c5\u9970\u6a21\u5f0f\u6216\u8005\u89c2\u5bdf\u8005\u6a21\u5f0f\uff0c\u968f\u610f\u9009\u62e9\u4f60\u4f7f\u7528\u8fc7\u7684\u4e00\u79cd\u5373\u53ef\u3002\u4e0d\u8fc7\u4f60\u8981\u51c6\u5907\u56de\u7b54\u63a5\u4e0b\u7684\u57fa\u4e8e\u4f60\u9009\u62e9\u7684\u6a21\u5f0f\u7684\u95ee\u9898\u3002 "},{"ID":"1110","typeID":"11","question":"\u9002\u914d\u5668\u6a21\u5f0f\u662f\u4ec0\u4e48\uff1f\u4ec0\u4e48\u65f6\u5019\u4f7f\u7528\uff1f ","answer":"\u9002\u914d\u5668\u6a21\u5f0f\u63d0\u4f9b\u5bf9\u63a5\u53e3\u7684\u8f6c\u6362\u3002\u5982\u679c\u4f60\u7684\u5ba2\u6237\u7aef\u4f7f\u7528\u67d0\u4e9b\u63a5\u53e3\uff0c\u4f46\u662f\u4f60\u6709\u53e6\u5916\u4e00\u4e9b\u63a5\u53e3\uff0c\u4f60\u5c31\u53ef\u4ee5\u5199\u4e00\u4e2a\u9002\u914d\u53bb\u6765\u8fde\u63a5\u8fd9\u4e9b\u63a5\u53e3\u3002 "},{"ID":"1109","typeID":"11","question":"\u6784\u9020\u5668\u6ce8\u5165\u548c setter \u4f9d\u8d56\u6ce8\u5165\uff0c\u90a3\u79cd\u65b9\u5f0f\u66f4\u597d\uff1f ","answer":"\u6bcf\u79cd\u65b9\u5f0f\u90fd\u6709\u5b83\u7684\u7f3a\u70b9\u548c\u4f18\u70b9\u3002\u6784\u9020\u5668\u6ce8\u5165\u4fdd\u8bc1\u6240\u6709\u7684\u6ce8\u5165\u90fd\u88ab\u521d\u59cb\u5316\uff0c\u4f46\u662f setter \u6ce8\u5165\u63d0\u4f9b\u66f4\u597d\u7684\u7075\u6d3b\u6027\u6765\u8bbe\u7f6e\u53ef\u9009\u4f9d\u8d56\u3002\u5982\u679c\u4f7f\u7528 XML \u6765\u63cf\u8ff0\u4f9d\u8d56\uff0cSetter \u6ce8\u5165\u7684\u53ef\u8bfb\u5199\u4f1a\u66f4\u5f3a\u3002\u7ecf\u9a8c\u6cd5\u5219\u662f\u5f3a\u5236\u4f9d\u8d56\u4f7f\u7528\u6784\u9020\u5668\u6ce8\u5165\uff0c\u53ef\u9009\u4f9d\u8d56\u4f7f\u7528 setter \u6ce8\u5165\u3002 \r\n"},{"ID":"1108","typeID":"11","question":"\u4f9d\u8d56\u6ce8\u5165\u548c\u5de5\u7a0b\u6a21\u5f0f\u4e4b\u95f4\u6709\u4ec0\u4e48\u4e0d\u540c\uff1f ","answer":"\u867d\u7136\u4e24\u79cd\u6a21\u5f0f\u90fd\u662f\u5c06\u5bf9\u8c61\u7684\u521b\u5efa\u4ece\u5e94\u7528\u7684\u903b\u8f91\u4e2d\u5206\u79bb\uff0c\u4f46\u662f\u4f9d\u8d56\u6ce8\u5165\u6bd4\u5de5\u7a0b\u6a21\u5f0f\u66f4\u6e05\u6670\u3002\u901a\u8fc7\u4f9d\u8d56\u6ce8\u5165\uff0c\u4f60\u7684\u7c7b\u5c31\u662f POJO\uff0c\u5b83\u53ea\u77e5\u9053\u4f9d\u8d56\u800c\u4e0d\u5173\u5fc3\u5b83\u4eec\u600e\u4e48\u83b7\u53d6\u3002\u4f7f\u7528\u5de5\u5382\u6a21\u5f0f\uff0c\u4f60\u7684\u7c7b\u9700\u8981\u901a\u8fc7\u5de5\u5382\u6765\u83b7\u53d6\u4f9d\u8d56\u3002\u56e0\u6b64\uff0c\u4f7f\u7528 DI \u4f1a\u6bd4\u4f7f\u7528\u5de5\u5382\u6a21\u5f0f\u66f4\u5bb9\u6613\u6d4b\u8bd5\u3002 "},{"ID":"1107","typeID":"11","question":"\u9002\u914d\u5668\u6a21\u5f0f\u548c\u88c5\u9970\u5668\u6a21\u5f0f\u6709\u4ec0\u4e48\u533a\u522b\uff1f ","answer":"\u867d\u7136\u9002\u914d\u5668\u6a21\u5f0f\u548c\u88c5\u9970\u5668\u6a21\u5f0f\u7684\u7ed3\u6784\u7c7b\u4f3c\uff0c\u4f46\u662f\u6bcf\u79cd\u6a21\u5f0f\u7684\u51fa\u73b0\u610f\u56fe\u4e0d\u540c\u3002\u9002\u914d\u5668\u6a21\u5f0f\u88ab\u7528\u4e8e\u6865\u63a5\u4e24\u4e2a\u63a5\u53e3\uff0c\u800c\u88c5\u9970\u6a21\u5f0f\u7684\u76ee\u7684\u662f\u5728\u4e0d\u4fee\u6539\u7c7b\u7684\u60c5\u51b5\u4e0b\u7ed9\u7c7b\u589e\u52a0\u65b0\u7684\u529f\u80fd\u3002 "},{"ID":"1106","typeID":"11","question":"\u9002\u914d\u5668\u6a21\u5f0f\u548c\u4ee3\u7406\u6a21\u5f0f\u4e4b\u524d\u6709\u4ec0\u4e48\u4e0d\u540c\uff1f ","answer":"\u8fd9\u4e2a\u95ee\u9898\u4e0e\u524d\u9762\u7684\u7c7b\u4f3c\uff0c\u9002\u914d\u5668\u6a21\u5f0f\u548c\u4ee3\u7406\u6a21\u5f0f\u7684\u533a\u522b\u5728\u4e8e\u4ed6\u4eec\u7684\u610f\u56fe\u4e0d\u540c\u3002\u7531\u4e8e\u9002\u914d\u5668\u6a21\u5f0f\u548c\u4ee3\u7406\u6a21\u5f0f\u90fd\u662f\u5c01\u88c5\u771f\u6b63\u6267\u884c\u52a8\u4f5c\u7684\u7c7b\uff0c\u56e0\u6b64\u7ed3\u6784\u662f\u4e00\u81f4\u7684\uff0c\u4f46\u662f\u9002\u914d\u5668\u6a21\u5f0f\u7528\u4e8e\u63a5\u53e3\u4e4b\u95f4\u7684\u8f6c\u6362\uff0c\u800c\u4ee3\u7406\u6a21\u5f0f\u5219\u662f\u589e\u52a0\u4e00\u4e2a\u989d\u5916\u7684\u4e2d\u95f4\u5c42\uff0c\u4ee5\u4fbf\u652f\u6301\u5206\u914d\u3001\u63a7\u5236\u6216\u667a\u80fd\u8bbf\u95ee\u3002 "},{"ID":"1105","typeID":"11","question":"\u4ec0\u4e48\u662f\u6a21\u677f\u65b9\u6cd5\u6a21\u5f0f\uff1f ","answer":"\u6a21\u677f\u65b9\u6cd5\u63d0\u4f9b\u7b97\u6cd5\u7684\u6846\u67b6\uff0c\u4f60\u53ef\u4ee5\u81ea\u5df1\u53bb\u914d\u7f6e\u6216\u5b9a\u4e49\u6b65\u9aa4\u3002\u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u5c06\u6392\u5e8f\u7b97\u6cd5\u770b\u505a\u662f\u4e00\u4e2a\u6a21\u677f\u3002\u5b83\u5b9a\u4e49\u4e86\u6392\u5e8f\u7684\u6b65\u9aa4\uff0c\u4f46\u662f\u5177\u4f53\u7684\u6bd4\u8f83\uff0c\u53ef\u4ee5\u4f7f\u7528 Comparable \u6216\u8005\u5176\u8bed\u8a00\u4e2d\u7c7b\u4f3c\u4e1c\u897f\uff0c\u5177\u4f53\u7b56\u7565\u7531\u4f60\u53bb\u914d\u7f6e\u3002\u5217\u51fa\u7b97\u6cd5\u6982\u8981\u7684\u65b9\u6cd5\u5c31\u662f\u4f17\u6240\u5468\u77e5\u7684\u6a21\u677f\u65b9\u6cd5\u3002 "},{"ID":"1104","typeID":"11","question":"\u4ec0\u4e48\u65f6\u5019\u4f7f\u7528\u8bbf\u95ee\u8005\u6a21\u5f0f\uff1f ","answer":"\u8bbf\u95ee\u8005\u6a21\u5f0f\u7528\u4e8e\u89e3\u51b3\u5728\u7c7b\u7684\u7ee7\u627f\u5c42\u6b21\u4e0a\u589e\u52a0\u64cd\u4f5c\uff0c\u4f46\u662f\u4e0d\u76f4\u63a5\u4e0e\u4e4b\u5173\u8054\u3002\u8fd9\u79cd\u6a21\u5f0f\u91c7\u7528\u53cc\u6d3e\u53d1\u7684\u5f62\u5f0f\u6765\u589e\u52a0\u4e2d\u95f4\u5c42\u3002 "},{"ID":"1103","typeID":"11","question":"\u4ec0\u4e48\u65f6\u5019\u4f7f\u7528\u7ec4\u5408\u6a21\u5f0f\uff1f ","answer":"\u7ec4\u5408\u6a21\u5f0f\u4f7f\u7528\u6811\u7ed3\u6784\u6765\u5c55\u793a\u90e8\u5206\u4e0e\u6574\u4f53\u7ee7\u627f\u5173\u7cfb\u3002\u5b83\u5141\u8bb8\u5ba2\u6237\u7aef\u91c7\u7528\u7edf\u4e00\u7684\u5f62\u5f0f\u6765\u5bf9\u5f85\u5355\u4e2a\u5bf9\u8c61\u548c\u5bf9\u8c61\u5bb9\u5668\u3002\u5f53\u4f60\u60f3\u8981\u5c55\u793a\u5bf9\u8c61\u8fd9\u79cd\u90e8\u5206\u4e0e\u6574\u4f53\u7684\u7ee7\u627f\u5173\u7cfb\u65f6\u91c7\u7528\u7ec4\u5408\u6a21\u5f0f\u3002 "},{"ID":"1102","typeID":"11","question":"\u7ee7\u627f\u548c\u7ec4\u5408\u4e4b\u95f4\u6709\u4ec0\u4e48\u4e0d\u540c\uff1f ","answer":"\u867d\u7136\u4e24\u79cd\u90fd\u53ef\u4ee5\u5b9e\u73b0\u4ee3\u7801\u590d\u7528\uff0c\u4f46\u662f\u7ec4\u5408\u6bd4\u7ee7\u627f\u5171\u7075\u6d3b\uff0c\u56e0\u4e3a\u7ec4\u5408\u5141\u8bb8\u4f60\u5728\u8fd0\u884c\u65f6\u9009\u62e9\u4e0d\u540c\u7684\u5b9e\u73b0\u3002\u7528\u7ec4\u5408\u5b9e\u73b0\u7684\u4ee3\u7801\u4e5f\u6bd4\u7ee7\u627f\u6d4b\u8bd5\u8d77\u6765\u66f4\u52a0\u7b80\u5355\u3002 "},{"ID":"1101","typeID":"11","question":"\u63cf\u8ff0 Java \u4e2d\u7684\u91cd\u8f7d\u548c\u91cd\u5199\uff1f ","answer":"\u91cd\u8f7d\u548c\u91cd\u5199\u90fd\u5141\u8bb8\u4f60\u7528\u76f8\u540c\u7684\u540d\u79f0\u6765\u5b9e\u73b0\u4e0d\u540c\u7684\u529f\u80fd\uff0c\u4f46\u662f\u91cd\u8f7d\u662f\u7f16\u8bd1\u65f6\u6d3b\u52a8\uff0c\u800c\u91cd\u5199\u662f\u8fd0\u884c\u65f6\u6d3b\u52a8\u3002\u4f60\u53ef\u4ee5\u5728\u540c\u4e00\u4e2a\u7c7b\u4e2d\u91cd\u8f7d\u65b9\u6cd5\uff0c\u4f46\u662f\u53ea\u80fd\u5728\u5b50\u7c7b\u4e2d\u91cd\u5199\u65b9\u6cd5\u3002\u91cd\u5199\u5fc5\u987b\u8981\u6709\u7ee7\u627f\u3002 \r\n"},{"ID":"1100","typeID":"11","question":"Java \u4e2d\uff0c\u5d4c\u5957\u516c\u5171\u9759\u6001\u7c7b\u4e0e\u9876\u7ea7\u7c7b\u6709\u4ec0\u4e48\u4e0d\u540c\uff1f ","answer":"\u7c7b\u7684\u5185\u90e8\u53ef\u4ee5\u6709\u591a\u4e2a\u5d4c\u5957\u516c\u5171\u9759\u6001\u7c7b\uff0c\u4f46\u662f\u4e00\u4e2a Java \u6e90\u6587\u4ef6\u53ea\u80fd\u6709\u4e00\u4e2a\u9876\u7ea7\u516c\u5171\u7c7b\uff0c\u5e76\u4e14\u9876\u7ea7\u516c\u5171\u7c7b\u7684\u540d\u79f0\u4e0e\u6e90\u6587\u4ef6\u540d\u79f0\u5fc5\u987b\u4e00\u81f4\u3002 "},{"ID":"1099","typeID":"11","question":"OOP \u4e2d\u7684 \u7ec4\u5408\u3001\u805a\u5408\u548c\u5173\u8054\u6709\u4ec0\u4e48\u533a\u522b\uff1f ","answer":"\u5982\u679c\u4e24\u4e2a\u5bf9\u8c61\u5f7c\u6b64\u6709\u5173\u7cfb\uff0c\u5c31\u8bf4\u4ed6\u4eec\u662f\u5f7c\u6b64\u76f8\u5173\u8054\u7684\u3002\u7ec4\u5408\u548c\u805a\u5408\u662f\u9762\u5411\u5bf9\u8c61\u4e2d\u7684\u4e24\u79cd\u5f62\u5f0f\u7684\u5173\u8054\u3002\u7ec4\u5408\u662f\u4e00\u79cd\u6bd4\u805a\u5408\u66f4\u5f3a\u529b\u7684\u5173\u8054\u3002\u7ec4\u5408\u4e2d\uff0c\u4e00\u4e2a\u5bf9\u8c61\u662f\u53e6\u4e00\u4e2a\u7684\u62e5\u6709\u8005\uff0c\u800c\u805a\u5408\u5219\u662f\u6307\u4e00\u4e2a\u5bf9\u8c61\u4f7f\u7528\u53e6\u4e00\u4e2a\u5bf9\u8c61\u3002\u5982\u679c\u5bf9\u8c61 A \u662f\u7531\u5bf9\u8c61 B \u7ec4\u5408\u7684\uff0c\u5219 A \u4e0d\u5b58\u5728\u7684\u8bdd\uff0cB\u4e00\u5b9a\u4e0d\u5b58\u5728\uff0c\u4f46\u662f\u5982\u679c A \u5bf9\u8c61\u805a\u5408\u4e86\u4e00\u4e2a\u5bf9\u8c61 B\uff0c\u5219\u5373\u4f7f A \u4e0d\u5b58\u5728\u4e86\uff0cB \u4e5f\u53ef\u4ee5\u5355\u72ec\u5b58\u5728\u3002 \r\n"},{"ID":"1098","typeID":"11","question":"\u7ed9\u6211\u4e00\u4e2a\u7b26\u5408\u5f00\u95ed\u539f\u5219\u7684\u8bbe\u8ba1\u6a21\u5f0f\u7684\u4f8b\u5b50\uff1f ","answer":"\u5f00\u95ed\u539f\u5219\u8981\u6c42\u4f60\u7684\u4ee3\u7801\u5bf9\u6269\u5c55\u5f00\u653e\uff0c\u5bf9\u4fee\u6539\u5173\u95ed\u3002\u8fd9\u4e2a\u610f\u601d\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u4f60\u60f3\u589e\u52a0\u4e00\u4e2a\u65b0\u7684\u529f\u80fd\uff0c\u4f60\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u5728\u4e0d\u6539\u53d8\u5df2\u6d4b\u8bd5\u8fc7\u7684\u4ee3\u7801\u7684\u524d\u63d0\u4e0b\u589e\u52a0\u65b0\u7684\u4ee3\u7801\u3002\u6709\u597d\u51e0\u4e2a\u8bbe\u8ba1\u6a21\u5f0f\u662f\u57fa\u4e8e\u5f00\u95ed\u539f\u5219\u7684\uff0c\u5982\u7b56\u7565\u6a21\u5f0f\uff0c\u5982\u679c\u4f60\u9700\u8981\u4e00\u4e2a\u65b0\u7684\u7b56\u7565\uff0c\u53ea\u9700\u8981\u5b9e\u73b0\u63a5\u53e3\uff0c\u589e\u52a0\u914d\u7f6e\uff0c\u4e0d\u9700\u8981\u6539\u53d8\u6838\u5fc3\u903b\u8f91\u3002\u4e00\u4e2a\u6b63\u5728\u5de5\u4f5c\u7684\u4f8b\u5b50\u662f Collections.sort() \u65b9\u6cd5\uff0c\u8fd9\u5c31\u662f\u57fa\u4e8e\u7b56\u7565\u6a21\u5f0f\uff0c\u9075\u5faa\u5f00\u95ed\u539f\u5219\u7684\uff0c\u4f60\u4e0d\u9700\u4e3a\u65b0\u7684\u5bf9\u8c61\u4fee\u6539 sort() \u65b9\u6cd5\uff0c\u4f60\u9700\u8981\u505a\u7684\u4ec5\u4ec5\u662f\u5b9e\u73b0\u4f60\u81ea\u5df1\u7684 Comparator \u63a5\u53e3\u3002 "},{"ID":"1097","typeID":"11","question":"\u4ec0\u4e48\u65f6\u5019\u4f7f\u7528\u4eab\u5143\u6a21\u5f0f\uff1f ","answer":"\u4eab\u5143\u6a21\u5f0f\u901a\u8fc7\u5171\u4eab\u5bf9\u8c61\u6765\u907f\u514d\u521b\u5efa\u592a\u591a\u7684\u5bf9\u8c61\u3002\u4e3a\u4e86\u4f7f\u7528\u4eab\u5143\u6a21\u5f0f\uff0c\u4f60\u9700\u8981\u786e\u4fdd\u4f60\u7684\u5bf9\u8c61\u662f\u4e0d\u53ef\u53d8\u7684\uff0c\u8fd9\u6837\u4f60\u624d\u80fd\u5b89\u5168\u7684\u5171\u4eab\u3002JDK \u4e2d String \u6c60\u3001Integer \u6c60\u4ee5\u53ca Long \u6c60\u90fd\u662f\u5f88\u597d\u7684\u4f7f\u7528\u4e86\u4eab\u5143\u6a21\u5f0f\u7684\u4f8b\u5b50\u3002 "},{"ID":"1096","typeID":"11","question":"\u8bb2\u8bb2 Java \u4e2d\u7684\u96c6\u5408\u6709\u591a\u5c11\u79cd\uff0c\u533a\u522b\u662f\u4ec0\u4e48\uff1f","answer":"ArrayList\u3001LinkedList\u3001Vector\u7684\u533a\u522b\uff1aArrayList \u548cVector\u5e95\u5c42\u662f\u91c7\u7528\u6570\u7ec4\u65b9\u5f0f\u5b58\u50a8\u6570\u636e\uff0cVector\u7531\u4e8e\u4f7f\u7528\u4e86synchronized\u65b9\u6cd5\uff08\u7ebf\u7a0b\u5b89\u5168\uff09\u6240\u4ee5\u6027\u80fd\u4e0a\u6bd4ArrayList\u8981\u5dee\uff0cLinkedList\u4f7f\u7528\u53cc\u5411\u94fe\u8868\u5b9e\u73b0\u5b58\u50a8\uff0c\u968f\u673a\u5b58\u53d6\u6bd4\u8f83\u6162\r\nHashMap\u7684\u5e95\u5c42\u6e90\u7801\u5b9e\u73b0\uff1a\u5f53\u6211\u4eec\u5f80HashMap\u4e2dput\u5143\u7d20\u7684\u65f6\u5019\uff0c\u5148\u6839\u636ekey\u7684hashCode\u91cd\u65b0\u8ba1\u7b97hash\u503c\uff0c\u6839\u636ehash\u503c\u5f97\u5230\u8fd9\u4e2a\u5143\u7d20\u5728\u6570\u7ec4\u4e2d\u7684\u4f4d\u7f6e\uff08\u5373\u4e0b\u6807\uff09\uff0c\u5982\u679c\u6570\u7ec4\u8be5\u4f4d\u7f6e\u4e0a\u5df2\u7ecf\u5b58\u653e\u6709\u5176\u4ed6\u5143\u7d20\u4e86\uff0c\u90a3\u4e48\u5728\u8fd9\u4e2a\u4f4d\u7f6e\u4e0a\u7684\u5143\u7d20\u5c06\u4ee5\u94fe\u8868\u7684\u5f62\u5f0f\u5b58\u653e\uff0c\u65b0\u52a0\u5165\u7684\u653e\u5728\u94fe\u5934\uff0c\u6700\u5148\u52a0\u5165\u7684\u653e\u5728\u94fe\u5c3e\u3002\u5982\u679c\u6570\u7ec4\u8be5\u4f4d\u7f6e\u4e0a\u6ca1\u6709\u5143\u7d20\uff0c\u5c31\u76f4\u63a5\u5c06\u8be5\u5143\u7d20\u653e\u5230\u6b64\u6570\u7ec4\u4e2d\u7684\u8be5\u4f4d\u7f6e\u4e0a\u3002\r\nFail-Fast\u673a\u5236:\u5728\u4f7f\u7528\u8fed\u4ee3\u5668\u7684\u8fc7\u7a0b\u4e2d\u6709\u5176\u4ed6\u7ebf\u7a0b\u4fee\u6539\u4e86map\uff0c\u90a3\u4e48\u5c06\u629b\u51faConcurrentModificationException\uff0c\u8fd9\u5c31\u662f\u6240\u8c13fail-fast\u673a\u5236\u3002\u8fd9\u4e00\u673a\u5236\u5728\u6e90\u7801\u4e2d\u7684\u5b9e\u73b0\u662f\u901a\u8fc7modCount\u57df\uff0cmodCount\u987e\u540d\u601d\u4e49\u5c31\u662f\u4fee\u6539\u6b21\u6570\uff0c\u5bf9HashMap\u5185\u5bb9\u7684\u4fee\u6539\u90fd\u5c06\u589e\u52a0\u8fd9\u4e2a\u503c\uff0c\u90a3\u4e48\u5728\u8fed\u4ee3\u5668\u521d\u59cb\u5316\u8fc7\u7a0b\u4e2d\u4f1a\u5c06\u8fd9\u4e2a\u503c\u8d4b\u7ed9\u8fed\u4ee3\u5668\u7684expectedModCount\u3002\u5728\u8fed\u4ee3\u8fc7\u7a0b\u4e2d\uff0c\u5224\u65admodCount\u8ddfexpectedModCount\u662f\u5426\u76f8\u7b49\uff0c\u5982\u679c\u4e0d\u76f8\u7b49\u5c31\u8868\u793a\u5df2\u7ecf\u6709\u5176\u4ed6\u7ebf\u7a0b\u4fee\u6539\u4e86Map.\r\nHashMap\u548c HashTable \u7684\u533a\u522b\uff1a\r\nHashTable\u6bd4\u8f83\u8001\uff0c\u662f\u57fa\u4e8eDictionary \u7c7b\u5b9e\u73b0\u7684\uff0cHashTable \u5219\u662f\u57fa\u4e8e Map\u63a5\u53e3\u5b9e\u73b0\u7684\r\nHashTable \u662f\u7ebf\u7a0b\u5b89\u5168\u7684\uff0c HashMap \u5219\u662f\u7ebf\u7a0b\u4e0d\u5b89\u5168\u7684\r\nHashMap\u53ef\u4ee5\u8ba9\u4f60\u5c06\u7a7a\u503c\u4f5c\u4e3a\u4e00\u4e2a\u8868\u7684\u6761\u76ee\u7684key\u6216value"},{"ID":"1095","typeID":"11","question":"JAVA \u5783\u573e\u56de\u6536\u673a\u5236\uff1f","answer":"\u4ec0\u4e48\u662f\u5783\u573e\u56de\u6536\u673a\uff1a\u91ca\u653e\u90a3\u4e9b\u4e0d\u518d\u6301\u6709\u5f15\u7528\u7684\u5bf9\u8c61\u7684\u5185\u5b58\r\n\u600e\u4e48\u5224\u65ad\u4e00\u4e2a\u5bf9\u8c61\u662f\u5426\u9700\u8981\u6536\u96c6\uff1f\r\n\u5f15\u7528\u8ba1\u6570\uff08\u6700\u7b80\u5355\u53e4\u8001\u7684\u65b9\u6cd5\uff09\uff1a\u6307\u5c06\u8d44\u6e90\uff08\u53ef\u4ee5\u662f\u5bf9\u8c61\u3001\u5185\u5b58\u6216\u78c1\u76d8\u7a7a\u95f4\u7b49\u7b49\uff09\u7684\u88ab\u5f15\u7528\u6b21\u6570\u4fdd\u5b58\u8d77\u6765\uff0c\u5f53\u88ab\u5f15\u7528\u6b21\u6570\u53d8\u4e3a\u96f6\u65f6\u5c31\u5c06\u5176\u91ca\u653e\u7684\u8fc7\u7a0b\r\n\u5bf9\u8c61\u5f15\u7528\u904d\u5386\uff08\u73b0\u5728\u5927\u591a\u6570 jvm \u4f7f\u7528\u7684\u65b9\u6cd5\uff09\uff1a\u5bf9\u8c61\u5f15\u7528\u904d\u5386\u4ece\u4e00\u7ec4\u5bf9\u8c61\u5f00\u59cb\uff0c\u6cbf\u7740\u6574\u4e2a\u5bf9\u8c61\u56fe\u4e0a\u7684\u6bcf\u6761\u94fe\u63a5\uff0c\u9012\u5f52\u786e\u5b9a\u53ef\u5230\u8fbe\uff08reachable\uff09\u7684\u5bf9\u8c61\u3002\u5982\u679c\u67d0\u5bf9\u8c61\u4e0d\u80fd\u4ece\u8fd9\u4e9b\u6839\u5bf9\u8c61\u7684\u4e00\u4e2a\uff08\u81f3\u5c11\u4e00\u4e2a\uff09\u5230\u8fbe\uff0c\u5219\u5c06\u5b83\u4f5c\u4e3a\u5783\u573e\u6536\u96c6\r\n\u51e0\u79cd\u5783\u573e\u56de\u6536\u673a\u5236 \r\n\u6807\u8bb0\u56de\u6536\u6cd5\uff1a\u904d\u5386\u5bf9\u8c61\u56fe\u5e76\u4e14\u8bb0\u5f55\u53ef\u5230\u8fbe\u7684\u5bf9\u8c61\uff0c\u4ee5\u4fbf\u5220\u9664\u4e0d\u53ef\u5230\u8fbe\u7684\u5bf9\u8c61\uff0c\u4e00\u822c\u4f7f\u7528\u5355\u7ebf\u7a0b\u5de5\u4f5c\u5e76\u4e14\u53ef\u80fd\u4ea7\u751f\u5185\u5b58\u788e\u7247\r\n\u6807\u8bb0-\u538b\u7f29\u56de\u6536\u6cd5\uff1a\u524d\u671f\u4e0e\u7b2c\u4e00\u79cd\u65b9\u6cd5\u76f8\u540c\uff0c\u53ea\u662f\u591a\u4e86\u4e00\u6b65\uff0c\u5c06\u6240\u6709\u7684\u5b58\u6d3b\u5bf9\u8c61\u538b\u7f29\u5230\u5185\u5b58\u7684\u4e00\u7aef\uff0c\u8fd9\u6837\u5185\u5b58\u788e\u7247\u5c31\u53ef\u4ee5\u5408\u6210\u4e00\u5927\u5757\u53ef\u518d\u5229\u7528\u7684\u5185\u5b58\u533a\u57df\uff0c\u63d0\u9ad8\u4e86\u5185\u5b58\u5229\u7528\u7387\r\n\u590d\u5236\u56de\u6536\u6cd5\uff1a\u628a\u73b0\u6709\u5185\u5b58\u7a7a\u95f4\u5206\u6210\u4e24\u90e8\u5206\uff0cgc\u8fd0\u884c\u65f6\uff0c\u5b83\u628a\u53ef\u5230\u8fbe\u5bf9\u8c61\u590d\u5236\u5230\u53e6\u4e00\u534a\u7a7a\u95f4\uff0c\u518d\u6e05\u7a7a\u6b63\u5728\u4f7f\u7528\u7684\u7a7a\u95f4\u7684\u5168\u90e8\u5bf9\u8c61\u3002\u8fd9\u79cd\u65b9\u6cd5\u9002\u7528\u4e8e\u77ed\u751f\u5b58\u671f\u7684\u5bf9\u8c61\uff0c\u6301\u7eed\u590d\u5236\u957f\u751f\u5b58\u671f\u7684\u5bf9\u8c61\u5219\u5bfc\u81f4\u6548\u7387\u964d\u4f4e\u3002 \r\n\u5206\u4ee3\u56de\u6536\u53d1\uff1a\u628a\u5185\u5b58\u7a7a\u95f4\u5206\u4e3a\u4e24\u4e2a\u6216\u8005\u591a\u4e2a\u57df\uff0c\u5982\u5e74\u8f7b\u4ee3\u548c\u8001\u5e74\u4ee3\uff0c\u5e74\u8f7b\u4ee3\u7684\u7279\u70b9\u662f\u5bf9\u8c61\u4f1a\u5f88\u5feb\u88ab\u56de\u6536\uff0c\u56e0\u6b64\u5728\u5e74\u8f7b\u4ee3\u4f7f\u7528\u6548\u7387\u6bd4\u8f83\u9ad8\u7684\u7b97\u6cd5\u3002\u5f53\u4e00\u4e2a\u5bf9\u8c61\u7ecf\u8fc7\u51e0\u6b21\u56de\u6536\u540e\u4f9d\u7136\u5b58\u6d3b\uff0c\u5bf9\u8c61\u5c31\u4f1a\u88ab\u653e\u5165\u79f0\u4e3a\u8001\u5e74\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u8001\u5e74\u4ee3\u5219\u91c7\u53d6\u6807\u8bb0-\u538b\u7f29\u7b97\u6cd5"},{"ID":"1094","typeID":"11","question":"JAVA\u591a\u6001\u7684\u5b9e\u73b0\u539f\u7406\uff1f","answer":"\u62bd\u8c61\u7684\u6765\u8bb2\uff0c\u591a\u6001\u7684\u610f\u601d\u5c31\u662f\u540c\u4e00\u6d88\u606f\u53ef\u4ee5\u6839\u636e\u53d1\u9001\u5bf9\u8c61\u7684\u4e0d\u540c\u800c\u91c7\u7528\u591a\u79cd\u4e0d\u540c\u7684\u884c\u4e3a\u65b9\u5f0f\u3002\uff08\u53d1\u9001\u6d88\u606f\u5c31\u662f\u51fd\u6570\u8c03\u7528\uff09\r\n\u5b9e\u73b0\u7684\u539f\u7406\u662f\u52a8\u6001\u7ed1\u5b9a\uff0c\u7a0b\u5e8f\u8c03\u7528\u7684\u65b9\u6cd5\u5728\u8fd0\u884c\u671f\u624d\u52a8\u6001\u7ed1\u5b9a\uff0c\u8ffd\u6eaf\u6e90\u7801\u53ef\u4ee5\u53d1\u73b0\uff0cJVM \u901a\u8fc7\u53c2\u6570\u7684\u81ea\u52a8\u8f6c\u578b\u6765\u627e\u5230\u5408\u9002\u7684\u529e\u6cd5\u3002"},{"ID":"1093","typeID":"11","question":"JAVA \u4e2d\u5806\u548c\u6808\u7684\u533a\u522b\uff0c\u8bf4\u4e0bjava \u7684\u5185\u5b58\u673a\u5236\uff1f","answer":"\u57fa\u672c\u6570\u636e\u7c7b\u578b\u6bd4\u53d8\u91cf\u548c\u5bf9\u8c61\u7684\u5f15\u7528\u90fd\u662f\u5728\u6808\u5206\u914d\u7684\r\n\u5806\u5185\u5b58\u7528\u6765\u5b58\u653e\u7531new\u521b\u5efa\u7684\u5bf9\u8c61\u548c\u6570\u7ec4\r\n\u7c7b\u53d8\u91cf\uff08static\u4fee\u9970\u7684\u53d8\u91cf\uff09\uff0c\u7a0b\u5e8f\u5728\u4e00\u52a0\u8f7d\u7684\u65f6\u5019\u5c31\u5728\u5806\u4e2d\u4e3a\u7c7b\u53d8\u91cf\u5206\u914d\u5185\u5b58\uff0c\u5806\u4e2d\u7684\u5185\u5b58\u5730\u5740\u5b58\u653e\u5728\u6808\u4e2d\r\n\u5b9e\u4f8b\u53d8\u91cf\uff1a\u5f53\u4f60\u4f7f\u7528java\u5173\u952e\u5b57new\u7684\u65f6\u5019\uff0c\u7cfb\u7edf\u5728\u5806\u4e2d\u5f00\u8f9f\u5e76\u4e0d\u4e00\u5b9a\u662f\u8fde\u7eed\u7684\u7a7a\u95f4\u5206\u914d\u7ed9\u53d8\u91cf\uff0c\u662f\u6839\u636e\u96f6\u6563\u7684\u5806\u5185\u5b58\u5730\u5740\uff0c\u901a\u8fc7\u54c8\u5e0c\u7b97\u6cd5\u6362\u7b97\u4e3a\u4e00\u957f\u4e32\u6570\u5b57\u4ee5\u8868\u5f81\u8fd9\u4e2a\u53d8\u91cf\u5728\u5806\u4e2d\u7684\"\u7269\u7406\u4f4d\u7f6e\u201d,\u5b9e\u4f8b\u53d8\u91cf\u7684\u751f\u547d\u5468\u671f--\u5f53\u5b9e\u4f8b\u53d8\u91cf\u7684\u5f15\u7528\u4e22\u5931\u540e\uff0c\u5c06\u88abGC\uff08\u5783\u573e\u56de\u6536\u5668\uff09\u5217\u5165\u53ef\u56de\u6536\u201c\u540d\u5355\u201d\u4e2d\uff0c\u4f46\u5e76\u4e0d\u662f\u9a6c\u4e0a\u5c31\u91ca\u653e\u5806\u4e2d\u5185\u5b58\r\n\u5c40\u90e8\u53d8\u91cf: \u7531\u58f0\u660e\u5728\u67d0\u65b9\u6cd5\uff0c\u6216\u67d0\u4ee3\u7801\u6bb5\u91cc\uff08\u6bd4\u5982for\u5faa\u73af\uff09\uff0c\u6267\u884c\u5230\u5b83\u7684\u65f6\u5019\u5728\u6808\u4e2d\u5f00\u8f9f\u5185\u5b58\uff0c\u5f53\u5c40\u90e8\u53d8\u91cf\u4e00\u4f46\u8131\u79bb\u4f5c\u7528\u57df\uff0c\u5185\u5b58\u7acb\u5373\u91ca\u653e"},{"ID":"1092","typeID":"11","question":"wait()\u548csleep()\u7684\u533a\u522b\uff1f","answer":"sleep\u6765\u81eaThread\u7c7b\uff0c\u548cwait\u6765\u81eaObject\u7c7b\r\n\u8c03\u7528sleep()\u65b9\u6cd5\u7684\u8fc7\u7a0b\u4e2d\uff0c\u7ebf\u7a0b\u4e0d\u4f1a\u91ca\u653e\u5bf9\u8c61\u9501\u3002\u800c \u8c03\u7528 wait \u65b9\u6cd5\u7ebf\u7a0b\u4f1a\u91ca\u653e\u5bf9\u8c61\u9501\r\nsleep\u7761\u7720\u540e\u4e0d\u51fa\u8ba9\u7cfb\u7edf\u8d44\u6e90\uff0cwait\u8ba9\u51fa\u7cfb\u7edf\u8d44\u6e90\u5176\u4ed6\u7ebf\u7a0b\u53ef\u4ee5\u5360\u7528CPU\r\nsleep(milliseconds)\u9700\u8981\u6307\u5b9a\u4e00\u4e2a\u7761\u7720\u65f6\u95f4\uff0c\u65f6\u95f4\u4e00\u5230\u4f1a\u81ea\u52a8\u5524\u9192"},{"ID":"1091","typeID":"11","question":"\u89e3\u6790XML\u7684\u51e0\u79cd\u65b9\u5f0f\u7684\u539f\u7406\u4e0e\u7279\u70b9\uff1aDOM\u3001SAX\u3001PULL","answer":"DOM\uff1a\u6d88\u8017\u5185\u5b58\uff1a\u5148\u628axml\u6587\u6863\u90fd\u8bfb\u5230\u5185\u5b58\u4e2d\uff0c\u7136\u540e\u518d\u7528DOM API\u6765\u8bbf\u95ee\u6811\u5f62\u7ed3\u6784\uff0c\u5e76\u83b7\u53d6\u6570\u636e\u3002\u8fd9\u4e2a\u5199\u8d77\u6765\u5f88\u7b80\u5355\uff0c\u4f46\u662f\u5f88\u6d88\u8017\u5185\u5b58\u3002\u8981\u662f\u6570\u636e\u8fc7\u5927\uff0c\u624b\u673a\u4e0d\u591f\u725b\u903c\uff0c\u53ef\u80fd\u624b\u673a\u76f4\u63a5\u6b7b\u673a\r\nSAX\uff1a\u89e3\u6790\u6548\u7387\u9ad8\uff0c\u5360\u7528\u5185\u5b58\u5c11\uff0c\u57fa\u4e8e\u4e8b\u4ef6\u9a71\u52a8\u7684\uff1a\u66f4\u52a0\u7b80\u5355\u5730\u8bf4\u5c31\u662f\u5bf9\u6587\u6863\u8fdb\u884c\u987a\u5e8f\u626b\u63cf\uff0c\u5f53\u626b\u63cf\u5230\u6587\u6863(document)\u5f00\u59cb\u4e0e\u7ed3\u675f\u3001\u5143\u7d20(element)\u5f00\u59cb\u4e0e\u7ed3\u675f\u3001\u6587\u6863(document)\u7ed3\u675f\u7b49\u5730\u65b9\u65f6\u901a\u77e5\u4e8b\u4ef6\u5904\u7406\u51fd\u6570\uff0c\u7531\u4e8b\u4ef6\u5904\u7406\u51fd\u6570\u505a\u76f8\u5e94\u52a8\u4f5c\uff0c\u7136\u540e\u7ee7\u7eed\u540c\u6837\u7684\u626b\u63cf\uff0c\u76f4\u81f3\u6587\u6863\u7ed3\u675f\u3002\r\nSAX\uff1a\u4e0e SAX \u7c7b\u4f3c\uff0c\u4e5f\u662f\u57fa\u4e8e\u4e8b\u4ef6\u9a71\u52a8\uff0c\u6211\u4eec\u53ef\u4ee5\u8c03\u7528\u5b83\u7684next\uff08\uff09\u65b9\u6cd5\uff0c\u6765\u83b7\u53d6\u4e0b\u4e00\u4e2a\u89e3\u6790\u4e8b\u4ef6\uff08\u5c31\u662f\u5f00\u59cb\u6587\u6863\uff0c\u7ed3\u675f\u6587\u6863\uff0c\u5f00\u59cb\u6807\u7b7e\uff0c\u7ed3\u675f\u6807\u7b7e\uff09\uff0c\u5f53\u5904\u4e8e\u67d0\u4e2a\u5143\u7d20\u65f6\u53ef\u4ee5\u8c03\u7528XmlPullParser\u7684getAttributte()\u65b9\u6cd5\u6765\u83b7\u53d6\u5c5e\u6027\u7684\u503c\uff0c\u4e5f\u53ef\u8c03\u7528\u5b83\u7684nextText()\u83b7\u53d6\u672c\u8282\u70b9\u7684\u503c\u3002"},{"ID":"1090","typeID":"11","question":"\u62bd\u8c61\u7c7b\u548c\u63a5\u53e3\u7684\u533a\u522b\uff1f","answer":"\u4e00\u4e2a\u7c7b\u53ea\u80fd\u7ee7\u627f\u5355\u4e2a\u7c7b\uff0c\u4f46\u662f\u53ef\u4ee5\u5b9e\u73b0\u591a\u4e2a\u63a5\u53e3\r\n\u63a5\u53e3\u5f3a\u8c03\u7279\u5b9a\u529f\u80fd\u7684\u5b9e\u73b0\uff0c\u800c\u62bd\u8c61\u7c7b\u5f3a\u8c03\u6240\u5c5e\u5173\u7cfb\r\n\u62bd\u8c61\u7c7b\u4e2d\u7684\u6240\u6709\u65b9\u6cd5\u5e76\u4e0d\u4e00\u5b9a\u8981\u662f\u62bd\u8c61\u7684\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u5728\u62bd\u8c61\u7c7b\u4e2d\u5b9e\u73b0\u4e00\u4e9b\u57fa\u672c\u7684\u65b9\u6cd5\u3002\u800c\u63a5\u53e3\u8981\u6c42\u6240\u6709\u7684\u65b9\u6cd5\u90fd\u5fc5\u987b\u662f\u62bd\u8c61\u7684"},{"ID":"1089","typeID":"11","question":"Override\u548cOverload\u7684\u542b\u4e49\u53bb\u533a\u522b","answer":"Overload\u987e\u540d\u601d\u4e49\u662f\u91cd\u65b0\u52a0\u8f7d\uff0c\u5b83\u53ef\u4ee5\u8868\u73b0\u7c7b\u7684\u591a\u6001\u6027\uff0c\u53ef\u4ee5\u662f\u51fd\u6570\u91cc\u9762\u53ef\u4ee5\u6709\u76f8\u540c\u7684\u51fd\u6570\u540d\u4f46\u662f\u53c2\u6570\u540d\u3001\u8fd4\u56de\u503c\u3001\u7c7b\u578b\u4e0d\u80fd\u76f8\u540c\uff1b\u6216\u8005\u8bf4\u53ef\u4ee5\u6539\u53d8\u53c2\u6570\u3001\u7c7b\u578b\u3001\u8fd4\u56de\u503c\u4f46\u662f\u51fd\u6570\u540d\u5b57\u4f9d\u7136\u4e0d\u53d8\u3002\r\n\u5c31\u662fride(\u91cd\u5199)\u7684\u610f\u601d\uff0c\u5728\u5b50\u7c7b\u7ee7\u627f\u7236\u7c7b\u7684\u65f6\u5019\u5b50\u7c7b\u4e2d\u53ef\u4ee5\u5b9a\u4e49\u67d0\u65b9\u6cd5\u4e0e\u5176\u7236\u7c7b\u6709\u76f8\u540c\u7684\u540d\u79f0\u548c\u53c2\u6570\uff0c\u5f53\u5b50\u7c7b\u5728\u8c03\u7528\u8fd9\u4e00\u51fd\u6570\u65f6\u81ea\u52a8\u8c03\u7528\u5b50\u7c7b\u7684\u65b9\u6cd5\uff0c\u800c\u7236\u7c7b\u76f8\u5f53\u4e8e\u88ab\u8986\u76d6\uff08\u91cd\u5199\uff09\u4e86\u3002"},{"ID":"1088","typeID":"11","question":"String\u3001StringBuffer\u4e0eStringBuilder\u7684\u533a\u522b","answer":"String \u7c7b\u578b\u548c StringBuffer \u7c7b\u578b\u7684\u4e3b\u8981\u6027\u80fd\u533a\u522b\u5176\u5b9e\u5728\u4e8e String \u662f\u4e0d\u53ef\u53d8\u7684\u5bf9\u8c61\r\nStringBuffer\u548cStringBuilder\u5e95\u5c42\u662f char[]\u6570\u7ec4\u5b9e\u73b0\u7684\r\nStringBuffer\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\uff0c\u800cStringBuilder\u662f\u7ebf\u7a0b\u4e0d\u5b89\u5168\u7684\r\n"},{"ID":"1087","typeID":"11","question":"Hashcode\u7684\u4f5c\u7528\uff0c\u4e0e equal \u6709\u4ec0\u4e48\u533a\u522b","answer":"\u540c\u6837\u7528\u4e8e\u9274\u5b9a2\u4e2a\u5bf9\u8c61\u662f\u5426\u76f8\u7b49\u7684\uff0cjava\u96c6\u5408\u4e2d\u6709 list \u548c set \u4e24\u7c7b\uff0c\u5176\u4e2d set\u4e0d\u5141\u8bb8\u5143\u7d20\u91cd\u590d\u5b9e\u73b0\uff0c\u90a3\u4e2a\u8fd9\u4e2a\u4e0d\u5141\u8bb8\u91cd\u590d\u5b9e\u73b0\u7684\u65b9\u6cd5\uff0c\u5982\u679c\u7528 equal \u53bb\u6bd4\u8f83\u7684\u8bdd\uff0c\u5982\u679c\u5b58\u57281000\u4e2a\u5143\u7d20\uff0c\u4f60 new \u4e00\u4e2a\u65b0\u7684\u5143\u7d20\u51fa\u6765\uff0c\u9700\u8981\u53bb\u8c03\u75281000\u6b21 equal \u53bb\u9010\u4e2a\u548c\u4ed6\u4eec\u6bd4\u8f83\u662f\u5426\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61\uff0c\u8fd9\u6837\u4f1a\u5927\u5927\u964d\u4f4e\u6548\u7387\u3002hashcode\u5b9e\u9645\u4e0a\u662f\u8fd4\u56de\u5bf9\u8c61\u7684\u5b58\u50a8\u5730\u5740\uff0c\u5982\u679c\u8fd9\u4e2a\u4f4d\u7f6e\u4e0a\u6ca1\u6709\u5143\u7d20\uff0c\u5c31\u628a\u5143\u7d20\u76f4\u63a5\u5b58\u50a8\u5728\u4e0a\u9762\uff0c\u5982\u679c\u8fd9\u4e2a\u4f4d\u7f6e\u4e0a\u5df2\u7ecf\u5b58\u5728\u5143\u7d20\uff0c\u8fd9\u4e2a\u65f6\u5019\u624d\u53bb\u8c03\u7528equal\u65b9\u6cd5\u4e0e\u65b0\u5143\u7d20\u8fdb\u884c\u6bd4\u8f83\uff0c\u76f8\u540c\u7684\u8bdd\u5c31\u4e0d\u5b58\u4e86\uff0c\u6563\u5217\u5230\u5176\u4ed6\u5730\u5740\u4e0a"},{"ID":"1086","typeID":"11","question":"Java\u7684\u56db\u79cd\u5f15\u7528\uff0c\u5f3a\u5f31\u8f6f\u865a\uff0c\u7528\u5230\u7684\u573a\u666f","answer":"\u5f3a\u5f15\u7528\uff1a\u5982\u679c\u4e00\u4e2a\u5bf9\u8c61\u5177\u6709\u5f3a\u5f15\u7528\uff0c\u5b83\u5c31\u4e0d\u4f1a\u88ab\u5783\u573e\u56de\u6536\u5668\u56de\u6536\u3002\u5373\u4f7f\u5f53\u524d\u5185\u5b58\u7a7a\u95f4\u4e0d\u8db3\uff0cJVM\u4e5f\u4e0d\u4f1a\u56de\u6536\u5b83\uff0c\u800c\u662f\u629b\u51fa OutOfMemoryError \u9519\u8bef\uff0c\u4f7f\u7a0b\u5e8f\u5f02\u5e38\u7ec8\u6b62\u3002\u5982\u679c\u60f3\u4e2d\u65ad\u5f3a\u5f15\u7528\u548c\u67d0\u4e2a\u5bf9\u8c61\u4e4b\u95f4\u7684\u5173\u8054\uff0c\u53ef\u4ee5\u663e\u5f0f\u5730\u5c06\u5f15\u7528\u8d4b\u503c\u4e3anull\uff0c\u8fd9\u6837\u4e00\u6765\u7684\u8bdd\uff0cJVM\u5728\u5408\u9002\u7684\u65f6\u95f4\u5c31\u4f1a\u56de\u6536\u8be5\u5bf9\u8c61\r\n\u8f6f\u5f15\u7528\uff1a\u5728\u4f7f\u7528\u8f6f\u5f15\u7528\u65f6\uff0c\u5982\u679c\u5185\u5b58\u7684\u7a7a\u95f4\u8db3\u591f\uff0c\u8f6f\u5f15\u7528\u5c31\u80fd\u7ee7\u7eed\u88ab\u4f7f\u7528\uff0c\u800c\u4e0d\u4f1a\u88ab\u5783\u573e\u56de\u6536\u5668\u56de\u6536\uff0c\u53ea\u6709\u5728\u5185\u5b58\u4e0d\u8db3\u65f6\uff0c\u8f6f\u5f15\u7528\u624d\u4f1a\u88ab\u5783\u573e\u56de\u6536\u5668\u56de\u6536\u3002\r\n\u5f31\u5f15\u7528\uff1a\u5177\u6709\u5f31\u5f15\u7528\u7684\u5bf9\u8c61\u62e5\u6709\u7684\u751f\u547d\u5468\u671f\u66f4\u77ed\u6682\u3002\u56e0\u4e3a\u5f53 JVM \u8fdb\u884c\u5783\u573e\u56de\u6536\uff0c\u4e00\u65e6\u53d1\u73b0\u5f31\u5f15\u7528\u5bf9\u8c61\uff0c\u65e0\u8bba\u5f53\u524d\u5185\u5b58\u7a7a\u95f4\u662f\u5426\u5145\u8db3\uff0c\u90fd\u4f1a\u5c06\u5f31\u5f15\u7528\u56de\u6536\u3002\u4e0d\u8fc7\u7531\u4e8e\u5783\u573e\u56de\u6536\u5668\u662f\u4e00\u4e2a\u4f18\u5148\u7ea7\u8f83\u4f4e\u7684\u7ebf\u7a0b\uff0c\u6240\u4ee5\u5e76\u4e0d\u4e00\u5b9a\u80fd\u8fc5\u901f\u53d1\u73b0\u5f31\u5f15\u7528\u5bf9\u8c61\r\n\u865a\u5f15\u7528\uff1a\u987e\u540d\u601d\u4e49\uff0c\u5c31\u662f\u5f62\u540c\u865a\u8bbe\uff0c\u5982\u679c\u4e00\u4e2a\u5bf9\u8c61\u4ec5\u6301\u6709\u865a\u5f15\u7528\uff0c\u90a3\u4e48\u5b83\u76f8\u5f53\u4e8e\u6ca1\u6709\u5f15\u7528\uff0c\u5728\u4efb\u4f55\u65f6\u5019\u90fd\u53ef\u80fd\u88ab\u5783\u573e\u56de\u6536\u5668\u56de\u6536\u3002\r\n\u4f7f\u7528\u573a\u666f\uff1a\r\n\u5229\u7528\u8f6f\u5f15\u7528\u548c\u5f31\u5f15\u7528\u89e3\u51b3OOM\u95ee\u9898\uff1a\u7528\u4e00\u4e2aHashMap\u6765\u4fdd\u5b58\u56fe\u7247\u7684\u8def\u5f84\u548c\u76f8\u5e94\u56fe\u7247\u5bf9\u8c61\u5173\u8054\u7684\u8f6f\u5f15\u7528\u4e4b\u95f4\u7684\u6620\u5c04\u5173\u7cfb\uff0c\u5728\u5185\u5b58\u4e0d\u8db3\u65f6\uff0cJVM\u4f1a\u81ea\u52a8\u56de\u6536\u8fd9\u4e9b\u7f13\u5b58\u56fe\u7247\u5bf9\u8c61\u6240\u5360\u7528\u7684\u7a7a\u95f4\uff0c\u4ece\u800c\u6709\u6548\u5730\u907f\u514d\u4e86OOM\u7684\u95ee\u9898\r\n\u901a\u8fc7\u8f6f\u53ef\u53ca\u5bf9\u8c61\u91cd\u83b7\u65b9\u6cd5\u5b9e\u73b0Java\u5bf9\u8c61\u7684\u9ad8\u901f\u7f13\u5b58:\u6bd4\u5982\u6211\u4eec\u521b\u5efa\u4e86\u4e00Employee\u7684\u7c7b\uff0c\u5982\u679c\u6bcf\u6b21\u9700\u8981\u67e5\u8be2\u4e00\u4e2a\u96c7\u5458\u7684\u4fe1\u606f\u3002\u54ea\u6015\u662f\u51e0\u79d2\u4e2d\u4e4b\u524d\u521a\u521a\u67e5\u8be2\u8fc7\u7684\uff0c\u90fd\u8981\u91cd\u65b0\u6784\u5efa\u4e00\u4e2a\u5b9e\u4f8b\uff0c\u8fd9\u662f\u9700\u8981\u6d88\u8017\u5f88\u591a\u65f6\u95f4\u7684\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8f6f\u5f15\u7528\u548c HashMap \u7684\u7ed3\u5408\uff0c\u5148\u662f\u4fdd\u5b58\u5f15\u7528\u65b9\u9762\uff1a\u4ee5\u8f6f\u5f15\u7528\u7684\u65b9\u5f0f\u5bf9\u4e00\u4e2aEmployee\u5bf9\u8c61\u7684\u5b9e\u4f8b\u8fdb\u884c\u5f15\u7528\u5e76\u4fdd\u5b58\u8be5\u5f15\u7528\u5230HashMap \u4e0a\uff0ckey \u4e3a\u6b64\u96c7\u5458\u7684 id\uff0cvalue\u4e3a\u8fd9\u4e2a\u5bf9\u8c61\u7684\u8f6f\u5f15\u7528\uff0c\u53e6\u4e00\u65b9\u9762\u662f\u53d6\u51fa\u5f15\u7528\uff0c\u7f13\u5b58\u4e2d\u662f\u5426\u6709\u8be5Employee\u5b9e\u4f8b\u7684\u8f6f\u5f15\u7528\uff0c\u5982\u679c\u6709\uff0c\u4ece\u8f6f\u5f15\u7528\u4e2d\u53d6\u5f97\u3002\u5982\u679c\u6ca1\u6709\u8f6f\u5f15\u7528\uff0c\u6216\u8005\u4ece\u8f6f\u5f15\u7528\u4e2d\u5f97\u5230\u7684\u5b9e\u4f8b\u662fnull\uff0c\u91cd\u65b0\u6784\u5efa\u4e00\u4e2a\u5b9e\u4f8b\uff0c\u5e76\u4fdd\u5b58\u5bf9\u8fd9\u4e2a\u65b0\u5efa\u5b9e\u4f8b\u7684\u8f6f\u5f15\u7528"},{"ID":"1085","typeID":"11","question":"Object\u6709\u54ea\u4e9b\u516c\u7528\u65b9\u6cd5\uff1f","answer":"\u65b9\u6cd5equals\u6d4b\u8bd5\u7684\u662f\u4e24\u4e2a\u5bf9\u8c61\u662f\u5426\u76f8\u7b49\r\n\u65b9\u6cd5clone\u8fdb\u884c\u5bf9\u8c61\u62f7\u8d1d\r\n\u65b9\u6cd5getClass\u8fd4\u56de\u548c\u5f53\u524d\u5bf9\u8c61\u76f8\u5173\u7684Class\u5bf9\u8c61\r\n\u65b9\u6cd5notify,notifyall,wait\u90fd\u662f\u7528\u6765\u5bf9\u7ed9\u5b9a\u5bf9\u8c61\u8fdb\u884c\u7ebf\u7a0b\u540c\u6b65\u7684"},{"ID":"1084","typeID":"11","question":"equals\u4e0e==\u7684\u533a\u522b\uff1f","answer":"==\u662f\u5224\u65ad\u4e24\u4e2a\u53d8\u91cf\u6216\u5b9e\u4f8b\u662f\u4e0d\u662f\u6307\u5411\u540c\u4e00\u4e2a\u5185\u5b58\u7a7a\u95f4 \r\nequals\u662f\u5224\u65ad\u4e24\u4e2a\u53d8\u91cf\u6216\u5b9e\u4f8b\u6240\u6307\u5411\u7684\u5185\u5b58\u7a7a\u95f4\u7684\u503c\u662f\u4e0d\u662f\u76f8\u540c "},{"ID":"1083","typeID":"11","question":"Switch\u80fd\u5426\u7528string\u505a\u53c2\u6570\uff1f","answer":"\u5728 Java 7  \u4e4b\u524d, switch \u53ea\u80fd\u652f\u6301byte,short,char,int \u6216\u8005\u5176\u5bf9\u5e94\u7684\u5c01\u88c5\u7c7b\u4ee5\u53ca Enum \u7c7b\u578b\u3002\u5728JAVA 7\u4e2d,String \u652f\u6301\u88ab\u52a0\u4e0a\u4e86\u3002 "},{"ID":"1061","typeID":"11","question":"Android dvm\u7684\u8fdb\u7a0b\u548cLinux\u7684\u8fdb\u7a0b, \u5e94\u7528\u7a0b\u5e8f\u7684\u8fdb\u7a0b\u662f\u5426\u4e3a\u540c\u4e00\u4e2a\u6982\u5ff5 ","answer":"DVM\u6307dalivk\u7684\u865a\u62df\u673a\u3002\u6bcf\u4e00\u4e2aAndroid\u5e94\u7528\u7a0b\u5e8f\u90fd\u5728\u5b83\u81ea\u5df1\u7684\u8fdb\u7a0b\u4e2d\u8fd0\u884c\uff0c\u90fd\u62e5\u6709\u4e00\u4e2a\u72ec\u7acb\u7684Dalvik\u865a\u62df\u673a\u5b9e\u4f8b\u3002\u800c\u6bcf\u4e00\u4e2aDVM\u90fd\u662f\u5728Linux \u4e2d\u7684\u4e00\u4e2a\u8fdb\u7a0b\uff0c\u6240\u4ee5\u8bf4\u53ef\u4ee5\u8ba4\u4e3a\u662f\u540c\u4e00\u4e2a\u6982\u5ff5\u3002"},{"ID":"1060","typeID":"11","question":"android\u7cfb\u7edf\u7684\u4f18\u52bf\u548c\u4e0d\u8db3","answer":"Android\u5e73\u53f0\u624b\u673a 5\u5927\u4f18\u52bf\uff1a \r\n\u2474\u5f00\u653e\u6027 \r\n\u5728\u4f18\u52bf\u65b9\u9762\uff0cAndroid\u5e73\u53f0\u9996\u5148\u5c31\u662f\u5176\u5f00\u53d1\u6027\uff0c\u5f00\u53d1\u7684\u5e73\u53f0\u5141\u8bb8\u4efb\u4f55\u79fb\u52a8\u7ec8\u7aef\u5382\u5546\u52a0\u5165\u5230Android\u8054\u76df\u4e2d\u6765\u3002\u663e\u8457\u7684\u5f00\u653e\u6027\u53ef\u4ee5\u4f7f\u5176\u62e5\u6709\u66f4\u591a\u7684\u5f00\u53d1\u8005\uff0c\u968f\u7740\u7528\u6237\u548c\u5e94\u7528\u7684\u65e5\u76ca\u4e30\u5bcc\uff0c\u4e00\u4e2a\u5d2d\u65b0\u7684\u5e73\u53f0\u4e5f\u5c06\u5f88\u5feb\u8d70\u5411\u6210\u719f\u3002\u5f00\u653e\u6027\u5bf9\u4e8eAndroid\u7684\u53d1\u5c55\u800c\u8a00\uff0c\u6709\u5229\u4e8e\u79ef\u7d2f\u4eba\u6c14\uff0c\u8fd9\u91cc\u7684\u4eba\u6c14\u5305\u62ec\u6d88\u8d39\u8005\u548c\u5382\u5546\uff0c\u800c\u5bf9\u4e8e\u6d88\u8d39\u8005\u6765\u8bb2\uff0c\u968f\u5927\u7684\u53d7\u76ca\u6b63\u662f\u4e30\u5bcc\u7684\u8f6f\u4ef6\u8d44\u6e90\u3002\u5f00\u653e\u7684\u5e73\u53f0\u4e5f\u4f1a\u5e26\u6765\u66f4\u5927\u7ade\u4e89\uff0c\u5982\u6b64\u4e00\u6765\uff0c\u6d88\u8d39\u8005\u5c06\u53ef\u4ee5\u7528\u66f4\u4f4e\u7684\u4ef7\u4f4d\u8d2d\u5f97\u5fc3\u4eea\u7684\u624b\u673a\u3002\r\n\u2475\u6323\u8131\u8fd0\u8425\u5546\u7684\u675f\u7f1a \r\n\u5728\u8fc7\u53bb\u5f88\u957f\u7684\u4e00\u6bb5\u65f6\u95f4\uff0c\u7279\u522b\u662f\u5728\u6b27\u7f8e\u5730\u533a\uff0c\u624b\u673a\u5e94\u7528\u5f80\u5f80\u53d7\u5230\u8fd0\u8425\u5546\u5236\u7ea6\uff0c\u4f7f\u7528\u4ec0\u4e48\u529f\u80fd\u63a5\u5165\u4ec0\u4e48\u7f51\u7edc\uff0c\u51e0\u4e4e\u90fd\u53d7\u5230\u8fd0\u8425\u5546\u7684\u63a7\u5236\u3002\u4ece\u53bb\u5e74iPhone \u4e0a\u5e02 \uff0c\u7528\u6237\u53ef\u4ee5\u66f4\u52a0\u65b9\u4fbf\u5730\u8fde\u63a5\u7f51\u7edc\uff0c\u8fd0\u8425\u5546\u7684\u5236\u7ea6\u51cf\u5c11\u3002\u968f\u7740EDGE\u3001HSDPA\u8fd9\u4e9b2G\u81f33G\u79fb\u52a8\u7f51\u7edc\u7684\u9010\u6b65\u8fc7\u6e21\u548c\u63d0\u5347\uff0c\u624b\u673a\u968f\u610f\u63a5\u5165\u7f51\u7edc\u5df2\u4e0d\u662f\u8fd0\u8425\u5546\u53e3\u4e2d\u7684\u7b11\u8c08\uff0c\u5f53\u4f60\u53ef\u4ee5\u901a\u8fc7\u624b\u673aIM\u8f6f\u4ef6\u65b9\u4fbf\u5730\u8fdb\u884c\u5373\u65f6\u804a\u5929\u65f6\uff0c\u518d\u56de\u60f3\u4e0d\u4e45\u524d\u5929\u4ef7\u7684\u5f69\u4fe1\u548c\u56fe\u94c3\u4e0b\u8f7d\u4e1a\u52a1\uff0c\u662f\u4e0d\u662f\u50cf\u5669\u68a6\u4e00\u6837\uff1f\u4e92\u8054\u7f51\u5de8\u5934Google\u63a8\u52a8\u7684Android\u7ec8\u7aef\u5929\u751f\u5c31\u6709\u7f51\u7edc\u7279\u8272\uff0c\u5c06\u8ba9\u7528\u6237\u79bb\u4e92\u8054\u7f51\u66f4\u8fd1\u3002\r\n\u2476\u4e30\u5bcc\u7684\u786c\u4ef6\u9009\u62e9 \r\n\u8fd9\u4e00\u70b9\u8fd8\u662f\u4e0eAndroid\u5e73\u53f0\u7684\u5f00\u653e\u6027\u76f8\u5173\uff0c\u7531\u4e8eAndroid\u7684\u5f00\u653e\u6027\uff0c\u4f17\u591a\u7684\u5382\u5546\u4f1a\u63a8\u51fa\u5343\u5947\u767e\u602a\uff0c\u529f\u80fd\u7279\u8272\u5404\u5177\u7684\u591a\u79cd\u4ea7\u54c1\u3002\u529f\u80fd\u4e0a\u7684\u5dee\u5f02\u548c\u7279\u8272\uff0c\u5374\u4e0d\u4f1a\u5f71\u54cd\u5230\u6570\u636e\u540c\u6b65\u3001\u751a\u81f3\u8f6f\u4ef6\u7684\u517c\u5bb9\uff0c\u597d\u6bd4\u4f60\u4ece\u8bfa\u57fa\u4e9a Symbian\u98ce\u683c\u624b\u673a \u4e00\u4e0b\u6539\u7528\u82f9\u679c iPhone \uff0c\u540c\u65f6\u8fd8\u53ef\u5c06Symbian\u4e2d\u4f18\u79c0\u7684\u8f6f\u4ef6\u5e26\u5230iPhone\u4e0a\u4f7f\u7528\u3001\u8054\u7cfb\u4eba\u7b49\u8d44\u6599\u66f4\u662f\u53ef\u4ee5\u65b9\u4fbf\u5730\u8f6c\u79fb\uff0c\u662f\u4e0d\u662f\u975e\u5e38\u65b9\u4fbf\u5462\uff1f\r\n\u2477\u4e0d\u53d7\u4efb\u4f55\u9650\u5236\u7684\u5f00\u53d1\u5546 \r\nAndroid\u5e73\u53f0\u63d0\u4f9b\u7ed9\u7b2c\u4e09\u65b9\u5f00\u53d1\u5546\u4e00\u4e2a\u5341\u5206\u5bbd\u6cdb\u3001\u81ea\u7531\u7684\u73af\u5883\uff0c\u4e0d\u4f1a\u53d7\u5230\u5404\u79cd\u6761\u6761\u6846\u6846\u7684\u963b\u6270\uff0c\u53ef\u60f3\u800c\u77e5\uff0c\u4f1a\u6709\u591a\u5c11\u65b0\u9896\u522b\u81f4\u7684\u8f6f\u4ef6\u4f1a\u8bde\u751f\u3002\u4f46\u4e5f\u6709\u5176\u4e24\u9762\u6027\uff0c\u8840\u8165\u3001\u66b4\u529b\u3001\u60c5\u8272\u65b9\u9762\u7684\u7a0b\u5e8f\u548c\u6e38\u620f\u5982\u53ef\u63a7\u5236\u6b63\u662f\u7559\u7ed9Android\u96be\u9898\u4e4b\u4e00\u3002\r\n\u2478\u65e0\u7f1d\u7ed3\u5408\u7684Google\u5e94\u7528 \r\n\u5982\u4eca\u53f1\u8be7\u4e92\u8054\u7f51\u7684Google\u5df2\u7ecf\u8d70\u8fc710\u5e74\u5ea6\u5386\u53f2\uff0c\u4ece\u641c\u7d22\u5de8\u4eba\u5230\u5168\u9762\u7684\u4e92\u8054\u7f51\u6e17\u900f\uff0cGoogle\u670d\u52a1\u5982\u5730\u56fe\u3001\u90ae\u4ef6\u3001\u641c\u7d22\u7b49\u5df2\u7ecf\u6210\u4e3a\u8fde\u63a5\u7528\u6237\u548c\u4e92\u8054\u7f51\u7684\u91cd\u8981\u7ebd\u5e26\uff0c\u800cAndroid\u5e73\u53f0\u624b\u673a\u5c06\u65e0\u7f1d\u7ed3\u5408\u8fd9\u4e9b\u4f18\u79c0\u7684Google\u670d\u52a1\u3002\r\n\u518d\u8bf4Android\u76845\u5927\u4e0d\u8db3\uff1a\r\n\u2474\u5b89\u5168\u548c\u9690\u79c1 \r\n\u7531\u4e8e\u624b\u673a \u4e0e\u4e92\u8054\u7f51\u7684\u7d27\u5bc6\u8054\u7cfb\uff0c\u4e2a\u4eba\u9690\u79c1\u5f88\u96be\u5f97\u5230\u4fdd\u5b88\u3002\u9664\u4e86\u4e0a\u7f51\u8fc7\u7a0b\u4e2d\u7ecf\u610f\u6216\u4e0d\u7ecf\u610f\u7559\u4e0b\u7684\u4e2a\u4eba\u8db3\u8ff9\uff0cGoogle\u8fd9\u4e2a\u5de8\u4eba\u4e5f\u65f6\u65f6\u7ad9\u5728\u4f60\u7684\u8eab\u540e\uff0c\u6d1e\u7a7f\u4e00\u5207\uff0c\u56e0\u6b64\uff0c\u4e92\u8054\u7f51\u7684\u6df1\u5165\u5c06\u4f1a\u5e26\u6765\u65b0\u4e00\u8f6e\u7684\u9690\u79c1\u5371\u673a\u3002\r\n\u2475\u9996\u5148\u5f00\u5356Android\u624b\u673a\u7684\u4e0d\u662f\u6700\u5927\u8fd0\u8425\u5546 \r\n\u4f17\u6240\u5468\u77e5\uff0cT-Mobile\u572823\u65e5\uff0c\u4e8e\u7f8e\u56fd\u7ebd\u7ea6\u53d1\u5e03 \u4e86Android\u9996\u6b3e\u624b\u673aG1\u3002\u4f46\u662f\u5728\u5317\u7f8e\u5e02\u573a\uff0c\u6700\u5927\u7684\u4e24\u5bb6\u8fd0\u8425\u5546\u4e43AT&T\u548cVerizon\uff0c\u800c\u76ee\u524d\u6240\u77e5\u53d6\u5f97Android\u624b\u673a\u9500\u552e\u6743\u7684\u4ec5\u6709 T-Mobile\u548cSprint\uff0c\u5176\u4e2dT-Mobile\u76843G\u7f51\u7edc\u76f8\u5bf9\u4e8e\u5176\u4ed6\u4e09\u5bb6\u4e5f\u8981\u900a\u8272\u4e0d\u5c11\uff0c\u56e0\u6b64\uff0c\u7528\u6237\u53ef\u4ee5\u4e70\u8d26\u8d2d\u4e70G1\uff0c\u80fd\u5426\u4f53\u9a8c\u5230\u6700\u4f73\u76843G\u7f51\u7edc\u670d\u52a1\u5219\u8981\u53e6\u5f53\u522b\u8bba\u4e86\uff01\r\n\u2476\u8fd0\u8425\u5546\u4ecd\u7136\u80fd\u591f\u5f71\u54cd\u5230Android\u624b\u673a \r\n\u5728\u56fd\u5185\u5e02\u573a\uff0c\u4e0d\u5c11\u7528\u6237\u5bf9\u8d2d\u5f97\u79fb\u52a8\u5b9a\u5236\u673a\u4e0d\u6ee1\uff0c\u611f\u89c9\u6240\u8d2d\u7684\u624b\u673a\u88ab\u4eba\u6d82\u753b\u4e86\u5e7f\u544a\u4e00\u822c\u3002\u8fd9\u6837\u7684\u60c5\u51b5\u5728\u56fd\u5916\u5e02\u573a\u540c\u6837\u51fa\u73b0\u3002Android\u624b\u673a\u7684\u53e6\u4e00\u53d1\u552e\u8fd0\u8425\u5546Sprint\u5c31\u5c06\u5728\u5176\u673a\u578b\u4e2d\u5185\u7f6e\u5176\u624b\u673a\u5546\u5e97\u7a0b\u5e8f\u3002\r\n\u2477\u540c\u7c7b\u673a\u578b\u7528\u6237\u51cf\u5c11 \r\n\u5728\u4e0d\u5c11\u624b\u673a\u8bba\u575b\u90fd\u4f1a\u6709\u9488\u5bf9\u67d0\u4e00\u578b\u53f7\u7684\u5b50\u8bba\u575b\uff0c\u5bf9\u4e00\u6b3e\u624b\u673a\u7684\u4f7f\u7528\u5fc3\u5f97\u4ea4\u6d41\uff0c\u5e76\u5206\u4eab\u8f6f\u4ef6\u8d44\u6e90\u3002\u800c\u5bf9\u4e8eAndroid\u5e73\u53f0\u624b\u673a\uff0c\u7531\u4e8e\u5382\u5546\u4e30\u5bcc\uff0c\u4ea7\u54c1\u7c7b\u578b\u591a\u6837\uff0c\u8fd9\u6837\u4f7f\u7528\u540c\u4e00\u6b3e\u673a\u578b\u7684\u7528\u6237\u8d8a\u6765\u8d8a\u5c11\uff0c\u7f3a\u5c11\u7edf\u4e00\u673a\u578b\u7684\u7a0b\u5e8f\u5f3a\u5316\u3002\u4e3e\u4e2a\u7a0d\u663e\u4e0d\u5f53\u7684\u4f8b\u5b50\uff0c\u73b0\u5728\u5c71\u5be8\u673a\u6cdb\u6ee5\uff0c\u54c1\u79cd\u5404\u5f02\uff0c\u5c31\u5f88\u5c11\u6709\u4e13\u95e8\u9488\u5bf9\u67d0\u4e2a\u578b\u53f7\u5c71\u5be8\u673a\u7684\u8ba8\u8bba\u548c\u7fa4\u7ec4\uff0c\u9664\u4e86\u54ea\u4e9b\u529f\u80fd\u5f02\u5e38\u62a2\u773c\u3001\u9887\u53d7\u8ffd\u6367\u7684\u673a\u578b\u4ee5\u5916\u3002\r\n\u2478\u8fc7\u5206\u4f9d\u8d56\u5f00\u53d1\u5546\u7f3a\u5c11\u6807\u51c6\u914d\u7f6e \r\n\u5728\u4f7f\u7528PC\u7aef\u7684Windows Xp\u7cfb\u7edf\u7684\u65f6\u5019\uff0c\u90fd\u4f1a\u5185\u7f6e\u5fae\u8f6fWindows Media Player\u8fd9\u6837\u4e00\u4e2a\u6d4f\u89c8\u5668\u7a0b\u5e8f\uff0c\u7528\u6237\u53ef\u4ee5\u9009\u62e9\u66f4\u591a\u6837\u7684\u64ad\u653e\u5668\uff0c\u5982Realplay\u6216\u66b4\u98ce\u5f71\u97f3\u7b49\u3002\u4f46\u5165\u624b\u5f00\u59cb\u4f7f\u7528\u9ed8\u8ba4\u7684\u7a0b\u5e8f\u540c\u6837\u53ef\u4ee5\u5e94\u4ed8\u591a\u6837\u7684\u9700\u8981\u3002\u5728 Android\u5e73\u53f0\u4e2d\uff0c\u7531\u4e8e\u5176\u5f00\u653e\u6027\uff0c\u8f6f\u4ef6\u66f4\u591a\u4f9d\u8d56\u7b2c\u4e09\u65b9\u5382\u5546\uff0c\u6bd4\u5982Android\u7cfb\u7edf\u7684SDK\u4e2d\u5c31\u6ca1\u6709\u5185\u7f6e\u97f3\u4e50 \u64ad\u653e\u5668\uff0c\u5168\u90e8\u4f9d\u8d56\u7b2c\u4e09\u65b9\u5f00\u53d1\uff0c\u7f3a\u5c11\u4e86\u4ea7\u54c1\u7684\u7edf\u4e00\u6027\u3002\r\n"},{"ID":"1059","typeID":"11","question":"\u7cfb\u7edf\u4e0a\u5b89\u88c5\u4e86\u591a\u79cd\u6d4f\u89c8\u5668\uff0c\u80fd\u5426\u6307\u5b9a\u67d0\u6d4f\u89c8\u5668\u8bbf\u95ee\u6307\u5b9a\u9875\u9762\uff1f\u8bf7\u8bf4\u660e\u539f\u7531","answer":"\u901a\u8fc7\u76f4\u63a5\u53d1\u9001Uri\u628a\u53c2\u6570\u5e26\u8fc7\u53bb\uff0c\u6216\u8005\u901a\u8fc7manifest\u91cc\u7684intentfilter\u91cc\u7684data\u5c5e\u6027"},{"ID":"1058","typeID":"11","question":"\u8bf7\u89e3\u91ca\u4e0bAndroid\u7a0b\u5e8f\u8fd0\u884c\u65f6\u6743\u9650\u4e0e\u6587\u4ef6\u7cfb\u7edf\u6743\u9650\u7684\u533a\u522b","answer":"\u8fd0\u884c\u65f6\u6743\u9650Dalvik( android\u6388\u6743) \r\n\u6587\u4ef6\u7cfb\u7edf linux \u5185\u6838\u6388\u6743\r\n"},{"ID":"1057","typeID":"11","question":"AIDL\u7684\u5168\u79f0\u662f\u4ec0\u4e48\uff1f\u5982\u4f55\u5de5\u4f5c\uff1f\u80fd\u5904\u7406\u54ea\u4e9b\u7c7b\u578b\u7684\u6570\u636e","answer":"\u5168\u79f0\u662f\uff1aAndroid Interface Define Language\r\n\u5728Android\u4e2d, \u6bcf\u4e2a\u5e94\u7528\u7a0b\u5e8f\u90fd\u53ef\u4ee5\u6709\u81ea\u5df1\u7684\u8fdb\u7a0b. \u5728\u5199UI\u5e94\u7528\u7684\u65f6\u5019, \u7ecf\u5e38\u8981\u7528\u5230Service. \u5728\u4e0d\u540c\u7684\u8fdb\u7a0b\u4e2d, \u600e\u6837\u4f20\u9012\u5bf9\u8c61\u5462?\u663e\u7136, Java\u4e2d\u4e0d\u5141\u8bb8\u8de8\u8fdb\u7a0b\u5185\u5b58\u5171\u4eab. \u56e0\u6b64\u4f20\u9012\u5bf9\u8c61, \u53ea\u80fd\u628a\u5bf9\u8c61\u62c6\u5206\u6210\u64cd\u4f5c\u7cfb\u7edf\u80fd\u7406\u89e3\u7684\u7b80\u5355\u5f62\u5f0f, \u4ee5\u8fbe\u5230\u8de8\u754c\u5bf9\u8c61\u8bbf\u95ee\u7684\u76ee\u7684. \u5728J2EE\u4e2d,\u91c7\u7528RMI\u7684\u65b9\u5f0f, \u53ef\u4ee5\u901a\u8fc7\u5e8f\u5217\u5316\u4f20\u9012\u5bf9\u8c61. \u5728Android\u4e2d, \u5219\u91c7\u7528AIDL\u7684\u65b9\u5f0f. \u7406\u8bba\u4e0aAIDL\u53ef\u4ee5\u4f20\u9012Bundle,\u5b9e\u9645\u4e0a\u505a\u8d77\u6765\u5374\u6bd4\u8f83\u9ebb\u70e6\u3002\r\nAIDL(AndRoid\u63a5\u53e3\u63cf\u8ff0\u8bed\u8a00)\u662f\u4e00\u79cd\u501f\u53e3\u63cf\u8ff0\u8bed\u8a00; \u7f16\u8bd1\u5668\u53ef\u4ee5\u901a\u8fc7aidl\u6587\u4ef6\u751f\u6210\u4e00\u6bb5\u4ee3\u7801\uff0c\u901a\u8fc7\u9884\u5148\u5b9a\u4e49\u7684\u63a5\u53e3\u8fbe\u5230\u4e24\u4e2a\u8fdb\u7a0b\u5185\u90e8\u901a\u4fe1\u8fdb\u7a0b\u7684\u76ee\u7684. \u5982\u679c\u9700\u8981\u5728\u4e00\u4e2aActivity\u4e2d, \u8bbf\u95ee\u53e6\u4e00\u4e2aService\u4e2d\u7684\u67d0\u4e2a\u5bf9\u8c61, \u9700\u8981\u5148\u5c06\u5bf9\u8c61\u8f6c\u5316\u6210AIDL\u53ef\u8bc6\u522b\u7684\u53c2\u6570(\u53ef\u80fd\u662f\u591a\u4e2a\u53c2\u6570), \u7136\u540e\u4f7f\u7528AIDL\u6765\u4f20\u9012\u8fd9\u4e9b\u53c2\u6570, \u5728\u6d88\u606f\u7684\u63a5\u6536\u7aef, \u4f7f\u7528\u8fd9\u4e9b\u53c2\u6570\u7ec4\u88c5\u6210\u81ea\u5df1\u9700\u8981\u7684\u5bf9\u8c61.\r\nAIDL\u7684IPC\u7684\u673a\u5236\u548cCOM\u6216CORBA\u7c7b\u4f3c, \u662f\u57fa\u4e8e\u63a5\u53e3\u7684\uff0c\u4f46\u5b83\u662f\u8f7b\u91cf\u7ea7\u7684\u3002\u5b83\u4f7f\u7528\u4ee3\u7406\u7c7b\u5728\u5ba2\u6237\u7aef\u548c\u5b9e\u73b0\u5c42\u95f4\u4f20\u9012\u503c. \u5982\u679c\u8981\u4f7f\u7528AIDL, \u9700\u8981\u5b8c\u62102\u4ef6\u4e8b\u60c5: 1. \u5f15\u5165AIDL\u7684\u76f8\u5173\u7c7b.; 2. \u8c03\u7528aidl\u4ea7\u751f\u7684class.\r\nAIDL\u7684\u521b\u5efa\u65b9\u6cd5:\r\nAIDL\u8bed\u6cd5\u5f88\u7b80\u5355,\u53ef\u4ee5\u7528\u6765\u58f0\u660e\u4e00\u4e2a\u5e26\u4e00\u4e2a\u6216\u591a\u4e2a\u65b9\u6cd5\u7684\u63a5\u53e3\uff0c\u4e5f\u53ef\u4ee5\u4f20\u9012\u53c2\u6570\u548c\u8fd4\u56de\u503c\u3002 \u7531\u4e8e\u8fdc\u7a0b\u8c03\u7528\u7684\u9700\u8981, \u8fd9\u4e9b\u53c2\u6570\u548c\u8fd4\u56de\u503c\u5e76\u4e0d\u662f\u4efb\u4f55\u7c7b\u578b.\u4e0b\u9762\u662f\u4e9bAIDL\u652f\u6301\u7684\u6570\u636e\u7c7b\u578b:\r\n1)\u4e0d\u9700\u8981import\u58f0\u660e\u7684\u7b80\u5355Java\u7f16\u7a0b\u8bed\u8a00\u7c7b\u578b(int,boolean\u7b49)\r\n2) String, CharSequence\u4e0d\u9700\u8981\u7279\u6b8a\u58f0\u660e\r\n3) List, Map\u548cParcelables\u7c7b\u578b, \u8fd9\u4e9b\u7c7b\u578b\u5185\u6240\u5305\u542b\u7684\u6570\u636e\u6210\u5458\u4e5f\u53ea\u80fd\u662f\u7b80\u5355\u6570\u636e\u7c7b\u578b, String\u7b49\u5176\u4ed6\u6bd4\u652f\u6301\u7684\u7c7b\u578b.\r\n(\u53e6\u5916: \u6211\u6ca1\u5c1d\u8bd5Parcelables, \u5728Eclipse+ADT\u4e0b\u7f16\u8bd1\u4e0d\u8fc7, \u6216\u8bb8\u4ee5\u540e\u4f1a\u6709\u6240\u652f\u6301)\r\n"},{"ID":"1056","typeID":"11","question":"\u5982\u4f55\u9000\u51faActivity\uff1f\u5982\u4f55\u5b89\u5168\u9000\u51fa\u5df2\u8c03\u7528\u591a\u4e2aActivity\u7684Application","answer":"\u5bf9\u4e8e\u5355\u4e00Activity\u7684\u5e94\u7528\u6765\u8bf4\uff0c\u9000\u51fa\u5f88\u7b80\u5355\uff0c\u76f4\u63a5finish()\u5373\u53ef\u3002\u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u7528killProcess()\u548cSystem.exit()\u8fd9\u6837\u7684\u65b9\u6cd5\u3002\r\n\u5bf9\u4e8e\u591a\u4e2aactivity:\r\n1)\u8bb0\u5f55\u6253\u5f00\u7684Activity\uff1a\u6bcf\u6253\u5f00\u4e00\u4e2aActivity\uff0c\u5c31\u8bb0\u5f55\u4e0b\u6765\u3002\u5728\u9700\u8981\u9000\u51fa\u65f6\uff0c\u5173\u95ed\u6bcf\u4e00\u4e2aActivity\u5373\u53ef\r\n2)\u53d1\u9001\u7279\u5b9a\u5e7f\u64ad\uff1a\u5728\u9700\u8981\u7ed3\u675f\u5e94\u7528\u65f6\uff0c\u53d1\u9001\u4e00\u4e2a\u7279\u5b9a\u7684\u5e7f\u64ad\uff0c\u6bcf\u4e2aActivity\u6536\u5230\u5e7f\u64ad\u540e\uff0c\u5173\u95ed\u5373\u53ef\u3002\r\n3)\u9012\u5f52\u9000\u51fa\uff1a\u5728\u6253\u5f00\u65b0\u7684Activity\u65f6\u4f7f\u7528startActivityForResult\uff0c\u7136\u540e\u81ea\u5df1\u52a0\u6807\u5fd7\uff0c\u5728onActivityResult\u4e2d\u5904\u7406\uff0c\u9012\u5f52\u5173\u95ed\u3002\u4e3a\u4e86\u7f16\u7a0b\u65b9\u4fbf\uff0c\u6700\u597d\u5b9a\u4e49\u4e00\u4e2aActivity\u57fa\u7c7b\uff0c\u5904\u7406\u8fd9\u4e9b\u5171\u901a\u95ee\u9898\u3002\r\n\u57282.1\u4e4b\u524d\uff0c\u53ef\u4ee5\u4f7f\u7528ActivityManager\u7684restartPackage\u65b9\u6cd5\u3002\r\n\u5b83\u53ef\u4ee5\u76f4\u63a5\u7ed3\u675f\u6574\u4e2a\u5e94\u7528\u3002\u5728\u4f7f\u7528\u65f6\u9700\u8981\u6743\u9650android.permission.RESTART_PACKAGES\u3002\r\n\u6ce8\u610f\u4e0d\u8981\u88ab\u5b83\u7684\u540d\u5b57\u8ff7\u60d1\u3002\r\n\u53ef\u662f\uff0c\u57282.2\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u5931\u6548\u4e86\u3002\u57282.2\u6dfb\u52a0\u4e86\u4e00\u4e2a\u65b0\u7684\u65b9\u6cd5\uff0ckillBackground Processes()\uff0c\u9700\u8981\u6743\u9650 android.permission.KILL_BACKGROUND_PROCESSES\u3002\u53ef\u60dc\u7684\u662f\uff0c\u5b83\u548c2.2\u7684restartPackage\u4e00\u6837\uff0c\u6839\u672c\u8d77\u4e0d\u5230\u5e94\u6709\u7684\u6548\u679c\u3002\r\n\u53e6\u5916\u8fd8\u6709\u4e00\u4e2a\u65b9\u6cd5\uff0c\u5c31\u662f\u7cfb\u7edf\u81ea\u5e26\u7684\u5e94\u7528\u7a0b\u5e8f\u7ba1\u7406\u91cc\uff0c\u5f3a\u5236\u7ed3\u675f\u7a0b\u5e8f\u7684\u65b9\u6cd5\uff0cforceStopPackage()\u3002\u5b83\u9700\u8981\u6743\u9650android.permission.FORCE_STOP_PACKAGES\u3002\u5e76\u4e14\u9700\u8981\u6dfb\u52a0android:sharedUserId=\"android.uid.system\"\u5c5e\u6027\u3002\u540c\u6837\u53ef\u60dc\u7684\u662f\uff0c\u8be5\u65b9\u6cd5\u662f\u975e\u516c\u5f00\u7684\uff0c\u4ed6\u53ea\u80fd\u8fd0\u884c\u5728\u7cfb\u7edf\u8fdb\u7a0b\uff0c\u7b2c\u4e09\u65b9\u7a0b\u5e8f\u65e0\u6cd5\u8c03\u7528\u3002\r\n\u56e0\u4e3a\u9700\u8981\u5728Android.mk\u4e2d\u6dfb\u52a0LOCAL_CERTIFICATE := platform\u3002\r\n\u800cAndroid.mk\u662f\u7528\u4e8e\u5728Android\u6e90\u7801\u4e0b\u7f16\u8bd1\u7a0b\u5e8f\u7528\u7684\u3002\r\n\u4ece\u4ee5\u4e0a\u53ef\u4ee5\u770b\u51fa\uff0c\u57282.2\uff0c\u6ca1\u6709\u529e\u6cd5\u76f4\u63a5\u7ed3\u675f\u4e00\u4e2a\u5e94\u7528\uff0c\u800c\u53ea\u80fd\u7528\u81ea\u5df1\u7684\u529e\u6cd5\u95f4\u63a5\u529e\u5230\u3002\r\n\u73b0\u63d0\u4f9b\u51e0\u4e2a\u65b9\u6cd5\uff0c\u4f9b\u53c2\u8003\uff1a\r\n1)\u629b\u5f02\u5e38\u5f3a\u5236\u9000\u51fa\uff1a\r\n\u8be5\u65b9\u6cd5\u901a\u8fc7\u629b\u5f02\u5e38\uff0c\u4f7f\u7a0b\u5e8fForce Close\u3002\r\n\u9a8c\u8bc1\u53ef\u4ee5\uff0c\u4f46\u662f\uff0c\u9700\u8981\u89e3\u51b3\u7684\u95ee\u9898\u662f\uff0c\u5982\u4f55\u4f7f\u7a0b\u5e8f\u7ed3\u675f\u6389\uff0c\u800c\u4e0d\u5f39\u51faForce Close\u7684\u7a97\u53e3\u3002\r\n2)\u8bb0\u5f55\u6253\u5f00\u7684Activity\uff1a\r\n\u6bcf\u6253\u5f00\u4e00\u4e2aActivity\uff0c\u5c31\u8bb0\u5f55\u4e0b\u6765\u3002\u5728\u9700\u8981\u9000\u51fa\u65f6\uff0c\u5173\u95ed\u6bcf\u4e00\u4e2aActivity\u5373\u53ef\u3002\r\n3)\u53d1\u9001\u7279\u5b9a\u5e7f\u64ad\uff1a\r\n\u5728\u9700\u8981\u7ed3\u675f\u5e94\u7528\u65f6\uff0c\u53d1\u9001\u4e00\u4e2a\u7279\u5b9a\u7684\u5e7f\u64ad\uff0c\u6bcf\u4e2aActivity\u6536\u5230\u5e7f\u64ad\u540e\uff0c\u5173\u95ed\u5373\u53ef\u3002\r\n4)\u9012\u5f52\u9000\u51fa\r\n\u5728\u6253\u5f00\u65b0\u7684Activity\u65f6\u4f7f\u7528startActivityForResult\uff0c\u7136\u540e\u81ea\u5df1\u52a0\u6807\u5fd7\uff0c\u5728onActivityResult\u4e2d\u5904\u7406\uff0c\u9012\u5f52\u5173\u95ed\u3002\r\n\u9664\u4e86\u7b2c\u4e00\u4e2a\uff0c\u90fd\u662f\u60f3\u529e\u6cd5\u628a\u6bcf\u4e00\u4e2aActivity\u90fd\u7ed3\u675f\u6389\uff0c\u95f4\u63a5\u8fbe\u5230\u76ee\u7684\u3002\u4f46\u662f\u8fd9\u6837\u505a\u540c\u6837\u4e0d\u5b8c\u7f8e\u3002\u4f60\u4f1a\u53d1\u73b0\uff0c\u5982\u679c\u81ea\u5df1\u7684\u5e94\u7528\u7a0b\u5e8f\u5bf9\u6bcf\u4e00\u4e2aActivity\u90fd\u8bbe\u7f6e\u4e86nosensor\uff0c\u5728\u4e24\u4e2aActivity\u7ed3\u675f\u7684\u95f4\u9699\uff0csensor\u53ef\u80fd\u6709\u6548\u4e86\u3002\u4f46\u81f3\u5c11\uff0c\u6211\u4eec\u7684\u76ee\u7684\u8fbe\u5230\u4e86\uff0c\u800c\u4e14\u6ca1\u6709\u5f71\u54cd\u7528\u6237\u4f7f\u7528\u3002\u4e3a\u4e86\u7f16\u7a0b\u65b9\u4fbf\uff0c\u6700\u597d\u5b9a\u4e49\u4e00\u4e2aActivity\u57fa\u7c7b\uff0c\u5904\u7406\u8fd9\u4e9b\u5171\u901a\u95ee\u9898\u3002\r\n"},{"ID":"1055","typeID":"11","question":"\u5982\u4f55\u5c06\u4e00\u4e2aActivity\u8bbe\u7f6e\u6210\u7a97\u53e3\u7684\u6837\u5f0f\uff1f","answer":"<activity>\u4e2d\u914d\u7f6e\uff1aandroid :theme=\"@android:style\/Theme.Dialog\" \r\n\u53e6\u5916android:theme=\"@android:style\/Theme.Translucent\" \u662f\u8bbe\u7f6e\u900f\u660e\r\n"},{"ID":"1054","typeID":"11","question":"\u5982\u679c\u540e\u53f0\u7684Activity\u7531\u4e8e\u67d0\u539f\u56e0\u88ab\u7cfb\u7edf\u56de\u6536\u4e86\uff0c\u5982\u4f55\u5728\u88ab\u7cfb\u7edf\u56de\u6536\u4e4b\u524d\u4fdd\u5b58\u5f53\u524d\u72b6\u6001\uff1f","answer":"\u91cd\u5199onSaveInstanceState()\u65b9\u6cd5\uff0c\u5728\u6b64\u65b9\u6cd5\u4e2d\u4fdd\u5b58\u9700\u8981\u4fdd\u5b58\u7684\u6570\u636e\uff0c\u8be5\u65b9\u6cd5\u5c06\u4f1a\u5728activity\u88ab\u56de\u6536\u4e4b\u524d\u8c03\u7528\u3002\u901a\u8fc7\u91cd\u5199onRestoreInstanceState()\u65b9\u6cd5\u53ef\u4ee5\u4ece\u4e2d\u63d0\u53d6\u4fdd\u5b58\u597d\u7684\u6570\u636e"},{"ID":"1053","typeID":"11","question":"IntentService\u6709\u4f55\u4f18\u70b9\uff1f","answer":"Acitivity\u7684\u8fdb\u7a0b\uff0c\u5f53\u5904\u7406Intent\u7684\u65f6\u5019\uff0c\u4f1a\u4ea7\u751f\u4e00\u4e2a\u5bf9\u5e94\u7684Service\uff1b Android\u7684\u8fdb\u7a0b\u5904\u7406\u5668\u73b0\u5728\u4f1a\u5c3d\u53ef\u80fd\u7684\u4e0dkill\u6389\u4f60\uff1b\u975e\u5e38\u5bb9\u6613\u4f7f\u7528"},{"ID":"1052","typeID":"11","question":"Android\u672c\u8eab\u7684api\u5e76\u672a\u58f0\u660e\u4f1a\u629b\u51fa\u5f02\u5e38\uff0c\u5219\u5176\u5728\u8fd0\u884c\u65f6\u6709\u65e0\u53ef\u80fd\u629b\u51faruntime\u5f02\u5e38\uff0c\u4f60\u9047\u5230\u8fc7\u5417\uff1f\u8bfa\u6709\u7684\u8bdd\u4f1a\u5bfc\u81f4\u4ec0\u4e48\u95ee\u9898\uff1f\u5982\u4f55\u89e3\u51b3\uff1f","answer":"\u4f1a\uff0c\u6bd4\u5982nullpointerException\u3002\u6211\u9047\u5230\u8fc7\uff0c\u6bd4\u5982textview.setText()\u65f6\uff0ctextview\u6ca1\u6709\u521d\u59cb\u5316\u3002\u4f1a\u5bfc\u81f4\u7a0b\u5e8f\u65e0\u6cd5\u6b63\u5e38\u8fd0\u884c\u51fa\u73b0forceclose\u3002\u6253\u5f00\u63a7\u5236\u53f0\u67e5\u770blogcat\u4fe1\u606f\u627e\u51fa\u5f02\u5e38\u4fe1\u606f\u5e76\u4fee\u6539\u7a0b\u5e8f\u3002"},{"ID":"1051","typeID":"11","question":"Service\u548cThread\u7684\u533a\u522b?","answer":"servie\u662f\u7cfb\u7edf\u7684\u7ec4\u4ef6\uff0c\u5b83\u7531\u7cfb\u7edf\u8fdb\u7a0b\u6258\u7ba1\uff08servicemanager\uff09\uff1b\u5b83\u4eec\u4e4b\u95f4\u7684\u901a\u4fe1\u7c7b\u4f3c\u4e8eclient\u548cserver\uff0c\u662f\u4e00\u79cd\u8f7b\u91cf\u7ea7\u7684ipc\u901a\u4fe1\uff0c\u8fd9\u79cd\u901a\u4fe1\u7684\u8f7d\u4f53\u662fbinder\uff0c\u5b83\u662f\u5728linux\u5c42\u4ea4\u6362\u4fe1\u606f\u7684\u4e00\u79cdipc\u3002\u800cthread\u662f\u7531\u672c\u5e94\u7528\u7a0b\u5e8f\u6258\u7ba1\u3002 1). Thread\uff1aThread \u662f\u7a0b\u5e8f\u6267\u884c\u7684\u6700\u5c0f\u5355\u5143\uff0c\u5b83\u662f\u5206\u914dCPU\u7684\u57fa\u672c\u5355\u4f4d\u3002\u53ef\u4ee5\u7528 Thread \u6765\u6267\u884c\u4e00\u4e9b\u5f02\u6b65\u7684\u64cd\u4f5c\u3002\r\n2). Service\uff1aService \u662fandroid\u7684\u4e00\u79cd\u673a\u5236\uff0c\u5f53\u5b83\u8fd0\u884c\u7684\u65f6\u5019\u5982\u679c\u662fLocal Service\uff0c\u90a3\u4e48\u5bf9\u5e94\u7684 Service \u662f\u8fd0\u884c\u5728\u4e3b\u8fdb\u7a0b\u7684 main \u7ebf\u7a0b\u4e0a\u7684\u3002\u5982\uff1aonCreate\uff0conStart \u8fd9\u4e9b\u51fd\u6570\u5728\u88ab\u7cfb\u7edf\u8c03\u7528\u7684\u65f6\u5019\u90fd\u662f\u5728\u4e3b\u8fdb\u7a0b\u7684 main \u7ebf\u7a0b\u4e0a\u8fd0\u884c\u7684\u3002\u5982\u679c\u662fRemote Service\uff0c\u90a3\u4e48\u5bf9\u5e94\u7684 Service \u5219\u662f\u8fd0\u884c\u5728\u72ec\u7acb\u8fdb\u7a0b\u7684 main \u7ebf\u7a0b\u4e0a\u3002\r\n\u65e2\u7136\u8fd9\u6837\uff0c\u90a3\u4e48\u6211\u4eec\u4e3a\u4ec0\u4e48\u8981\u7528 Service \u5462\uff1f\u5176\u5b9e\u8fd9\u8ddf android \u7684\u7cfb\u7edf\u673a\u5236\u6709\u5173\uff0c\u6211\u4eec\u5148\u62ff Thread \u6765\u8bf4\u3002Thread \u7684\u8fd0\u884c\u662f\u72ec\u7acb\u4e8e Activity \u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u5f53\u4e00\u4e2a Activity \u88ab finish \u4e4b\u540e\uff0c\u5982\u679c\u4f60\u6ca1\u6709\u4e3b\u52a8\u505c\u6b62 Thread \u6216\u8005 Thread \u91cc\u7684 run \u65b9\u6cd5\u6ca1\u6709\u6267\u884c\u5b8c\u6bd5\u7684\u8bdd\uff0cThread \u4e5f\u4f1a\u4e00\u76f4\u6267\u884c\u3002\u56e0\u6b64\u8fd9\u91cc\u4f1a\u51fa\u73b0\u4e00\u4e2a\u95ee\u9898\uff1a\u5f53 Activity \u88ab finish \u4e4b\u540e\uff0c\u4f60\u4e0d\u518d\u6301\u6709\u8be5 Thread \u7684\u5f15\u7528\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u4f60\u6ca1\u6709\u529e\u6cd5\u5728\u4e0d\u540c\u7684 Activity \u4e2d\u5bf9\u540c\u4e00 Thread \u8fdb\u884c\u63a7\u5236\u3002 \r\n\u4e3e\u4e2a\u4f8b\u5b50\uff1a\u5982\u679c\u4f60\u7684 Thread \u9700\u8981\u4e0d\u505c\u5730\u9694\u4e00\u6bb5\u65f6\u95f4\u5c31\u8981\u8fde\u63a5\u670d\u52a1\u5668\u505a\u67d0\u79cd\u540c\u6b65\u7684\u8bdd\uff0c\u8be5 Thread \u9700\u8981\u5728 Activity \u6ca1\u6709start\u7684\u65f6\u5019\u4e5f\u5728\u8fd0\u884c\u3002\u8fd9\u4e2a\u65f6\u5019\u5f53\u4f60 start \u4e00\u4e2a Activity \u5c31\u6ca1\u6709\u529e\u6cd5\u5728\u8be5 Activity \u91cc\u9762\u63a7\u5236\u4e4b\u524d\u521b\u5efa\u7684 Thread\u3002\u56e0\u6b64\u4f60\u4fbf\u9700\u8981\u521b\u5efa\u5e76\u542f\u52a8\u4e00\u4e2a Service \uff0c\u5728 Service \u91cc\u9762\u521b\u5efa\u3001\u8fd0\u884c\u5e76\u63a7\u5236\u8be5 Thread\uff0c\u8fd9\u6837\u4fbf\u89e3\u51b3\u4e86\u8be5\u95ee\u9898\uff08\u56e0\u4e3a\u4efb\u4f55 Activity \u90fd\u53ef\u4ee5\u63a7\u5236\u540c\u4e00 Service\uff0c\u800c\u7cfb\u7edf\u4e5f\u53ea\u4f1a\u521b\u5efa\u4e00\u4e2a\u5bf9\u5e94 Service \u7684\u5b9e\u4f8b\uff09\u3002 \r\n\u56e0\u6b64\u4f60\u53ef\u4ee5\u628a Service \u60f3\u8c61\u6210\u4e00\u79cd\u6d88\u606f\u670d\u52a1\uff0c\u800c\u4f60\u53ef\u4ee5\u5728\u4efb\u4f55\u6709 Context \u7684\u5730\u65b9\u8c03\u7528 Context.startService\u3001Context.stopService\u3001Context.bindService\uff0cContext.unbindService\uff0c\u6765\u63a7\u5236\u5b83\uff0c\u4f60\u4e5f\u53ef\u4ee5\u5728 Service \u91cc\u6ce8\u518c BroadcastReceiver\uff0c\u5728\u5176\u4ed6\u5730\u65b9\u901a\u8fc7\u53d1\u9001 broadcast \u6765\u63a7\u5236\u5b83\uff0c\u5f53\u7136\u8fd9\u4e9b\u90fd\u662f Thread \u505a\u4e0d\u5230\u7684\u3002\r\n"},{"ID":"1050","typeID":"11","question":"\u8bf7\u4ecb\u7ecd\u4e0bContentProvider\u662f\u5982\u4f55\u5b9e\u73b0\u6570\u636e\u5171\u4eab\u7684","answer":"\u4e00\u4e2a\u7a0b\u5e8f\u53ef\u4ee5\u901a\u8fc7\u5b9e\u73b0\u4e00\u4e2aContent provider\u7684\u62bd\u8c61\u63a5\u53e3\u5c06\u81ea\u5df1\u7684\u6570\u636e\u5b8c\u5168\u66b4\u9732\u51fa\u53bb\uff0c\u800c\u4e14Content providers\u662f\u4ee5\u7c7b\u4f3c\u6570\u636e\u5e93\u4e2d\u8868\u7684\u65b9\u5f0f\u5c06\u6570\u636e\u66b4\u9732\u3002Content providers\u5b58\u50a8\u548c\u68c0\u7d22\u6570\u636e\uff0c\u901a\u8fc7\u5b83\u53ef\u4ee5\u8ba9\u6240\u6709\u7684\u5e94\u7528\u7a0b\u5e8f\u8bbf\u95ee\u5230\uff0c\u8fd9\u4e5f\u662f\u5e94\u7528\u7a0b\u5e8f\u4e4b\u95f4\u552f\u4e00\u5171\u4eab\u6570\u636e\u7684\u65b9\u6cd5\u3002\r\n\u8981\u60f3\u4f7f\u5e94\u7528\u7a0b\u5e8f\u7684\u6570\u636e\u516c\u5f00\u5316\uff0c\u53ef\u901a\u8fc72\u79cd\u65b9\u6cd5\uff1a\u521b\u5efa\u4e00\u4e2a\u5c5e\u4e8e\u4f60\u81ea\u5df1\u7684Content provider\u6216\u8005\u5c06\u4f60\u7684\u6570\u636e\u6dfb\u52a0\u5230\u4e00\u4e2a\u5df2\u7ecf\u5b58\u5728\u7684Content provider\u4e2d\uff0c\u524d\u63d0\u662f\u6709\u76f8\u540c\u6570\u636e\u7c7b\u578b\u5e76\u4e14\u6709\u5199\u5165Content provider\u7684\u6743\u9650\u3002\r\n\u5982\u4f55\u901a\u8fc7\u4e00\u5957\u6807\u51c6\u53ca\u7edf\u4e00\u7684\u63a5\u53e3\u83b7\u53d6\u5176\u4ed6\u5e94\u7528\u7a0b\u5e8f\u66b4\u9732\u7684\u6570\u636e\r\n\tAndroid\u63d0\u4f9b\u4e86ContentResolver\uff0c\u5916\u754c\u7684\u7a0b\u5e8f\u53ef\u4ee5\u901a\u8fc7ContentResolver\u63a5\u53e3\u8bbf\u95eeContentProvider\u63d0\u4f9b\u7684\u6570\u636e\r\n"},{"ID":"1049","typeID":"11","question":"\u4ec0\u4e48\u60c5\u51b5\u4f1a\u5bfc\u81f4Force Close \uff1f\u5982\u4f55\u907f\u514d\uff1f\u80fd\u5426\u6355\u83b7\u5bfc\u81f4\u5176\u7684\u5f02\u5e38","answer":"\u7a0b\u5e8f\u51fa\u73b0\u5f02\u5e38\uff0c\u6bd4\u5982nullpointer\u3002\r\n\u907f\u514d\uff1a\u7f16\u5199\u7a0b\u5e8f\u65f6\u903b\u8f91\u8fde\u8d2f\uff0c\u601d\u7ef4\u7f1c\u5bc6\u3002\u80fd\u6355\u83b7\u5f02\u5e38\uff0c\u5728logcat\u4e2d\u80fd\u770b\u5230\u5f02\u5e38\u4fe1\u606f\r\n"},{"ID":"1048","typeID":"11","question":"\u8bf4\u660ehandler\u673a\u5236\u7684\u539f\u7406?","answer":"\u4e00\u4e2aHandler\u5141\u8bb8\u4f60\u53d1\u9001\u548c\u5904\u7406Message\u548cRunable\u5bf9\u8c61\uff0c\u6bcf\u4e2a\u7ebf\u7a0b\u90fd\u6709\u81ea\u5df1\u7684Looper\uff0c\u6bcf\u4e2aLooper\u4e2d\u5c01\u88c5\u7740MessageQueue\u3002 Looper\u8d1f\u8d23\u4e0d\u65ad\u7684\u4ece\u81ea\u5df1\u7684\u6d88\u606f\u961f\u5217\u91cc\u53d6\u51fa\u961f\u5934\u7684\u4efb\u52a1\u6216\u6d88\u606f\u6267\u884c\u3002\u6bcf\u4e2ahandler\u4e5f\u548c\u7ebf\u7a0b\u5173\u8054\uff0cHandler\u8d1f\u8d23\u628aMessage\u548cRunable\r\n\u5bf9\u8c61\u4f20\u9012\u7ed9MessageQueue\uff08\u7528\u5230post\uff0csendMessage\u7b49\u65b9\u6cd5\uff09\uff0c\u800c\u4e14\u5728\u8fd9\u4e9b\u5bf9\u8c61\u79bb\u5f00MessageQueue\u65f6\uff0cHandler\u8d1f\u8d23\u6267\u884c\u4ed6\u4eec\uff08\u7528\u5230handleMessage\u65b9\u6cd5\uff09\u3002\r\n\u5176\u4e2dMessage\u7c7b\u5c31\u662f\u5b9a\u4e49\u4e86\u4e00\u4e2a\u4fe1\u606f\uff0c\u8fd9\u4e2a\u4fe1\u606f\u4e2d\u5305\u542b\u4e00\u4e2a\u63cf\u8ff0\u7b26\u548c\u4efb\u610f\u7684\u6570\u636e\u5bf9\u8c61\uff0c\u8fd9\u4e2a\u4fe1\u606f\u88ab\u7528\u6765\u4f20\u9012\u7ed9Handler.Message\u5bf9\u8c61\r\n"},{"ID":"1047","typeID":"11","question":"\u8bf7\u89e3\u91ca\u4e0b\u5728\u5355\u7ebf\u7a0b\u6a21\u578b\u4e2dMessage\u3001Handler\u3001Message Queue\u3001Looper\u4e4b\u95f4\u7684\u5173\u7cfb","answer":"\u7b80\u5355\u7684\u8bf4\uff0cHandler\u83b7\u53d6\u5f53\u524d\u7ebf\u7a0b\u4e2d\u7684looper\u5bf9\u8c61\uff0clooper\u7528\u6765\u4ece\u5b58\u653eMessage\u7684MessageQueue\u4e2d\u53d6\u51faMessage\uff0c\u518d\u6709Handler\u8fdb\u884cMessage\u7684\u5206\u53d1\u548c\u5904\u7406.\r\nMessage Queue(\u6d88\u606f\u961f\u5217)\uff1a\u7528\u6765\u5b58\u653e\r\nHandler\u53d1\u5e03\u7684\u6d88\u606f\uff0c\u901a\u5e38\u9644\u5c5e\u4e8e\u67d0\u4e00\u4e2a\u521b\u5efa\u5b83\u7684\u7ebf\u7a0b\uff0c\u53ef\u4ee5\u901a\u8fc7Looper.myQueue()\u5f97\u5230\u5f53\u524d\u7ebf\u7a0b\u7684\u6d88\u606f\u961f\u5217\r\nHandler\uff1a\u53ef\u4ee5\u53d1\u5e03\u6216\u8005\u5904\u7406\u4e00\u4e2a\u6d88\u606f\u6216\u8005\u64cd\u4f5c\u4e00\u4e2aRunnable\uff0c\u901a\u8fc7Handler\u53d1\u5e03\u6d88\u606f\uff0c\u6d88\u606f\u5c06\u53ea\u4f1a\u53d1\u9001\u5230\u4e0e\u5b83\u5173\u8054\u7684\u6d88\u606f\u961f\u5217\uff0c\u7136\u4e5f\u53ea\u80fd\u5904\u7406\u8be5\u6d88\u606f\u961f\u5217\u4e2d\u7684\u6d88\u606f\r\nLooper\uff1a\u662fHandler\u548c\u6d88\u606f\u961f\u5217\u4e4b\u95f4\u901a\u8baf\u6865\u6881\uff0c\u7a0b\u5e8f\u7ec4\u4ef6\u9996\u5148\u901a\u8fc7Handler\u628a\u6d88\u606f\u4f20\u9012\u7ed9Looper\uff0cLooper\u628a\u6d88\u606f\u653e\u5165\u961f\u5217\u3002Looper\u4e5f\u628a\u6d88\u606f\u961f\u5217\u91cc\u7684\u6d88\u606f\u5e7f\u64ad\u7ed9\u6240\u6709\u7684\r\nHandler\uff1aHandler\u63a5\u53d7\u5230\u6d88\u606f\u540e\u8c03\u7528handleMessage\u8fdb\u884c\u5904\u7406\r\nMessage\uff1a\u6d88\u606f\u7684\u7c7b\u578b\uff0c\u5728Handler\u7c7b\u4e2d\u7684handleMessage\u65b9\u6cd5\u4e2d\u5f97\u5230\u5355\u4e2a\u7684\u6d88\u606f\u8fdb\u884c\u5904\u7406\r\n\u5728\u5355\u7ebf\u7a0b\u6a21\u578b\u4e0b\uff0c\u4e3a\u4e86\u7ebf\u7a0b\u901a\u4fe1\u95ee\u9898\uff0cAndroid\u8bbe\u8ba1\u4e86\u4e00\u4e2aMessage Queue(\u6d88\u606f\u961f\u5217)\uff0c \u7ebf\u7a0b\u95f4\u53ef\u4ee5\u901a\u8fc7\u8be5Message Queue\u5e76\u7ed3\u5408Handler\u548cLooper\u7ec4\u4ef6\u8fdb\u884c\u4fe1\u606f\u4ea4\u6362\u3002\u4e0b\u9762\u5c06\u5bf9\u5b83\u4eec\u8fdb\u884c\u5206\u522b\u4ecb\u7ecd\uff1a\r\n1\uff09 Message \r\n Message\u6d88\u606f\uff0c\u7406\u89e3\u4e3a\u7ebf\u7a0b\u95f4\u4ea4\u6d41\u7684\u4fe1\u606f\uff0c\u5904\u7406\u6570\u636e\u540e\u53f0\u7ebf\u7a0b\u9700\u8981\u66f4\u65b0UI\uff0c\u5219\u53d1\u9001Message\u5185\u542b\u4e00\u4e9b\u6570\u636e\u7ed9UI\u7ebf\u7a0b\u3002\r\n2\uff09 Handler \r\n Handler\u5904\u7406\u8005\uff0c\u662fMessage\u7684\u4e3b\u8981\u5904\u7406\u8005\uff0c\u8d1f\u8d23Message\u7684\u53d1\u9001\uff0cMessage\u5185\u5bb9\u7684\u6267\u884c\u5904\u7406\u3002\u540e\u53f0\u7ebf\u7a0b\u5c31\u662f\u901a\u8fc7\u4f20\u8fdb\u6765\u7684 Handler\u5bf9\u8c61\u5f15\u7528\u6765sendMessage(Message)\u3002\u800c\u4f7f\u7528Handler\uff0c\u9700\u8981implement \u8be5\u7c7b\u7684 handleMessage(Message)\u65b9\u6cd5\uff0c\u5b83\u662f\u5904\u7406\u8fd9\u4e9bMessage\u7684\u64cd\u4f5c\u5185\u5bb9\uff0c\u4f8b\u5982Update UI\u3002\u901a\u5e38\u9700\u8981\u5b50\u7c7b\u5316Handler\u6765\u5b9e\u73b0handleMessage\u65b9\u6cd5\u3002\r\n3\uff09 Message Queue \r\n Message Queue\u6d88\u606f\u961f\u5217\uff0c\u7528\u6765\u5b58\u653e\u901a\u8fc7Handler\u53d1\u5e03\u7684\u6d88\u606f\uff0c\u6309\u7167\u5148\u8fdb\u5148\u51fa\u6267\u884c\u3002\r\n \u6bcf\u4e2amessage queue\u90fd\u4f1a\u6709\u4e00\u4e2a\u5bf9\u5e94\u7684Handler\u3002Handler\u4f1a\u5411message queue\u901a\u8fc7\u4e24\u79cd\u65b9\u6cd5\u53d1\u9001\u6d88\u606f\uff1asendMessage\u6216post\u3002\u8fd9\u4e24\u79cd\u6d88\u606f\u90fd\u4f1a\u63d2\u5728message queue\u961f\u5c3e\u5e76\u6309\u5148\u8fdb\u5148\u51fa\u6267\u884c\u3002\u4f46\u901a\u8fc7\u8fd9\u4e24\u79cd\u65b9\u6cd5\u53d1\u9001\u7684\u6d88\u606f\u6267\u884c\u7684\u65b9\u5f0f\u7565\u6709\u4e0d\u540c\uff1a\u901a\u8fc7sendMessage\u53d1\u9001\u7684\u662f\u4e00\u4e2amessage\u5bf9\u8c61,\u4f1a\u88ab Handler\u7684handleMessage()\u51fd\u6570\u5904\u7406\uff1b\u800c\u901a\u8fc7post\u65b9\u6cd5\u53d1\u9001\u7684\u662f\u4e00\u4e2arunnable\u5bf9\u8c61\uff0c\u5219\u4f1a\u81ea\u5df1\u6267\u884c\u3002\r\n4\uff09 Looper \r\n Looper\u662f\u6bcf\u6761\u7ebf\u7a0b\u91cc\u7684Message Queue\u7684\u7ba1\u5bb6\u3002Android\u6ca1\u6709Global\u7684Message Queue\uff0c\u800cAndroid\u4f1a\u81ea\u52a8\u66ff\u4e3b\u7ebf\u7a0b(UI\u7ebf\u7a0b)\u5efa\u7acbMessage Queue\uff0c\u4f46\u5728\u5b50\u7ebf\u7a0b\u91cc\u5e76\u6ca1\u6709\u5efa\u7acbMessage Queue\u3002\u6240\u4ee5\u8c03\u7528Looper.getMainLooper()\u5f97\u5230\u7684\u4e3b\u7ebf\u7a0b\u7684Looper\u4e0d\u4e3aNULL\uff0c\u4f46\u8c03\u7528Looper.myLooper() \u5f97\u5230\u5f53\u524d\u7ebf\u7a0b\u7684Looper\u5c31\u6709\u53ef\u80fd\u4e3aNULL\u3002\u5bf9\u4e8e\u5b50\u7ebf\u7a0b\u4f7f\u7528Looper\uff0cAPI Doc\u63d0\u4f9b\u4e86\u6b63\u786e\u7684\u4f7f\u7528\u65b9\u6cd5\uff1a\u8fd9\u4e2aMessage\u673a\u5236\u7684\u5927\u6982\u6d41\u7a0b\uff1a\r\n \u2460\u5728Looper.loop()\u65b9\u6cd5\u8fd0\u884c\u5f00\u59cb\u540e\uff0c\u5faa\u73af\u5730\u6309\u7167\u63a5\u6536\u987a\u5e8f\u53d6\u51faMessage Queue\u91cc\u9762\u7684\u975eNULL\u7684Message\u3002\r\n\u2461 \u4e00\u5f00\u59cbMessage Queue\u91cc\u9762\u7684Message\u90fd\u662fNULL\u7684\u3002\u5f53Handler.sendMessage(Message)\u5230Message Queue\uff0c\u8be5\u51fd\u6570\u91cc\u9762\u8bbe\u7f6e\u4e86\u90a3\u4e2aMessage\u5bf9\u8c61\u7684target\u5c5e\u6027\u662f\u5f53\u524d\u7684Handler\u5bf9\u8c61\u3002\u968f\u540eLooper\u53d6\u51fa\u4e86\u90a3\u4e2aMessage\uff0c\u5219\u8c03\u7528 \u8be5Message\u7684target\u6307\u5411\u7684Hander\u7684dispatchMessage\u51fd\u6570\u5bf9Message\u8fdb\u884c\u5904\u7406\u3002\u5728dispatchMessage\u65b9\u6cd5\u91cc\uff0c\u5982\u4f55\u5904\u7406Message\u5219\u7531\u7528\u6237\u6307\u5b9a\uff0c\u4e09\u4e2a\u5224\u65ad\uff0c\u4f18\u5148\u7ea7\u4ece\u9ad8\u5230\u4f4e\uff1a\r\na)\tMessage\u91cc\u9762\u7684Callback\uff0c\u4e00\u4e2a\u5b9e\u73b0\u4e86Runnable\u63a5\u53e3\u7684\u5bf9\u8c61\uff0c\u5176\u4e2drun\u51fd\u6570\u505a\u5904\u7406\u5de5\u4f5c\uff1b\r\nb)\tHandler\u91cc\u9762\u7684mCallback\u6307\u5411\u7684\u4e00\u4e2a\u5b9e\u73b0\u4e86Callback\u63a5\u53e3\u7684\u5bf9\u8c61\uff0c\u7531\u5176handleMessage\u8fdb\u884c\u5904\u7406\uff1b\r\nc)\t\u5904\u7406\u6d88\u606fHandler\u5bf9\u8c61\u5bf9\u5e94\u7684\u7c7b\u7ee7\u627f\u5e76\u5b9e\u73b0\u4e86\u5176\u4e2dhandleMessage\u51fd\u6570\uff0c\u901a\u8fc7\u8fd9\u4e2a\u5b9e\u73b0\u7684handleMessage\u51fd\u6570\u5904\u7406\u6d88\u606f\u3002\r\n \u7531\u6b64\u53ef\u89c1\uff0c\u6211\u4eec\u5b9e\u73b0\u7684handleMessage\u65b9\u6cd5\u662f\u4f18\u5148\u7ea7\u6700\u4f4e\u7684\uff01\r\n \u2462 Handler\u5904\u7406\u5b8c\u8be5Message (update UI) \u540e\uff0cLooper\u5219\u8bbe\u7f6e\u8be5Message\u4e3aNULL\uff0c\u4ee5\u4fbf\u56de\u6536\uff01\r\n \u5728\u7f51\u4e0a\u6709\u5f88\u591a\u6587\u7ae0\u8bb2\u8ff0\u4e3b\u7ebf\u7a0b\u548c\u5176\u4ed6\u5b50\u7ebf\u7a0b\u5982\u4f55\u4ea4\u4e92\uff0c\u4f20\u9001\u4fe1\u606f\uff0c\u6700\u7ec8\u8c01\u6765\u6267\u884c\u5904\u7406\u4fe1\u606f\u4e4b\u7c7b\u7684\uff0c\u4e2a\u4eba\u7406\u89e3\u662f\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u2014\u2014\u5224\u65adHandler\u5bf9\u8c61\u91cc\u9762\u7684Looper\u5bf9\u8c61\u662f\u5c5e\u4e8e\u54ea\u6761\u7ebf\u7a0b\u7684\uff0c\u5219\u7531\u8be5\u7ebf\u7a0b\u6765\u6267\u884c\uff01 \r\n\u2460\u5f53Handler\u5bf9\u8c61\u7684\u6784\u9020\u51fd\u6570\u7684\u53c2\u6570\u4e3a\u7a7a\uff0c\u5219\u4e3a\u5f53\u524d\u6240\u5728\u7ebf\u7a0b\u7684Looper\uff1b \r\n\u2461Looper.getMainLooper()\u5f97\u5230\u7684\u662f\u4e3b\u7ebf\u7a0b\u7684Looper\u5bf9\u8c61\uff0cLooper.myLooper()\u5f97\u5230\u7684\u662f\u5f53\u524d\u7ebf\u7a0b\u7684Looper\u5bf9\u8c61\u3002\r\n"},{"ID":"1046","typeID":"11","question":"\u5982\u4f55\u542f\u7528Service\uff0c\u5982\u4f55\u505c\u7528Service?","answer":"\u670d\u52a1\u7684\u5f00\u53d1\u6bd4\u8f83\u7b80\u5355\uff0c\u5982\u4e0b\uff1a\r\n\u7b2c\u4e00\u6b65\uff1a\u7ee7\u627fService\u7c7b\r\npublic class SMSService extends Service {}\r\n\u7b2c\u4e8c\u6b65\uff1a\u5728AndroidManifest.xml\u6587\u4ef6\u4e2d\u7684<application>\u8282\u70b9\u91cc\u5bf9\u670d\u52a1\u8fdb\u884c\u914d\u7f6e:<service android:name=\".SMSService\" \/>\r\n\u670d\u52a1\u4e0d\u80fd\u81ea\u5df1\u8fd0\u884c\uff0c\u9700\u8981\u901a\u8fc7\u8c03\u7528Context.startService()\u6216Context.bindService()\u65b9\u6cd5\u542f\u52a8\u670d\u52a1\u3002\u8fd9\u4e24\u4e2a\u65b9\u6cd5\u90fd\u53ef\u4ee5\u542f\u52a8Service\uff0c\u4f46\u662f\u5b83\u4eec\u7684\u4f7f\u7528\u573a\u5408\u6709\u6240\u4e0d\u540c\u3002\u4f7f\u7528startService()\u65b9\u6cd5\u542f\u7528\u670d\u52a1\uff0c\u8c03\u7528\u8005\u4e0e\u670d\u52a1\u4e4b\u95f4\u6ca1\u6709\u5173\u8fde\uff0c\u5373\u4f7f\u8c03\u7528\u8005\u9000\u51fa\u4e86\uff0c\u670d\u52a1\u4ecd\u7136\u8fd0\u884c\u3002\u4f7f\u7528bindService()\u65b9\u6cd5\u542f\u7528\u670d\u52a1\uff0c\u8c03\u7528\u8005\u4e0e\u670d\u52a1\u7ed1\u5b9a\u5728\u4e86\u4e00\u8d77\uff0c\u8c03\u7528\u8005\u4e00\u65e6\u9000\u51fa\uff0c\u670d\u52a1\u4e5f\u5c31\u7ec8\u6b62\uff0c\u5927\u6709\u201c\u4e0d\u6c42\u540c\u65f6\u751f\uff0c\u5fc5\u987b\u540c\u65f6\u6b7b\u201d\u7684\u7279\u70b9\u3002\r\n\u5982\u679c\u6253\u7b97\u91c7\u7528Context.startService()\u65b9\u6cd5\u542f\u52a8\u670d\u52a1\uff0c\u5728\u670d\u52a1\u672a\u88ab\u521b\u5efa\u65f6\uff0c\u7cfb\u7edf\u4f1a\u5148\u8c03\u7528\u670d\u52a1\u7684onCreate()\u65b9\u6cd5\uff0c\u63a5\u7740\u8c03\u7528onStart()\u65b9\u6cd5\u3002\u5982\u679c\u8c03\u7528startService()\u65b9\u6cd5\u524d\u670d\u52a1\u5df2\u7ecf\u88ab\u521b\u5efa\uff0c\u591a\u6b21\u8c03\u7528startService()\u65b9\u6cd5\u5e76\u4e0d\u4f1a\u5bfc\u81f4\u591a\u6b21\u521b\u5efa\u670d\u52a1\uff0c\u4f46\u4f1a\u5bfc\u81f4\u591a\u6b21\u8c03\u7528onStart()\u65b9\u6cd5\u3002\u91c7\u7528startService()\u65b9\u6cd5\u542f\u52a8\u7684\u670d\u52a1\uff0c\u53ea\u80fd\u8c03\u7528Context.stopService()\u65b9\u6cd5\u7ed3\u675f\u670d\u52a1\uff0c\u670d\u52a1\u7ed3\u675f\u65f6\u4f1a\u8c03\u7528onDestroy()\u65b9\u6cd5\u3002\r\n\u5982\u679c\u6253\u7b97\u91c7\u7528Context.bindService()\u65b9\u6cd5\u542f\u52a8\u670d\u52a1\uff0c\u5728\u670d\u52a1\u672a\u88ab\u521b\u5efa\u65f6\uff0c\u7cfb\u7edf\u4f1a\u5148\u8c03\u7528\u670d\u52a1\u7684onCreate()\u65b9\u6cd5\uff0c\u63a5\u7740\u8c03\u7528onBind()\u65b9\u6cd5\u3002\u8fd9\u4e2a\u65f6\u5019\u8c03\u7528\u8005\u548c\u670d\u52a1\u7ed1\u5b9a\u5728\u4e00\u8d77\uff0c\u8c03\u7528\u8005\u9000\u51fa\u4e86\uff0c\u7cfb\u7edf\u5c31\u4f1a\u5148\u8c03\u7528\u670d\u52a1\u7684onUnbind()\u65b9\u6cd5\uff0c\u63a5\u7740\u8c03\u7528onDestroy()\u65b9\u6cd5\u3002\u5982\u679c\u8c03\u7528bindService()\u65b9\u6cd5\u524d\u670d\u52a1\u5df2\u7ecf\u88ab\u7ed1\u5b9a\uff0c\u591a\u6b21\u8c03\u7528bindService()\u65b9\u6cd5\u5e76\u4e0d\u4f1a\u5bfc\u81f4\u591a\u6b21\u521b\u5efa\u670d\u52a1\u53ca\u7ed1\u5b9a(\u4e5f\u5c31\u662f\u8bf4onCreate()\u548conBind()\u65b9\u6cd5\u5e76\u4e0d\u4f1a\u88ab\u591a\u6b21\u8c03\u7528)\u3002\u5982\u679c\u8c03\u7528\u8005\u5e0c\u671b\u4e0e\u6b63\u5728\u7ed1\u5b9a\u7684\u670d\u52a1\u89e3\u9664\u7ed1\u5b9a\uff0c\u53ef\u4ee5\u8c03\u7528unbindService()\u65b9\u6cd5\uff0c\u8c03\u7528\u8be5\u65b9\u6cd5\u4e5f\u4f1a\u5bfc\u81f4\u7cfb\u7edf\u8c03\u7528\u670d\u52a1\u7684onUnbind()-->onDestroy()\u65b9\u6cd5\u3002\r\n\u670d\u52a1\u5e38\u7528\u751f\u547d\u5468\u671f\u56de\u8c03\u65b9\u6cd5\u5982\u4e0b\uff1a \r\nonCreate() \u8be5\u65b9\u6cd5\u5728\u670d\u52a1\u88ab\u521b\u5efa\u65f6\u8c03\u7528\uff0c\u8be5\u65b9\u6cd5\u53ea\u4f1a\u88ab\u8c03\u7528\u4e00\u6b21\uff0c\u65e0\u8bba\u8c03\u7528\u591a\u5c11\u6b21startService()\u6216bindService()\u65b9\u6cd5\uff0c\u670d\u52a1\u4e5f\u53ea\u88ab\u521b\u5efa\u4e00\u6b21\u3002\r\nonDestroy()\u8be5\u65b9\u6cd5\u5728\u670d\u52a1\u88ab\u7ec8\u6b62\u65f6\u8c03\u7528\u3002\r\n\u4e0e\u91c7\u7528Context.startService()\u65b9\u6cd5\u542f\u52a8\u670d\u52a1\u6709\u5173\u7684\u751f\u547d\u5468\u671f\u65b9\u6cd5\r\nonStart() \u53ea\u6709\u91c7\u7528Context.startService()\u65b9\u6cd5\u542f\u52a8\u670d\u52a1\u65f6\u624d\u4f1a\u56de\u8c03\u8be5\u65b9\u6cd5\u3002\u8be5\u65b9\u6cd5\u5728\u670d\u52a1\u5f00\u59cb\u8fd0\u884c\u65f6\u88ab\u8c03\u7528\u3002\u591a\u6b21\u8c03\u7528startService()\u65b9\u6cd5\u5c3d\u7ba1\u4e0d\u4f1a\u591a\u6b21\u521b\u5efa\u670d\u52a1\uff0c\u4f46onStart() \u65b9\u6cd5\u4f1a\u88ab\u591a\u6b21\u8c03\u7528\u3002\r\n\u4e0e\u91c7\u7528Context.bindService()\u65b9\u6cd5\u542f\u52a8\u670d\u52a1\u6709\u5173\u7684\u751f\u547d\u5468\u671f\u65b9\u6cd5\r\nonBind()\u53ea\u6709\u91c7\u7528Context.bindService()\u65b9\u6cd5\u542f\u52a8\u670d\u52a1\u65f6\u624d\u4f1a\u56de\u8c03\u8be5\u65b9\u6cd5\u3002\u8be5\u65b9\u6cd5\u5728\u8c03\u7528\u8005\u4e0e\u670d\u52a1\u7ed1\u5b9a\u65f6\u88ab\u8c03\u7528\uff0c\u5f53\u8c03\u7528\u8005\u4e0e\u670d\u52a1\u5df2\u7ecf\u7ed1\u5b9a\uff0c\u591a\u6b21\u8c03\u7528Context.bindService()\u65b9\u6cd5\u5e76\u4e0d\u4f1a\u5bfc\u81f4\u8be5\u65b9\u6cd5\u88ab\u591a\u6b21\u8c03\u7528\u3002\r\nonUnbind()\u53ea\u6709\u91c7\u7528Context.bindService()\u65b9\u6cd5\u542f\u52a8\u670d\u52a1\u65f6\u624d\u4f1a\u56de\u8c03\u8be5\u65b9\u6cd5\u3002\u8be5\u65b9\u6cd5\u5728\u8c03\u7528\u8005\u4e0e\u670d\u52a1\u89e3\u9664\u7ed1\u5b9a\u65f6\u88ab\u8c03\u7528\r\n"},{"ID":"1045","typeID":"11","question":"activity\u7684\u542f\u52a8\u6a21\u5f0f\u6709\u54ea\u4e9b\uff1f\u662f\u4ec0\u4e48\u542b\u4e49","answer":"\u5728android\u91cc\uff0c\u67094\u79cdactivity\u7684\u542f\u52a8\u6a21\u5f0f\uff0c\u5206\u522b\u4e3a\uff1a \r\n\u201cstandard\u201d (\u9ed8\u8ba4) \r\n\u201csingleTop\u201d \r\n\u201csingleTask\u201d \r\n\u201csingleInstance\u201d\r\n\u5b83\u4eec\u4e3b\u8981\u6709\u5982\u4e0b\u4e0d\u540c\uff1a\r\n1)\u5982\u4f55\u51b3\u5b9a\u6240\u5c5etask \r\n\u201cstandard\u201d\u548c\u201dsingleTop\u201d\u7684activity\u7684\u76ee\u6807task\uff0c\u548c\u6536\u5230\u7684Intent\u7684\u53d1\u9001\u8005\u5728\u540c\u4e00\u4e2atask\u5185\uff0c\u9664\u975eintent\u5305\u62ec\u53c2\u6570FLAG_ACTIVITY_NEW_TASK\u3002 \r\n\u5982\u679c\u63d0\u4f9b\u4e86FLAG_ACTIVITY_NEW_TASK\u53c2\u6570\uff0c\u4f1a\u542f\u52a8\u5230\u522b\u7684task\u91cc\u3002 \r\n\u201csingleTask\u201d\u548c\u201dsingleInstance\u201d\u603b\u662f\u628aactivity\u4f5c\u4e3a\u4e00\u4e2atask\u7684\u6839\u5143\u7d20\uff0c\u4ed6\u4eec\u4e0d\u4f1a\u88ab\u542f\u52a8\u5230\u4e00\u4e2a\u5176\u4ed6task\u91cc\u3002\r\n2)\u662f\u5426\u5141\u8bb8\u591a\u4e2a\u5b9e\u4f8b \r\n\u201cstandard\u201d\u548c\u201dsingleTop\u201d\u53ef\u4ee5\u88ab\u5b9e\u4f8b\u5316\u591a\u6b21\uff0c\u5e76\u4e14\u5b58\u5728\u4e8e\u4e0d\u540c\u7684task\u4e2d\uff0c\u4e14\u4e00\u4e2atask\u53ef\u4ee5\u5305\u62ec\u4e00\u4e2aactivity\u7684\u591a\u4e2a\u5b9e\u4f8b\uff1b \r\n\u201csingleTask\u201d\u548c\u201dsingleInstance\u201d\u5219\u9650\u5236\u53ea\u751f\u6210\u4e00\u4e2a\u5b9e\u4f8b\uff0c\u5e76\u4e14\u662ftask\u7684\u6839\u5143\u7d20\u3002 singleTop\u8981\u6c42\u5982\u679c\u521b\u5efaintent\u7684\u65f6\u5019\u6808\u9876\u5df2\u7ecf\u6709\u8981\u521b\u5efa \u7684Activity\u7684\u5b9e\u4f8b\uff0c\u5219\u5c06intent\u53d1\u9001\u7ed9\u8be5\u5b9e\u4f8b\uff0c\u800c\u4e0d\u53d1\u9001\u7ed9\u65b0\u7684\u5b9e\u4f8b\u3002\r\n3)\u662f\u5426\u5141\u8bb8\u5176\u5b83activity\u5b58\u5728\u4e8e\u672ctask\u5185 \r\n\u201csingleInstance\u201d\u72ec\u5360\u4e00\u4e2atask\uff0c\u5176\u5b83activity\u4e0d\u80fd\u5b58\u5728\u90a3\u4e2atask\u91cc\uff1b\u5982\u679c\u5b83\u542f\u52a8\u4e86\u4e00\u4e2a\u65b0\u7684activity\uff0c\u4e0d\u7ba1\u65b0\u7684activity\u7684launch mode \u5982\u4f55\uff0c\u65b0\u7684activity\u90fd\u5c06\u4f1a\u5230\u522b\u7684task\u91cc\u8fd0\u884c\uff08\u5982\u540c\u52a0\u4e86FLAG_ACTIVITY_NEW_TASK\u53c2\u6570\uff09\u3002 \r\n\u800c\u53e6\u5916\u4e09\u79cd\u6a21\u5f0f\uff0c\u5219\u53ef\u4ee5\u548c\u5176\u5b83activity\u5171\u5b58\u3002\r\n4)\u662f\u5426\u6bcf\u6b21\u90fd\u751f\u6210\u65b0\u5b9e\u4f8b \r\n\u201cstandard\u201d\u5bf9\u4e8e\u6ca1\u4e00\u4e2a\u542f\u52a8Intent\u90fd\u4f1a\u751f\u6210\u4e00\u4e2aactivity\u7684\u65b0\u5b9e\u4f8b\uff1b \r\n\u201csingleTop\u201d\u7684activity\u5982\u679c\u5728task\u7684\u6808\u9876\u7684\u8bdd\uff0c\u5219\u4e0d\u751f\u6210\u65b0\u7684\u8be5activity\u7684\u5b9e\u4f8b\uff0c\u76f4\u63a5\u4f7f\u7528\u6808\u9876\u7684\u5b9e\u4f8b\uff0c\u5426\u5219\uff0c\u751f\u6210\u8be5activity\u7684\u5b9e\u4f8b\u3002 \r\n\u6bd4\u5982\u73b0\u5728task\u6808\u5143\u7d20\u4e3aA-B-C-D\uff08D\u5728\u6808\u9876\uff09\uff0c\u8fd9\u65f6\u5019\u7ed9D\u53d1\u4e00\u4e2a\u542f\u52a8intent\uff0c\u5982\u679cD\u662f \u201cstandard\u201d\u7684\uff0c\u5219\u751f\u6210D\u7684\u4e00\u4e2a\u65b0\u5b9e\u4f8b\uff0c\u6808\u53d8\u4e3aA\uff0dB\uff0dC\uff0dD\uff0dD\u3002 \r\n\u5982\u679cD\u662fsingleTop\u7684\u8bdd\uff0c\u5219\u4e0d\u4f1a\u751f\u4ea7D\u7684\u65b0\u5b9e\u4f8b\uff0c\u6808\u72b6\u6001\u4ecd\u4e3aA-B-C-D \r\n\u5982\u679c\u8fd9\u65f6\u5019\u7ed9B\u53d1Intent\u7684\u8bdd\uff0c\u4e0d\u7ba1B\u7684launchmode\u662f\u201dstandard\u201d \u8fd8\u662f \u201csingleTop\u201d \uff0c\u90fd\u4f1a\u751f\u6210B\u7684\u65b0\u5b9e\u4f8b\uff0c\u6808\u72b6\u6001\u53d8\u4e3aA-B-C-D-B\u3002\r\n\u201csingleInstance\u201d\u662f\u5176\u6240\u5728\u6808\u7684\u552f\u4e00activity\uff0c\u5b83\u4f1a\u6bcf\u6b21\u90fd\u88ab\u91cd\u7528\u3002\r\n\u201csingleTask\u201d\u5982\u679c\u5728\u6808\u9876\uff0c\u5219\u63a5\u53d7intent\uff0c\u5426\u5219\uff0c\u8be5intent\u4f1a\u88ab\u4e22\u5f03\uff0c\u4f46\u662f\u8be5task\u4ecd\u4f1a\u56de\u5230\u524d\u53f0\u3002\r\n\u5f53\u5df2\u7ecf\u5b58\u5728\u7684activity\u5b9e\u4f8b\u5904\u7406\u65b0\u7684intent\u65f6\u5019\uff0c\u4f1a\u8c03\u7528onNewIntent()\u65b9\u6cd5 \u5982\u679c\u6536\u5230intent\u751f\u6210\u4e00\u4e2aactivity\u5b9e\u4f8b\uff0c\u90a3\u4e48\u7528\u6237\u53ef\u4ee5\u901a\u8fc7back\u952e\u56de\u5230\u4e0a\u4e00\u4e2a\u72b6\u6001\uff1b\u5982\u679c\u662f\u5df2\u7ecf\u5b58\u5728\u7684\u4e00\u4e2aactivity\u6765\u5904\u7406\u8fd9\u4e2aintent\u7684\u8bdd\uff0c\u7528\u6237\u4e0d\u80fd\u901a\u8fc7\u6309back\u952e\u8fd4\u56de\u5230\u8fd9\u4e4b\u524d\u7684\u72b6\u6001\u3002\r\n"},{"ID":"1044","typeID":"11","question":"android\u4e2d\u7684\u52a8\u753b\u6709\u54ea\u51e0\u7c7b\uff0c\u5b83\u4eec\u7684\u7279\u70b9\u548c\u533a\u522b\u662f\u4ec0\u4e48 ","answer":"\u4e24\u79cd\uff0c\u4e00\u79cd\u662fTween\u52a8\u753b\u3001\u8fd8\u6709\u4e00\u79cd\u662fFrame\u52a8\u753b\u3002Tween\u52a8\u753b\uff0c\u8fd9\u79cd\u5b9e\u73b0\u65b9\u5f0f\u53ef\u4ee5\u4f7f\u89c6\u56fe\u7ec4\u4ef6\u79fb\u52a8\u3001\u653e\u5927\u3001\u7f29\u5c0f\u4ee5\u53ca\u4ea7\u751f\u900f\u660e\u5ea6\u7684\u53d8\u5316;\u53e6\u4e00\u79cdFrame\u52a8\u753b\uff0c\u4f20\u7edf\u7684\u52a8\u753b\u65b9\u6cd5\uff0c\u901a\u8fc7\u987a\u5e8f\u7684\u64ad\u653e\u6392\u5217\u597d\u7684\u56fe\u7247\u6765\u5b9e\u73b0\uff0c\u7c7b\u4f3c\u7535\u5f71\u3002"},{"ID":"1043","typeID":"11","question":"\u8bf7\u4ecb\u7ecd\u4e0bAndroid\u4e2d\u5e38\u7528\u7684\u4e94\u79cd\u5e03\u5c40","answer":"\u5e38\u7528\u4e94\u79cd\u5e03\u5c40\u65b9\u5f0f\uff0c\u5206\u522b\u662f\uff1aFrameLayout\uff08\u6846\u67b6\u5e03\u5c40\uff09\uff0cLinearLayout \uff08\u7ebf\u6027\u5e03\u5c40\uff09\uff0cAbsoluteLayout\uff08\u7edd\u5bf9\u5e03\u5c40\uff09\uff0cRelativeLayout\uff08\u76f8\u5bf9\u5e03\u5c40\uff09\uff0cTableLayout\uff08\u8868\u683c\u5e03\u5c40\uff09\u3002\r\n1)FrameLayout\uff1a\u6240\u6709\u4e1c\u897f\u4f9d\u6b21\u90fd\u653e\u5728\u5de6\u4e0a\u89d2\uff0c\u4f1a\u91cd\u53e0\uff0c\u8fd9\u4e2a\u5e03\u5c40\u6bd4\u8f83\u7b80\u5355\uff0c\u4e5f\u53ea\u80fd\u653e\u4e00\u70b9\u6bd4\u8f83\u7b80\u5355\u7684\u4e1c\u897f\u30022)LinearLayout\uff1a\u7ebf\u6027\u5e03\u5c40\uff0c\u6bcf\u4e00\u4e2aLinearLayout\u91cc\u9762\u53c8\u53ef\u5206\u4e3a\u5782\u76f4\u5e03\u5c40\uff08android:orientation=\"vertical\"\uff09\u548c\u6c34\u5e73\u5e03\u5c40\uff08android:orientation=\"horizontal\" \uff09\u3002\u5f53\u5782\u76f4\u5e03\u5c40\u65f6\uff0c\u6bcf\u4e00\u884c\u5c31\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\uff0c\u591a\u4e2a\u5143\u7d20\u4f9d\u6b21\u5782\u76f4\u5f80\u4e0b\uff1b\u6c34\u5e73\u5e03\u5c40\u65f6\uff0c\u53ea\u6709\u4e00\u884c\uff0c\u6bcf\u4e00\u4e2a\u5143\u7d20\u4f9d\u6b21\u5411\u53f3\u6392\u5217\u3002\r\n3)AbsoluteLayout\uff1a\u7edd\u5bf9\u5e03\u5c40\u7528X,Y\u5750\u6807\u6765\u6307\u5b9a\u5143\u7d20\u7684\u4f4d\u7f6e\uff0c\u8fd9\u79cd\u5e03\u5c40\u65b9\u5f0f\u4e5f\u6bd4\u8f83\u7b80\u5355\uff0c\u4f46\u662f\u5728\u5c4f\u5e55\u65cb\u8f6c\u65f6\uff0c\u5f80\u5f80\u4f1a\u51fa\u95ee\u9898\uff0c\u800c\u4e14\u591a\u4e2a\u5143\u7d20\u7684\u65f6\u5019\uff0c\u8ba1\u7b97\u6bd4\u8f83\u9ebb\u70e6\u3002\r\n4)RelativeLayout\uff1a\u76f8\u5bf9\u5e03\u5c40\u53ef\u4ee5\u7406\u89e3\u4e3a\u67d0\u4e00\u4e2a\u5143\u7d20\u4e3a\u53c2\u7167\u7269\uff0c\u6765\u5b9a\u4f4d\u7684\u5e03\u5c40\u65b9\u5f0f\u3002\u4e3b\u8981\u5c5e\u6027\u6709\uff1a\u76f8\u5bf9\u4e8e\u67d0\u4e00\u4e2a\u5143\u7d20android:layout_below\u3001 android:layout_toLeftOf\u76f8\u5bf9\u4e8e\u7236\u5143\u7d20\u7684\u5730\u65b9android:layout_alignParentLeft\u3001android:layout_alignParentRigh;\r\n5)TableLayout\uff1a\u8868\u683c\u5e03\u5c40\uff0c\u6bcf\u4e00\u4e2aTableLayout\u91cc\u9762\u6709\u8868\u683c\u884cTableRow\uff0cTableRow\u91cc\u9762\u53ef\u4ee5\u5177\u4f53\u5b9a\u4e49\u6bcf\u4e00\u4e2a\u5143\u7d20\u3002\u6bcf\u4e00\u4e2a\u5e03\u5c40\u90fd\u6709\u81ea\u5df1\u9002\u5408\u7684\u65b9\u5f0f\uff0c\u8fd9\u4e94\u4e2a\u5e03\u5c40\u5143\u7d20\u53ef\u4ee5\u76f8\u4e92\u5d4c\u5957\u5e94\u7528\uff0c\u505a\u51fa\u7f8e\u89c2\u7684\u754c\u9762\u3002\r\n"},{"ID":"1042","typeID":"11","question":"\u5ba2\u6237\u7aef\u5982\u4f55\u5b9e\u73b0\u81ea\u52a8\u767b\u5f55\uff1f","answer":"\u901a\u8fc7SharedPreferences\u5b58\u50a8\u7528\u6237\u540d,\u5bc6\u7801,\u5f53\u5b58\u50a8\u4e0d\u4e3a\u7a7a\u65f6\u5b9e\u73b0\u81ea\u52a8\u767b\u5f55\u529f\u80fd\u3002"},{"ID":"1041","typeID":"11","question":"\u5b9e\u73b0\u624b\u98ce\u7434\u6548\u679c\uff1f","answer":"\u95ee\uff1a\u54ea\u4e2a\u7ec4\u4ef6\u53ef\u4ee5\u5b9e\u73b0\u624b\u98ce\u7434\u6548\u679c\uff0c\u7528\u6765\u5b9e\u73b0\u8bbe\u7f6e\u754c\u9762\u7684\u7c7b\uff0c\u5b9e\u73b0\u62bd\u5c49\u6548\u679c, \u60ac\u6d6e\u7a97\u53e3\uff1f\r\n\u7b54\uff1a\r\n\u5b9e\u73b0\u624b\u98ce\u7434\u6548\u679c\uff08ExpandableListView\uff09\r\n\u8bbe\u7f6e\u754c\u9762\u7684\u7c7b\uff08preferenceActivity\uff09\u4fdd\u5b58\u5230sharedpreference\u4e2d\r\n\u62bd\u5c49\u6548\u679c\uff08slidingDrawer\uff09\u7ec4\u4ef6\r\n\u60ac\u6d6e\u7a97\u53e3: PopWindow,\u53ef\u4ee5\u5b9e\u73b0\u7c7b\u4f3cDialog\u548c\u83dc\u5355\u7684\u6548\u679c\r\n"},{"ID":"1040","typeID":"11","question":"\u8c08\u8c08UI\u4e2d\uff0c Padding\u548cMargin\u6709\u4ec0\u4e48\u533a\u522b,gravity\u4e0elayout_gravity\u7684\u533a\u522b\uff1f","answer":"Padding \u7528\u6765\u6307\u5b9a\u7ec4\u4ef6\u5185\u7684\u5185\u5bb9\u8ddd\u79bb\u7ec4\u4ef6\u8fb9\u754c\u7684\u8ddd\u79bb;\r\nMargin \u7528\u6765\u6307\u5b9a\u63a7\u4ef6\u4e0e\u63a7\u4ef6\u4e4b\u95f4\u7684\u8ddd\u79bb\r\nGravity \u7528\u6765\u6307\u5b9a\u7ec4\u4ef6\u5185\u7684\u5185\u5bb9\u76f8\u5bf9\u4e8e\u7ec4\u4ef6\u672c\u8eab\u7684\u4f4d\u7f6e\r\nLayout_gravity \u7528\u6765\u6307\u5b9a\u7ec4\u4ef6\u76f8\u5bf9\u4e8e\u5176\u7236\u7ec4\u4ef6\u7684\u4f4d\u7f6e\r\n"},{"ID":"1039","typeID":"11","question":"\u5982\u4f55\u5c06\u4e00\u4e2aActivity\u8bbe\u7f6e\u6210\u7a97\u53e3\u7684\u6837\u5f0f\uff1f","answer":"\u5728\u6e05\u5355\u6587\u4ef6AndroidManifest.xml\u4e2d\u76f8\u5e94\u7684<activity>\u6807\u7b7e\u5185\u8bbe\u7f6e\u5c5e\u6027android:theme=\u201d@android:style\/Theme.Dialog\u201d"},{"ID":"1038","typeID":"11","question":"AndroidManifest.xml\u6e05\u5355\u6587\u4ef6\u6db5\u4e49\uff1f","answer":"\b\u95ee\uff1a\r\nAndroidManifest.xml\u6e05\u5355\u6587\u4ef6<Activity>\u6807\u7b7e\u4e2d\u5c5e\u6027\u7684\u542b\u4e49\r\nAndroidManifest.xml\u6e05\u5355\u6587\u4ef6<Activity>\u6807\u7b7e\u4e2d\u5c5e\u6027android:excludeFromRecents=\"true\" android:screenOrientation=\"portrait\" android:configChanges=\"orientation|locale\"\u7684\u542b\u4e49\r\n\u7b54:\r\n android:excludeFromRecents\u8868\u793a\u662f\u5426\u53ef\u88ab\u663e\u793a\u5728\u6700\u8fd1\u6253\u5f00\u7684activity\u5217\u8868\u91cc,true\u8868\u793a\u5426,false\u8868\u793a\u662f\r\nandroid:screenOrientation\u8868\u793aactivity\u663e\u793a\u7684\u6a21\u5f0f, \u4e00\u822c\u7528\u6765\u8bbe\u7f6eactivity\u6a2a\u5c4f\u663e\u793a(horizontal)\u6216\u7ad6\u5c4f\u663e\u793a(portrait)\r\nandroid:configChanges=[oneormoreof:\"mcc\"\"mnc\"\"locale\"\"touchscreen\"\"keyboard\"\"keyboardHidden\"\"navigation\"\"orientation\"\"fontScale\"]\r\n\u662f\u5f53\u6240\u6307\u5b9a\u5c5e\u6027(Configuration Changes)\u53d1\u751f\u6539\u53d8\u65f6\uff0c\u901a\u77e5\u7a0b\u5e8f\u8c03\u7528 onConfigurationChanged()\u51fd\u6570,\u6bd4\u5982orientation\u5c4f\u5e55\u65b9\u5411\u53d1\u751f\u6539\u53d8,locale\u8bed\u8a00\u73af\u5883\u53d1\u751f\u6539\u53d8\u65f6\r\n"},{"ID":"1037","typeID":"11","question":"\u5982\u4f55\u5b9e\u73b0\u4e00\u952e\u9000\u51fa","answer":"\u5b9a\u4e49\u4e00\u4e2a\u7c7b\u7ee7\u627fApplication\uff0c\u5b9a\u4e49\u4e00\u4e2a\u96c6\u5408\u5b58\u653e\u6240\u6709\u7684activity\uff0c \u5b9a\u4e49\u4e00\u4e2a\u6dfb\u52a0\u7684\u65b9\u6cd5\uff0c\u518d\u5199\u4e00\u4e2a\u9000\u51fa\u7684\u65b9\u6cd5\uff0c\u4f7f\u7528for\u5faa\u73af\u5168\u90e8\u8c03\u7528finish\u65b9\u6cd5\uff0c\u7136\u540e\u5728\u6bcf\u4e2aActivity\u7684onCreate\u65b9\u6cd5\u4e2d\u8c03\u7528\u81ea\u5b9a\u4e49\u7c7b\u91cc\u7684\u6dfb\u52a0\u65b9\u6cd5\uff0c\u7136\u540e\u5728\u9700\u8981\u4f7f\u7528\u4e00\u952e\u9000\u51fa\u7684\u5730\u65b9\u8c03\u7528\u7c7b\u4e2d\u7684\u9000\u51fa\u65b9\u6cd5\u5373\u53ef\u3002\r\n"},{"ID":"1036","typeID":"11","question":"NDK\u5f00\u53d1\u6d41\u7a0b\uff1f\uff08JNI\u8fd0\u884c\u539f\u7406\uff09","answer":"NDK\u5e94\u7528\u7684\u5f00\u53d1\u6d41\u7a0b(\u5728\u5e94\u7528\u4e2d\u5b9a\u4e49\u672c\u5730\u63a5\u53e3(native), \u7f16\u8bd1\u6210.h\u5934\u6587\u4ef6,\u4ea4\u7531C\u7a0b\u5e8f\u5458\u5b9e\u73b0,\u5c06.c\u5b9e\u73b0\u901a\u8fc7NDK\u7f16\u8bd1\u6210.so\u52a8\u6001\u94fe\u63a5\u5e93,\u5bfc\u5165\u9879\u76ee\u4e2dlibs\/armeabi,\u4ee3\u7801\u4e2d\u8c03\u7528\u8be5\u672c\u5730\u63a5\u53e3)\r\n\u5e94\u7528\u573a\u666f: \u97f3\u9891,\u89c6\u9891\u89e3\u7801,\u62cd\u6444\u8f66\u724c\u53f7,\u8bc6\u522b\u8f66\u724c\u53f7\r\n"},{"ID":"1035","typeID":"11","question":"\u64ad\u653e\u89c6\u9891\u6709\u54ea\u4e9b\u5b9e\u73b0\u65b9\u5f0f\uff1f","answer":"1)\u4f7f\u7528\u7cfb\u7edf\u81ea\u5e26\u7684\u64ad\u653e\u5668\u6765\u64ad\u653e\uff0c\u6307\u5b9aAction\u4e3aACTION_VIEW,Data\u4e3aUri\uff0cType\u4e3a\u5176MIME\u7c7b\u578b\u3002\r\n\t\t\t\/\/\u8c03\u7528\u7cfb\u7edf\u81ea\u5e26\u7684\u64ad\u653e\u5668 \r\n Intent intent = new Intent(Intent.ACTION_VIEW); \r\n intent.setDataAndType(uri, \"video\/mp4\"); \r\n startActivity(intent);\r\n2)\u4f7f\u7528VideoView\u7ec4\u4ef6\u6765\u64ad\u653e, \u53ef\u4ee5\u7ed3\u5408MediaController\u6765\u5b9e\u73b0\u64ad\u63a7, \u53ea\u662f\u4e0d\u80fd\u968f\u610f\u66f4\u6539\u89c6\u9891\u7684\u5927\u5c0f\u53ca\u4f4d\u7f6e\u3002\r\n3)\u4f7f\u7528MediaPlayer\u548cSurfaceView\u6765\u5b9e\u73b0\uff0c\u8fd9\u79cd\u65b9\u5f0f\u5f88\u7075\u6d3b,\u53ef\u4ee5\u81ea\u5b9a\u4e49\u89c6\u9891\u64ad\u653e\u7684\u5927\u5c0f\u548c\u4f4d\u7f6e\u3002\r\n"},{"ID":"1034","typeID":"11","question":"\u8bf4\u8bf4\u7248\u672c\u66f4\u65b0\u7684\u5b9e\u73b0\u601d\u8def","answer":"\u5728\u670d\u52a1\u5668\u76f8\u5e94URL\u4e0a\u6709\u7248\u672c\u6587\u4ef6, \u5ba2\u6237\u7aef\u540c\u65f6\u5b58\u50a8\u8be5\u5e94\u7528\u5f53\u524d\u7248\u672c\u53f7 (SharedPreferences\/Sqlite), \u6bcf\u6b21\u6253\u5f00\u5e94\u7528,\u53bb\u68c0\u6d4b\u670d\u52a1\u5668\u7248\u672c\u53f7\u4e0e\u672c\u5730\u7248\u672c\u53f7\u662f\u5426\u4e00\u81f4,\u5982\u679c\u4e0d\u4e00 \u81f4,\u5219\u81ea\u5b9a\u4e49\u5bf9\u8bdd\u6846\u63d0\u793a\u662f\u5426\u4e0b\u8f7d\u66f4\u65b0\u3002"},{"ID":"1033","typeID":"11","question":"\u81ea\u5b9a\u4e49\u7ec4\u4ef6\u5b9e\u73b0\u601d\u8def\uff1f","answer":"\u81ea\u5b9a\u4e49\u7ec4\u4ef6\u6709\u4e09\u79cd\u5b9e\u73b0\u601d\u8def:\r\n1) \u7ee7\u627f\u67d0\u4e2a\u73b0\u6709\u7ec4\u4ef6\uff0c\u5728\u5176\u57fa\u7840\u4e0a\u6dfb\u52a0\u989d\u5916\u529f\u80fd,\u5982\u7ee7\u627fGallery\u5b9e\u73b0CoverFlow\u6548\u679c\r\n2) \u7ee7\u627f\u67d0\u4e2aLayout\uff0c\u5b9e\u73b0\u590d\u5408\u7ec4\u4ef6\u81ea\u5b9a\u4e49\uff0c\u5982TextView\u548cEditText\u7ec4\u5408\u5b9e\u73b0\u767b\u5f55\u6ce8\u518c\u7ec4\u4ef6\r\n3) \u7ee7\u627fView\uff0c\u5b9e\u73b0onDraw()\u65b9\u6cd5\uff0c\u5b9e\u73b0\u81ea\u5df1\u7ed8\u5236\u7ec4\u4ef6\uff0c\u5982\u7ffb\u9875\u6548\u679c\u7ec4\u4ef6\r\n"},{"ID":"1032","typeID":"11","question":"MVC\u5728Android\u4e2d\u7684\u5e94\u7528\uff1f","answer":"Android\u4e2d\u754c\u9762\u90e8\u5206\u4e5f\u91c7\u7528\u4e86\u5f53\u524d\u6bd4\u8f83\u6d41\u884c\u7684MVC\u6846\u67b6\uff0c\u5728Android\u4e2d\uff1a \r\n1) \u89c6\u56fe\u5c42\uff08View\uff09\uff1a\u4e00\u822c\u91c7\u7528XML\u6587\u4ef6\u8fdb\u884c\u754c\u9762\u7684\u63cf\u8ff0\uff0c\u4f7f\u7528\u7684\u65f6\u5019\u53ef\u4ee5\u975e\u5e38\u65b9\u4fbf\u7684\u5f15\u5165\u3002\u4e5f\u53ef\u4ee5\u4f7f\u7528JavaScript+HTML\u7b49\u7684\u65b9\u5f0f\u4f5c\u4e3aView\u5c42\uff0c\u901a\u8fc7WebView\u7ec4\u4ef6\u52a0\u8f7d,\u540c\u65f6\u53ef\u4ee5\u5b9e\u73b0Java\u548cJavaScript\u4e4b\u95f4\u7684\u901a\u4fe1\u3002 \r\n2) \u63a7\u5236\u5c42\uff08Controller\uff09\uff1a\u8fd9\u53e5\u8bdd\u4e5f\u5c31\u6697\u542b\u4e86\u4e0d\u8981\u5728Acitivity\u4e2d\u5199\u4ee3\u7801\uff0c\u8981\u901a\u8fc7Activity\u4ea4\u5272Model\u4e1a\u52a1\u903b\u8f91\u5c42\u5904\u7406\uff0c\u8fd9\u6837\u505a\u7684\u53e6\u5916\u4e00\u4e2a\u539f\u56e0\u662fAndroid\u4e2d\u7684Acitivity\u7684\u54cd\u5e94\u65f6\u95f4\u662f5s\uff0c\u5982\u679c\u8017\u65f6\u7684\u64cd\u4f5c\u653e\u5728\u8fd9\u91cc\uff0cAndroid\u7684\u63a7\u5236\u5c42\u7684\u91cd\u4efb\u901a\u5e38\u843d\u5728\u4e86\u4f17\u591a\u7684Acitvity\u7684\u80a9\u4e0a\uff0c\u7a0b\u5e8f\u5c31\u5f88\u5bb9\u6613\u88ab\u56de\u6536\u6389\u3002\r\n3) \u6a21\u578b\u5c42\uff08Model\uff09\uff1a\u5bf9\u6570\u636e\u5e93\u7684\u64cd\u4f5c\u3001\u5bf9\u7f51\u7edc\u7b49\u7684\u64cd\u4f5c\u90fd\u5e94\u8be5\u5728Model\u91cc\u9762\u5904\u7406\uff0c\u5f53\u7136\u5bf9\u4e1a\u52a1\u8ba1\u7b97\u7b49\u64cd\u4f5c\u4e5f\u662f\u5fc5\u987b\u653e\u5728\u7684\u8be5\u5c42\u7684\u3002\r\n \u5728Android SDK\u4e2d\u7684\u6570\u636e\u7ed1\u5b9a\uff0c\u4e5f\u90fd\u662f\u91c7\u7528\u4e86\u4e0eMVC\u6846\u67b6\u7c7b\u4f3c\u7684\u65b9\u6cd5\u6765\u663e\u793a\u6570\u636e\u3002\u5728\u63a7\u5236\u5c42\u4e0a\u5c06\u6570\u636e\u6309\u7167\u89c6\u56fe\u6a21\u578b\u7684\u8981\u6c42\uff08\u4e5f\u5c31\u662fAndroid SDK\u4e2d\u7684Adapter\uff09\u5c01\u88c5\u5c31\u53ef\u4ee5\u76f4\u63a5\u5728\u89c6\u56fe\u6a21\u578b\u4e0a\u663e\u793a\u4e86\uff0c\u4ece\u800c\u5b9e\u73b0\u4e86\u6570\u636e\u7ed1\u5b9a\u3002\u6bd4\u5982\u663e\u793aCursor\u4e2d\u6240\u6709\u6570\u636e\u7684ListActivity\uff0c\u5176\u89c6\u56fe\u5c42\u5c31\u662f\u4e00\u4e2aListView\uff0c\u5c06\u6570\u636e\u5c01\u88c5\u4e3aListAdapter\uff0c\u5e76\u4f20\u9012\u7ed9ListView\uff0c\u6570\u636e\u5c31\u5728ListView\u4e2d\u663e\u793a\u3002\r\n"},{"ID":"1031","typeID":"11","question":"\u5982\u4f55\u5b9e\u73b0\u6d88\u606f\u63a8\u9001\uff0c\u6709\u54ea\u4e9b\u65b9\u5f0f\uff0c\u5404\u81ea\u4f18\u7f3a\u70b9\uff0c\u6700\u5e38\u4f7f\u7528\u54ea\u79cd\uff1f","answer":"\u5b9e\u73b0\u6d88\u606f\u63a8\u9001\u7684\u65b9\u5f0f\u6709\u4e94\u79cd\uff0c\u5206\u522b\u662f\u8f6e\u8be2\uff0cSMS,C2DM,MQTT,XMPP\u6700\u5e38\u4f7f\u7528\u7684\u662fXMPP, \u6211\u4eec\u505a\u9879\u76ee\u65f6\u91c7\u7528\u7684\u662fXMPP\u534f\u8bae\r\n1)XMPP\u534f\u8bae\uff0c\u5b83\u662f\u4e00\u79cd\u57fa\u4e8eXML\u7684\u4f20\u9012\u534f\u8bae\uff0c\u5177\u6709\u5f88\u5f3a\u7684\u7075\u6d3b\u6027\u548c\u53ef\u6269\u5c55\u6027\u3002\u5b83\u7684\u7279\u70b9\u662f\u5c06\u590d\u6742\u6027\u4ece\u5ba2\u6237\u7aef\u8f6c\u79fb\u5230\u4e86\u670d\u52a1\u5668\u7aef\u3002GTalk\u3001QQ\u3001IM\u7b49\u90fd\u7528\u8fd9\u4e2a\u534f\u8bae\u3002\r\n2)\u8f6e\u8be2:\u5ba2\u6237\u7aef\u5b9a\u65f6\u53bb\u670d\u52a1\u7aef\u53d6\u6216\u8005\u4fdd\u6301\u4e00\u4e2a\u957fSocket\uff0c\u4ece\u672c\u8d28\u8bb2\u8fd9\u4e2a\u4e0d\u53eb\u63a8\u9001\uff0c\u800c\u662f\u53bb\u670d\u52a1\u7aef\u62fd\u6570\u636e\u3002\u4f46\u662f\u5b9e\u73b0\u7b80\u5355\uff0c\u4e3b\u8981\u7f3a\u70b9\uff1a\u8017\u7535,\u6d6a\u8d39\u7528\u6237\u6d41\u91cf\u7b49\r\n3)Google\u7684C2DM\uff0c\u5177\u4f53\u4e0d\u7ec6\u8bf4\uff0c\u7f3a\u70b9\uff0c\u670d\u52a1\u5668\u5728\u56fd\u5916\uff0c\u4e0d\u662f\u5f88\u7a33\u5b9a\u3002\r\n4)\u901a\u8fc7\u77ed\u4fe1\u65b9\u5f0f, \u4f46\u662f\u5f88\u96be\u627e\u5230\u514d\u8d39\u77ed\u4fe1\u5e73\u53f0\r\n5.)MQTT\u534f\u8bae, IBM\u63d0\u4f9b\u7684\u4e00\u79cd\u63a8\u9001\u670d\u52a1,\u4e0d\u592a\u7075\u6d3b"},{"ID":"1030","typeID":"11","question":"\u7b80\u8ff0Android\u7f13\u5b58\u673a\u5236\uff1f","answer":"\u5ba2\u6237\u7aef\u7f13\u5b58\u673a\u5236\u662fandroid\u5e94\u7528\u5f00\u53d1\u4e2d\u975e\u5e38\u91cd\u8981\u7684\u4e00\u9879\u5de5\u4f5c,\u4f7f\u7528\u7f13\u5b58\u673a\u5236\u4e0d\u4ec5\u4ec5\u53ef\u4ee5\u4e3a\u7528\u6237\u8282\u77013G\u6d41\u91cf,\u540c\u65f6\u5728\u7528\u6237\u4f53\u9a8c\u65b9\u9762\u4e5f\u662f\u975e\u5e38\u597d\u7684\u9009\u62e9\uff0c\u6bd4\u5982\u6709\u4e9b\u65b0\u95fb\u5ba2\u6237\u7aef\u652f\u6301\u79bb\u7ebf\u6a21\u5f0f\uff0c\u4e5f\u662f\u901a\u8fc7\u7f13\u5b58\u673a\u5236\u5b9e\u73b0\u7684.\u7f13\u5b58\u673a\u5236\u5206\u4e3a\u4e24\u90e8\u5206,\u4e00\u90e8\u5206\u662f\u6587\u5b57\u7f13\u5b58,\u53e6\u4e00\u90e8\u5206\u662f\u591a\u5a92\u4f53\u6587\u4ef6\u7f13\u5b58.\r\n\u6587\u5b57\u7f13\u5b58\u6709\u4e24\u79cd\u5b9e\u73b0\uff1a\r\n1\uff09\u53ef\u4ee5\u5c06\u4e0e\u670d\u52a1\u5668\u4ea4\u4e92\u5f97\u5230\u7684json\u6570\u636e\u6216\u8005xml\u6570\u636e\u5b58\u5165sd\u5361\u4e2d\uff0c\u5e76\u5728\u6570\u636e\u5e93\u6dfb\u52a0\u8be5\u6570\u636e\u7684\u8bb0\u5f55.\u6dfb\u52a0\u6570\u636e\u5e93\u8bb0\u5f55\u65f6,\u63d0\u4f9b\u4e24\u4e2a\u5173\u952e\u5b57\u6bb5,\u4e00\u4e2a\u662f\u8bf7\u6c42\u7684URL,\u53e6\u4e00\u4e2a\u5219\u662f\u672c\u5730\u4fdd\u5b58\u540e\u7684\u6587\u4ef6\u5730\u5740\uff0c\u6bcf\u6b21\u52a0\u8f7d\u6570\u636e\u4e4b\u524d\u90fd\u4f1a\u6839\u636eURL\u5728\u6570\u636e\u5e93\u4e2d\u68c0\u7d22\r\n2\uff09\u5c06JSON\u6570\u636e\u89e3\u6790\u540e\u88c5\u5165List<Map>\u5bf9\u8c61\u4e2d,\u7136\u540e\u904d\u5386List,\u5c06\u6570\u636e\u7edf\u7edf\u5199\u5165\u76f8\u5e94\u7684\u6570\u636e\u5e93\u8868\u7ed3\u6784\u4e2d,\u4ee5\u540e\u6bcf\u6b21\u5411\u670d\u52a1\u5668\u53d1\u8d77\u8bf7\u6c42\u4e4b\u524d\u53ef\u4ee5\u5148\u5728\u6570\u636e\u5e93\u4e2d\u68c0\u7d22,\u5982\u679c\u6709\u76f4\u63a5\u8fd4\u56de.\r\n\u591a\u5a92\u4f53\u6587\u4ef6\u7f13\u5b58\uff1a\u4e3b\u8981\u6307\u56fe\u7247\u7f13\u5b58\r\n\u56fe\u7247\u7684\u7f13\u5b58\u53ef\u4ee5\u6839\u636e\u5f53\u524d\u65e5\u671f,\u65f6\u95f4\u4e3a\u540d\u5b57\u7f13\u5b58\u5230SD\u5361\u4e2d\u7684\u6307\u5b9a\u56fe\u7247\u7f13\u5b58\u76ee\u5f55,\u540c\u65f6\u6570\u636e\u5e93\u4e2d\u505a\u76f8\u5e94\u8bb0\u5f55,\u8bb0\u5f55\u529e\u6cd5\u53ef\u4ee5\u91c7\u7528\u4e24\u4e2a\u5173\u952e\u5b57\u6bb5\u63a7\u5236,\u4e00\u4e2a\u5b57\u6bb5\u662f\u8be5\u56fe\u7247\u7684URL\u5730\u5740,\u53e6\u4e00\u4e2a\u5b57\u6bb5\u662f\u8be5\u56fe\u7247\u7684\u672c\u673a\u5730\u5740.\u53d6\u56fe\u7247\u65f6\u6839\u636eURL\u5728\u6570\u636e\u4e2d\u68c0\u7d22,\u5982\u679c\u6ca1\u6709\u5219\u8fde\u63a5\u670d\u52a1\u5668\u4e0b\u8f7d,\u4e0b\u8f7d\u4e4b\u540e\u518d\u670d\u52a1\u5668\u4e2d\u4f5c\u51fa\u76f8\u5e94\u8bb0\u5f55\r\n\u7f13\u5b58\u6587\u4ef6\u5220\u9664\u7b56\u7565:\r\n1) \u6bcf\u4e00\u4e2a\u6a21\u5757\u5728\u6bcf\u6b21\u5ba2\u6237\u7aef\u81ea\u52a8\u6216\u8005\u7528\u6237\u624b\u52a8\u66f4\u65b0\u7684\u65f6\u5019\u5220\u9664\u76f8\u5e94\u6a21\u5757\u7684\u7f13\u5b58\u6587\u4ef6,\u5e76\u91cd\u65b0\u4e0b\u8f7d\u65b0\u7684\u7f13\u5b58\u6587\u4ef6.\r\n2)\u5728\u8bbe\u7f6e\u754c\u9762\u4e2d\u63d0\u4f9b\u5220\u9664\u7f13\u5b58\u7684\u529f\u80fd,\u70b9\u51fb\u540e\u5220\u9664\u672c\u673a\u6240\u6709\u7f13\u5b58.\r\n"},{"ID":"1029","typeID":"11","question":"\u52a0\u8f7d\u5927\u56fe\u7247\u7684\u65f6\u5019\u5982\u4f55\u9632\u6b62\u5185\u5b58\u6ea2\u51fa?","answer":"Android\u7cfb\u7edf\u7ed9\u56fe\u7247\u5206\u914d\u7684\u5185\u5b58\u53ea\u67098M,\u5f53\u52a0\u8f7d\u5927\u91cf\u56fe\u7247\u65f6\u5f80\u5f80\u4f1a\u51fa\u73b0OOM\u3002\r\nAndroid\u52a0\u8f7d\u5927\u91cf\u56fe\u7247\u5185\u5b58\u6ea2\u51fa\u89e3\u51b3\u65b9\u6848\uff1a\r\n1\uff09\u5c3d\u91cf\u4e0d\u8981\u4f7f\u7528setImageBitmap\u6216setImageResource\u6216BitmapFactory.decodeResource\u6765\u8bbe\u7f6e\u4e00\u5f20\u5927\u56fe\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u51fd\u6570\u5728\u5b8c\u6210decode\u540e\uff0c\u6700\u7ec8\u90fd\u662f\u901a\u8fc7java\u5c42\u7684createBitmap\u6765\u5b8c\u6210\u7684\uff0c\u9700\u8981\u6d88\u8017\u66f4\u591a\u5185\u5b58\uff0c\u53ef\u4ee5\u901a\u8fc7BitmapFactory.decodeStream\u65b9\u6cd5\uff0c\u521b\u5efa\u51fa\u4e00\u4e2abitmap\uff0c\u518d\u5c06\u5176\u8bbe\u4e3aImageView\u7684 source \r\n2\uff09\u4f7f\u7528BitmapFactory.Options\u5bf9\u56fe\u7247\u8fdb\u884c\u538b\u7f29\r\n InputStream is = this.getResources().openRawResource(R.drawable.pic1);\r\n BitmapFactory.Options options=new BitmapFactory.Options();\r\n options.inJustDecodeBounds = false;\r\n options.inSampleSize = 10; \/\/width\uff0chight\u8bbe\u4e3a\u539f\u6765\u7684\u5341\u5206\u4e00\r\n Bitmap btp =BitmapFactory.decodeStream(is,null,options); \r\n3\uff09\u8fd0\u7528Java\u8f6f\u5f15\u7528\uff0c\u8fdb\u884c\u56fe\u7247\u7f13\u5b58\uff0c\u5c06\u9700\u8981\u7ecf\u5e38\u52a0\u8f7d\u7684\u56fe\u7247\u653e\u8fdb\u7f13\u5b58\u91cc\uff0c\u907f\u514d\u53cd\u590d\u52a0\u8f7d\r\n\u53ca\u65f6\u9500\u6bc1\u4e0d\u518d\u4f7f\u7528\u7684Bitmap\u5bf9\u8c61\r\n if(!bmp.isRecycle() ){\r\n bmp.recycle() \/\/\u56de\u6536\u56fe\u7247\u6240\u5360\u7684\u5185\u5b58\r\n system.gc() \/\/\u63d0\u9192\u7cfb\u7edf\u53ca\u65f6\u56de\u6536\r\n } \r\n"},{"ID":"1028","typeID":"11","question":"\u5185\u5b58\u7684\u4f18\u5316?","answer":"\u5185\u5b58\u6cc4\u9732\u5bb9\u6613\u5bfc\u81f4\u5185\u5b58\u6ea2\u51fa\uff0c\u53c8\u79f0\u4e3aOOM\u3002\r\n\u5185\u5b58\u4f18\u5316\u7b56\u7565\uff1a\r\n1\uff09\u5728\u5faa\u73af\u5185\u5c3d\u91cf\u4e0d\u8981\u4f7f\u7528\u5c40\u90e8\u53d8\u91cf\r\n2\uff09\u4e0d\u7528\u7684\u5bf9\u8c61\u5373\u65f6\u91ca\u653e\uff0c\u5373\u6307\u5411NULL \r\n3\uff09\u6570\u636e\u5e93\u7684cursor\u5373\u65f6\u5173\u95ed\u3002\r\n4\uff09\u6784\u9020adapter\u65f6\u4f7f\u7528\u7f13\u5b58contentview\r\n5\uff09\u8c03\u7528registerReceiver()\u540e\u5728\u5bf9\u5e94\u7684\u751f\u547d\u5468\u671f\u65b9\u6cd5\u4e2d\u8c03\u7528unregisterReceiver()\r\n6\uff09\u5373\u65f6\u5173\u95edInputStream\/OutputStream\u3002\r\n7\uff09android\u7cfb\u7edf\u7ed9\u56fe\u7247\u5206\u914d\u7684\u5185\u5b58\u53ea\u67098M, \u56fe\u7247\u5c3d\u91cf\u4f7f\u7528\u8f6f\u5f15\u7528, \u8f83\u5927\u56fe\u7247\u53ef\u901a\u8fc7BitmapFactory\u7f29\u653e\u540e\u518d\u4f7f\u7528,\u5e76\u53ca\u65f6recycle \r\n8\uff09\u5c3d\u91cf\u907f\u514dstatic\u6210\u5458\u53d8\u91cf\u5f15\u7528\u8d44\u6e90\u8017\u8d39\u8fc7\u591a\u7684\u5b9e\u4f8b\u3002"},{"ID":"1027","typeID":"11","question":"GC\u5185\u5b58\u6cc4\u9732\u5728\u4ec0\u4e48\u60c5\u51b5\u4e0b\u4f1a\u51fa\u73b0\uff1f\u600e\u4e48\u89e3\u51b3","answer":"a)\t\u67e5\u8be2\u6570\u636e\u5e93\u6ca1\u6709\u5173\u95ed\u6e38\u6807\r\nb)\t\u6784\u9020Adapter\u65f6\uff0c\u6ca1\u6709\u4f7f\u7528\u7f13\u5b58\u7684 convertView\r\nc)\tBitmap\u5bf9\u8c61\u4e0d\u5728\u4f7f\u7528\u65f6\u8c03\u7528recycle()\u91ca\u653e\u5185\u5b58\r\nd)\t\u4e0d\u7528\u7684\u5bf9\u8c61\u6ca1\u6709\u53ca\u65f6\u91ca\u653e\u5bf9\u8c61\u7684\u5f15\u7528\r\n"},{"ID":"1026","typeID":"11","question":"\u767e\u5ea6\u5730\u56fe\u6838\u5fc3\u7c7b\uff0c\u53ca\u5b9e\u73b0\u7684\u529f\u80fd","answer":"BMapManager:\u5730\u56fe\u5f15\u64ce\u7ba1\u7406\u7c7b,\u8d1f\u8d23\u521d\u59cb\u5316\uff0c\u5f00\u542f\u5730\u56feAPI\uff0c\u7ec8\u6b62\u767e\u5ea6\u5730\u56feAPI\u7b49\u5de5\u4f5c\r\nMKSearch\uff1a\u641c\u7d22\u670d\u52a1.\u7528\u4e8e\u4f4d\u7f6e\u68c0\u7d22\u3001\u5468\u8fb9\u68c0\u7d22\u3001\u8303\u56f4\u68c0\u7d22\u3001\u516c\u4ea4\u68c0\u7d22\u3001\u9a7e\u4e58\u68c0\u7d22\u3001\u6b65\u884c\u68c0\u7d22\r\nMKSearchListener\u641c\u7d22\u7ed3\u679c\u901a\u77e5\u63a5\u53e3\u3002\u8be5\u63a5\u53e3\u8fd4\u56depoi\u641c\u7d22,\u516c\u4ea4\u641c\u7d22,\u9a7e\u4e58\u8def\u7ebf,\u6b65\u884c\u8def\u7ebf\u7ed3\u679c\r\nMapView:\u663e\u793a\u5730\u56fe\u7684View\r\nMyLocationOverlay:\u4e00\u4e2a\u8d1f\u8d23\u663e\u793a\u7528\u6237\u5f53\u524d\u4f4d\u7f6e\u7684Overlay\u3002\r\nOverlay:Overlay\u662f\u4e00\u4e2a\u57fa\u7c7b\uff0c\u5b83\u8868\u793a\u53ef\u4ee5\u663e\u793a\u5728\u5730\u56fe\u4e0a\u65b9\u7684\u8986\u76d6\u7269\u3002\r\n"},{"ID":"1025","typeID":"11","question":"SAX\u89e3\u6790\u4ee3\u7801","answer":"\u9996\u5148SAXParserFactory\u6765\u521b\u5efa\u4e00\u4e2aSAXParserFactory\u5b9e\u4f8b\r\nSAXParserFactory factory = SAXParserFactory.newInstance();\r\n\u6839\u636eSAXParserFactory\u5b9e\u4f8b\u6765\u521b\u5efaSAXParser\r\nSAXParser\u4ea7\u751fSAXReader\r\nXMLReader reader = factory.newSAXParser().getXMLReader();\r\nXMLReader \u52a0\u8f7dXML\uff0c\u7136\u540e\u89e3\u6790XML\uff0c\u5728\u89e3\u6790\u7684\u8fc7\u7a0b\u4e2d\u89e6\u53d1\u76f8\u5bf9\u4e8e\u63a5\u53e3\u4e2d\u7684\u4e8b\u4ef6\u5904\u7406\u7a0b\u5e8f\r\n"},{"ID":"1024","typeID":"11","question":"XML\u89e3\u6790\u6709\u54ea\u51e0\u79cd\uff1f\u5404\u81ea\u4f18\u7f3a\u70b9\uff0c\u5b98\u65b9\u63a8\u8350\u4f7f\u7528\u54ea\u79cd","answer":"\u57fa\u672c\u7684\u89e3\u6790\u65b9\u5f0f\u6709\u4e09\u79cd: DOM,SAX,Pull\r\n1)dom\u89e3\u6790\u89e3\u6790\u5668\u8bfb\u5165\u6574\u4e2a\u6587\u6863\uff0c\u7136\u540e\u6784\u5efa\u4e00\u4e2a\u9a7b\u7559\u5185\u5b58\u7684\u6811\u7ed3\u6784\uff0c\u7136\u540e\u4ee3\u7801\u5c31\u53ef\u4ee5\u4f7f\u7528 DOM \u63a5\u53e3\u6765\u64cd\u4f5c\u8fd9\u4e2a\u6811\u7ed3\u6784\u7684\u4f18\u70b9\u662f\u5bf9\u6587\u6863\u589e\u5220\u6539\u67e5\u6bd4\u8f83\u65b9\u4fbf\uff0c\u7f3a\u70b9\u5360\u7528\u5185\u5b58\u6bd4\u8f83\u5927\u3002\r\n2)sax\u89e3\u6790\u57fa\u4e8e\u4e8b\u4ef6\u9a71\u52a8\u578b,\u4f18\u70b9\u5360\u7528\u5185\u5b58\u5c11\uff0c\u89e3\u6790\u901f\u5ea6\u5feb\uff0c\u7f3a\u70b9\u662f\u53ea\u9002\u5408\u505a\u6587\u6863\u7684\u8bfb\u53d6\uff0c\u4e0d\u9002\u5408\u505a\u6587\u6863\u7684\u589e\u5220\u6539\u67e5\u3002\r\n3)pull\u89e3\u6790\u540c\u6837\u57fa\u4e8e\u4e8b\u4ef6\u9a71\u52a8\u578b,android \u5b98\u65b9API\u63d0\u4f9b,\u53ef\u968f\u65f6\u7ec8\u6b62,\u8c03\u7528next() \u65b9\u6cd5\u63d0\u53d6\u5b83\u4eec\uff08\u4e3b\u52a8\u63d0\u53d6\u4e8b\u4ef6\uff09\r\n"},{"ID":"1023","typeID":"11","question":"Java\u4e2d\u5783\u573e\u56de\u6536\u6709\u4ec0\u4e48\u76ee\u7684\uff1f\u4ec0\u4e48\u65f6\u5019\u8fdb\u884c\u5783\u573e\u56de\u6536\uff1f","answer":"\u5783\u573e\u56de\u6536\u7684\u76ee\u7684\u662f\u8bc6\u522b\u5e76\u4e14\u4e22\u5f03\u5e94\u7528\u4e0d\u518d\u4f7f\u7528\u7684\u5bf9\u8c61\u6765\u91ca\u653e\u548c\u91cd\u7528\u8d44\u6e90\u3002"},{"ID":"865","typeID":"11","question":"\u8bf4\u8bf4Json\u4e0exml\u7684\u533a\u522b\uff1f","answer":"1)JSON\u548cXML\u7684\u6570\u636e\u53ef\u8bfb\u6027\u57fa\u672c\u76f8\u540c\r\n2)JSON\u548cXML\u540c\u6837\u62e5\u6709\u4e30\u5bcc\u7684\u89e3\u6790\u624b\u6bb5\r\n3)JSON\u76f8\u5bf9\u4e8eXML\u6765\u8bb2\uff0c\u6570\u636e\u7684\u4f53\u79ef\u5c0f\r\n4)JSON\u4e0eJavaScript\u7684\u4ea4\u4e92\u66f4\u52a0\u65b9\u4fbf\r\n5)JSON\u5bf9\u6570\u636e\u7684\u63cf\u8ff0\u6027\u6bd4XML\u8f83\u5dee\r\n"},{"ID":"864","typeID":"11","question":"\u8bf4\u8bf4HttpClient\u7684\u901a\u4fe1\u8fc7\u7a0b?","answer":"1)\u751f\u6210\u8bf7\u6c42\u5bf9\u8c61\uff08HttpGet get\uff0cHttpPost post\uff09\r\n2)\u751f\u6210\u5ba2\u6237\u7aef\u5bf9\u8c61 HttpClient client\r\n3)\u6267\u884c\u8bf7\u6c42\u63a5\u6536\u76f8\u5e94 HttpResponse response = client.execute(post)\r\nHttpEntity entity = response.getEntity()\r\n4)\u5f97\u5230\u6570\u636e\u6d41\r\nInputStream inputStream = entity.getContent();\r\n5)\u6700\u540e\u5173\u95ed\u8fc7\u671f\u8fde\u63a5\r\n"},{"ID":"863","typeID":"11","question":"Android\u54ea\u51e0\u79cd\u65b9\u5f0f\u8bbf\u95ee\u7f51\u7edc","answer":"http\u534f\u8bae\uff1a\u8d85\u6587\u672c\u4f20\u8f93\u534f\u8bae\r\n(\u6700\u5e95\u5c42\u7684\u662fSocket,\u63a5\u7740\u662fURLConnection\uff0cHttpClient)\r\nHttpURLConnection \r\nHttpClient\u65b9\u5f0f\uff08HttpGet\u548cHttpPost\u7c7b\uff09\r\n"},{"ID":"862","typeID":"11","question":"Android\u7a0b\u5e8f\u5165\u53e3\u5982\u4f55\u5224\u65ad\uff1f","answer":"action\u8282\u70b9\u4e2d\u7684android.intent.action.MAIN\u8868\u660e\u5b83\u6240\u5728\u7684Activity\u662f\u6574\u4e2a\u5e94\u7528\u7a0b\u5e8f\u7684\u5165\u53e3\u70b9"},{"ID":"861","typeID":"11","question":"\u7b80\u8ff0Android\u4e2d\u7684IPC\u673a\u5236\uff1f","answer":"IPC\uff08Inter-Process Communication\uff0c\u8fdb\u7a0b\u95f4\u901a\u4fe1\uff09,aidl\u662f Android Interface definition language\u7684\u7f29\u5199\uff0c\u5b83\u662f\u4e00\u79cdandroid\u5185\u90e8\u8fdb\u7a0b\u901a\u4fe1\u63a5\u53e3\u7684\u63cf\u8ff0\u8bed\u8a00\uff0c\u901a\u8fc7\u5b83\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u8fdb\u7a0b\u95f4\u7684\u901a\u4fe1\u63a5\u53e3.\u7f16\u8bd1\u5668\u53ef\u4ee5\u901a\u8fc7\u6269\u5c55\u540d\u4e3aaidl\u7684\u6587\u4ef6\u751f\u6210\u4e00\u6bb5\u4ee3\u7801\uff0c\u901a\u8fc7\u9884\u5148\u5b9a\u4e49\u7684\u63a5\u53e3\u8fbe\u5230\u4e24\u4e2a\u8fdb\u7a0b\u5185\u90e8\u901a\u4fe1\u8fdb\u7a0b\u7684\u76ee\u7684.\r\nBroadcastReceiver\u4e5f\u53ef\u4ee5\u5b9e\u73b0\u8fdb\u7a0b\u95f4\u901a\u4fe1\r\nContentProvider \u63d0\u4f9b\u8fdb\u7a0b\u95f4\u6570\u636e\u5171\u4eab\r\n"},{"ID":"860","typeID":"11","question":"\u5982\u4f55\u5b9e\u73b0\u5c4f\u5e55\u5206\u8fa8\u7387\u7684\u81ea\u9002\u5e94\uff08\u5e03\u5c40\u3001\u4e5d\u7ebf\u56fe\u3001\u76ee\u5f55\uff09?","answer":"\u6700\u597d\u53ef\u4ee5\u901a\u8fc7\u6743\u91cd(layout_weight)\u7684\u65b9\u5f0f\u6765\u5206\u914d\u6bcf\u4e2a\u7ec4\u4ef6\u7684\u5927\u5c0f\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u5177\u4f53\u7684\u50cf\u7d20(dip)\u6765\u786e\u5b9a\u5927\u5c0f\u3002\r\n\u5c3d\u91cf\u4f7f\u7528Relativelayout \u3002\r\n\u5df2\u77e5\u5e94\u7528\u652f\u6301\u5e73\u53f0\u8bbe\u5907\u7684\u5206\u8fa8\u7387,\u53ef\u4ee5\u63d0\u4f9b\u591a\u4e2alayout_320*480 ...\r\ndrawable-,drawable-mdpi,drawable-ldpi\u5206\u522b\u4ee3\u8868\u5206\u8fa8\u7387\u4e3a480*800,360*480,240*360, hdpi\u653e\u7f6e\u56fe\u7247\u5927\u5c0f\u76f8\u5dee1.5\u500d\r\n\u6700\u540e\u8fd8\u9700\u8981\u5728AndroidManifest.xml\u91cc\u6dfb\u52a0\u4e0b\u9762\u4e00\u6bb5\uff0c\u6ca1\u6709\u8fd9\u4e00\u6bb5\u81ea\u9002\u5e94\u5c31\u4e0d\u80fd\u5b9e\u73b0\uff1a\r\n<supports-screens\r\nandroid:largeScreens=\"true\"\r\nandroid:normalScreens=\"true\"\r\n android:anyDensity = \"true\"\/>\r\n\u5728<\/application>\u6807\u7b7e\u548c<\/manifest> \u6807\u7b7e\u4e4b\u95f4\u6dfb\u52a0\u4e0a\u9762\u90a3\u6bb5\u4ee3\u7801\u3002\u5373\u53ef\u3002\r\n\u5907\u6ce8\uff1a\u4e09\u8005\u7684\u89e3\u6790\u5ea6\u4e0d\u4e00\u6837\uff0c\u5c31\u50cf\u4f60\u628a\u7535\u8111\u7684\u5206\u8fa8\u7387\u8c03\u4f4e\uff0c\u56fe\u7247\u4f1a\u53d8\u5927\u4e00\u6837\uff0c\u53cd\u4e4b\u5206\u8fa8\u7387\u9ad8\uff0c\u56fe\u7247\u7f29\u5c0f\r\n\u8fd8\u53ef\u4ee5\u901a\u8fc7.9.png\u5b9e\u73b0\u56fe\u7247\u7684\u81ea\u9002\u5e94\r\n"},{"ID":"859","typeID":"11","question":"Intent\u7684\u539f\u7406\u3001\u4f5c\u7528\u3001\u53ef\u4ee5\u4f20\u9012\u54ea\u4e9b\u7c7b\u578b\u7684\u53c2\u6570?","answer":"intent\u662f\u8fde\u63a5Activity, Service, BroadcastReceiver, ContentProvider\u56db\u5927\u7ec4\u4ef6\u7684\u4fe1\u4f7f,\uff0c\u53ef\u4ee5\u4f20\u9012\u516b\u79cd\u57fa\u672c\u6570\u636e\u7c7b\u578b\u4ee5\u53castring, Bundle\u7c7b\u578b\uff0c\u4ee5\u53ca\u5b9e\u73b0\u4e86Serializable\u6216\u8005Parcelable\u7684\u7c7b\u578b\u3002\r\nIntent\u53ef\u4ee5\u5212\u5206\u6210\u663e\u5f0f\u610f\u56fe\u548c\u9690\u5f0f\u610f\u56fe\u3002 \r\n\u663e\u5f0f\u610f\u56fe\uff1a\u8c03\u7528Intent.setComponent()\u6216Intent.setClass()\u65b9\u6cd5\u660e\u786e\u6307\u5b9a\u4e86\u7ec4\u4ef6\u540d\u7684Intent\u4e3a\u663e\u5f0f\u610f\u56fe\uff0c\u663e\u5f0f\u610f\u56fe\u660e\u786e\u6307\u5b9a\u4e86Intent\u5e94\u8be5\u4f20\u9012\u7ed9\u54ea\u4e2a\u7ec4\u4ef6\u3002 \r\n\u9690\u5f0f\u610f\u56fe\uff1a\u6ca1\u6709\u660e\u786e\u6307\u5b9a\u7ec4\u4ef6\u540d\u7684Intent\u4e3a\u9690\u5f0f\u610f\u56fe\u3002 Android\u7cfb\u7edf\u4f1a\u6839\u636e\u9690\u5f0f\u610f\u56fe\u4e2d\u8bbe\u7f6e\u7684\u52a8\u4f5c(action)\u3001\u7c7b\u522b(category)\u3001\u6570\u636e\uff08URI\u548c\u6570\u636e\u7c7b\u578b\uff09\u627e\u5230\u6700\u5408\u9002\u7684\u7ec4\u4ef6\u6765\u5904\u7406\u8fd9\u4e2a\u610f\u56fe\u3002\r\n"},{"ID":"858","typeID":"11","question":"ListView\u56fe\u7247\u5f02\u6b65\u52a0\u8f7d\u5b9e\u73b0\u601d\u8def?","answer":"1)\u5148\u4ece\u5185\u5b58\u7f13\u5b58\u4e2d\u83b7\u53d6\u56fe\u7247\u663e\u793a\uff08\u5185\u5b58\u7f13\u51b2\uff09 \r\n2)\u83b7\u53d6\u4e0d\u5230\u7684\u8bdd\u4eceSD\u5361\u91cc\u83b7\u53d6\uff08SD\u5361\u7f13\u51b2\uff0c\u4eceSD\u5361\u83b7\u53d6\u56fe\u7247\u662f\u653e\u5728\u5b50\u7ebf\u7a0b\u91cc\u6267\u884c\u7684\uff0c\u5426\u5219\u5feb\u901f\u6ed1\u5c4f\u7684\u8bdd\u4f1a\u4e0d\u591f\u6d41\u7545\uff09 \r\n3)\u90fd\u83b7\u53d6\u4e0d\u5230\u7684\u8bdd\u4ece\u7f51\u7edc\u4e0b\u8f7d\u56fe\u7247\u5e76\u4fdd\u5b58\u5230SD\u5361\u540c\u65f6\u52a0\u5165\u5185\u5b58\u5e76\u663e\u793a\uff08\u89c6\u60c5\u51b5\u770b\u662f\u5426\u8981\u663e\u793a\uff09\r\n"},{"ID":"857","typeID":"11","question":"ListView\u5206\u9875\u52a0\u8f7d\u5b9e\u73b0\u601d\u8def?","answer":"\u5b9e\u73b0OnScrollListener \u63a5\u53e3\u91cd\u5199onScrollStateChanged \u548conScroll\u65b9\u6cd5\uff0c\u4f7f\u7528onscroll\u65b9\u6cd5\u5b9e\u73b0\u201d\u6ed1\u52a8\u201c\u540e\u5904\u7406\u68c0\u67e5\u662f\u5426\u8fd8\u6709\u65b0\u7684\u8bb0\u5f55\uff0c\u5982\u679c\u6709\uff0c\u8c03\u7528 addFooterView\uff0c\u6dfb\u52a0\u8bb0\u5f55\u5230adapter, adapter\u8c03\u7528 notifyDataSetChanged \u66f4\u65b0\u6570\u636e;\u5982\u679c\u6ca1\u6709\u8bb0\u5f55\u4e86\uff0c\u628a\u81ea\u5b9a\u4e49\u7684mFooterView\u53bb\u6389\u3002\u4f7f\u7528onScrollStateChanged\u53ef\u4ee5\u68c0\u6d4b\u662f\u5426\u6eda\u5230\u6700\u540e\u4e00\u884c\u4e14\u505c\u6b62\u6eda\u52a8\u7136\u540e\u6267\u884c\u52a0\u8f7d "},{"ID":"856","typeID":"11","question":"listview\u4f18\u5316\u7b56\u7565?","answer":"1)\u5bf9convetView\u8fdb\u884c\u5224\u7a7a\uff0c\u662f\u5f53convertView\u4e0d\u4e3a\u7a7a\u7684\u65f6\u5019\u76f4\u63a5\u91cd\u65b0\u4f7f\u7528convertView\r\n\u4ece\u800c\u51cf\u5c11\u4e86\u5f88\u591a\u4e0d\u5fc5\u8981\u7684View\u7684\u521b\u5efa \r\n2)\u5b9a\u4e49\u4e00\u4e2aViewHolder\uff0c\u5c06convetView\u7684tag\u8bbe\u7f6e\u4e3aViewHolder,\u4e0d\u4e3a\u7a7a\u65f6\u91cd\u65b0\u4f7f\u7528\u5373\u53ef\r\n3)\u5f53ListView\u52a0\u8f7d\u6570\u636e\u91cf\u8f83\u5927\u65f6\u53ef\u4ee5\u91c7\u7528\u5206\u9875\u52a0\u8f7d\u548c\u56fe\u7247\u5f02\u6b65\u52a0\u8f7d\r\n"},{"ID":"855","typeID":"11","question":"\u4ec0\u4e48\u662fANR \u5982\u4f55\u907f\u514d\u5b83\uff1f\uff08Android\u7ebf\u7a0b\u95f4\u7684\u901a\u4fe1\u65b9\u5f0f \uff09","answer":"ANR\uff1aApplication Not Responding(\u5e94\u7528\u7a0b\u5e8f\u65e0\u54cd\u5e94).\u5f53\u51fa\u73b0\u4e0b\u5217\u60c5\u51b5\u65f6\uff0cAndroid\u5c31\u4f1a\u663e\u793aANR\u5bf9\u8bdd\u6846\u4e86\uff1a \u5bf9\u8f93\u5165\u4e8b\u4ef6\uff08\u5982\u6309\u952e\u3001\u89e6\u6478\u5c4f\u4e8b\u4ef6\uff09\u7684\u54cd\u5e94\u8d85\u8fc75\u79d2 \u610f\u5411\u63a5\u53d7\u5668\uff08intentReceiver\uff09\u8d85\u8fc710\u79d2\u949f\u4ecd\u672a\u6267\u884c\u5b8c\u6bd5Android\u5e94\u7528\u7a0b\u5e8f\u5b8c\u5168\u8fd0\u884c\u5728\u4e00\u4e2a\u72ec\u7acb\u7684\u7ebf\u7a0b\u4e2d\uff08\u4f8b\u5982main\uff09\u3002\u8fd9\u5c31\u610f\u5473\u7740\uff0c\u4efb\u4f55\u5728\u4e3b\u7ebf\u7a0b\u4e2d\u8fd0\u884c\u7684\uff0c\u9700\u8981\u6d88\u8017\u5927\u91cf\u65f6\u95f4\u7684\u64cd\u4f5c\u90fd\u4f1a\u5f15\u53d1ANR\u3002\r\n\u89e3\u51b3\u65b9\u6848\u6709\u4e24\u79cd:\r\n1)AsyncTask\u5f02\u6b65\u4efb\u52a1\u4e2d\uff0cdoInBackground()\u548conPostExecute(Result)\u4e24\u4e2a\u65b9\u6cd5\u975e\u5e38\u91cd\u8981\r\ndoInBackground() \u8fd9\u4e2a\u65b9\u6cd5\u8fd0\u884c\u5728\u540e\u53f0\u7ebf\u7a0b\u4e2d\uff0c\u4e3b\u8981\u8d1f\u8d23\u6267\u884c\u90a3\u4e9b\u5f88\u8017\u65f6\u7684\u64cd\u4f5c\uff0c\u5982\u79fb\u52a8\u62a4\u7406\u7cfb\u7edf\u4e2d\u7684\u7f51\u7edc\u8fde\u63a5\u3001\u89e3\u6790XML\u7b49\u64cd\u4f5c\u3002\u8be5\u65b9\u6cd5\u5fc5\u987b\u91cd\u8f7d\u3002\r\nonPostExecute(Result) \u8fd9\u4e2a\u65b9\u6cd5\u4e5f\u8fd0\u884c\u4e8eUI\u7ebf\u7a0b\uff0c\u5728doInBackground(Params\u2026)\u65b9\u6cd5\u6267\u884c\u540e\u8c03\u7528\uff0c\u8be5\u65b9\u6cd5\u7528\u4e8e\u5904\u7406\u540e\u53f0\u4efb\u52a1\u6267\u884c\u540e\u8fd4\u56de\u7684\u7ed3\u679c\u3002\r\n2) \u5b50thread + handler\r\n"},{"ID":"854","typeID":"11","question":"Android\u4e2d\u7684\u4e94\u79cd\u5b58\u50a8\u65b9\u5f0f\u53ca\u5176\u5e94\u7528\u573a\u666f?","answer":"1)SharedPreferences \r\n\u5b58\u50a8\u8def\u5f84:(data\/data\/packagename\/shares_prefs), \u8f7b\u91cf\u7ea7\u5b58\u50a8,\u4ee5\u952e\u503c\u5bf9\u7684\u5f62\u5f0f\u5b58\u50a8\u5728xml\u4e2d,\u4e00\u822c\u7528\u6765\u4fdd\u5b58\u5e94\u7528\u4e2d\u7684\u8bbe\u7f6e\u5c5e\u6027\r\n 2)\u6587\u4ef6\u5b58\u50a8 SD\u5361\u5b58\u50a8\u591a\u5a92\u4f53\u6587\u4ef6, \u6587\u4ef6\u7f13\u5b58\r\n 3) Sqlite\u6570\u636e\u5e93 \u5b58\u50a8\u8def\u5f84:(data\/data\/packagename\/databases), \u4e00\u79cd\u5d4c\u5165\u5f0f\u6570\u636e\u5e93,\u652f\u6301sql\u8bed\u8a00,\u5b58\u50a8\u5927\u91cf\u7ed3\u6784\u6027\u6570\u636e\r\n 4)ContentProvider \u8fdb\u7a0b(\u5e94\u7528\u7a0b\u5e8f)\u95f4\u6570\u636e\u5171\u4eab,\u6570\u636e\u6e90\u53ef\u4ee5\u662fsqlite,\u4e5f\u53ef\u4ee5\u662fxml,\u76f8\u5173\u7c7b: ContentResolver(\u5185\u5bb9\u89e3\u6790\u5668), ContentObserver(\u6570\u636e \u89c2\u5bdf\u8005)\r\n 5) \u7f51\u7edc\u5b58\u50a8 \u5929\u6c14\u6570\u636e\u7684xml,json\u683c\u5f0f\u7b49\u7b49,\u901a\u8fc7HttpUrlConnection,HttpClient,\u6216\u8005SOAP\u534f\u8bae\u83b7\u53d6\u6570\u636e\r\n"},{"ID":"853","typeID":"11","question":"Android\u4e2dasset\u6587\u4ef6\u5939\u548craw\u6587\u4ef6\u5939\u533a\u522b?","answer":"res\/raw\u548cassets\u7684\u76f8\u540c\u70b9\uff1a\r\n\u4e24\u8005\u76ee\u5f55\u4e0b\u7684\u6587\u4ef6\u5728\u6253\u5305\u540e\u4f1a\u539f\u5c01\u4e0d\u52a8\u7684\u4fdd\u5b58\u5728apk\u5305\u4e2d\uff0c\u4e0d\u4f1a\u88ab\u7f16\u8bd1\u6210\u4e8c\u8fdb\u5236\u3002\r\nres\/raw\u548cassets\u7684\u4e0d\u540c\u70b9\uff1a\r\n1\uff09res\/raw\u4e2d\u7684\u6587\u4ef6\u4f1a\u88ab\u6620\u5c04\u5230R.java\u6587\u4ef6\u4e2d\uff0c\u8bbf\u95ee\u7684\u65f6\u5019\u76f4\u63a5\u4f7f\u7528\u8d44\u6e90ID\u5373 R.raw.filename\uff1bassets\u6587\u4ef6\u5939\u4e0b\u7684\u6587\u4ef6\u4e0d\u4f1a\u88ab\u6620\u5c04\u5230R.java\u4e2d\uff0c\u8bbf\u95ee\u7684\u65f6\u5019\u9700\u8981AssetManager\u7c7b\u3002\r\n2\uff09res\/raw\u4e0d\u53ef\u4ee5\u6709\u76ee\u5f55\u7ed3\u6784\uff0c\u800cassets\u5219\u53ef\u4ee5\u6709\u76ee\u5f55\u7ed3\u6784\uff0c\u4e5f\u5c31\u662fassets\u76ee\u5f55\u4e0b\u53ef\u4ee5\u518d\u5efa\u7acb\u6587\u4ef6\u5939\r\n3\uff09\u8bfb\u53d6\u6587\u4ef6\u8d44\u6e90\u4e3e\u4f8b\uff1a\r\n\u8bfb\u53d6res\/raw\u4e0b\u7684\u6587\u4ef6\u8d44\u6e90\uff0c\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u83b7\u53d6\u8f93\u5165\u6d41\u6765\u8fdb\u884c\u5199\u64cd\u4f5c\r\nInputStream is = getResources().openRawResource(R.raw.filename); \r\n\u8bfb\u53d6assets\u4e0b\u7684\u6587\u4ef6\u8d44\u6e90\uff0c\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u83b7\u53d6\u8f93\u5165\u6d41\u6765\u8fdb\u884c\u5199\u64cd\u4f5c\r\nAssetManager am = null; \r\nam = getAssets(); \r\nInputStream is = am.open(\"filename\"); \r\n"},{"ID":"852","typeID":"11","question":"Activity\u5728\u5c4f\u5e55\u65cb\u8f6c\u65f6\u7684\u751f\u547d\u5468\u671f?","answer":"\u4e0d\u8bbe\u7f6eActivity\u7684android:configChanges\u65f6\uff0c\u5207\u5c4f\u4f1a\u91cd\u65b0\u8c03\u7528\u5404\u4e2a\u751f\u547d\u5468\u671f\uff0c\u5207\u6a2a\u5c4f\u65f6\u4f1a\u6267\u884c\u4e00\u6b21\uff0c\u5207\u7ad6\u5c4f\u65f6\u4f1a\u6267\u884c\u4e24\u6b21\uff1b\u8bbe\u7f6eActivity\u7684android:configChanges=\"orientation\"\u65f6\uff0c\u5207\u5c4f\u8fd8\u662f\u4f1a\u91cd\u65b0\u8c03\u7528\u5404\u4e2a\u751f\u547d\u5468\u671f\uff0c\u5207\u6a2a\u3001\u7ad6\u5c4f\u65f6\u53ea\u4f1a\u6267\u884c\u4e00\u6b21\uff1b\u8bbe\u7f6eActivity\u7684android:configChanges=\"orientation|keyboardHidden\"\u65f6\uff0c\u5207\u5c4f\u4e0d\u4f1a\u91cd\u65b0\u8c03\u7528\u5404\u4e2a\u751f\u547d\u5468\u671f\uff0c\u53ea\u4f1a\u6267\u884conConfigurationChanged\u65b9\u6cd5"},{"ID":"851","typeID":"11","question":"\u89e3\u91caActivity\u7684 onSaveInstanceState() \u548c onRestoreInstanceState()\uff1f","answer":"Activity\u7684 onSaveInstanceState() \u548c onRestoreInstanceState()\u5e76\u4e0d\u662f\u751f\u547d\u5468\u671f\u65b9\u6cd5\uff0c\u5b83\u4eec\u4e0d\u540c\u4e8e onCreate()\u3001onPause()\u7b49\u751f\u547d\u5468\u671f\u65b9\u6cd5\uff0c\u5b83\u4eec\u5e76\u4e0d\u4e00\u5b9a\u4f1a\u88ab\u89e6\u53d1\u3002\u5f53\u5e94\u7528\u9047\u5230\u610f\u5916\u60c5\u51b5\uff08\u5982\uff1a\u5185\u5b58\u4e0d\u8db3\u3001\u7528\u6237\u76f4\u63a5\u6309Home\u952e\uff09\u7531\u7cfb\u7edf\u9500\u6bc1\u4e00\u4e2aActivity\u65f6\uff0conSaveInstanceState() \u4f1a\u88ab\u8c03\u7528\u3002\u4f46\u662f\u5f53\u7528\u6237\u4e3b\u52a8\u53bb\u9500\u6bc1\u4e00\u4e2aActivity\u65f6\uff0c\u4f8b\u5982\u5728\u5e94\u7528\u4e2d\u6309\u8fd4\u56de\u952e\uff0conSaveInstanceState()\u5c31\u4e0d\u4f1a\u88ab\u8c03\u7528\u3002\u56e0\u4e3a\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7528\u6237\u7684\u884c\u4e3a\u51b3\u5b9a\u4e86\u4e0d\u9700\u8981\u4fdd\u5b58Activity\u7684\u72b6\u6001\u3002\u901a\u5e38onSaveInstanceState()\u53ea\u9002\u5408\u7528\u4e8e\u4fdd\u5b58\u4e00\u4e9b\u4e34\u65f6\u6027\u7684\u72b6\u6001\uff0c\u800conPause()\u9002\u5408\u7528\u4e8e\u6570\u636e\u7684\u6301\u4e45\u5316\u4fdd\u5b58\u3002\r\n\u53e6\u5916\uff0c\u5f53\u5c4f\u5e55\u7684\u65b9\u5411\u53d1\u751f\u4e86\u6539\u53d8\uff0c Activity\u4f1a\u88ab\u6467\u6bc1\u5e76\u4e14\u88ab\u91cd\u65b0\u521b\u5efa\uff0c\u5982\u679c\u4f60\u60f3\u5728Activity\u88ab\u6467\u6bc1\u524d\u7f13\u5b58\u4e00\u4e9b\u6570\u636e\uff0c\u5e76\u4e14\u5728Activity\u88ab\u91cd\u65b0\u521b\u5efa\u540e\u6062\u590d\u7f13\u5b58\u7684\u6570\u636e\u3002\u53ef\u4ee5\u91cd\u5199Activity\u7684 onSaveInstanceState() \u548c onRestoreInstanceState()\u65b9\u6cd5\u3002\r\n"},{"ID":"850","typeID":"11","question":"Activity\u751f\u547d\u5468\u671f\uff1f","answer":"\u5171\u6709\u4e03\u4e2a\u5468\u671f\u51fd\u6570\uff1a \r\nvoid onCreate(Bundle savedInstanceState) \u7b2c\u4e00\u6b21\u521b\u5efa\u65f6\u8c03\u7528\r\nvoid onStart() \u88ab\u7528\u6237\u53ef\u89c1\u65f6\u8c03\u7528\r\nvoid onRestart() \u5f53Activity\u5904\u4e8estop\u72b6\u6001\u53c8\u88ab\u91cd\u65b0\u542f\u52a8\u65f6\u8c03\u7528\r\nvoid onResume() \u5f53\u83b7\u5f97\u7126\u70b9\u5373\u53ef\u4e0e\u7528\u6237\u4ea4\u4e92\u65f6\u8c03\u7528\r\nvoid onPause() \u5f53\u5931\u53bb\u7126\u70b9\u65f6\u8c03\u7528\r\nvoid onStop() \u5f53\u4e0d\u53ef\u89c1\u65f6\u8c03\u7528\r\nvoid onDestroy() \u5f53\u9500\u6bc1\u65f6\u8c03\u7528\r\n"},{"ID":"849","typeID":"11","question":"Android\u7684\u56db\u5927\u7ec4\u4ef6\u662f\u4ec0\u4e48\uff1f\u5b83\u4eec\u7684\u4f5c\u7528\u662f\u4ec0\u4e48?","answer":"Android\u6709\u56db\u5927\u7ec4\u4ef6\uff1aActivity\u3001Service\u3001Broadcast Receiver\u3001Content Provider\u3002 \r\nActivity :\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u4e00\u4e2aActivity\u901a\u5e38\u5c31\u662f\u4e00\u4e2a\u5355\u72ec\u7684\u5c4f\u5e55\uff0c\u5b83\u4e0a\u9762\u53ef\u4ee5\u663e\u793a\u4e00\u4e9b\u63a7\u4ef6\u4e5f\u53ef\u4ee5\u76d1\u542c\u5e76\u5904\u7406\u7528\u6237\u7684\u4e8b\u4ef6\u505a\u51fa\u54cd\u5e94\u3002Activity\u4e4b\u95f4\u901a\u8fc7Intent\u8fdb\u884c\u901a\u4fe1\u3002\r\nService \u670d\u52a1:\u4e00\u4e2aService \u662f\u4e00\u6bb5\u957f\u751f\u547d\u5468\u671f\u7684\uff0c\u6ca1\u6709\u7528\u6237\u754c\u9762\u7684\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u7528\u6765\u5f00\u53d1\u5982\u76d1\u63a7\u7c7b\u7a0b\u5e8f\u3002\r\nBroadcastReceive\u5e7f\u64ad\u63a5\u6536\u5668:\u4f60\u7684\u5e94\u7528\u53ef\u4ee5\u4f7f\u7528\u5b83\u5bf9\u5916\u90e8\u4e8b\u4ef6\u8fdb\u884c\u8fc7\u6ee4\u53ea\u5bf9\u611f\u5174\u8da3\u7684\u5916\u90e8\u4e8b\u4ef6(\u5982\u5f53\u7535\u8bdd\u547c\u5165\u65f6\uff0c\u6216\u8005\u6570\u636e\u7f51\u7edc\u53ef\u7528\u65f6)\u8fdb\u884c\u63a5\u6536\u5e76\u505a\u51fa\u54cd\u5e94\u3002\u5e7f\u64ad\u63a5\u6536\u5668\u6ca1\u6709\u7528\u6237\u754c\u9762\u3002\u7136\u800c\uff0c\u5b83\u4eec\u53ef\u4ee5\u542f\u52a8\u4e00\u4e2aactivity\u6216serice \u6765\u54cd\u5e94\u5b83\u4eec\u6536\u5230\u7684\u4fe1\u606f\u3002\r\nContent Provider\u5185\u5bb9\u63d0\u4f9b\u8005 :\u4e3b\u8981\u7528\u4e8e\u591a\u4e2a\u5e94\u7528\u95f4\u6570\u636e\u5171\u4eab\u3002\u8fd9\u4e9b\u6570\u636e\u53ef\u4ee5\u5b58\u50a8\u5728\u6587\u4ef6\u7cfb\u7edf\u4e2d\u6216SQLite\u6570\u636e\u5e93\u3002\r\n"},{"ID":"848","typeID":"11","question":"Android\u7cfb\u7edf\u67b6\u6784?","answer":"1\uff09\u5e94\u7528\u7a0b\u5e8f\u5c42 java\u8bed\u8a00 \u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\r\n2\uff09\u5e94\u7528\u7a0b\u5e8f\u6846\u67b6\u5c42 java\u8bed\u8a00 OS\u5b9a\u5236 framework\u5c42\u5f00\u53d1\r\n3\uff09\u7cfb\u7edf\u8fd0\u884c\u5e93\u5c42 C C++ \u5b9e\u73b0 so\u5e93\r\n4\uff09Linux\u5185\u6838\u5c42\r\n"},{"ID":"847","typeID":"11","question":"\u5e7f\u64ad\u5982\u4f55\u8c03\u7528\uff0c\u6709\u4ec0\u4e48\u65b9\u5f0f\uff0c\u5404\u81ea\u7684\u533a\u522b\uff0c\u5b9e\u73b0\u5e7f\u64ad\u7684\u610f\u56fe\u662f\u4ec0\u4e48\uff0c\u54ea\u91cc\u7528\u5230\uff1f","answer":"\u7a0b\u5e8f\u4e2d\u53d1\u9001\u5e7f\u64ad\u901a\u8fc7sendBroadcastReceiver\uff08\uff09\u5b9e\u73b0\r\n\u63a5\u6536\u5e7f\u64ad\u901a\u8fc7\u5b9a\u4e49\u4e00\u4e2a\u7c7b\u7ee7\u627fBroadcastReceiver\u5e76\u91cd\u5199onReceive\uff08\uff09\u65b9\u6cd5\u5b9e\u73b0\r\n\u6ce8\u518c\u5e7f\u64ad\u6709\u4e24\u79cd\u65b9\u5f0f\uff1a\r\n\u7b2c\u4e00\u79cd\u9759\u6001\u65b9\u5f0f:\u5728\u6e05\u5355\u6587\u4ef6\u4e2d\u901a\u8fc7<receive>\u6807\u7b7e\u58f0\u660e\r\n\u7b2c\u4e8c\u79cd\u4ee3\u7801\u52a8\u6001\u65b9\u5f0f:\r\nIntentFilter filter = new IntentFilter(\"android.provider.Telephony.SMS_RECEIVED\");\r\nIncomingSMSReceiver receiver = new IncomgSMSReceiver();\r\nregisterReceiver(receiver.filter);\r\n 1)\u7b2c\u4e00\u79cd\u4e0d\u662f\u5e38\u9a7b\u578b\u5e7f\u64ad\uff0c\u4e5f\u5c31\u662f\u8bf4\u5e7f\u64ad\u8ddf\u968factivity\u7684\u751f\u547d\u5468\u671f\u3002\u6ce8\u610f: \u5728activity\u7ed3\u675f\u524d\uff0c\u79fb\u9664\u5e7f\u64ad\u63a5\u6536\u5668\u3002\r\n 2)\u7b2c\u4e8c\u79cd\u662f\u5e38\u9a7b\u578b\uff0c\u4e5f\u5c31\u662f\u8bf4\u5f53\u5e94\u7528\u7a0b\u5e8f\u5173\u95ed\u540e\uff0c\u5982\u679c\u6709\u4fe1\u606f\u5e7f\u64ad\u6765\uff0c\u7a0b\u5e8f\u4e5f\u4f1a\u88ab\u7cfb\u7edf\u8c03\u7528\u81ea\u52a8\u8fd0\u884c\u3002\r\n"},{"ID":"846","typeID":"11","question":"\u5e38\u7528\u8bbe\u8ba1\u6a21\u5f0f\u53ca\u5e94\u7528\u573a\u666f\uff1f","answer":"\u5e38\u7528\u8bbe\u8ba1\u6a21\u5f0f: \r\n \u5355\u4f8b\u6a21\u5f0f: Calendar\u5b9e\u4f8b\u7684\u83b7\u53d6\r\n \u9002\u914d\u5668\u6a21\u5f0f: Adapter \u4e3aListView GridView\u7b49\u6dfb\u52a0\u6570\u636e\r\n\u5de5\u5382\u6a21\u5f0f: Spring IOC \u53cd\u8f6c\u63a7\u5236\r\n\u4ee3\u7406\u6a21\u5f0f: Spring AOP \u9762\u5411\u5207\u9762\u7f16\u7a0b\r\n\u89c2\u5bdf\u8005\u6a21\u5f0f: ContentObserver\u76d1\u542c\u5185\u5bb9\u6539\u53d8\r\n\uff08\u61d2\u6c49\u5f0f\uff09\u7a0b\u5e8f\u6267\u884c\u8fc7\u7a0b\u4e2d\u9700\u8981\u8fd9\u4e2a\u7c7b\u7684\u5bf9\u8c61\u65f6\u518d\u5b9e\u4f8b\u5316\u8be5\u7c7b\u7684\u5bf9\u8c61\r\n\u6b65\u9aa4\r\n1)\u5b9a\u4e49\u9759\u6001\u79c1\u6709\u5bf9\u8c61\r\n2)\u6784\u9020\u65b9\u6cd5\u79c1\u6709\u5316\u4fdd\u8bc1\u5728\u7c7b\u7684\u5916\u90e8\u65e0\u6cd5\u5b9e\u4f8b\u5316\u8be5\u7c7b\u7684\u5bf9\u8c61\r\n3)\u5b9a\u4e49\u5bf9\u5916\u5f00\u653e\u7684\u9759\u6001\u65b9\u6cd5\u5728\u8c03\u7528\u65b9\u6cd5\u662f\u5224\u65ad\u5bf9\u8c61\u662f\u5426\u4e3a\u7a7a\uff0c\u4e3a\u7a7a\u518d\u521b\u5efa\u5bf9\u8c61\u8fd4\u56de\r\n\t\tpublic class Singleton {\r\n private static Singleton singleton;\r\n \/\/ \u6784\u9020\u65b9\u6cd5\u79c1\u6709\u5316\uff0c\u4fdd\u8bc1\u5728\u7c7b\u7684\u5916\u90e8\u65e0\u6cd5\u5b9e\u4f8b\u5316\u8be5\u7c7b\u7684\u5bf9\u8c61\r\n private Singleton() {\r\n }\r\n public static synchronized Singleton getSingletonInstance() {\r\n if (singleton == null) {\r\n singleton = new Singleton();\r\n }\r\n return singleton;\r\n }\r\n}\r\n\uff08\u997f\u6c49\u5f0f\uff09\u7c7b\u52a0\u8f7d\u7684\u65f6\u5019\u5c31\u5b9e\u4f8b\u5316\u8be5\u7c7b\u7684\u5bf9\u8c61\r\npublic class Singleton {\r\n private static Singleton singleton = new Singleton();\r\n \/\/ \u6784\u9020\u65b9\u6cd5\u79c1\u6709\u5316\uff0c\u4fdd\u8bc1\u5728\u7c7b\u7684\u5916\u90e8\u65e0\u6cd5\u5b9e\u4f8b\u5316\u8be5\u7c7b\u7684\u5bf9\u8c61\r\n private Singleton() {\r\n }\r\n public static Singleton getSingletonInstance() {\r\n return singleton;\r\n }\r\n}\r\n"},{"ID":"845","typeID":"11","question":"\u5f00\u53d1\u4e2d\u90fd\u7528\u5230\u4e86\u90a3\u4e9b\u8bbe\u8ba1\u6a21\u5f0f?\u7528\u5728\u4ec0\u4e48\u573a\u5408\uff1f","answer":"\u6bcf\u4e2a\u6a21\u5f0f\u90fd\u63cf\u8ff0\u4e86\u4e00\u4e2a\u5728\u6211\u4eec\u7684\u73af\u5883\u4e2d\u4e0d\u65ad\u51fa\u73b0\u7684\u95ee\u9898\uff0c\u7136\u540e\u63cf\u8ff0\u4e86\u8be5\u95ee\u9898\u7684\u89e3\u51b3\u65b9\u6848\u7684\u6838\u5fc3\u3002\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u4f60\u53ef\u4ee5\u65e0\u6570\u6b21\u5730\u4f7f\u7528\u90a3\u4e9b\u5df2\u6709\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u65e0\u9700\u5728\u91cd\u590d\u76f8\u540c\u7684\u5de5\u4f5c\u3002\u4e3b\u8981\u7528\u5230\u4e86MVC\u7684\u8bbe\u8ba1\u6a21\u5f0f\u3002\u7528\u6765\u5f00\u53d1JSP\/Servlet\u6216\u8005J2EE\u7684\u76f8\u5173\u5e94\u7528\u3002\u7b80\u5355\u5de5\u5382\u6a21\u5f0f\u7b49\u3002"},{"ID":"844","typeID":"11","question":"j2ee\u5e38\u7528\u7684\u8bbe\u8ba1\u6a21\u5f0f\uff1f\u8bf4\u660e\u5de5\u5382\u6a21\u5f0f","answer":"Java\u4e2d\u768423\u79cd\u8bbe\u8ba1\u6a21\u5f0f\uff1a\r\nFactory\uff08\u5de5\u5382\u6a21\u5f0f\uff09\uff0cBuilder\uff08\u5efa\u9020\u6a21\u5f0f\uff09\uff0cFactoryMethod\uff08\u5de5\u5382\u65b9\u6cd5\u6a21\u5f0f\uff09\uff0c\r\nPrototype\uff08\u539f\u59cb\u6a21\u578b\u6a21\u5f0f\uff09\uff0cSingleton\uff08\u5355\u4f8b\u6a21\u5f0f\uff09\uff0cFacade\uff08\u95e8\u9762\u6a21\u5f0f\uff09\uff0c\r\nAdapter\uff08\u9002\u914d\u5668\u6a21\u5f0f\uff09\uff0cBridge\uff08\u6865\u6881\u6a21\u5f0f\uff09\uff0cComposite\uff08\u5408\u6210\u6a21\u5f0f\uff09\uff0c\r\nDecorator\uff08\u88c5\u9970\u6a21\u5f0f\uff09\uff0cFlyweight\uff08\u4eab\u5143\u6a21\u5f0f\uff09\uff0cProxy\uff08\u4ee3\u7406\u6a21\u5f0f\uff09\uff0c\r\nCommand\uff08\u547d\u4ee4\u6a21\u5f0f\uff09\uff0cInterpreter\uff08\u89e3\u91ca\u5668\u6a21\u5f0f\uff09\uff0cVisitor\uff08\u8bbf\u95ee\u8005\u6a21\u5f0f\uff09\uff0c\r\nIterator\uff08\u8fed\u4ee3\u5b50\u6a21\u5f0f\uff09\uff0cMediator\uff08\u8c03\u505c\u8005\u6a21\u5f0f\uff09\uff0cMemento\uff08\u5907\u5fd8\u5f55\u6a21\u5f0f\uff09\uff0c\r\nObserver\uff08\u89c2\u5bdf\u8005\u6a21\u5f0f\uff09\uff0cState\uff08\u72b6\u6001\u6a21\u5f0f\uff09\uff0cStrategy\uff08\u7b56\u7565\u6a21\u5f0f\uff09\uff0c\r\nTemplateMethod\uff08\u6a21\u677f\u65b9\u6cd5\u6a21\u5f0f\uff09\uff0cChainOfResponsibleity\uff08\u8d23\u4efb\u94fe\u6a21\u5f0f\uff09\r\n\u5de5\u5382\u6a21\u5f0f\uff1a\u5de5\u5382\u6a21\u5f0f\u662f\u4e00\u79cd\u7ecf\u5e38\u88ab\u4f7f\u7528\u5230\u7684\u6a21\u5f0f\uff0c\u6839\u636e\u5de5\u5382\u6a21\u5f0f\u5b9e\u73b0\u7684\u7c7b\u53ef\u4ee5\u6839\u636e\u63d0\u4f9b\u7684\u6570\u636e\u751f\u6210\u4e00\u7ec4\u7c7b\u4e2d\u67d0\u4e00\u4e2a\u7c7b\u7684\u5b9e\u4f8b\uff0c\u901a\u5e38\u8fd9\u4e00\u7ec4\u7c7b\u6709\u4e00\u4e2a\u516c\u5171\u7684\u62bd\u8c61\u7236\u7c7b\u5e76\u4e14\u5b9e\u73b0\u4e86\u76f8\u540c\u7684\u65b9\u6cd5\uff0c\u4f46\u662f\u8fd9\u4e9b\u65b9\u6cd5\u9488\u5bf9\u4e0d\u540c\u7684\u6570\u636e\u8fdb\u884c\u4e86\u4e0d\u540c\u7684\u64cd\u4f5c\u3002\u9996\u5148\u9700\u8981\u5b9a\u4e49\u4e00\u4e2a\u57fa\u7c7b\uff0c\u8be5\u7c7b\u7684\u5b50\u7c7b\u901a\u8fc7\u4e0d\u540c\u7684\u65b9\u6cd5\u5b9e\u73b0\u4e86\u57fa\u7c7b\u4e2d\u7684\u65b9\u6cd5\u3002\u7136\u540e\u9700\u8981\u5b9a\u4e49\u4e00\u4e2a\u5de5\u5382\u7c7b\uff0c\u5de5\u5382\u7c7b\u53ef\u4ee5\u6839\u636e\u6761\u4ef6\u751f\u6210\u4e0d\u540c\u7684\u5b50\u7c7b\u5b9e\u4f8b\u3002\u5f53\u5f97\u5230\u5b50\u7c7b\u7684\u5b9e\u4f8b\u540e\uff0c\u5f00\u53d1\u4eba\u5458\u53ef\u4ee5\u8c03\u7528\u57fa\u7c7b\u4e2d\u7684\u65b9\u6cd5\u800c\u4e0d\u5fc5\u8003\u8651\u5230\u5e95\u8fd4\u56de\u7684\u662f\u54ea\u4e00\u4e2a\u5b50\u7c7b\u7684\u5b9e\u4f8b\u3002\r\n"},{"ID":"843","typeID":"11","question":"J2EE\u662f\u4ec0\u4e48\uff1f\u8bf7\u5bf9\u4ee5\u4e0b\u5728J2EE\u4e2d\u5e38\u7528\u7684\u540d\u8bcd\u8fdb\u884c\u89e3\u91ca(\u6216\u7b80\u5355\u63cf\u8ff0)","answer":"2EE\u662fSun\u516c\u53f8\u63d0\u51fa\u7684\u591a\u5c42(multi-diered),\u5206\u5e03\u5f0f(distributed),\u57fa\u4e8e\u7ec4\u4ef6(component-base)\u7684\u4f01\u4e1a\u7ea7\u5e94\u7528\u6a21\u578b(enterprieseapplicationmodel).\u5728\u8fd9\u6837\u7684\u4e00\u4e2a\u5e94\u7528\u7cfb\u7edf\u4e2d\uff0c\u53ef\u6309\u7167\u529f\u80fd\u5212\u5206\u4e3a\u4e0d\u540c\u7684\u7ec4\u4ef6\uff0c\u8fd9\u4e9b\u7ec4\u4ef6\u53c8\u53ef\u5728\u4e0d\u540c\u8ba1\u7b97\u673a\u4e0a\uff0c\u5e76\u4e14\u5904\u4e8e\u76f8\u5e94\u7684\u5c42\u6b21(tier)\u4e2d\u3002\u6240\u5c5e\u5c42\u6b21\u5305\u62ec\u5ba2\u6237\u5c42(clietntier)\u7ec4\u4ef6,web\u5c42\u548c\u7ec4\u4ef6,Business\u5c42\u548c\u7ec4\u4ef6,\u4f01\u4e1a\u4fe1\u606f\u7cfb\u7edf(EIS)\u5c42\u3002"},{"ID":"842","typeID":"11","question":"Final\u3001finally\u3001finanlize()\u7684\u533a\u522b\uff1f","answer":"final\u7528\u4e8e\u58f0\u660e\u5c5e\u6027\uff0c\u65b9\u6cd5\u548c\u7c7b\uff0c\u5206\u522b\u8868\u793a\u5c5e\u6027\u4e0d\u53ef\u53d8\uff0c\u65b9\u6cd5\u4e0d\u53ef\u8986\u76d6\uff0c\u7c7b\u4e0d\u53ef\u7ee7\u627f\u3002\r\nfinally\u662f\u5f02\u5e38\u5904\u7406\u8bed\u53e5\u7ed3\u6784\u7684\u4e00\u90e8\u5206\uff0c\u8868\u793a\u603b\u662f\u6267\u884c\u3002\r\nfinalize\u662fObject\u7c7b\u7684\u4e00\u4e2a\u65b9\u6cd5\uff0c\u5728\u5783\u573e\u6536\u96c6\u5668\u6267\u884c\u7684\u65f6\u5019\u4f1a\u8c03\u7528\u88ab\u56de\u6536\u5bf9\u8c61\u7684\u6b64\u65b9\u6cd5\uff0c\u53ef\u4ee5\u8986\u76d6\u6b64\u65b9\u6cd5\u63d0\u4f9b\u5783\u573e\u6536\u96c6\u65f6\u7684\u5176\u4ed6\u8d44\u6e90\u56de\u6536\uff0c\u4f8b\u5982\u5173\u95ed\u6587\u4ef6\u7b49\u3002\r\n"},{"ID":"841","typeID":"11","question":"\u7ebf\u7a0b\u6709\u51e0\u79cd\u72b6\u6001,\u5206\u522b\u662f\u54ea\u4e9b\uff08\u8c03\u7528run()\u548c\u8c03\u7528start()\u7684\u533a\u522b\uff09","answer":"1)\u65b0\u5efa\u72b6\u6001(New)\uff1a\u65b0\u521b\u5efa\u4e86\u4e00\u4e2a\u7ebf\u7a0b\u5bf9\u8c61\u3002\r\n\u3000\u30002)\u5c31\u7eea\u72b6\u6001(Runnable)\uff1a\u7ebf\u7a0b\u5bf9\u8c61\u521b\u5efa\u540e\uff0c\u5176\u4ed6\u7ebf\u7a0b\u8c03\u7528\u4e86\u8be5\u5bf9\u8c61\u7684start()\u65b9\u6cd5\u3002\u8be5\u72b6\u6001\u7684\u7ebf\u7a0b\u4f4d\u4e8e\u53ef\u8fd0\u884c\u7ebf\u7a0b\u6c60\u4e2d\uff0c\u53d8\u5f97\u53ef\u8fd0\u884c\uff0c\u7b49\u5f85\u83b7\u53d6CPU\u7684\u4f7f\u7528\u6743\u3002\r\n\u3000\u30003)\u8fd0\u884c\u72b6\u6001(Running)\uff1a\u5c31\u7eea\u72b6\u6001\u7684\u7ebf\u7a0b\u83b7\u53d6\u4e86CPU\uff0c\u6267\u884crun()\u65b9\u6cd5\u3002\r\n\u3000\u30004)\u963b\u585e\u72b6\u6001(Blocked)\uff1a\u963b\u585e\u72b6\u6001\u662f\u7ebf\u7a0b\u56e0\u4e3a\u67d0\u79cd\u539f\u56e0\u653e\u5f03CPU\u4f7f\u7528\u6743\uff0c\u6682\u65f6\u505c\u6b62\u8fd0\u884c\u3002\u76f4\u5230\u7ebf\u7a0b\u8fdb\u5165\u5c31\u7eea\u72b6\u6001\uff0c\u624d\u6709\u673a\u4f1a\u8f6c\u5230\u8fd0\u884c\u72b6\u6001\u3002\u963b\u585e\u7684\u60c5\u51b5\u5206\u4e09\u79cd\uff1a\r\n\u2460\u7b49\u5f85\u963b\u585e\uff1a\u8fd0\u884c\u7684\u7ebf\u7a0b\u6267\u884cwait()\u65b9\u6cd5\uff0cJVM\u4f1a\u628a\u8be5\u7ebf\u7a0b\u653e\u5165\u7b49\u5f85\u6c60\u4e2d\u3002\r\n\u2461\u540c\u6b65\u963b\u585e\uff1a\u8fd0\u884c\u7684\u7ebf\u7a0b\u5728\u83b7\u53d6\u5bf9\u8c61\u7684\u540c\u6b65\u9501\u65f6\uff0c\u82e5\u8be5\u540c\u6b65\u9501\u88ab\u522b\u7684\u7ebf\u7a0b\u5360\u7528\uff0c\u5219JVM\u4f1a\u628a\u8be5\u7ebf\u7a0b\u653e\u5165\u9501\u6c60\u4e2d\u3002\r\n\u2462\u5176\u4ed6\u963b\u585e\uff1a\u8fd0\u884c\u7684\u7ebf\u7a0b\u6267\u884csleep()\u6216join()\u65b9\u6cd5\uff0c\u6216\u8005\u53d1\u51fa\u4e86I\/O\u8bf7\u6c42\u65f6\uff0cJVM\u4f1a\u628a\u8be5\u7ebf\u7a0b\u7f6e\u4e3a\u963b\u585e\u72b6\u6001\u3002\u5f53sleep()\u72b6\u6001\u8d85\u65f6\u3001join()\u7b49\u5f85\u7ebf\u7a0b\u7ec8\u6b62\u6216\u8005\u8d85\u65f6\u3001\u6216\u8005I\/O\u5904\u7406\u5b8c\u6bd5\u65f6\uff0c\u7ebf\u7a0b\u91cd\u65b0\u8f6c\u5165\u5c31\u7eea\u72b6\u6001\u3002\r\n5)\u6b7b\u4ea1\u72b6\u6001(Dead)\uff1a\u7ebf\u7a0b\u6267\u884c\u5b8c\u4e86\u6216\u8005\u56e0\u5f02\u5e38\u9000\u51fa\u4e86run()\u65b9\u6cd5\uff0c\u8be5\u7ebf\u7a0b\u7ed3\u675f\u751f\u547d\u5468\u671f\u3002\r\n\u5f53\u8c03\u7528start\u65b9\u6cd5\u7684\u65f6\u5019\uff0c\u8be5\u7ebf\u7a0b\u5c31\u8fdb\u5165\u5c31\u7eea\u72b6\u6001\u3002\u7b49\u5f85CPU\u8fdb\u884c\u8c03\u5ea6\u6267\u884c\uff0c\u6b64\u65f6\u8fd8\u6ca1\u6709\u771f\u6b63\u6267\u884c\u7ebf\u7a0b\u3002\r\n\u5f53\u8c03\u7528run\u65b9\u6cd5\u7684\u65f6\u5019\uff0c\u662f\u5df2\u7ecf\u88abCP U\u8fdb\u884c\u8c03\u5ea6\uff0c\u6267\u884c\u7ebf\u7a0b\u7684\u4e3b\u8981\u4efb\u52a1\u3002\r\n1.\t\u7ebf\u7a0b\u7684\u5b9e\u73b0\u65b9\u5f0f\r\n\u7b54\uff1a\u7ebf\u7a0b\u7684\u5b9e\u73b0\u6709\u4e24\u79cd\u65b9\u5f0f\uff0c\u4e00\u662f\u7ee7\u627fThread\u7c7b\uff0c\u4e8c\u662f\u5b9e\u73b0Runnable\u63a5\u53e3\r\n2.\tsleep() \u4e0e wait()\u7684\u533a\u522b\r\n\u7b54\uff1a\u2460\u8fd9\u4e24\u4e2a\u65b9\u6cd5\u6765\u81ea\u4e0d\u540c\u7684\u7c7b\u5206\u522b\u662f\uff0csleep\u6765\u81eaThread\u7c7b\uff0c\u548cwait\u6765\u81eaObject\r\n\t\u7c7b\u3002\r\n\t\u2461\u6700\u4e3b\u8981\u662fsleep\u65b9\u6cd5\u6ca1\u6709\u91ca\u653e\u9501\uff0c\u800cwait\u65b9\u6cd5\u91ca\u653e\u4e86\u9501\uff0c\u4f7f\u5f97\u5176\u4ed6\u7ebf\u7a0b\u53ef\r\n\t\u4ee5\u4f7f\u7528\u540c\u6b65\u63a7\u5236\u5757\u6216\u8005\u65b9\u6cd5\u3002sleep\u4e0d\u51fa\u8ba9\u7cfb\u7edf\u8d44\u6e90\uff1bwait\u662f\u8fdb\u5165\u7ebf\u7a0b\u7b49\u5f85\u6c60\r\n\t\u7b49\u5f85\uff0c\u51fa\u8ba9\u7cfb\u7edf\u8d44\u6e90\uff0c\u5176\u4ed6\u7ebf\u7a0b\u53ef\u4ee5\u5360\u7528CPU\u3002\u4e00\u822cwait\u4e0d\u4f1a\u52a0\u65f6\u95f4\u9650\u5236\uff0c \r\n\t\u56e0\u4e3a\u5982\u679cwait\u7ebf\u7a0b\u7684\u8fd0\u884c\u8d44\u6e90\u4e0d\u591f\uff0c\u518d\u51fa\u6765\u4e5f\u6ca1\u7528\uff0c\u8981\u7b49\u5f85\u5176\u4ed6\u7ebf\u7a0b\u8c03\u7528\r\n\tnotify\/notifyAll\u5524\u9192\u7b49\u5f85\u6c60\u4e2d\u7684\u6240\u6709\u7ebf\u7a0b\uff0c\u624d\u4f1a\u8fdb\u5165\u5c31\u7eea\u961f\u5217\u7b49\u5f85OS\u5206\u914d\u7cfb\r\n\t\u7edf\u8d44\u6e90\u3002sleep(milliseconds)\u53ef\u4ee5\u7528\u65f6\u95f4\u6307\u5b9a\u4f7f\u5b83\u81ea\u52a8\u5524\u9192\u8fc7\u6765\uff0c\u5982\u679c\u65f6\u95f4\u4e0d\u5230\r\n\t\u53ea\u80fd\u8c03\u7528interrupt()\u5f3a\u884c\u6253\u65ad\u3002\r\n3.wait\uff0cnotify\u548cnotifyAll\u53ea\u80fd\u5728\u540c\u6b65\u63a7\u5236\u65b9\u6cd5\u6216\u8005\u540c\u6b65\u63a7\u5236\u5757\u91cc\u9762\u4f7f\u7528\uff0c\u800c\r\nsleep\u53ef\u4ee5\u5728\u4efb\u4f55\u5730\u65b9\u4f7f\u7528\r\n4. Sleep\u9700\u8981\u6355\u83b7\u5f02\u5e38,\u800cwait\u4e0d\u9700\u8981\r\n3.\t\u7ebf\u7a0b\u4e2dwait\uff0cjoin\uff0csleep\uff0cyield, notify\uff0cnotifyall\uff0csynchronized\uff0c\u533a\u522b\u53ca\u8054\u7cfb\r\n\u7b54\uff1a1).sleep()\u65b9\u6cd5\r\n\u5728\u6307\u5b9a\u65f6\u95f4\u5185\u8ba9\u5f53\u524d\u6b63\u5728\u6267\u884c\u7684\u7ebf\u7a0b\u6682\u505c\u6267\u884c\uff0c\u4f46\u4e0d\u4f1a\u91ca\u653e\u201c\u9501\u6807\u5fd7\u201d\u3002\u4e0d\u63a8\u8350\u4f7f\u7528\u3002sleep()\u4f7f\u5f53\u524d\u7ebf\u7a0b\u8fdb\u5165\u963b\u585e\u72b6\u6001\uff0c\u5728\u6307\u5b9a\u65f6\u95f4\u5185\u4e0d\u4f1a\u6267\u884c\u3002\r\n2).wait()\u65b9\u6cd5\r\n\u5728\u5176\u4ed6\u7ebf\u7a0b\u8c03\u7528\u5bf9\u8c61\u7684notify\u6216notifyAll\u65b9\u6cd5\u524d\uff0c\u5bfc\u81f4\u5f53\u524d\u7ebf\u7a0b\u7b49\u5f85\u3002\u7ebf\u7a0b\u4f1a\u91ca\u653e\u6389\u5b83\u6240\u5360\u6709\u7684\u201c\u9501\u6807\u5fd7\u201d\uff0c\u4ece\u800c\u4f7f\u522b\u7684\u7ebf\u7a0b\u6709\u673a\u4f1a\u62a2\u5360\u8be5\u9501\u3002\r\n\u5524\u9192\u5f53\u524d\u5bf9\u8c61\u9501\u7684\u7b49\u5f85\u7ebf\u7a0b\u4f7f\u7528notify\u6216notifyAll\u65b9\u6cd5,waite() \u548cnotify()\u5fc5\u987b\u5728synchronized\u51fd\u6570\u6216synchronized\u3000block\u4e2d\u8fdb\u884c\u8c03\u7528\u30023.yield\u65b9\u6cd5\r\n\u6682\u505c\u5f53\u524d\u6b63\u5728\u6267\u884c\u7684\u7ebf\u7a0b\u5bf9\u8c61\u3002yield()\u53ea\u662f\u4f7f\u5f53\u524d\u7ebf\u7a0b\u91cd\u65b0\u56de\u5230\u53ef\u6267\u884c\u72b6\u6001\uff0c\u6240\u4ee5\u6267\u884c3)yield()\u7684\u7ebf\u7a0b\u6709\u53ef\u80fd\u5728\u8fdb\u5165\u5230\u53ef\u6267\u884c\u72b6\u6001\u540e\u9a6c\u4e0a\u53c8\u88ab\u6267\u884c\u3002yield()\u53ea\u80fd\u4f7f\u540c\u4f18\u5148\u7ea7\u6216\u66f4\u9ad8\u4f18\u5148\u7ea7\u7684\u7ebf\u7a0b\u6709\u6267\u884c\u7684\u673a\u4f1a\u3002\r\n4).join\u65b9\u6cd5\r\n\u7b49\u5f85\u8be5\u7ebf\u7a0b\u7ec8\u6b62\u3002\u7b49\u5f85\u8c03\u7528join\u65b9\u6cd5\u7684\u7ebf\u7a0b\u7ed3\u675f\uff0c\u518d\u7ee7\u7eed\u6267\u884c\u3002\u5982\uff1at.join();\/\/\u4e3b\u8981\u7528\u4e8e\u7b49\u5f85t\u7ebf\u7a0b\u8fd0\u884c\u7ed3\u675f\uff0c\u82e5\u65e0\u6b64\u53e5\uff0cmain\u5219\u4f1a\u6267\u884c\u5b8c\u6bd5\uff0c\u5bfc\u81f4\u7ed3\u679c\u4e0d\u53ef\u9884\u6d4b\u3002\r\n"},{"ID":"840","typeID":"11","question":"\u96c6\u5408\u7684\u5b9e\u73b0\u7c7b\u4e0e\u533a\u522b\uff1f","answer":"Collection\u63a5\u53e3\uff0c\u96c6\u5408\u7ed3\u6784\u603b\u7684\u7236\u63a5\u53e3\uff0c\u6709\u4e24\u4e2a\u5b50\u63a5\u53e3list\u548cset\r\n List\u63a5\u53e3 \u5143\u7d20\u6709\u5e8f\u53ef\u91cd\u590d.\r\n \u5b9e\u73b0\u7c7b\u6709\uff1aArrayList \u6570\u7ec4\u5b9e\u73b0\u8f7b\u91cf\u7ea7\uff0c\u8fd0\u884c\u5feb\uff0c\u7ebf\u7a0b\u4e0d\u5b89\u5168\u3002JDK1.2 \u67e5\u8be2\u5feb\r\n\t\t Vector \u6570\u7ec4\u5b9e\u73b0\u91cd\u91cf\u7ea7\uff0c\u8fd0\u884c\u6162\uff0c\u7ebf\u7a0b\u5b89\u5168\u3002JDK1.0\r\n\t\t LinkedList\u94fe\u8868\u5b9e\u73b0 \u5e38\u7528\u8bed\u5806\u6808\u4e0e\u961f\u5217\u7684\u5b9e\u73b0 \u589e\u5220\u64cd\u4f5c\u5feb\r\nSet \u63a5\u53e3 \u5143\u7d20\u65e0\u5e8f\u4e0d\u53ef\u91cd\u590d\r\n\u5b9e\u73b0\u7c7b\u6709\uff1aHashSet\uff0c\u5e95\u5c42\u7528hashCode()\u7b97\u6cd5\u5b9e\u73b0\uff0c\u4fdd\u8bc1\u5143\u7d20\u7684\u65e0\u5e8f\u552f\u4e00\uff0c\u81ea\u5b9a\u4e49\u5bf9\u8c61\u5b58\u8fdbHashSet\u4e3a\u4e86\u4fdd\u8bc1\u5143\u7d20\u5185\u5bb9\u4e0d\u91cd\u590d\u9700\u8981\u8986\u76d6hashCode()\u4e0eequals()\u65b9\u6cd5\u3002\r\n SortedSet(\u4e0d\u91cd\u8981) \u5143\u7d20\u6709\u5e8f\uff08Unicode\u5347\u5e8f\uff09\u552f\u4e00\r\n TreeSet\u8981\u6c42\u5143\u7d20\u6709\u5e8f\uff0c\u81ea\u5b9a\u4e49\u7684\u5bf9\u8c61\u9700\u8981\u5b9e\u73b0Comparable\u63a5\u53e3\u7684 compareTo\uff08object o\uff09\u65b9\u6cd5\r\n Map(\u63a5\u53e3): \u4e0eCollection\u63a5\u53e3\u65e0\u5173,\u6709\u4e00\u4e2a\u5b50\u63a5\u53e3SortedMap\u7279\u70b9: \u5143\u7d20\u662fkey-value, key \r\n \u552f\u4e00,\u65e0\u5e8f; value\u53ef\u91cd\u590d\r\n\t\u5b9e\u73b0\u7c7b: HashMap \u8f7b\u91cf\u7ea7 \u7ebf\u7a0b\u4e0d\u5b89\u5168\u7684,\u5141\u8bb8key\u6216value\u4e3anull JDK1.2\r\n HashTable \u91cd\u91cf\u7ea7 \u7ebf\u7a0b\u5b89\u5168\u7684 \u4e0d\u5141\u8bb8key\u6216value\u4e3anull JDK1.0\r\n \t Properties\u662fHashTable\u7684\u5b50\u7c7b,\u4e3b\u952e\u548c\u503c\u90fd\u662f\u5b57\u7b26\u4e32\r\n\tSortedMap:(\u4e0d\u91cd\u8981)\r\n\t\u7279\u70b9: key\u552f\u4e00,\u6709\u5e8f(Unicode\u5347\u5e8f)\r\n\t\u5b9e\u73b0\u7c7b:TreeMap\r\n"},{"ID":"839","typeID":"11","question":"\u62bd\u8c61\u7c7b\u4e0e\u63a5\u53e3\u7684\u533a\u522b\uff08abstract\u4e0einterface\u7684\u533a\u522b\uff09","answer":"abstract\u53ef\u4ee5\u4fee\u9970\u62bd\u8c61\u65b9\u6cd5\uff0c\u800c\u4e00\u4e2a\u7c7b\u53ea\u8981\u6709\u4e00\u4e2a\u62bd\u8c61\u65b9\u6cd5\uff0c\u5c31\u5fc5\u987b\u7528abstract\u5b9a\u4e49\u8be5\u7c7b\uff0c\u5373\u62bd\u8c61\u7c7b\u3002\u62bd\u8c61\u7c7b\uff0c\u88ab\u7ee7\u627f\uff0c\u5b9e\u73b0\u5b83\u91cc\u9762\u7684\u65b9\u6cd5\uff0c\u53ef\u4ee5\u53ea\u6709\u666e\u901a\u65b9\u6cd5\r\n\u7528interface\u4fee\u9970\u7684\u7c7b\uff0c\u91cc\u9762\u7684\u65b9\u6cd5\u90fd\u662f\u62bd\u8c61\u65b9\u6cd5\uff08\u4e0d\u80fd\u5b9e\u4f8b\u5316\uff09\uff0c\u56e0\u6b64\u5728\u5b9a\u4e49\u63a5\u53e3\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u76f4\u63a5\u4e0d\u52a0\u90a3\u4e9b\u4fee\u9970\uff0c\u7cfb\u7edf\u4f1a\u9ed8\u8ba4\u7684\u6dfb\u4e0a\u53bb\u3002\u63a5\u53e3\u91cc\u9762\u7684\u5b57\u6bb5\u90fd\u662f\u516c\u6709\u5e38\u91cf\uff0c\u5373public static final\u4fee\u9970\u7684\u5b57\u6bb5\u3002\u53ef\u4ee5\u6ca1\u6709\u51fd\u6570\u539f\u578b\uff0c\u91cc\u9762\u53ef\u4ee5\u662f\u7a7a\u7684\u3002\r\n"},{"ID":"838","typeID":"11","question":"\u5b9e\u73b0\u4e00\u4e2a\u5b57\u7b26\u4e32\u5012\u5e8f\uff1f","answer":"\u5b57\u7b26\u4e32\u201cabcde\u201d\u901a\u8fc7\u5199\u4e00\u4e2a\u51fd\u6570\u4e0d\u8ba9\u8c03\u7528\u7b2c\u4e09\u65b9\u7684\u5b57\u7b26\u4e32\uff0c\u5b9e\u73b0\u4e00\u4e2a\u5b57\u7b26\u4e32\u5012\u5e8f\uff0c\u6bd4\u5982\u5b57\u7b26\u4e32\u201cabcde\u201d \u53d8\u6210\u201cedcba\u201d\r\n\r\n\r\nString src = \"ABCDEF \";\r\nString dst = new StringBuffer(src).reverse().toString();\r\n"},{"ID":"837","typeID":"11","question":"String \u548cStringBuffer\u7684\u533a\u522b\uff1f","answer":"STRING\u7684\u957f\u5ea6\u662f\u4e0d\u53ef\u53d8\u7684\uff0cSTRINGBUFFER\u7684\u957f\u5ea6\u662f\u53ef\u53d8\u7684\u3002\u5982\u679c\u4f60\u5bf9\u5b57\u7b26\u4e32\u4e2d\u7684\u5185\u5bb9\u7ecf\u5e38\u8fdb\u884c\u64cd\u4f5c\uff0c\u7279\u522b\u662f\u5185\u5bb9\u8981\u4fee\u6539\u65f6\uff0c\u90a3\u4e48\u4f7f\u7528StringBuffer\uff0c\u5982\u679c\u6700\u540e\u9700\u8981String\uff0c\u90a3\u4e48\u4f7f\u7528StringBuffer\uff08\u7f13\u5b58\uff09\u7684toString()\u65b9\u6cd5\u3002 \r\nStringBuilder\uff1a\u8282\u7ea6\u5185\u5b58\uff0c\u521b\u5efa\u5b57\u7b26\u4e32\uff1b\r\n"},{"ID":"836","typeID":"11","question":"Overload\u548cOverride\u7684\u533a\u522b\uff1f","answer":"Overloaded\u7684\u65b9\u6cd5\u662f\u5426\u53ef\u4ee5\u6539\u53d8\u8fd4\u56de\u503c\u7684\u7c7b\u578b?\r\n\u65b9\u6cd5\u7684\u91cd\u5199Overriding\u548c\u91cd\u8f7dOverloading\u662fJava\u591a\u6001\u6027\u7684\u4e0d\u540c\u8868\u73b0\u3002\u91cd\u5199Overriding\u662f\u7236\u7c7b\u4e0e\u5b50\u7c7b\u4e4b\u95f4\u591a\u6001\u6027\u7684\u4e00\u79cd\u8868\u73b0\uff0c\u91cd\u8f7dOverloading\u662f\u4e00\u4e2a\u7c7b\u4e2d\u591a\u6001\u6027\u7684\u4e00\u79cd\u8868\u73b0\u3002\u5982\u679c\u5728\u5b50\u7c7b\u4e2d\u5b9a\u4e49\u67d0\u65b9\u6cd5\u4e0e\u5176\u7236\u7c7b\u6709\u76f8\u540c\u7684\u540d\u79f0\u548c\u53c2\u6570\uff0c\u6211\u4eec\u8bf4\u8be5\u65b9\u6cd5\u88ab\u91cd\u5199 (Overriding)\u3002\u5b50\u7c7b\u7684\u5bf9\u8c61\u4f7f\u7528\u8fd9\u4e2a\u65b9\u6cd5\u65f6\uff0c\u5c06\u8c03\u7528\u5b50\u7c7b\u4e2d\u7684\u5b9a\u4e49\uff0c\u5bf9\u5b83\u800c\u8a00\uff0c\u7236\u7c7b\u4e2d\u7684\u5b9a\u4e49\u5982\u540c\u88ab\"\u5c4f\u853d\"\u4e86\u3002\u5982\u679c\u5728\u4e00\u4e2a\u7c7b\u4e2d\u5b9a\u4e49\u4e86\u591a\u4e2a\u540c\u540d\u7684\u65b9\u6cd5\uff0c\u5b83\u4eec\u6216\u6709\u4e0d\u540c\u7684\u53c2\u6570\u4e2a\u6570\u6216\u6709\u4e0d\u540c\u7684\u53c2\u6570\u7c7b\u578b\uff0c\u5219\u79f0\u4e3a\u65b9\u6cd5\u7684\u91cd\u8f7d(Overloading)\u3002Overloaded\u7684\u65b9\u6cd5\u662f\u53ef\u4ee5\u6539\u53d8\u8fd4\u56de\u503c\u7684\u7c7b\u578b\u3002\r\n"},{"ID":"835","typeID":"11","question":"\u8fdb\u7a0b\u548c\u7ebf\u7a0b\u4e4b\u95f4\u6709\u4ec0\u4e48\u4e0d\u540c\uff1f","answer":"\u4e00\u4e2a\u8fdb\u7a0b\u662f\u4e00\u4e2a\u72ec\u7acb(self contained)\u7684\u8fd0\u884c\u73af\u5883\uff0c\u5b83\u53ef\u4ee5\u88ab\u770b\u4f5c\u4e00\u4e2a\u7a0b\u5e8f\u6216\u8005\u4e00\u4e2a\u5e94\u7528\u3002\u800c\u7ebf\u7a0b\u662f\u5728\u8fdb\u7a0b\u4e2d\u6267\u884c\u7684\u4e00\u4e2a\u4efb\u52a1\u3002Java\u8fd0\u884c\u73af\u5883\u662f\u4e00\u4e2a\u5305\u542b\u4e86\u4e0d\u540c\u7684\u7c7b\u548c\u7a0b\u5e8f\u7684\u5355\u4e00\u8fdb\u7a0b\u3002\u7ebf\u7a0b\u53ef\u4ee5\u88ab\u79f0\u4e3a\u8f7b\u91cf\u7ea7\u8fdb\u7a0b\u3002\u7ebf\u7a0b\u9700\u8981\u8f83\u5c11\u7684\u8d44\u6e90\u6765\u521b\u5efa\u548c\u9a7b\u7559\u5728\u8fdb\u7a0b\u4e2d\uff0c\u5e76\u4e14\u53ef\u4ee5\u5171\u4eab\u8fdb\u7a0b\u4e2d\u7684\u8d44\u6e90\u3002"},{"ID":"834","typeID":"11","question":"\u591a\u7ebf\u7a0b\u7f16\u7a0b\u7684\u597d\u5904\u662f\u4ec0\u4e48\uff1f","answer":"\u5728\u591a\u7ebf\u7a0b\u7a0b\u5e8f\u4e2d\uff0c\u591a\u4e2a\u7ebf\u7a0b\u88ab\u5e76\u53d1\u7684\u6267\u884c\u4ee5\u63d0\u9ad8\u7a0b\u5e8f\u7684\u6548\u7387\uff0cCPU\u4e0d\u4f1a\u56e0\u4e3a\u67d0\u4e2a\u7ebf\u7a0b\u9700\u8981\u7b49\u5f85\u8d44\u6e90\u800c\u8fdb\u5165\u7a7a\u95f2\u72b6\u6001\u3002\u591a\u4e2a\u7ebf\u7a0b\u5171\u4eab\u5806\u5185\u5b58(heap memory)\uff0c\u56e0\u6b64\u521b\u5efa\u591a\u4e2a\u7ebf\u7a0b\u53bb\u6267\u884c\u4e00\u4e9b\u4efb\u52a1\u4f1a\u6bd4\u521b\u5efa\u591a\u4e2a\u8fdb\u7a0b\u66f4\u597d\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0cServlets\u6bd4CGI\u66f4\u597d\uff0c\u662f\u56e0\u4e3aServlets\u652f\u6301\u591a\u7ebf\u7a0b\u800cCGI\u4e0d\u652f\u6301\u3002"},{"ID":"833","typeID":"11","question":"\u7528\u6237\u7ebf\u7a0b\u548c\u5b88\u62a4\u7ebf\u7a0b\u6709\u4ec0\u4e48\u533a\u522b\uff1f","answer":"\u5f53\u6211\u4eec\u5728Java\u7a0b\u5e8f\u4e2d\u521b\u5efa\u4e00\u4e2a\u7ebf\u7a0b\uff0c\u5b83\u5c31\u88ab\u79f0\u4e3a\u7528\u6237\u7ebf\u7a0b\u3002\u4e00\u4e2a\u5b88\u62a4\u7ebf\u7a0b\u662f\u5728\u540e\u53f0\u6267\u884c\u5e76\u4e14\u4e0d\u4f1a\u963b\u6b62JVM\u7ec8\u6b62\u7684\u7ebf\u7a0b\u3002\u5f53\u6ca1\u6709\u7528\u6237\u7ebf\u7a0b\u5728\u8fd0\u884c\u7684\u65f6\u5019\uff0cJVM\u5173\u95ed\u7a0b\u5e8f\u5e76\u4e14\u9000\u51fa\u3002\u4e00\u4e2a\u5b88\u62a4\u7ebf\u7a0b\u521b\u5efa\u7684\u5b50\u7ebf\u7a0b\u4f9d\u7136\u662f\u5b88\u62a4\u7ebf\u7a0b\u3002"},{"ID":"832","typeID":"11","question":"\u6211\u4eec\u5982\u4f55\u521b\u5efa\u4e00\u4e2a\u7ebf\u7a0b\uff1f","answer":"\u6709\u4e24\u79cd\u521b\u5efa\u7ebf\u7a0b\u7684\u65b9\u6cd5\uff1a\u4e00\u662f\u5b9e\u73b0Runnable\u63a5\u53e3\uff0c\u7136\u540e\u5c06\u5b83\u4f20\u9012\u7ed9Thread\u7684\u6784\u9020\u51fd\u6570\uff0c\u521b\u5efa\u4e00\u4e2aThread\u5bf9\u8c61\uff1b\u4e8c\u662f\u76f4\u63a5\u7ee7\u627fThread\u7c7b\u3002"},{"ID":"831","typeID":"11","question":"\u6709\u54ea\u4e9b\u4e0d\u540c\u7684\u7ebf\u7a0b\u751f\u547d\u5468\u671f\uff1f","answer":"\u5f53\u6211\u4eec\u5728Java\u7a0b\u5e8f\u4e2d\u65b0\u5efa\u4e00\u4e2a\u7ebf\u7a0b\u65f6\uff0c\u5b83\u7684\u72b6\u6001\u662fNew\u3002\u5f53\u6211\u4eec\u8c03\u7528\u7ebf\u7a0b\u7684start()\u65b9\u6cd5\u65f6\uff0c\u72b6\u6001\u88ab\u6539\u53d8\u4e3aRunnable\u3002\u7ebf\u7a0b\u8c03\u5ea6\u5668\u4f1a\u4e3aRunnable\u7ebf\u7a0b\u6c60\u4e2d\u7684\u7ebf\u7a0b\u5206\u914dCPU\u65f6\u95f4\u5e76\u4e14\u8bb2\u5b83\u4eec\u7684\u72b6\u6001\u6539\u53d8\u4e3aRunning\u3002\u5176\u4ed6\u7684\u7ebf\u7a0b\u72b6\u6001\u8fd8\u6709Waiting\uff0cBlocked \u548cDead\u3002"},{"ID":"830","typeID":"11","question":"\u53ef\u4ee5\u76f4\u63a5\u8c03\u7528Thread\u7c7b\u7684run()\u65b9\u6cd5\u4e48\uff1f","answer":"\u5f53\u7136\u53ef\u4ee5\uff0c\u4f46\u662f\u5982\u679c\u6211\u4eec\u8c03\u7528\u4e86Thread\u7684run()\u65b9\u6cd5\uff0c\u5b83\u7684\u884c\u4e3a\u5c31\u4f1a\u548c\u666e\u901a\u7684\u65b9\u6cd5\u4e00\u6837\uff0c\u4e3a\u4e86\u5728\u65b0\u7684\u7ebf\u7a0b\u4e2d\u6267\u884c\u6211\u4eec\u7684\u4ee3\u7801\uff0c\u5fc5\u987b\u4f7f\u7528Thread.start()\u65b9\u6cd5\u3002"},{"ID":"829","typeID":"11","question":"\u5982\u4f55\u8ba9\u6b63\u5728\u8fd0\u884c\u7684\u7ebf\u7a0b\u6682\u505c\u4e00\u6bb5\u65f6\u95f4\uff1f","answer":"\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528Thread\u7c7b\u7684Sleep()\u65b9\u6cd5\u8ba9\u7ebf\u7a0b\u6682\u505c\u4e00\u6bb5\u65f6\u95f4\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u5e76\u4e0d\u4f1a\u8ba9\u7ebf\u7a0b\u7ec8\u6b62\uff0c\u4e00\u65e6\u4ece\u4f11\u7720\u4e2d\u5524\u9192\u7ebf\u7a0b\uff0c\u7ebf\u7a0b\u7684\u72b6\u6001\u5c06\u4f1a\u88ab\u6539\u53d8\u4e3aRunnable\uff0c\u5e76\u4e14\u6839\u636e\u7ebf\u7a0b\u8c03\u5ea6\uff0c\u5b83\u5c06\u5f97\u5230\u6267\u884c\u3002"},{"ID":"828","typeID":"11","question":"\u4f60\u5bf9\u7ebf\u7a0b\u4f18\u5148\u7ea7\u7684\u7406\u89e3\u662f\u4ec0\u4e48\uff1f","answer":"\u6bcf\u4e00\u4e2a\u7ebf\u7a0b\u90fd\u662f\u6709\u4f18\u5148\u7ea7\u7684\uff0c\u4e00\u822c\u6765\u8bf4\uff0c\u9ad8\u4f18\u5148\u7ea7\u7684\u7ebf\u7a0b\u5728\u8fd0\u884c\u65f6\u4f1a\u5177\u6709\u4f18\u5148\u6743\uff0c\u4f46\u8fd9\u4f9d\u8d56\u4e8e\u7ebf\u7a0b\u8c03\u5ea6\u7684\u5b9e\u73b0\uff0c\u8fd9\u4e2a\u5b9e\u73b0\u662f\u548c\u64cd\u4f5c\u7cfb\u7edf\u76f8\u5173\u7684(OS dependent)\u3002\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u7ebf\u7a0b\u7684\u4f18\u5148\u7ea7\uff0c\u4f46\u662f\u8fd9\u5e76\u4e0d\u80fd\u4fdd\u8bc1\u9ad8\u4f18\u5148\u7ea7\u7684\u7ebf\u7a0b\u4f1a\u5728\u4f4e\u4f18\u5148\u7ea7\u7684\u7ebf\u7a0b\u524d\u6267\u884c\u3002\u7ebf\u7a0b\u4f18\u5148\u7ea7\u662f\u4e00\u4e2aint\u53d8\u91cf(\u4ece1-10)\uff0c1\u4ee3\u8868\u6700\u4f4e\u4f18\u5148\u7ea7\uff0c10\u4ee3\u8868\u6700\u9ad8\u4f18\u5148\u7ea7\u3002"},{"ID":"827","typeID":"11","question":"\u4ec0\u4e48\u662f\u7ebf\u7a0b\u8c03\u5ea6\u5668(Thread Scheduler)\u548c\u65f6\u95f4\u5206\u7247(Time Slicing)\uff1f","answer":"\u7ebf\u7a0b\u8c03\u5ea6\u5668\u662f\u4e00\u4e2a\u64cd\u4f5c\u7cfb\u7edf\u670d\u52a1\uff0c\u5b83\u8d1f\u8d23\u4e3aRunnable\u72b6\u6001\u7684\u7ebf\u7a0b\u5206\u914dCPU\u65f6\u95f4\u3002\u4e00\u65e6\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u7ebf\u7a0b\u5e76\u542f\u52a8\u5b83\uff0c\u5b83\u7684\u6267\u884c\u4fbf\u4f9d\u8d56\u4e8e\u7ebf\u7a0b\u8c03\u5ea6\u5668\u7684\u5b9e\u73b0\u3002\u65f6\u95f4\u5206\u7247\u662f\u6307\u5c06\u53ef\u7528\u7684CPU\u65f6\u95f4\u5206\u914d\u7ed9\u53ef\u7528\u7684Runnable\u7ebf\u7a0b\u7684\u8fc7\u7a0b\u3002\u5206\u914dCPU\u65f6\u95f4\u53ef\u4ee5\u57fa\u4e8e\u7ebf\u7a0b\u4f18\u5148\u7ea7\u6216\u8005\u7ebf\u7a0b\u7b49\u5f85\u7684\u65f6\u95f4\u3002\u7ebf\u7a0b\u8c03\u5ea6\u5e76\u4e0d\u53d7\u5230Java\u865a\u62df\u673a\u63a7\u5236\uff0c\u6240\u4ee5\u7531\u5e94\u7528\u7a0b\u5e8f\u6765\u63a7\u5236\u5b83\u662f\u66f4\u597d\u7684\u9009\u62e9\uff08\u4e5f\u5c31\u662f\u8bf4\u4e0d\u8981\u8ba9\u4f60\u7684\u7a0b\u5e8f\u4f9d\u8d56\u4e8e\u7ebf\u7a0b\u7684\u4f18\u5148\u7ea7\uff09\u3002"},{"ID":"826","typeID":"11","question":"\u5728\u591a\u7ebf\u7a0b\u4e2d\uff0c\u4ec0\u4e48\u662f\u4e0a\u4e0b\u6587\u5207\u6362(context-switching)\uff1f","answer":"\u4e0a\u4e0b\u6587\u5207\u6362\u662f\u5b58\u50a8\u548c\u6062\u590dCPU\u72b6\u6001\u7684\u8fc7\u7a0b\uff0c\u5b83\u4f7f\u5f97\u7ebf\u7a0b\u6267\u884c\u80fd\u591f\u4ece\u4e2d\u65ad\u70b9\u6062\u590d\u6267\u884c\u3002\u4e0a\u4e0b\u6587\u5207\u6362\u662f\u591a\u4efb\u52a1\u64cd\u4f5c\u7cfb\u7edf\u548c\u591a\u7ebf\u7a0b\u73af\u5883\u7684\u57fa\u672c\u7279\u5f81\u3002"},{"ID":"825","typeID":"11","question":"\u4f60\u5982\u4f55\u786e\u4fddmain()\u65b9\u6cd5\u6240\u5728\u7684\u7ebf\u7a0b\u662fJava\u7a0b\u5e8f\u6700\u540e\u7ed3\u675f\u7684\u7ebf\u7a0b\uff1f","answer":"\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528Thread\u7c7b\u7684joint()\u65b9\u6cd5\u6765\u786e\u4fdd\u6240\u6709\u7a0b\u5e8f\u521b\u5efa\u7684\u7ebf\u7a0b\u5728main()\u65b9\u6cd5\u9000\u51fa\u524d\u7ed3\u675f\u3002"},{"ID":"824","typeID":"11","question":"\u7ebf\u7a0b\u4e4b\u95f4\u662f\u5982\u4f55\u901a\u4fe1\u7684\uff1f","answer":"\u5f53\u7ebf\u7a0b\u95f4\u662f\u53ef\u4ee5\u5171\u4eab\u8d44\u6e90\u65f6\uff0c\u7ebf\u7a0b\u95f4\u901a\u4fe1\u662f\u534f\u8c03\u5b83\u4eec\u7684\u91cd\u8981\u7684\u624b\u6bb5\u3002Object\u7c7b\u4e2dwait()\notify()\notifyAll()\u65b9\u6cd5\u53ef\u4ee5\u7528\u4e8e\u7ebf\u7a0b\u95f4\u901a\u4fe1\u5173\u4e8e\u8d44\u6e90\u7684\u9501\u7684\u72b6\u6001\u3002"},{"ID":"823","typeID":"11","question":"\u4e3a\u4ec0\u4e48\u7ebf\u7a0b\u901a\u4fe1\u7684\u65b9\u6cd5wait(), notify()\u548cnotifyAll()\u88ab\u5b9a\u4e49\u5728Object\u7c7b\u91cc\uff1f","answer":"Java\u7684\u6bcf\u4e2a\u5bf9\u8c61\u4e2d\u90fd\u6709\u4e00\u4e2a\u9501(monitor\uff0c\u4e5f\u53ef\u4ee5\u6210\u4e3a\u76d1\u89c6\u5668) \u5e76\u4e14wait()\uff0cnotify()\u7b49\u65b9\u6cd5\u7528\u4e8e\u7b49\u5f85\u5bf9\u8c61\u7684\u9501\u6216\u8005\u901a\u77e5\u5176\u4ed6\u7ebf\u7a0b\u5bf9\u8c61\u7684\u76d1\u89c6\u5668\u53ef\u7528\u3002\u5728Java\u7684\u7ebf\u7a0b\u4e2d\u5e76\u6ca1\u6709\u53ef\u4f9b\u4efb\u4f55\u5bf9\u8c61\u4f7f\u7528\u7684\u9501\u548c\u540c\u6b65\u5668\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u8fd9\u4e9b\u65b9\u6cd5\u662fObject\u7c7b\u7684\u4e00\u90e8\u5206\uff0c\u8fd9\u6837Java\u7684\u6bcf\u4e00\u4e2a\u7c7b\u90fd\u6709\u7528\u4e8e\u7ebf\u7a0b\u95f4\u901a\u4fe1\u7684\u57fa\u672c\u65b9\u6cd5\u3002"},{"ID":"822","typeID":"11","question":"\u4e3a\u4ec0\u4e48wait(), notify()\u548cnotifyAll()\u5fc5\u987b\u5728\u540c\u6b65\u65b9\u6cd5\u6216\u8005\u540c\u6b65\u5757\u4e2d\u88ab\u8c03\u7528\uff1f","answer":"\u5f53\u4e00\u4e2a\u7ebf\u7a0b\u9700\u8981\u8c03\u7528\u5bf9\u8c61\u7684wait()\u65b9\u6cd5\u7684\u65f6\u5019\uff0c\u8fd9\u4e2a\u7ebf\u7a0b\u5fc5\u987b\u62e5\u6709\u8be5\u5bf9\u8c61\u7684\u9501\uff0c\u63a5\u7740\u5b83\u5c31\u4f1a\u91ca\u653e\u8fd9\u4e2a\u5bf9\u8c61\u9501\u5e76\u8fdb\u5165\u7b49\u5f85\u72b6\u6001\u76f4\u5230\u5176\u4ed6\u7ebf\u7a0b\u8c03\u7528\u8fd9\u4e2a\u5bf9\u8c61\u4e0a\u7684notify()\u65b9\u6cd5\u3002\u540c\u6837\u7684\uff0c\u5f53\u4e00\u4e2a\u7ebf\u7a0b\u9700\u8981\u8c03\u7528\u5bf9\u8c61\u7684notify()\u65b9\u6cd5\u65f6\uff0c\u5b83\u4f1a\u91ca\u653e\u8fd9\u4e2a\u5bf9\u8c61\u7684\u9501\uff0c\u4ee5\u4fbf\u5176\u4ed6\u5728\u7b49\u5f85\u7684\u7ebf\u7a0b\u5c31\u53ef\u4ee5\u5f97\u5230\u8fd9\u4e2a\u5bf9\u8c61\u9501\u3002\u7531\u4e8e\u6240\u6709\u7684\u8fd9\u4e9b\u65b9\u6cd5\u90fd\u9700\u8981\u7ebf\u7a0b\u6301\u6709\u5bf9\u8c61\u7684\u9501\uff0c\u8fd9\u6837\u5c31\u53ea\u80fd\u901a\u8fc7\u540c\u6b65\u6765\u5b9e\u73b0\uff0c\u6240\u4ee5\u4ed6\u4eec\u53ea\u80fd\u5728\u540c\u6b65\u65b9\u6cd5\u6216\u8005\u540c\u6b65\u5757\u4e2d\u88ab\u8c03\u7528\u3002"},{"ID":"821","typeID":"11","question":"\u4e3a\u4ec0\u4e48Thread\u7c7b\u7684sleep()\u548cyield()\u65b9\u6cd5\u662f\u9759\u6001\u7684\uff1f","answer":"Thread\u7c7b\u7684sleep()\u548cyield()\u65b9\u6cd5\u5c06\u5728\u5f53\u524d\u6b63\u5728\u6267\u884c\u7684\u7ebf\u7a0b\u4e0a\u8fd0\u884c\u3002\u6240\u4ee5\u5728\u5176\u4ed6\u5904\u4e8e\u7b49\u5f85\u72b6\u6001\u7684\u7ebf\u7a0b\u4e0a\u8c03\u7528\u8fd9\u4e9b\u65b9\u6cd5\u662f\u6ca1\u6709\u610f\u4e49\u7684\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u8fd9\u4e9b\u65b9\u6cd5\u662f\u9759\u6001\u7684\u3002\u5b83\u4eec\u53ef\u4ee5\u5728\u5f53\u524d\u6b63\u5728\u6267\u884c\u7684\u7ebf\u7a0b\u4e2d\u5de5\u4f5c\uff0c\u5e76\u907f\u514d\u7a0b\u5e8f\u5458\u9519\u8bef\u7684\u8ba4\u4e3a\u53ef\u4ee5\u5728\u5176\u4ed6\u975e\u8fd0\u884c\u7ebf\u7a0b\u8c03\u7528\u8fd9\u4e9b\u65b9\u6cd5\u3002"},{"ID":"820","typeID":"11","question":"\u5982\u4f55\u786e\u4fdd\u7ebf\u7a0b\u5b89\u5168\uff1f","answer":"\u5728Java\u4e2d\u53ef\u4ee5\u6709\u5f88\u591a\u65b9\u6cd5\u6765\u4fdd\u8bc1\u7ebf\u7a0b\u5b89\u5168\u2014\u2014\u540c\u6b65\uff0c\u4f7f\u7528\u539f\u5b50\u7c7b(atomic concurrent classes)\uff0c\u5b9e\u73b0\u5e76\u53d1\u9501\uff0c\u4f7f\u7528volatile\u5173\u952e\u5b57\uff0c\u4f7f\u7528\u4e0d\u53d8\u7c7b\u548c\u7ebf\u7a0b\u5b89\u5168\u7c7b\u3002"},{"ID":"819","typeID":"11","question":"volatile\u5173\u952e\u5b57\u5728Java\u4e2d\u6709\u4ec0\u4e48\u4f5c\u7528\uff1f","answer":"\u5f53\u6211\u4eec\u4f7f\u7528volatile\u5173\u952e\u5b57\u53bb\u4fee\u9970\u53d8\u91cf\u7684\u65f6\u5019\uff0c\u6240\u4ee5\u7ebf\u7a0b\u90fd\u4f1a\u76f4\u63a5\u8bfb\u53d6\u8be5\u53d8\u91cf\u5e76\u4e14\u4e0d\u7f13\u5b58\u5b83\u3002\u8fd9\u5c31\u786e\u4fdd\u4e86\u7ebf\u7a0b\u8bfb\u53d6\u5230\u7684\u53d8\u91cf\u662f\u540c\u5185\u5b58\u4e2d\u662f\u4e00\u81f4\u7684\u3002"},{"ID":"818","typeID":"11","question":"\u540c\u6b65\u65b9\u6cd5\u548c\u540c\u6b65\u5757\uff0c\u54ea\u4e2a\u662f\u66f4\u597d\u7684\u9009\u62e9\uff1f","answer":"\u540c\u6b65\u5757\u662f\u66f4\u597d\u7684\u9009\u62e9\uff0c\u56e0\u4e3a\u5b83\u4e0d\u4f1a\u9501\u4f4f\u6574\u4e2a\u5bf9\u8c61\uff08\u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u8ba9\u5b83\u9501\u4f4f\u6574\u4e2a\u5bf9\u8c61\uff09\u3002\u540c\u6b65\u65b9\u6cd5\u4f1a\u9501\u4f4f\u6574\u4e2a\u5bf9\u8c61\uff0c\u54ea\u6015\u8fd9\u4e2a\u7c7b\u4e2d\u6709\u591a\u4e2a\u4e0d\u76f8\u5173\u8054\u7684\u540c\u6b65\u5757\uff0c\u8fd9\u901a\u5e38\u4f1a\u5bfc\u81f4\u4ed6\u4eec\u505c\u6b62\u6267\u884c\u5e76\u9700\u8981\u7b49\u5f85\u83b7\u5f97\u8fd9\u4e2a\u5bf9\u8c61\u4e0a\u7684\u9501\u3002"},{"ID":"817","typeID":"11","question":"\u5982\u4f55\u521b\u5efa\u5b88\u62a4\u7ebf\u7a0b\uff1f","answer":"\u4f7f\u7528Thread\u7c7b\u7684setDaemon(true)\u65b9\u6cd5\u53ef\u4ee5\u5c06\u7ebf\u7a0b\u8bbe\u7f6e\u4e3a\u5b88\u62a4\u7ebf\u7a0b\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u9700\u8981\u5728\u8c03\u7528start()\u65b9\u6cd5\u524d\u8c03\u7528\u8fd9\u4e2a\u65b9\u6cd5\uff0c\u5426\u5219\u4f1a\u629b\u51faIllegalThreadStateException\u5f02\u5e38\u3002"},{"ID":"816","typeID":"11","question":"\u4ec0\u4e48\u662fThreadLocal?","answer":"ThreadLocal\u7528\u4e8e\u521b\u5efa\u7ebf\u7a0b\u7684\u672c\u5730\u53d8\u91cf\uff0c\u6211\u4eec\u77e5\u9053\u4e00\u4e2a\u5bf9\u8c61\u7684\u6240\u6709\u7ebf\u7a0b\u4f1a\u5171\u4eab\u5b83\u7684\u5168\u5c40\u53d8\u91cf\uff0c\u6240\u4ee5\u8fd9\u4e9b\u53d8\u91cf\u4e0d\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u540c\u6b65\u6280\u672f\u3002\u4f46\u662f\u5f53\u6211\u4eec\u4e0d\u60f3\u4f7f\u7528\u540c\u6b65\u7684\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u4ee5\u9009\u62e9ThreadLocal\u53d8\u91cf\u3002\r\n\u6bcf\u4e2a\u7ebf\u7a0b\u90fd\u4f1a\u62e5\u6709\u4ed6\u4eec\u81ea\u5df1\u7684Thread\u53d8\u91cf\uff0c\u5b83\u4eec\u53ef\u4ee5\u4f7f\u7528get()set()\u65b9\u6cd5\u53bb\u83b7\u53d6\u4ed6\u4eec\u7684\u9ed8\u8ba4\u503c\u6216\u8005\u5728\u7ebf\u7a0b\u5185\u90e8\u6539\u53d8\u4ed6\u4eec\u7684\u503c\u3002ThreadLocal\u5b9e\u4f8b\u901a\u5e38\u662f\u5e0c\u671b\u5b83\u4eec\u540c\u7ebf\u7a0b\u72b6\u6001\u5173\u8054\u8d77\u6765\u662fprivate static\u5c5e\u6027\u3002"},{"ID":"815","typeID":"11","question":" \u4ec0\u4e48\u662fThread Group\uff1f\u4e3a\u4ec0\u4e48\u5efa\u8bae\u4f7f\u7528\u5b83\uff1f","answer":"ThreadGroup\u662f\u4e00\u4e2a\u7c7b\uff0c\u5b83\u7684\u76ee\u7684\u662f\u63d0\u4f9b\u5173\u4e8e\u7ebf\u7a0b\u7ec4\u7684\u4fe1\u606f\u3002\r\nThreadGroup API\u6bd4\u8f83\u8584\u5f31\uff0c\u5b83\u5e76\u6ca1\u6709\u6bd4Thread\u63d0\u4f9b\u4e86\u66f4\u591a\u7684\u529f\u80fd\u3002\u5b83\u6709\u4e24\u4e2a\u4e3b\u8981\u7684\u529f\u80fd\uff1a\u4e00\u662f\u83b7\u53d6\u7ebf\u7a0b\u7ec4\u4e2d\u5904\u4e8e\u6d3b\u8dc3\u72b6\u6001\u7ebf\u7a0b\u7684\u5217\u8868\uff1b\u4e8c\u662f\u8bbe\u7f6e\u4e3a\u7ebf\u7a0b\u8bbe\u7f6e\u672a\u6355\u83b7\u5f02\u5e38\u5904\u7406\u5668(ncaught exception handler)\u3002\u4f46\u5728Java 1.5\u4e2dThread\u7c7b\u4e5f\u6dfb\u52a0\u4e86setUncaughtExceptionHandler(UncaughtExceptionHandler eh) \u65b9\u6cd5\uff0c\u6240\u4ee5ThreadGroup\u662f\u5df2\u7ecf\u8fc7\u65f6\u7684\uff0c\u4e0d\u5efa\u8bae\u7ee7\u7eed\u4f7f\u7528\u3002\r\n\r\nt1.setUncaughtExceptionHandler(new UncaughtExceptionHandler(){\r\n \r\n@Override\r\npublic void uncaughtException(Thread t, Throwable e) {\r\nSystem.out.println(\"exception occured:\"+e.getMessage());\r\n}\r\n \r\n});"},{"ID":"814","typeID":"11","question":"\u4ec0\u4e48\u662fJava\u7ebf\u7a0b\u8f6c\u50a8(Thread Dump)\uff0c\u5982\u4f55\u5f97\u5230\u5b83\uff1f","answer":"\u7ebf\u7a0b\u8f6c\u50a8\u662f\u4e00\u4e2aJVM\u6d3b\u52a8\u7ebf\u7a0b\u7684\u5217\u8868\uff0c\u5b83\u5bf9\u4e8e\u5206\u6790\u7cfb\u7edf\u74f6\u9888\u548c\u6b7b\u9501\u975e\u5e38\u6709\u7528\u3002\u6709\u5f88\u591a\u65b9\u6cd5\u53ef\u4ee5\u83b7\u53d6\u7ebf\u7a0b\u8f6c\u50a8\u2014\u2014\u4f7f\u7528Profiler\uff0cKill -3\u547d\u4ee4\uff0cjstack\u5de5\u5177\u7b49\u7b49\u3002\u6211\u66f4\u559c\u6b22jstack\u5de5\u5177\uff0c\u56e0\u4e3a\u5b83\u5bb9\u6613\u4f7f\u7528\u5e76\u4e14\u662fJDK\u81ea\u5e26\u7684\u3002\u7531\u4e8e\u5b83\u662f\u4e00\u4e2a\u57fa\u4e8e\u7ec8\u7aef\u7684\u5de5\u5177\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7f16\u5199\u4e00\u4e9b\u811a\u672c\u53bb\u5b9a\u65f6\u7684\u4ea7\u751f\u7ebf\u7a0b\u8f6c\u50a8\u4ee5\u5f85\u5206\u6790\u3002"},{"ID":"813","typeID":"11","question":"\u4ec0\u4e48\u662f\u6b7b\u9501(Deadlock)\uff1f\u5982\u4f55\u5206\u6790\u548c\u907f\u514d\u6b7b\u9501\uff1f","answer":"\u6b7b\u9501\u662f\u6307\u4e24\u4e2a\u4ee5\u4e0a\u7684\u7ebf\u7a0b\u6c38\u8fdc\u963b\u585e\u7684\u60c5\u51b5\uff0c\u8fd9\u79cd\u60c5\u51b5\u4ea7\u751f\u81f3\u5c11\u9700\u8981\u4e24\u4e2a\u4ee5\u4e0a\u7684\u7ebf\u7a0b\u548c\u4e24\u4e2a\u4ee5\u4e0a\u7684\u8d44\u6e90\u3002\r\n\u5206\u6790\u6b7b\u9501\uff0c\u6211\u4eec\u9700\u8981\u67e5\u770bJava\u5e94\u7528\u7a0b\u5e8f\u7684\u7ebf\u7a0b\u8f6c\u50a8\u3002\u6211\u4eec\u9700\u8981\u627e\u51fa\u90a3\u4e9b\u72b6\u6001\u4e3aBLOCKED\u7684\u7ebf\u7a0b\u548c\u4ed6\u4eec\u7b49\u5f85\u7684\u8d44\u6e90\u3002\u6bcf\u4e2a\u8d44\u6e90\u90fd\u6709\u4e00\u4e2a\u552f\u4e00\u7684id\uff0c\u7528\u8fd9\u4e2aid\u6211\u4eec\u53ef\u4ee5\u627e\u51fa\u54ea\u4e9b\u7ebf\u7a0b\u5df2\u7ecf\u62e5\u6709\u4e86\u5b83\u7684\u5bf9\u8c61\u9501\u3002"},{"ID":"812","typeID":"11","question":"\u4ec0\u4e48\u662fJava Timer\u7c7b\uff1f\u5982\u4f55\u521b\u5efa\u4e00\u4e2a\u6709\u7279\u5b9a\u65f6\u95f4\u95f4\u9694\u7684\u4efb\u52a1\uff1f","answer":"java.util.Timer\u662f\u4e00\u4e2a\u5de5\u5177\u7c7b\uff0c\u53ef\u4ee5\u7528\u4e8e\u5b89\u6392\u4e00\u4e2a\u7ebf\u7a0b\u5728\u672a\u6765\u7684\u67d0\u4e2a\u7279\u5b9a\u65f6\u95f4\u6267\u884c\u3002Timer\u7c7b\u53ef\u4ee5\u7528\u5b89\u6392\u4e00\u6b21\u6027\u4efb\u52a1\u6216\u8005\u5468\u671f\u4efb\u52a1\u3002\r\njava.util.TimerTask\u662f\u4e00\u4e2a\u5b9e\u73b0\u4e86Runnable\u63a5\u53e3\u7684\u62bd\u8c61\u7c7b\uff0c\u6211\u4eec\u9700\u8981\u53bb\u7ee7\u627f\u8fd9\u4e2a\u7c7b\u6765\u521b\u5efa\u6211\u4eec\u81ea\u5df1\u7684\u5b9a\u65f6\u4efb\u52a1\u5e76\u4f7f\u7528Timer\u53bb\u5b89\u6392\u5b83\u7684\u6267\u884c\u3002"},{"ID":"811","typeID":"11","question":"\u4ec0\u4e48\u662f\u7ebf\u7a0b\u6c60\uff1f\u5982\u4f55\u521b\u5efa\u4e00\u4e2aJava\u7ebf\u7a0b\u6c60\uff1f","answer":"\u4e00\u4e2a\u7ebf\u7a0b\u6c60\u7ba1\u7406\u4e86\u4e00\u7ec4\u5de5\u4f5c\u7ebf\u7a0b\uff0c\u540c\u65f6\u5b83\u8fd8\u5305\u62ec\u4e86\u4e00\u4e2a\u7528\u4e8e\u653e\u7f6e\u7b49\u5f85\u6267\u884c\u7684\u4efb\u52a1\u7684\u961f\u5217\u3002\r\njava.util.concurrent.Executors\u63d0\u4f9b\u4e86\u4e00\u4e2a java.util.concurrent.Executor\u63a5\u53e3\u7684\u5b9e\u73b0\u7528\u4e8e\u521b\u5efa\u7ebf\u7a0b\u6c60\u3002\u7ebf\u7a0b\u6c60\u4f8b\u5b50\u5c55\u73b0\u4e86\u5982\u4f55\u521b\u5efa\u548c\u4f7f\u7528\u7ebf\u7a0b\u6c60\uff0c\u6216\u8005\u9605\u8bfbScheduledThreadPoolExecutor\u4f8b\u5b50\uff0c\u4e86\u89e3\u5982\u4f55\u521b\u5efa\u4e00\u4e2a\u5468\u671f\u4efb\u52a1\u3002"},{"ID":"810","typeID":"11","question":"\u4ec0\u4e48\u662f\u539f\u5b50\u64cd\u4f5c\uff1f\u5728Java Concurrency API\u4e2d\u6709\u54ea\u4e9b\u539f\u5b50\u7c7b(atomic classes)\uff1f","answer":"\u539f\u5b50\u64cd\u4f5c\u662f\u6307\u4e00\u4e2a\u4e0d\u53d7\u5176\u4ed6\u64cd\u4f5c\u5f71\u54cd\u7684\u64cd\u4f5c\u4efb\u52a1\u5355\u5143\u3002\u539f\u5b50\u64cd\u4f5c\u662f\u5728\u591a\u7ebf\u7a0b\u73af\u5883\u4e0b\u907f\u514d\u6570\u636e\u4e0d\u4e00\u81f4\u5fc5\u987b\u7684\u624b\u6bb5\u3002\r\nint++\u5e76\u4e0d\u662f\u4e00\u4e2a\u539f\u5b50\u64cd\u4f5c\uff0c\u6240\u4ee5\u5f53\u4e00\u4e2a\u7ebf\u7a0b\u8bfb\u53d6\u5b83\u7684\u503c\u5e76\u52a01\u65f6\uff0c\u53e6\u5916\u4e00\u4e2a\u7ebf\u7a0b\u6709\u53ef\u80fd\u4f1a\u8bfb\u5230\u4e4b\u524d\u7684\u503c\uff0c\u8fd9\u5c31\u4f1a\u5f15\u53d1\u9519\u8bef\u3002\r\n\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u5fc5\u987b\u4fdd\u8bc1\u589e\u52a0\u64cd\u4f5c\u662f\u539f\u5b50\u7684\uff0c\u5728JDK1.5\u4e4b\u524d\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u540c\u6b65\u6280\u672f\u6765\u505a\u5230\u8fd9\u4e00\u70b9\u3002\u5230JDK1.5\uff0cjava.util.concurrent.atomic\u5305\u63d0\u4f9b\u4e86int\u548clong\u7c7b\u578b\u7684\u88c5\u7c7b\uff0c\u5b83\u4eec\u53ef\u4ee5\u81ea\u52a8\u7684\u4fdd\u8bc1\u5bf9\u4e8e\u4ed6\u4eec\u7684\u64cd\u4f5c\u662f\u539f\u5b50\u7684\u5e76\u4e14\u4e0d\u9700\u8981\u4f7f\u7528\u540c\u6b65\u3002"},{"ID":"809","typeID":"11","question":"Java Concurrency API\u4e2d\u7684Lock\u63a5\u53e3(Lock interface)\u662f\u4ec0\u4e48\uff1f\u5bf9\u6bd4\u540c\u6b65\u5b83\u6709\u4ec0\u4e48\u4f18\u52bf\uff1f","answer":"Lock\u63a5\u53e3\u6bd4\u540c\u6b65\u65b9\u6cd5\u548c\u540c\u6b65\u5757\u63d0\u4f9b\u4e86\u66f4\u5177\u6269\u5c55\u6027\u7684\u9501\u64cd\u4f5c\u3002\u4ed6\u4eec\u5141\u8bb8\u66f4\u7075\u6d3b\u7684\u7ed3\u6784\uff0c\u53ef\u4ee5\u5177\u6709\u5b8c\u5168\u4e0d\u540c\u7684\u6027\u8d28\uff0c\u5e76\u4e14\u53ef\u4ee5\u652f\u6301\u591a\u4e2a\u76f8\u5173\u7c7b\u7684\u6761\u4ef6\u5bf9\u8c61\u3002\r\n\u5b83\u7684\u4f18\u52bf\u6709\uff1a\r\n\u53ef\u4ee5\u4f7f\u9501\u66f4\u516c\u5e73\r\n\u53ef\u4ee5\u4f7f\u7ebf\u7a0b\u5728\u7b49\u5f85\u9501\u7684\u65f6\u5019\u54cd\u5e94\u4e2d\u65ad\r\n\u53ef\u4ee5\u8ba9\u7ebf\u7a0b\u5c1d\u8bd5\u83b7\u53d6\u9501\uff0c\u5e76\u5728\u65e0\u6cd5\u83b7\u53d6\u9501\u7684\u65f6\u5019\u7acb\u5373\u8fd4\u56de\u6216\u8005\u7b49\u5f85\u4e00\u6bb5\u65f6\u95f4\r\n\u53ef\u4ee5\u5728\u4e0d\u540c\u7684\u8303\u56f4\uff0c\u4ee5\u4e0d\u540c\u7684\u987a\u5e8f\u83b7\u53d6\u548c\u91ca\u653e\u9501"},{"ID":"808","typeID":"11","question":"\u4ec0\u4e48\u662fExecutors\u6846\u67b6\uff1f","answer":"Executor\u6846\u67b6\u540cjava.util.concurrent.Executor \u63a5\u53e3\u5728Java 5\u4e2d\u88ab\u5f15\u5165\u3002Executor\u6846\u67b6\u662f\u4e00\u4e2a\u6839\u636e\u4e00\u7ec4\u6267\u884c\u7b56\u7565\u8c03\u7528\uff0c\u8c03\u5ea6\uff0c\u6267\u884c\u548c\u63a7\u5236\u7684\u5f02\u6b65\u4efb\u52a1\u7684\u6846\u67b6\u3002\r\n\u65e0\u9650\u5236\u7684\u521b\u5efa\u7ebf\u7a0b\u4f1a\u5f15\u8d77\u5e94\u7528\u7a0b\u5e8f\u5185\u5b58\u6ea2\u51fa\u3002\u6240\u4ee5\u521b\u5efa\u4e00\u4e2a\u7ebf\u7a0b\u6c60\u662f\u4e2a\u66f4\u597d\u7684\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u56e0\u4e3a\u53ef\u4ee5\u9650\u5236\u7ebf\u7a0b\u7684\u6570\u91cf\u5e76\u4e14\u53ef\u4ee5\u56de\u6536\u518d\u5229\u7528\u8fd9\u4e9b\u7ebf\u7a0b\u3002"},{"ID":"807","typeID":"11","question":"\u4ec0\u4e48\u662f\u963b\u585e\u961f\u5217\uff1f\u5982\u4f55\u4f7f\u7528\u963b\u585e\u961f\u5217\u6765\u5b9e\u73b0\u751f\u4ea7\u8005-\u6d88\u8d39\u8005\u6a21\u578b\uff1f","answer":"java.util.concurrent.BlockingQueue\u7684\u7279\u6027\u662f\uff1a\u5f53\u961f\u5217\u662f\u7a7a\u7684\u65f6\uff0c\u4ece\u961f\u5217\u4e2d\u83b7\u53d6\u6216\u5220\u9664\u5143\u7d20\u7684\u64cd\u4f5c\u5c06\u4f1a\u88ab\u963b\u585e\uff0c\u6216\u8005\u5f53\u961f\u5217\u662f\u6ee1\u65f6\uff0c\u5f80\u961f\u5217\u91cc\u6dfb\u52a0\u5143\u7d20\u7684\u64cd\u4f5c\u4f1a\u88ab\u963b\u585e\u3002\r\n\u963b\u585e\u961f\u5217\u4e0d\u63a5\u53d7\u7a7a\u503c\uff0c\u5f53\u4f60\u5c1d\u8bd5\u5411\u961f\u5217\u4e2d\u6dfb\u52a0\u7a7a\u503c\u7684\u65f6\u5019\uff0c\u5b83\u4f1a\u629b\u51faNullPointerException\u3002\r\n\u963b\u585e\u961f\u5217\u7684\u5b9e\u73b0\u90fd\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\uff0c\u6240\u6709\u7684\u67e5\u8be2\u65b9\u6cd5\u90fd\u662f\u539f\u5b50\u7684\u5e76\u4e14\u4f7f\u7528\u4e86\u5185\u90e8\u9501\u6216\u8005\u5176\u4ed6\u5f62\u5f0f\u7684\u5e76\u53d1\u63a7\u5236\u3002\r\nBlockingQueue \u63a5\u53e3\u662fjava collections\u6846\u67b6\u7684\u4e00\u90e8\u5206\uff0c\u5b83\u4e3b\u8981\u7528\u4e8e\u5b9e\u73b0\u751f\u4ea7\u8005-\u6d88\u8d39\u8005\u95ee\u9898\u3002"},{"ID":"806","typeID":"11","question":"\u4ec0\u4e48\u662fCallable\u548cFuture?","answer":"ava 5\u5728concurrency\u5305\u4e2d\u5f15\u5165\u4e86java.util.concurrent.Callable \u63a5\u53e3\uff0c\u5b83\u548cRunnable\u63a5\u53e3\u5f88\u76f8\u4f3c\uff0c\u4f46\u5b83\u53ef\u4ee5\u8fd4\u56de\u4e00\u4e2a\u5bf9\u8c61\u6216\u8005\u629b\u51fa\u4e00\u4e2a\u5f02\u5e38\u3002\r\nCallable\u63a5\u53e3\u4f7f\u7528\u6cdb\u578b\u53bb\u5b9a\u4e49\u5b83\u7684\u8fd4\u56de\u7c7b\u578b\u3002Executors\u7c7b\u63d0\u4f9b\u4e86\u4e00\u4e9b\u6709\u7528\u7684\u65b9\u6cd5\u53bb\u5728\u7ebf\u7a0b\u6c60\u4e2d\u6267\u884cCallable\u5185\u7684\u4efb\u52a1\u3002\u7531\u4e8eCallable\u4efb\u52a1\u662f\u5e76\u884c\u7684\uff0c\u6211\u4eec\u5fc5\u987b\u7b49\u5f85\u5b83\u8fd4\u56de\u7684\u7ed3\u679c\u3002java.util.concurrent.Future\u5bf9\u8c61\u4e3a\u6211\u4eec\u89e3\u51b3\u4e86\u8fd9\u4e2a\u95ee\u9898\u3002\u5728\u7ebf\u7a0b\u6c60\u63d0\u4ea4Callable\u4efb\u52a1\u540e\u8fd4\u56de\u4e86\u4e00\u4e2aFuture\u5bf9\u8c61\uff0c\u4f7f\u7528\u5b83\u6211\u4eec\u53ef\u4ee5\u77e5\u9053Callable\u4efb\u52a1\u7684\u72b6\u6001\u548c\u5f97\u5230Callable\u8fd4\u56de\u7684\u6267\u884c\u7ed3\u679c\u3002Future\u63d0\u4f9b\u4e86get()\u65b9\u6cd5\u8ba9\u6211\u4eec\u53ef\u4ee5\u7b49\u5f85Callable\u7ed3\u675f\u5e76\u83b7\u53d6\u5b83\u7684\u6267\u884c\u7ed3\u679c\u3002"},{"ID":"805","typeID":"11","question":"\u4ec0\u4e48\u662fFutureTask?","answer":"FutureTask\u662fFuture\u7684\u4e00\u4e2a\u57fa\u7840\u5b9e\u73b0\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5b83\u540cExecutors\u4f7f\u7528\u5904\u7406\u5f02\u6b65\u4efb\u52a1\u3002\u901a\u5e38\u6211\u4eec\u4e0d\u9700\u8981\u4f7f\u7528FutureTask\u7c7b\uff0c\u5355\u5f53\u6211\u4eec\u6253\u7b97\u91cd\u5199Future\u63a5\u53e3\u7684\u4e00\u4e9b\u65b9\u6cd5\u5e76\u4fdd\u6301\u539f\u6765\u57fa\u7840\u7684\u5b9e\u73b0\u662f\uff0c\u5b83\u5c31\u53d8\u5f97\u975e\u5e38\u6709\u7528\u3002\u6211\u4eec\u53ef\u4ee5\u4ec5\u4ec5\u7ee7\u627f\u4e8e\u5b83\u5e76\u91cd\u5199\u6211\u4eec\u9700\u8981\u7684\u65b9\u6cd5\u3002"},{"ID":"804","typeID":"11","question":"\u4ec0\u4e48\u662f\u5e76\u53d1\u5bb9\u5668\u7684\u5b9e\u73b0\uff1f","answer":"Java\u96c6\u5408\u7c7b\u90fd\u662f\u5feb\u901f\u5931\u8d25\u7684\uff0c\u8fd9\u5c31\u610f\u5473\u7740\u5f53\u96c6\u5408\u88ab\u6539\u53d8\u4e14\u4e00\u4e2a\u7ebf\u7a0b\u5728\u4f7f\u7528\u8fed\u4ee3\u5668\u904d\u5386\u96c6\u5408\u7684\u65f6\u5019\uff0c\u8fed\u4ee3\u5668\u7684next()\u65b9\u6cd5\u5c06\u629b\u51faConcurrentModificationException\u5f02\u5e38\u3002\r\n\u5e76\u53d1\u5bb9\u5668\u652f\u6301\u5e76\u53d1\u7684\u904d\u5386\u548c\u5e76\u53d1\u7684\u66f4\u65b0\u3002\r\n\u4e3b\u8981\u7684\u7c7b\u6709ConcurrentHashMap, CopyOnWriteArrayList \u548cCopyOnWriteArraySet\uff0c\u9605\u8bfb\u8fd9\u7bc7\u6587\u7ae0\u4e86\u89e3\u5982\u4f55\u907f\u514dConcurrentModificationException\u3002"},{"ID":"803","typeID":"11","question":"Executors\u7c7b\u662f\u4ec0\u4e48\uff1f","answer":"Executors\u4e3aExecutor\uff0cExecutorService\uff0cScheduledExecutorService\uff0cThreadFactory\u548cCallable\u7c7b\u63d0\u4f9b\u4e86\u4e00\u4e9b\u5de5\u5177\u65b9\u6cd5\u3002\r\nExecutors\u53ef\u4ee5\u7528\u4e8e\u65b9\u4fbf\u7684\u521b\u5efa\u7ebf\u7a0b\u6c60\u3002"},{"ID":"710","typeID":"11","question":"java\u4e4bHashMap\u3001LinkedHashMap\u548cTreeMap\u7684\u533a\u522b?","answer":"1.HashMap\u7684\u5185\u90e8\u7ed3\u6784\u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u7ebf\u6027\u987a\u5e8f\u5b58\u50a8\uff0c\u4e8c\u6b21\u7ed3\u6784\u4f7f\u7528\u7ebf\u6027\u7684\u5355\u94fe\u8868\u3002\u4f7f\u7528key\u7684hashCode\u505a\u4e8c\u6b21hash\u4e4b\u540e\uff0c\u518d\u622a\u53d6\u5c0f\u4e8e\u6570\u7ec4\u957f\u5ea6\u7684\u503c\u4e3a\u7d22\u5f15\u503c\u3002key\u53ef\u4ee5\u4e3anull\uff0c\u5b58\u5728\u7d22\u5f15\u4e3a0\u7684\u4f4d\u7f6e\u4e0a\u3002\u7531\u4e8e\u4f7f\u7528\u4e86\u6570\u7ec4\uff0c\u6240\u4ee5\u6709\u4e00\u4e2a\u8d1f\u8f7d\u56e0\u5b50loadFactor\u7684\u6982\u5ff5\uff08\u4e34\u754c\u9608\u503cthreshold\uff09\u548cresize\u3002resize\u6bd4\u8f83\u8017\u65f6\uff0c\u51b2\u7a81\u65f6\u94fe\u5f0f\u904d\u5386\u67e5\u627e\u4e5f\u6bd4\u8f83\u8017\u65f6\uff0c\u6240\u4ee5\u9009\u5b9a\u4e00\u4e2a\u5408\u9002\u7684\u521d\u59cb\u5bb9\u6613\u6bd4\u8f83\u91cd\u8981\u3002\u5b58\u53d6\u6027\u80fd\u90fd\u8f83\u9ad8\u3002\u8fed\u4ee3\u904d\u5386\u65f6\u4e00\u7ef4\u4f7f\u7528\u6570\u7ec4\uff0c\u4e8c\u7ef4\u4f7f\u7528\u94fe\u8868\u3002\r\n\r\n\r\n2.LinkedHashMap\u662fHashMap\u7684\u5b50\u7c7b\u3002\u5185\u90e8\u7ed3\u6784\u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u7ebf\u6027\u987a\u5e8f\u5b58\u50a8\uff0c\u4e8c\u6b21\u7ed3\u6784\u4f7f\u7528\u7ebf\u6027\u7684\u5355\u94fe\u8868\uff0c\u4f46\u540c\u65f6\u5185\u90e8\u7ef4\u62a4\u4e86\u4e00\u4e2a\u53cc\u5411\u5faa\u73af\u94fe\u8868\u3002access-order=false\u9ed8\u8ba4\u4e3a\u4f7f\u7528\u65b0\u589e\u5b58\u50a8\u987a\u5e8f\uff0caccess-order=true\u5219\u6307\u5b9a\u4f7f\u7528\u8bfb\u53d6\u548c\u8bbf\u95ee\u987a\u5e8f\u3002removeEldestEntry=false\uff08\u5f53\u6307\u5b9a\u4e3atrue\u65f6\uff0c\u5c31\u662f\u5b9e\u73b0LRU\u7b97\u6cd5\u7684\u7f13\u5b58\u5bb9\u5668\uff0c\u5f53\u7136\u8981\u6307\u5b9a\u6dd8\u6c70\u65f6\u7684\u4f7f\u7528\u9891\u7387\u548c\u5bb9\u91cf\u4e0a\u9650\uff0c\u5176\u5b9e\u662f\u4e00\u4e2a\u6700\u8fd1\u6700\u5c11\u4f7f\u7528-->\u6700\u8fd1\u4f7f\u7528access-order=true\/\u6700\u65b0\u5b58\u50a8access-order=false\uff09\u3002\u5b58\u53d6\u6027\u80fd\u8f83HashMap\u5dee\uff0d\u4e9b\uff0c\u4f46\u76f8\u5dee\u4e0d\u5927\u3002header.after\u4e3a\u5c3e\u65b9\u5411\uff0cheader.before\u4e3a\u9996\u65b9\u5411\u3002\u8fed\u4ee3\u904d\u5386\u65f6entrySet().iterator()\u8ddfHashMap\u4e00\u6837(\u6709\u70b9\u56f0\u60d1\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u6309\u7ebf\u6027\u987a\u5e8f\u8fdb\u884c\u8fed\u4ee3\uff0c\u53ea\u80fd\u91cd\u5199entrySet(),keySet()\u548cvalues()\u65b9\u6cd5)\u3002\u9002\u7528\u4e8e\u6709\u7f13\u5b58\u8bbe\u8ba1\u9700\u6c42\u7684\u60c5\u51b5\uff08\u9700\u7ee7\u627f\uff09\u3002\r\n\r\n\r\n3.TreeMap\u7684\u5185\u90e8\u7ed3\u6784\u662f\u4e00\u68f5\u7ea2\u9ed1\u6811\uff08\u53c8\u53eb\u6392\u5e8f\u6570\uff0c\u662f\u4e8c\u53c9\u6811\u7684\u4e00\u79cd\uff09\uff0c\u4f7f\u7528\u94fe\u5f0f\u5b58\u50a8\uff0c\u53ef\u4ee5\u6307\u5b9a\u6bd4\u8f83\u5668Comparator\uff0ckey\u9700\u5b9e\u73b0Comparable\u63a5\u53e3\u3002key\u4e0d\u80fd\u4e3anull\u3002\u5b58\u7ed3\u70b9\u6027\u80fd\u7a0d\u5dee\uff0c\u56e0\u4e3a\u9700\u8981\u8c03\u6574\u6811\u7ed3\u6784\uff1b\u53d6\u7ed3\u70b9\u7528\u7684\u662f\u94fe\u8868\u904d\u5386\uff0c\u4f46\u662f\u5c5e\u4e8e\u6709\u5e8f\u6bd4\u8f83\uff0c\u6027\u80fd\u4e2d\u7b49\u3002\u8fed\u4ee3\u904d\u5386\u65f6\u7528\u7684\u6811\u7684\u4e2d\u5e8f\u904d\u5386\uff0c\u662f\u4e00\u4e2a\u6709\u5e8f\u5e8f\u5217\u3002\u9002\u7528\u4e8e\u6709\u6392\u5e8f\u9700\u6c42\u7684\u60c5\u51b5\u3002"},{"ID":"669","typeID":"11","question":"\u7f16\u7a0b\u9898: \u5199\u4e00\u4e2aSingleton\u51fa\u6765\uff1f","answer":" Singleton\u6a21\u5f0f\u4e3b\u8981\u4f5c\u7528\u662f\u4fdd\u8bc1\u5728Java\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u4e00\u4e2a\u7c7bClass\u53ea\u6709\u4e00\u4e2a\u5b9e\u4f8b\u5b58\u5728\u3002 \r\n\u4e00\u822cSingleton\u6a21\u5f0f\u901a\u5e38\u6709\u51e0\u79cd\u79cd\u5f62\u5f0f: \r\n\u7b2c\u4e00\u79cd\u5f62\u5f0f: \u5b9a\u4e49\u4e00\u4e2a\u7c7b\uff0c\u5b83\u7684\u6784\u9020\u51fd\u6570\u4e3aprivate\u7684\uff0c\u5b83\u6709\u4e00\u4e2astatic\u7684private\u7684\u8be5\u7c7b\u53d8\u91cf\uff0c\u5728\u7c7b\u521d\u59cb\u5316\u65f6\u5b9e\u4f8b\u8bdd\uff0c\u901a\u8fc7\u4e00\u4e2apublic\u7684getInstance\u65b9\u6cd5\u83b7\u53d6\u5bf9\u5b83\u7684\u5f15\u7528,\u7ee7\u800c\u8c03\u7528\u5176\u4e2d\u7684\u65b9\u6cd5\u3002\r\n\r\npublic class Singleton { \r\nprivate Singleton(){} \r\n\/\/\u5728\u81ea\u5df1\u5185\u90e8\u5b9a\u4e49\u81ea\u5df1\u4e00\u4e2a\u5b9e\u4f8b\uff0c\u662f\u4e0d\u662f\u5f88\u5947\u602a\uff1f \r\n\/\/\u6ce8\u610f\u8fd9\u662fprivate \u53ea\u4f9b\u5185\u90e8\u8c03\u7528 \r\nprivate static Singleton instance = new Singleton(); \r\n\/\/\u8fd9\u91cc\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4f9b\u5916\u90e8\u8bbf\u95ee\u672cclass\u7684\u9759\u6001\u65b9\u6cd5\uff0c\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee \r\npublic static Singleton getInstance() { \r\nreturn instance; \r\n}  \r\n}  \r\n\r\n\r\n\u7b2c\u4e8c\u79cd\u5f62\u5f0f:\r\n\r\npublic class Singleton {  \r\nprivate static Singleton instance = null; \r\npublic static synchronized Singleton getInstance() { \r\n\/\/\u8fd9\u4e2a\u65b9\u6cd5\u6bd4\u4e0a\u9762\u6709\u6240\u6539\u8fdb\uff0c\u4e0d\u7528\u6bcf\u6b21\u90fd\u8fdb\u884c\u751f\u6210\u5bf9\u8c61\uff0c\u53ea\u662f\u7b2c\u4e00\u6b21 \r\n\/\/\u4f7f\u7528\u65f6\u751f\u6210\u5b9e\u4f8b\uff0c\u63d0\u9ad8\u4e86\u6548\u7387\uff01 \r\nif (instance==null) \r\ninstance\uff1dnew Singleton(); \r\nreturn instance; }  \r\n}  \r\n\u5176\u4ed6\u5f62\u5f0f: \r\n\u5b9a\u4e49\u4e00\u4e2a\u7c7b\uff0c\u5b83\u7684\u6784\u9020\u51fd\u6570\u4e3aprivate\u7684\uff0c\u6240\u6709\u65b9\u6cd5\u4e3astatic\u7684\u3002 \r\n\u4e00\u822c\u8ba4\u4e3a\u7b2c\u4e00\u79cd\u5f62\u5f0f\u8981\u66f4\u52a0\u5b89\u5168\u4e9b\u3002"},{"ID":"668","typeID":"11","question":"swtich\u662f\u5426\u80fd\u4f5c\u7528\u5728byte\u4e0a\uff0c\u662f\u5426\u80fd\u4f5c\u7528\u5728long\u4e0a\uff0c\u662f\u5426\u80fd\u4f5c\u7528\u5728String\u4e0a? \r\n","answer":"switch\uff08expr1\uff09\u4e2d\uff0cexpr1\u662f\u4e00\u4e2a\u6574\u6570\u8868\u8fbe\u5f0f\u3002\u56e0\u6b64\u4f20\u9012\u7ed9 switch \u548c case \u8bed\u53e5\u7684\u53c2\u6570\u5e94\u8be5\u662f int\u3001 short\u3001 char \u6216\u8005 byte\u3002long,string \u90fd\u4e0d\u80fd\u4f5c\u7528\u4e8eswtich\u3002"},{"ID":"667","typeID":"11","question":"\u7f16\u7a0b\u9898: \u7528\u6700\u6709\u6548\u7387\u7684\u65b9\u6cd5\u7b97\u51fa2\u4e58\u4ee58\u7b49\u65bc\u51e0? ","answer":"\u5c0f\u7f16\u6ce8\uff1aC\u80cc\u666f\u7684\u7a0b\u5e8f\u5458\u7279\u522b\u559c\u6b22\u95ee\u8fd9\u79cd\u95ee\u9898\uff0c\u4f60\u5148\u731c\u731c\u2014\u2014=-\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n2 << 3"},{"ID":"666","typeID":"11","question":"try {}\u91cc\u6709\u4e00\u4e2areturn\u8bed\u53e5\uff0c\u90a3\u4e48\u7d27\u8ddf\u5728\u8fd9\u4e2atry\u540e\u7684finally {}\u91cc\u7684code\u4f1a\u4e0d\u4f1a\u88ab\u6267\u884c\uff0c\u4ec0\u4e48\u65f6\u5019\u88ab\u6267\u884c\uff0c\u5728return\u524d\u8fd8\u662f\u540e? ","answer":"\u4f1a\u6267\u884c\uff0c\u5728return\u524d\u6267\u884c\u3002"},{"ID":"665","typeID":"11","question":"\u5f53\u4e00\u4e2a\u7ebf\u7a0b\u8fdb\u5165\u4e00\u4e2a\u5bf9\u8c61\u7684\u4e00\u4e2asynchronized\u65b9\u6cd5\u540e\uff0c\u5176\u5b83\u7ebf\u7a0b\u662f\u5426\u53ef\u8fdb\u5165\u6b64\u5bf9\u8c61\u7684\u5176\u5b83\u65b9\u6cd5? ","answer":"\u4e0d\u80fd\uff0c\u4e00\u4e2a\u5bf9\u8c61\u7684\u4e00\u4e2asynchronized\u65b9\u6cd5\u53ea\u80fd\u7531\u4e00\u4e2a\u7ebf\u7a0b\u8bbf\u95ee\u3002"},{"ID":"664","typeID":"11","question":"\u662f\u5426\u53ef\u4ee5\u7ee7\u627fString\u7c7b? ","answer":"String\u7c7b\u662ffinal\u7c7b\u6545\u4e0d\u53ef\u4ee5\u7ee7\u627f\u3002"},{"ID":"663","typeID":"11","question":"\u6784\u9020\u5668Constructor\u662f\u5426\u53ef\u88aboverride? ","answer":"\u6784\u9020\u5668Constructor\u4e0d\u80fd\u88ab\u7ee7\u627f\uff0c\u56e0\u6b64\u4e0d\u80fd\u91cd\u5199Overriding\uff0c\u4f46\u53ef\u4ee5\u88ab\u91cd\u8f7dOverloading\u3002"},{"ID":"662","typeID":"11","question":"\u542f\u52a8\u4e00\u4e2a\u7ebf\u7a0b\u662f\u7528run()\u8fd8\u662fstart()? ","answer":"\u542f\u52a8\u4e00\u4e2a\u7ebf\u7a0b\u662f\u8c03\u7528start()\u65b9\u6cd5\uff0c\u4f7f\u7ebf\u7a0b\u6240\u4ee3\u8868\u7684\u865a\u62df\u5904\u7406\u673a\u5904\u4e8e\u53ef\u8fd0\u884c\u72b6\u6001\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u53ef\u4ee5\u7531JVM\u8c03\u5ea6\u5e76\u6267\u884c\u3002\u8fd9\u5e76\u4e0d\u610f\u5473\u7740\u7ebf\u7a0b\u5c31\u4f1a\u7acb\u5373\u8fd0\u884c\u3002run()\u65b9\u6cd5\u53ef\u4ee5\u4ea7\u751f\u5fc5\u987b\u9000\u51fa\u7684\u6807\u5fd7\u6765\u505c\u6b62\u4e00\u4e2a\u7ebf\u7a0b\u3002"},{"ID":"661","typeID":"11","question":"\u63a5\u53e3\u662f\u5426\u53ef\u7ee7\u627f\u63a5\u53e3? \u62bd\u8c61\u7c7b\u662f\u5426\u53ef\u5b9e\u73b0(implements)\u63a5\u53e3? \u62bd\u8c61\u7c7b\u662f\u5426\u53ef\u7ee7\u627f\u5b9e\u4f53\u7c7b(concrete class)? ","answer":"\u63a5\u53e3\u53ef\u4ee5\u7ee7\u627f\u63a5\u53e3\u3002\r\n\u62bd\u8c61\u7c7b\u53ef\u4ee5\u5b9e\u73b0(implements)\u63a5\u53e3\uff0c\u62bd\u8c61\u7c7b\u662f\u5426\u53ef\u7ee7\u627f\u5b9e\u4f53\u7c7b\uff0c\u4f46\u524d\u63d0\u662f\u5b9e\u4f53\u7c7b\u5fc5\u987b\u6709\u660e\u786e\u7684\u6784\u9020\u51fd\u6570\u3002"},{"ID":"660","typeID":"11","question":"abstract\u7684method\u662f\u5426\u53ef\u540c\u65f6\u662fstatic,\u662f\u5426\u53ef\u540c\u65f6\u662fnative\uff0c\u662f\u5426\u53ef\u540c\u65f6\u662fsynchronized? ","answer":"\u90fd\u4e0d\u80fd"},{"ID":"659","typeID":"11","question":"abstract class\u548cinterface\u6709\u4ec0\u4e48\u533a\u522b? ","answer":"\u58f0\u660e\u65b9\u6cd5\u7684\u5b58\u5728\u800c\u4e0d\u53bb\u5b9e\u73b0\u5b83\u7684\u7c7b\u88ab\u53eb\u505a\u62bd\u8c61\u7c7b\uff08abstract class\uff09\uff0c\u5b83\u7528\u4e8e\u8981\u521b\u5efa\u4e00\u4e2a\u4f53\u73b0\u67d0\u4e9b\u57fa\u672c\u884c\u4e3a\u7684\u7c7b\uff0c\u5e76\u4e3a\u8be5\u7c7b\u58f0\u660e\u65b9\u6cd5\uff0c\u4f46\u4e0d\u80fd\u5728\u8be5\u7c7b\u4e2d\u5b9e\u73b0\u8be5\u7c7b\u7684\u60c5\u51b5\u3002\u4e0d\u80fd\u521b\u5efaabstract \u7c7b\u7684\u5b9e\u4f8b\u3002\u7136\u800c\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u53d8\u91cf\uff0c\u5176\u7c7b\u578b\u662f\u4e00\u4e2a\u62bd\u8c61\u7c7b\uff0c\u5e76\u8ba9\u5b83\u6307\u5411\u5177\u4f53\u5b50\u7c7b\u7684\u4e00\u4e2a\u5b9e\u4f8b\u3002\u4e0d\u80fd\u6709\u62bd\u8c61\u6784\u9020\u51fd\u6570\u6216\u62bd\u8c61\u9759\u6001\u65b9\u6cd5\u3002Abstract \u7c7b\u7684\u5b50\u7c7b\u4e3a\u5b83\u4eec\u7236\u7c7b\u4e2d\u7684\u6240\u6709\u62bd\u8c61\u65b9\u6cd5\u63d0\u4f9b\u5b9e\u73b0\uff0c\u5426\u5219\u5b83\u4eec\u4e5f\u662f\u62bd\u8c61\u7c7b\u4e3a\u3002\u53d6\u800c\u4ee3\u4e4b\uff0c\u5728\u5b50\u7c7b\u4e2d\u5b9e\u73b0\u8be5\u65b9\u6cd5\u3002\u77e5\u9053\u5176\u884c\u4e3a\u7684\u5176\u5b83\u7c7b\u53ef\u4ee5\u5728\u7c7b\u4e2d\u5b9e\u73b0\u8fd9\u4e9b\u65b9\u6cd5\u3002 \r\n\u63a5\u53e3\uff08interface\uff09\u662f\u62bd\u8c61\u7c7b\u7684\u53d8\u4f53\u3002\u5728\u63a5\u53e3\u4e2d\uff0c\u6240\u6709\u65b9\u6cd5\u90fd\u662f\u62bd\u8c61\u7684\u3002\u591a\u7ee7\u627f\u6027\u53ef\u901a\u8fc7\u5b9e\u73b0\u8fd9\u6837\u7684\u63a5\u53e3\u800c\u83b7\u5f97\u3002\u63a5\u53e3\u4e2d\u7684\u6240\u6709\u65b9\u6cd5\u90fd\u662f\u62bd\u8c61\u7684\uff0c\u6ca1\u6709\u4e00\u4e2a \u6709\u7a0b\u5e8f\u4f53\u3002\u63a5\u53e3\u53ea\u53ef\u4ee5\u5b9a\u4e49static final\u6210\u5458\u53d8\u91cf\u3002\u63a5\u53e3\u7684\u5b9e\u73b0\u4e0e\u5b50\u7c7b\u76f8\u4f3c\uff0c\u9664\u4e86\u8be5\u5b9e\u73b0\u7c7b\u4e0d\u80fd\u4ece\u63a5\u53e3\u5b9a\u4e49\u4e2d\u7ee7\u627f\u884c\u4e3a\u3002\u5f53\u7c7b\u5b9e\u73b0\u7279\u6b8a\u63a5\u53e3\u65f6\uff0c\u5b83\u5b9a\u4e49\uff08\u5373\u5c06\u7a0b\u5e8f\u4f53\u7ed9\u4e88\uff09\u6240\u6709\u8fd9\u79cd\u63a5\u53e3\u7684\u65b9\u6cd5\u3002 \u7136\u540e\uff0c\u5b83\u53ef\u4ee5\u5728\u5b9e\u73b0\u4e86\u8be5\u63a5\u53e3\u7684\u7c7b\u7684\u4efb\u4f55\u5bf9\u8c61\u4e0a\u8c03\u7528\u63a5\u53e3\u7684\u65b9\u6cd5\u3002\u7531\u4e8e\u6709\u62bd\u8c61\u7c7b\uff0c\u5b83\u5141\u8bb8\u4f7f\u7528\u63a5\u53e3\u540d\u4f5c\u4e3a\u5f15\u7528\u53d8\u91cf\u7684\u7c7b\u578b\u3002\u901a\u5e38\u7684\u52a8\u6001\u8054\u7f16\u5c06\u751f\u6548\u3002\u5f15\u7528\u53ef\u4ee5\u8f6c\u6362\u5230 \u63a5\u53e3\u7c7b\u578b\u6216\u4ece\u63a5\u53e3\u7c7b\u578b\u8f6c\u6362\uff0cinstanceof \u8fd0\u7b97\u7b26\u53ef\u4ee5\u7528\u6765\u51b3\u5b9a\u67d0\u5bf9\u8c61\u7684\u7c7b\u662f\u5426\u5b9e\u73b0\u4e86\u63a5\u53e3\u3002"},{"ID":"658","typeID":"11","question":"List, Set, Map\u662f\u5426\u7ee7\u627f\u81eaCollection\u63a5\u53e3? ","answer":"List\uff0cSet\u662f \r\nMap\u4e0d\u662f"},{"ID":"657","typeID":"11","question":"\u7ed9\u6211\u4e00\u4e2a\u4f60\u6700\u5e38\u89c1\u5230\u7684runtime exception?","answer":"\u53c2\u8003\u5982\u4e0b\uff1a \r\nArithmeticException,  \r\nArrayStoreException,  \r\nBufferOverflowException,  \r\nBufferUnderflowException,  \r\nCannotRedoException,  \r\nCannotUndoException,  \r\nClassCastException,  \r\nCMMException,  \r\nConcurrentModificationException,  \r\nDOMException,  \r\nEmptyStackException,  \r\nIllegalArgumentException,  \r\nIllegalMonitorStateException,  \r\nIllegalPathStateException,  \r\nIllegalStateException,  \r\nImagingOpException,  \r\nIndexOutOfBoundsException,  \r\nMissingResourceException,  \r\nNegativeArraySizeException,  \r\nNoSuchElementException,  \r\nNullPointerException,  \r\nProfileDataException,  \r\nProviderException,  \r\nRasterFormatException,  \r\nSecurityException,  \r\nSystemException,  \r\nUndeclaredThrowableException,  \r\nUnmodifiableSetException,  \r\nUnsupportedOperationException"},{"ID":"656","typeID":"11","question":"Set\u91cc\u7684\u5143\u7d20\u662f\u4e0d\u80fd\u91cd\u590d\u7684\uff0c\u90a3\u4e48\u7528\u4ec0\u4e48\u65b9\u6cd5\u6765\u533a\u5206\u91cd\u590d\u4e0e\u5426\u5462? \u662f\u7528==\u8fd8\u662fequals()? \u5b83\u4eec\u6709\u4f55\u533a\u522b? ","answer":"Set\u91cc\u7684\u5143\u7d20\u662f\u4e0d\u80fd\u91cd\u590d\u7684\uff0c\u90a3\u4e48\u7528iterator()\u65b9\u6cd5\u6765\u533a\u5206\u91cd\u590d\u4e0e\u5426\u3002equals()\u662f\u5224\u8bfb\u4e24\u4e2aSet\u662f\u5426\u76f8\u7b49\u3002 \r\nequals()\u548c==\u65b9\u6cd5\u51b3\u5b9a\u5f15\u7528\u503c\u662f\u5426\u6307\u5411\u540c\u4e00\u5bf9\u8c61equals()\u5728\u7c7b\u4e2d\u88ab\u8986\u76d6\uff0c\u4e3a\u7684\u662f\u5f53\u4e24\u4e2a\u5206\u79bb\u7684\u5bf9\u8c61\u7684\u5185\u5bb9\u548c\u7c7b\u578b\u76f8\u914d\u7684\u8bdd\uff0c\u8fd4\u56de\u771f\u503c\u3002"},{"ID":"655","typeID":"11","question":"Overload\u548cOverride\u7684\u533a\u522b\u3002Overloaded\u7684\u65b9\u6cd5\u662f\u5426\u53ef\u4ee5\u6539\u53d8\u8fd4\u56de\u503c\u7684\u7c7b\u578b? ","answer":"\u65b9\u6cd5\u7684\u91cd\u5199Overriding\u548c\u91cd\u8f7dOverloading\u662fJava\u591a\u6001\u6027\u7684\u4e0d\u540c\u8868\u73b0\u3002\u91cd\u5199Overriding\u662f\u7236\u7c7b\u4e0e\u5b50\u7c7b\u4e4b\u95f4\u591a\u6001\u6027\u7684\u4e00\u79cd\u8868\u73b0\uff0c \u91cd\u8f7dOverloading\u662f\u4e00\u4e2a\u7c7b\u4e2d\u591a\u6001\u6027\u7684\u4e00\u79cd\u8868\u73b0\u3002\u5982\u679c\u5728\u5b50\u7c7b\u4e2d\u5b9a\u4e49\u67d0\u65b9\u6cd5\u4e0e\u5176\u7236\u7c7b\u6709\u76f8\u540c\u7684\u540d\u79f0\u548c\u53c2\u6570\uff0c\u6211\u4eec\u8bf4\u8be5\u65b9\u6cd5\u88ab\u91cd\u5199 (Overriding)\u3002\u5b50\u7c7b\u7684\u5bf9\u8c61\u4f7f\u7528\u8fd9\u4e2a\u65b9\u6cd5\u65f6\uff0c\u5c06\u8c03\u7528\u5b50\u7c7b\u4e2d\u7684\u5b9a\u4e49\uff0c\u5bf9\u5b83\u800c\u8a00\uff0c\u7236\u7c7b\u4e2d\u7684\u5b9a\u4e49\u5982\u540c\u88ab\u201c\u5c4f\u853d\u201d\u4e86\u3002\u5982\u679c\u5728\u4e00\u4e2a\u7c7b\u4e2d\u5b9a\u4e49\u4e86\u591a\u4e2a\u540c\u540d\u7684\u65b9 \u6cd5\uff0c\u5b83\u4eec\u6216\u6709\u4e0d\u540c\u7684\u53c2\u6570\u4e2a\u6570\u6216\u6709\u4e0d\u540c\u7684\u53c2\u6570\u7c7b\u578b\uff0c\u5219\u79f0\u4e3a\u65b9\u6cd5\u7684\u91cd\u8f7d(Overloading)\u3002Overloaded\u7684\u65b9\u6cd5\u662f\u53ef\u4ee5\u6539\u53d8\u8fd4\u56de\u503c\u7684\u7c7b\u578b\u3002"},{"ID":"654","typeID":"11","question":"Java\u6709\u6ca1\u6709goto?  ","answer":"\u6ca1\u6709 \u5f88\u5341\u4e09\u7684\u95ee\u9898\r\nPS:\u5982\u679c\u54ea\u4e2a\u9762\u8bd5\u7684\u95ee\u5230\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u529d\u4f60\u8fd8\u662f\u522b\u8fdb\u8fd9\u5bb6\u516c\u53f8"},{"ID":"653","typeID":"11","question":"sleep() \u548c wait() \u6709\u4ec0\u4e48\u533a\u522b?   ","answer":"sleep\u662f\u7ebf\u7a0b\u7c7b\uff08Thread\uff09\u7684\u65b9\u6cd5\uff0c\u5bfc\u81f4\u6b64\u7ebf\u7a0b\u6682\u505c\u6267\u884c\u6307\u5b9a\u65f6\u95f4\uff0c\u7ed9\u6267\u884c\u673a\u4f1a\u7ed9\u5176\u4ed6\u7ebf\u7a0b\uff0c\u4f46\u662f\u76d1\u63a7\u72b6\u6001\u4f9d\u7136\u4fdd\u6301\uff0c\u5230\u65f6\u540e\u4f1a\u81ea\u52a8\u6062\u590d\u3002\u8c03\u7528 sleep\u4e0d\u4f1a\u91ca\u653e\u5bf9\u8c61\u9501\u3002wait\u662fObject\u7c7b\u7684\u65b9\u6cd5\uff0c\u5bf9\u6b64\u5bf9\u8c61\u8c03\u7528wait\u65b9\u6cd5\u5bfc\u81f4\u672c\u7ebf\u7a0b\u653e\u5f03\u5bf9\u8c61\u9501\uff0c\u8fdb\u5165\u7b49\u5f85\u6b64\u5bf9\u8c61\u7684\u7b49\u5f85\u9501\u5b9a\u6c60\uff0c\u53ea\u6709\u9488\u5bf9\u6b64\u5bf9 \u8c61\u53d1\u51fanotify\u65b9\u6cd5\uff08\u6216notifyAll\uff09\u540e\u672c\u7ebf\u7a0b\u624d\u8fdb\u5165\u5bf9\u8c61\u9501\u5b9a\u6c60\u51c6\u5907\u83b7\u5f97\u5bf9\u8c61\u9501\u8fdb\u5165\u8fd0\u884c\u72b6\u6001\u3002"},{"ID":"652","typeID":"11","question":"short s1 = 1; s1 = s1 + 1;\u6709\u4ec0\u4e48\u9519?   short s1 = 1; s1 += 1;\u6709\u4ec0\u4e48\u9519?","answer":"short s1 = 1; s1 = s1 + 1; \uff08s1+1\u8fd0\u7b97\u7ed3\u679c\u662fint\u578b\uff0c\u9700\u8981\u5f3a\u5236\u8f6c\u6362\u7c7b\u578b\uff09short s1 = 1; s1 += 1;"},{"ID":"651","typeID":"11","question":"Math.round(11.5)\u7b49\u65bc\u591a\u5c11? Math.round(-11.5)\u7b49\u65bc\u591a\u5c11?  ","answer":"Math.round(11.5)==12Math.round(-11.5)==-11round\u65b9\u6cd5\u8fd4\u56de\u4e0e\u53c2\u6570\u6700\u63a5\u8fd1\u7684\u957f\u6574\u6570\uff0c\u53c2\u6570\u52a01\/2\u540e\u6c42\u5176floor."},{"ID":"650","typeID":"11","question":"String s = new String(\"xyz\");\u521b\u5efa\u4e86\u51e0\u4e2aString Object? ","answer":"\u4e24\u4e2a"},{"ID":"649","typeID":"11","question":"GC\u662f\u4ec0\u4e48? \u4e3a\u4ec0\u4e48\u8981\u6709GC?  ","answer":"GC\u662f\u5783\u573e\u6536\u96c6\u7684\u610f\u601d\uff08Gabage Collection\uff09,\u5185\u5b58\u5904\u7406\u662f\u7f16\u7a0b\u4eba\u5458\u5bb9\u6613\u51fa\u73b0\u95ee\u9898\u7684\u5730\u65b9\uff0c\u5fd8\u8bb0\u6216\u8005\u9519\u8bef\u7684\u5185\u5b58\u56de\u6536\u4f1a\u5bfc\u81f4\u7a0b\u5e8f\u6216\u7cfb\u7edf\u7684\u4e0d\u7a33\u5b9a\u751a\u81f3\u5d29\u6e83\uff0c Java \u63d0\u4f9b\u7684GC\u529f\u80fd\u53ef\u4ee5 \u81ea\u52a8\u76d1\u6d4b\u5bf9\u8c61\u662f\u5426\u8d85\u8fc7\u4f5c\u7528\u57df\u4ece\u800c\u8fbe\u5230\u81ea\u52a8\u56de\u6536\u5185\u5b58\u7684\u76ee\u7684\uff0c Java \u8bed\u8a00\u6ca1\u6709\u63d0\u4f9b\u91ca\u653e\u5df2\u5206\u914d\u5185\u5b58\u7684\u663e\u793a\u64cd\u4f5c\u65b9\u6cd5\u3002"},{"ID":"648","typeID":"11","question":"\u4ec0\u4e48\u65f6\u5019\u7528assert\uff1f","answer":"\u65b0\u589e\u5173\u952e\u5b57\uff08\u8bed\u6cd5\uff09\uff0c\u7528\u4e8e\u6d4b\u8bd5boolean\u8868\u8fbe\u5f0f\u72b6\u6001\uff0c\u53ef\u7528\u4e8e\u8c03\u8bd5\u7a0b\u5e8f\u3002\u4f7f\u7528\u65b9\u6cd5 assert \uff0c\u8868\u793a\u5982\u679c\u8868\u8fbe\u5f0f\u4e3a\u771f\uff08true\uff09,\u5219\u4e0b\u9762\u7684\u8bed\u53e5\u6267\u884c\uff0c\u5426\u5219\u629b\u51faAssertionError\u3002\u53e6\u5916\u7684\u4f7f\u7528\u65b9\u5f0fassert < boolean\u8868\u8fbe\u5f0f>:\uff0c\u8868\u793a\u5982\u679c\u8868\u8fbe\u5f0f\u4e3a\u771f\uff0c\u540e\u9762\u7684\u8868\u8fbe\u5f0f\u5ffd\u7565\uff0c\u5426\u5219\u540e\u9762\u8868\u8fbe\u5f0f\u7684\u503c\u7528\u4e8eAssertionError\u7684\u6784\u5efa\u53c2\u6570\u3002\u6ce8\u610f\u7f16\u8bd1\u65f6\u8981\u589e\u52a0-source \uff0c\u5426\u5219\u62a5\u9519\u3002\u8fd0\u884c\u65f6\u8981\u589e\u52a0 \u2013ea\u53c2\u6570\uff0c\u5426\u5219assert\u884c\u88ab\u5ffd\u7565"},{"ID":"647","typeID":"11","question":"Collection \u548c Collections\u7684\u533a\u522b \uff1f","answer":"Collection\u662f\u96c6\u5408\u7c7b\u7684\u4e0a\u7ea7\u63a5\u53e3\uff0c\u7ee7\u627f\u4e0e\u4ed6\u7684\u63a5\u53e3\u4e3b\u8981\u6709Set \u548cList.Collections\u662f\u9488\u5bf9\u96c6\u5408\u7c7b\u7684\u4e00\u4e2a\u5e2e\u52a9\u7c7b\uff0c\u4ed6\u63d0\u4f9b\u4e00\u7cfb\u5217\u9759\u6001\u65b9\u6cd5\u5b9e\u73b0\u5bf9\u5404\u79cd\u96c6\u5408\u7684\u641c\u7d22\u3001\u6392\u5e8f\u3001\u7ebf\u7a0b\u5b89\u5168\u5316\u7b49\u64cd\u4f5c\u3002"},{"ID":"646","typeID":"11","question":"HashMap\u548cHashtable\u7684\u533a\u522b\uff1f","answer":"HashMap\u662fHashtable\u7684\u8f7b\u91cf\u7ea7\u5b9e\u73b0\uff08\u975e\u7ebf\u7a0b \u5b89\u5168 \u7684\u5b9e\u73b0\uff09\uff0c\u4ed6\u4eec\u90fd\u5b8c\u6210\u4e86Map\u63a5\u53e3\uff0c\u4e3b\u8981\u533a\u522b\u5728\u4e8eHashMap\u5141\u8bb8\u7a7a\uff08null\uff09\u952e\u503c\uff08key\uff09,\u7531\u4e8e\u975e\u7ebf\u7a0b \u5b89\u5168 \uff0c\u6548\u7387\u4e0a\u53ef\u80fd\u9ad8\u4e8eHashtable."},{"ID":"645","typeID":"11","question":"&\u548c&&\u7684\u533a\u522b","answer":"&\u662f\u4f4d\u8fd0\u7b97\u7b26\uff0c\u8868\u793a\u6309\u4f4d\u4e0e\u8fd0\u7b97\uff0c&&\u662f\u903b\u8f91\u8fd0\u7b97\u7b26\uff0c\u8868\u793a\u903b\u8f91\u4e0e\uff08and\uff09."},{"ID":"644","typeID":"11","question":"Static Nested Class \u548c Inner Class\u7684\u4e0d\u540c\uff1f","answer":"Static Nested Class\u662f\u88ab\u58f0\u660e\u4e3a\u9759\u6001\uff08static\uff09\u7684\u5185\u90e8\u7c7b\uff0c\u5b83\u53ef\u4ee5\u4e0d\u4f9d\u8d56\u4e8e\u5916\u90e8\u7c7b\u5b9e\u4f8b\u88ab\u5b9e\u4f8b\u5316\u3002\u800c\u901a\u5e38\u7684\u5185\u90e8\u7c7b\u9700\u8981\u5728\u5916\u90e8\u7c7b\u5b9e\u4f8b\u5316\u540e\u624d\u80fd\u5b9e\u4f8b\u5316\u3002"},{"ID":"643","typeID":"11","question":"Anonymous Inner Class (\u533f\u540d\u5185\u90e8\u7c7b) \u662f\u5426\u53ef\u4ee5extends(\u7ee7\u627f)\u5176\u5b83\u7c7b\uff0c\u662f\u5426\u53ef\u4ee5implements(\u5b9e\u73b0)interface(\u63a5\u53e3)? ","answer":"\u53ef\u4ee5\u7ee7\u627f\u5176\u4ed6\u7c7b\u6216\u5b8c\u6210\u5176\u4ed6\u63a5\u53e3\uff0c\u5728swing\u7f16\u7a0b\u4e2d\u5e38\u7528\u6b64\u65b9\u5f0f\u3002"},{"ID":"642","typeID":"11","question":"\u8c08\u8c08final, finally, finalize\u7684\u533a\u522b\uff1f","answer":"final \u7528\u4e8e\u58f0\u660e\u5c5e\u6027\uff0c\u65b9\u6cd5\u548c\u7c7b\uff0c\u5206\u522b\u8868\u793a\u5c5e\u6027\u4e0d\u53ef\u53d8\uff0c\u65b9\u6cd5\u4e0d\u53ef\u8986\u76d6\uff0c\u7c7b\u4e0d\u53ef\u7ee7\u627f\u3002finally\u662f\u5f02\u5e38\u5904\u7406\u8bed\u53e5\u7ed3\u6784\u7684\u4e00\u90e8\u5206\uff0c\u8868\u793a\u603b\u662f\u6267\u884c\u3002finalize\u662f Object\u7c7b\u7684\u4e00\u4e2a\u65b9\u6cd5\uff0c\u5728\u5783\u573e\u6536\u96c6\u5668\u6267\u884c\u7684\u65f6\u5019\u4f1a\u8c03\u7528\u88ab\u56de\u6536\u5bf9\u8c61\u7684\u6b64\u65b9\u6cd5\uff0c\u53ef\u4ee5\u8986\u76d6\u6b64\u65b9\u6cd5\u63d0\u4f9b\u5783\u573e\u6536\u96c6\u65f6\u7684\u5176\u4ed6\u8d44\u6e90\u56de\u6536\uff0c\u4f8b\u5982\u5173\u95ed\u6587\u4ef6\u7b49\u3002"},{"ID":"641","typeID":"11","question":"heap\u548cstack\u6709\u4ec0\u4e48\u533a\u522b \uff1f","answer":"\u6808\u662f\u4e00\u79cd\u7ebf\u5f62\u96c6\u5408\uff0c\u5176\u6dfb\u52a0\u548c\u5220\u9664\u5143\u7d20\u7684\u64cd\u4f5c\u5e94\u5728\u540c\u4e00\u6bb5\u5b8c\u6210\u3002\u6808\u6309\u7167\u540e\u8fdb\u5148\u51fa\u7684\u65b9\u5f0f\u8fdb\u884c\u5904\u7406\u3002  \r\n\u5806\u662f\u6808\u7684\u4e00\u4e2a\u7ec4\u6210\u5143\u7d20  "},{"ID":"640","typeID":"11","question":"\u5728java\u4e2d\u4e00\u4e2a\u7c7b\u88ab\u58f0\u660e\u4e3afinal\u7c7b\u578b\uff0c\u8868\u793a\u4e86\u4ec0\u4e48\u610f\u601d\uff1f","answer":"\u8868\u793a\u8be5\u7c7b\u4e0d\u80fd\u88ab\u7ee7\u627f\uff0c\u662f\u9876\u7ea7\u7c7b\u3002"},{"ID":"639","typeID":"11","question":"Error\u4e0eException\u6709\u4ec0\u4e48\u533a\u522b\uff1f","answer":"Error\u8868\u793a\u7cfb\u7edf\u7ea7\u7684\u9519\u8bef\u548c\u7a0b\u5e8f\u4e0d\u5fc5\u5904\u7406\u7684\u5f02\u5e38\uff0c  \r\nException\u8868\u793a\u9700\u8981\u6355\u6349\u6216\u8005\u9700\u8981\u7a0b\u5e8f\u8fdb\u884c\u5904\u7406\u7684\u5f02\u5e38\u3002"},{"ID":"638","typeID":"11","question":"\u591a\u7ebf\u7a0b\u6709\u51e0\u79cd\u5b9e\u73b0\u65b9\u6cd5?\u540c\u6b65\u6709\u51e0\u79cd\u5b9e\u73b0\u65b9\u6cd5?","answer":"\u591a\u7ebf\u7a0b\u6709\u4e24\u79cd\u5b9e\u73b0\u65b9\u6cd5\uff0c\u5206\u522b\u662f\u7ee7\u627fThread\u7c7b\u4e0e\u5b9e\u73b0Runnable\u63a5\u53e3\r\n\r\n\u540c\u6b65\u7684\u5b9e\u73b0\u65b9\u9762\u6709\u4e24\u79cd\uff0c\u5206\u522b\u662fsynchronized,wait\u4e0enotify\r\n\r\nwait():\u4f7f\u4e00\u4e2a\u7ebf\u7a0b\u5904\u4e8e\u7b49\u5f85\u72b6\u6001\uff0c\u5e76\u4e14\u91ca\u653e\u6240\u6301\u6709\u7684\u5bf9\u8c61\u7684lock\u3002\r\n\r\nsleep():\u4f7f\u4e00\u4e2a\u6b63\u5728\u8fd0\u884c\u7684\u7ebf\u7a0b\u5904\u4e8e\u7761\u7720\u72b6\u6001\uff0c\u662f\u4e00\u4e2a\u9759\u6001\u65b9\u6cd5\uff0c\u8c03\u7528\u6b64\u65b9\u6cd5\u8981\u6355\u6349InterruptedException\u5f02\u5e38\u3002\r\n\r\nnotify():\u5524\u9192\u4e00\u4e2a\u5904\u4e8e\u7b49\u5f85\u72b6\u6001\u7684\u7ebf\u7a0b\uff0c\u6ce8\u610f\u7684\u662f\u5728\u8c03\u7528\u6b64\u65b9\u6cd5\u7684\u65f6\u5019\uff0c\u5e76\u4e0d\u80fd\u786e\u5207\u7684\u5524\u9192\u67d0\u4e00\u4e2a\u7b49\u5f85\u72b6\u6001\u7684\u7ebf\u7a0b\uff0c\u800c\u662f\u7531JVM\u786e\u5b9a\u5524\u9192\u54ea\u4e2a\u7ebf\u7a0b\uff0c\u800c\u4e14\u4e0d\u662f\u6309\u4f18\u5148\u7ea7\u3002\r\n\r\nAllnotity():\u5524\u9192\u6240\u6709\u5904\u5165\u7b49\u5f85\u72b6\u6001\u7684\u7ebf\u7a0b\uff0c\u6ce8\u610f\u5e76\u4e0d\u662f\u7ed9\u6240\u6709\u5524\u9192\u7ebf\u7a0b\u4e00\u4e2a\u5bf9\u8c61\u7684\u9501\uff0c\u800c\u662f\u8ba9\u5b83\u4eec\u7ade\u4e89\u3002"},{"ID":"637","typeID":"11","question":"\u540c\u6b65\u548c\u5f02\u6b65\u6709\u4f55\u5f02\u540c\uff0c\u5728\u4ec0\u4e48\u60c5\u51b5\u4e0b\u5206\u522b\u4f7f\u7528\u4ed6\u4eec\uff1f\u4e3e\u4f8b\u8bf4\u660e\u3002","answer":"\u5982\u679c\u6570\u636e\u5c06\u5728\u7ebf\u7a0b\u95f4\u5171\u4eab\u3002\u4f8b\u5982\u6b63\u5728\u5199\u7684\u6570\u636e\u4ee5\u540e\u53ef\u80fd\u88ab\u53e6\u4e00\u4e2a\u7ebf\u7a0b\u8bfb\u5230\uff0c\u6216\u8005\u6b63\u5728\u8bfb\u7684\u6570\u636e\u53ef\u80fd\u5df2\u7ecf\u88ab\u53e6\u4e00\u4e2a\u7ebf\u7a0b\u5199\u8fc7\u4e86\uff0c\u90a3\u4e48\u8fd9\u4e9b\u6570\u636e\u5c31\u662f\u5171\u4eab\u6570\u636e\uff0c\u5fc5\u987b\u8fdb\u884c\u540c\u6b65\u5b58\u53d6\u3002\r\n\r\n\u5f53\u5e94\u7528\u7a0b\u5e8f\u5728\u5bf9\u8c61\u4e0a\u8c03\u7528\u4e86\u4e00\u4e2a\u9700\u8981\u82b1\u8d39\u5f88\u957f\u65f6\u95f4\u6765\u6267\u884c\u7684\u65b9\u6cd5\uff0c\u5e76\u4e14\u4e0d\u5e0c\u671b\u8ba9\u7a0b\u5e8f\u7b49\u5f85\u65b9\u6cd5\u7684\u8fd4\u56de\u65f6\uff0c\u5c31\u5e94\u8be5\u4f7f\u7528\u5f02\u6b65\u7f16\u7a0b\uff0c\u5728\u5f88\u591a\u60c5\u51b5\u4e0b\u91c7\u7528\u5f02\u6b65\u9014\u5f84\u5f80\u5f80\u66f4\u6709\u6548\u7387\u3002"},{"ID":"636","typeID":"11","question":"sleep()\u548c wait()\u6709\u4ec0\u4e48\u533a\u522b?","answer":"\uff08\u7f51\u4e0a\u7684\u7b54\u6848\uff1asleep\u662f\u7ebf\u7a0b\u7c7b\uff08Thread\uff09\u7684\u65b9\u6cd5\uff0c\u5bfc\u81f4\u6b64\u7ebf\u7a0b\u6682\u505c\u6267\u884c\u6307\u5b9a\u65f6\u95f4\uff0c\u7ed9\u6267\u884c\u673a\u4f1a\u7ed9\u5176\u4ed6\u7ebf\u7a0b\uff0c\u4f46\u662f\u76d1\u63a7\u72b6\u6001\u4f9d\u7136\u4fdd\u6301\uff0c\u5230\u65f6\u540e\u4f1a\u81ea\u52a8\u6062\u590d\u3002\u8c03\u7528sleep\u4e0d\u4f1a\u91ca\u653e\u5bf9\u8c61\u9501\u3002 wait\u662fObject\u7c7b\u7684\u65b9\u6cd5\uff0c\u5bf9\u6b64\u5bf9\u8c61\u8c03\u7528wait\u65b9\u6cd5\u5bfc\u81f4\u672c\u7ebf\u7a0b\u653e\u5f03\u5bf9\u8c61\u9501\uff0c\u8fdb\u5165\u7b49\u5f85\u6b64\u5bf9\u8c61\u7684\u7b49\u5f85\u9501\u5b9a\u6c60\uff0c\u53ea\u6709\u9488\u5bf9\u6b64\u5bf9\u8c61\u53d1\u51fanotify\u65b9\u6cd5\uff08\u6216notifyAll\uff09\u540e\u672c\u7ebf\u7a0b\u624d\u8fdb\u5165\u5bf9\u8c61\u9501\u5b9a\u6c60\u51c6\u5907\u83b7\u5f97\u5bf9\u8c61\u9501\u8fdb\u5165\u8fd0\u884c\u72b6\u6001\u3002\uff09\r\n\r\n\r\n\r\nsleep\u5c31\u662f\u6b63\u5728\u6267\u884c\u7684\u7ebf\u7a0b\u4e3b\u52a8\u8ba9\u51facpu\uff0ccpu\u53bb\u6267\u884c\u5176\u4ed6\u7ebf\u7a0b\uff0c\u5728sleep\u6307\u5b9a\u7684\u65f6\u95f4\u8fc7\u540e\uff0ccpu\u624d\u4f1a\u56de\u5230\u8fd9\u4e2a\u7ebf\u7a0b\u4e0a\u7ee7\u7eed\u5f80\u4e0b\u6267\u884c\uff0c\u5982\u679c\u5f53\u524d\u7ebf\u7a0b\u8fdb\u5165\u4e86\u540c\u6b65\u9501\uff0csleep\u65b9\u6cd5\u5e76\u4e0d\u4f1a\u91ca\u653e\u9501\uff0c\u5373\u4f7f\u5f53\u524d\u7ebf\u7a0b\u4f7f\u7528sleep\u65b9\u6cd5\u8ba9\u51fa\u4e86cpu\uff0c\u4f46\u5176\u4ed6\u88ab\u540c\u6b65\u9501\u6321\u4f4f\u4e86\u7684\u7ebf\u7a0b\u4e5f\u65e0\u6cd5\u5f97\u5230\u6267\u884c\u3002wait\u662f\u6307\u5728\u4e00\u4e2a\u5df2\u7ecf\u8fdb\u5165\u4e86\u540c\u6b65\u9501\u7684\u7ebf\u7a0b\u5185\uff0c\u8ba9\u81ea\u5df1\u6682\u65f6\u8ba9\u51fa\u540c\u6b65\u9501\uff0c\u4ee5\u4fbf\u5176\u4ed6\u6b63\u5728\u7b49\u5f85\u6b64\u9501\u7684\u7ebf\u7a0b\u53ef\u4ee5\u5f97\u5230\u540c\u6b65\u9501\u5e76\u8fd0\u884c\uff0c\u53ea\u6709\u5176\u4ed6\u7ebf\u7a0b\u8c03\u7528\u4e86notify\u65b9\u6cd5\uff08notify\u5e76\u4e0d\u91ca\u653e\u9501\uff0c\u53ea\u662f\u544a\u8bc9\u8c03\u7528\u8fc7wait\u65b9\u6cd5\u7684\u7ebf\u7a0b\u53ef\u4ee5\u53bb\u53c2\u4e0e\u83b7\u5f97\u9501\u7684\u7ade\u4e89\u4e86\uff0c\u4f46\u4e0d\u662f\u9a6c\u4e0a\u5f97\u5230\u9501\uff0c\u56e0\u4e3a\u9501\u8fd8\u5728\u522b\u4eba\u624b\u91cc\uff0c\u522b\u4eba\u8fd8\u6ca1\u91ca\u653e\u3002\u5982\u679cnotify\u65b9\u6cd5\u540e\u9762\u7684\u4ee3\u7801\u8fd8\u6709\u5f88\u591a\uff0c\u9700\u8981\u8fd9\u4e9b\u4ee3\u7801\u6267\u884c\u5b8c\u540e\u624d\u4f1a\u91ca\u653e\u9501\uff0c\u53ef\u4ee5\u5728notfiy\u65b9\u6cd5\u540e\u589e\u52a0\u4e00\u4e2a\u7b49\u5f85\u548c\u4e00\u4e9b\u4ee3\u7801\uff0c\u770b\u770b\u6548\u679c\uff09\uff0c\u8c03\u7528wait\u65b9\u6cd5\u7684\u7ebf\u7a0b\u5c31\u4f1a\u89e3\u9664wait\u72b6\u6001\u548c\u7a0b\u5e8f\u53ef\u4ee5\u518d\u6b21\u5f97\u5230\u9501\u540e\u7ee7\u7eed\u5411\u4e0b\u8fd0\u884c\u3002\u5bf9\u4e8ewait\u7684\u8bb2\u89e3\u4e00\u5b9a\u8981\u914d\u5408\u4f8b\u5b50\u4ee3\u7801\u6765\u8bf4\u660e\uff0c\u624d\u663e\u5f97\u81ea\u5df1\u771f\u660e\u767d\u3002\r\n\r\npackage com.huawei.interview;\r\n\r\n\r\n\r\npublicclass MultiThread {\r\n\r\n\r\n\r\n\/**\r\n\r\n * @paramargs\r\n\r\n *\/\r\n\r\npublic static voidmain(String[] args) {\r\n\r\n\/\/ TODO Auto-generated method stub\r\n\r\nnew Thread(newThread1()).start();\r\n\r\ntry {\r\n\r\nThread.sleep(10);\r\n\r\n} catch (InterruptedException e) {\r\n\r\n\/\/ TODO Auto-generated catchblock\r\n\r\ne.printStackTrace();\r\n\r\n}\r\n\r\nnew Thread(newThread2()).start(); \r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nprivate static classThread1implements Runnable\r\n\r\n{\r\n\r\n\r\n\r\n@Override\r\n\r\npublic void run() {\r\n\r\n\/\/ TODO Auto-generated methodstub\r\n\r\n\/\/\u7531\u4e8e\u8fd9\u91cc\u7684Thread1\u548c\u4e0b\u9762\u7684Thread2\u5185\u90e8run\u65b9\u6cd5\u8981\u7528\u540c\u4e00\u5bf9\u8c61\u4f5c\u4e3a\u76d1\u89c6\u5668\uff0c\u6211\u4eec\u8fd9\u91cc\u4e0d\u80fd\u7528this\uff0c\u56e0\u4e3a\u5728Thread2\u91cc\u9762\u7684this\u548c\u8fd9\u4e2aThread1\u7684this\u4e0d\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61\u3002\u6211\u4eec\u7528MultiThread.class\u8fd9\u4e2a\u5b57\u8282\u7801\u5bf9\u8c61\uff0c\u5f53\u524d\u865a\u62df\u673a\u91cc\u5f15\u7528\u8fd9\u4e2a\u53d8\u91cf\u65f6\uff0c\u6307\u5411\u7684\u90fd\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61\u3002\r\n\r\nsynchronized (MultiThread.class){\r\n\r\n\r\n\r\nSystem.out.println(\"enterthread1...\");\r\n\r\n\r\n\r\nSystem.out.println(\"thread1is waiting\");\r\n\r\ntry {\r\n\r\n\/\/\u91ca\u653e\u9501\u6709\u4e24\u79cd\u65b9\u5f0f\uff0c\u7b2c\u4e00\u79cd\u65b9\u5f0f\u662f\u7a0b\u5e8f\u81ea\u7136\u79bb\u5f00\u76d1\u89c6\u5668\u7684\u8303\u56f4\uff0c\u4e5f\u5c31\u662f\u79bb\u5f00\u4e86synchronized\u5173\u952e\u5b57\u7ba1\u8f96\u7684\u4ee3\u7801\u8303\u56f4\uff0c\u53e6\u4e00\u79cd\u65b9\u5f0f\u5c31\u662f\u5728synchronized\u5173\u952e\u5b57\u7ba1\u8f96\u7684\u4ee3\u7801\u5185\u90e8\u8c03\u7528\u76d1\u89c6\u5668\u5bf9\u8c61\u7684wait\u65b9\u6cd5\u3002\u8fd9\u91cc\uff0c\u4f7f\u7528wait\u65b9\u6cd5\u91ca\u653e\u9501\u3002\r\n\r\nMultiThread.class.wait();\r\n\r\n} catch(InterruptedException e) {\r\n\r\n\/\/ TODO Auto-generatedcatch block\r\n\r\ne.printStackTrace();\r\n\r\n}\r\n\r\n\r\n\r\nSystem.out.println(\"thread1is going on...\");\r\n\r\nSystem.out.println(\"thread1is being over!\"); \r\n\r\n}\r\n\r\n}\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\nprivate static classThread2implements Runnable\r\n\r\n{\r\n\r\n\r\n\r\n@Override\r\n\r\npublic void run() {\r\n\r\n\/\/ TODO Auto-generated methodstub\r\n\r\nsynchronized (MultiThread.class){\r\n\r\n\r\n\r\nSystem.out.println(\"enterthread2...\");\r\n\r\n\r\n\r\nSystem.out.println(\"thread2notify other thread can release wait status..\");\r\n\r\n\/\/\u7531\u4e8enotify\u65b9\u6cd5\u5e76\u4e0d\u91ca\u653e\u9501\uff0c\u5373\u4f7fthread2\u8c03\u7528\u4e0b\u9762\u7684sleep\u65b9\u6cd5\u4f11\u606f\u4e8610\u6beb\u79d2\uff0c\u4f46thread1\u4ecd\u7136\u4e0d\u4f1a\u6267\u884c\uff0c\u56e0\u4e3athread2\u6ca1\u6709\u91ca\u653e\u9501\uff0c\u6240\u4ee5Thread1\u65e0\u6cd5\u5f97\u4e0d\u5230\u9501\u3002\r\n\r\n\r\n\r\nMultiThread.class.notify();\r\n\r\n\r\n\r\nSystem.out.println(\"thread2is sleeping ten millisecond...\");\r\n\r\ntry {\r\n\r\nThread.sleep(10);\r\n\r\n} catch (InterruptedExceptione) {\r\n\r\n\/\/ TODO Auto-generatedcatch block\r\n\r\ne.printStackTrace();\r\n\r\n}\r\n\r\n\r\n\r\nSystem.out.println(\"thread2is going on...\");\r\n\r\nSystem.out.println(\"thread2is being over!\");\r\n\r\n\r\n\r\n}\r\n\r\n}\r\n\r\n\r\n\r\n} \r\n\r\n\r\n\r\n}\r\n"},{"ID":"635","typeID":"11","question":"java\u4e2d\u6709\u51e0\u79cd\u65b9\u6cd5\u53ef\u4ee5\u5b9e\u73b0\u4e00\u4e2a\u7ebf\u7a0b\uff1f\u7528\u4ec0\u4e48\u5173\u952e\u5b57\u4fee\u9970\u540c\u6b65\u65b9\u6cd5? stop()\u548csuspend()\u65b9\u6cd5\u4e3a\u4f55\u4e0d\u63a8\u8350\u4f7f\u7528\uff1f","answer":"java5\u4ee5\u524d\uff0c\u6709\u5982\u4e0b\u4e24\u79cd\uff1a\r\n\r\n\u7b2c\u4e00\u79cd\uff1a\r\n\r\nnew Thread(){}.start();\u8fd9\u8868\u793a\u8c03\u7528Thread\u5b50\u7c7b\u5bf9\u8c61\u7684run\u65b9\u6cd5\uff0cnew Thread(){}\u8868\u793a\u4e00\u4e2aThread\u7684\u533f\u540d\u5b50\u7c7b\u7684\u5b9e\u4f8b\u5bf9\u8c61\uff0c\u5b50\u7c7b\u52a0\u4e0arun\u65b9\u6cd5\u540e\u7684\u4ee3\u7801\u5982\u4e0b\uff1a\r\n\r\nnew Thread(){\r\n\r\npublic void run(){\r\n\r\n}\r\n\r\n}.start();\r\n\r\n\r\n\r\n\u7b2c\u4e8c\u79cd\uff1a\r\n\r\nnew Thread(new Runnable(){}).start();\u8fd9\u8868\u793a\u8c03\u7528Thread\u5bf9\u8c61\u63a5\u53d7\u7684Runnable\u5bf9\u8c61\u7684run\u65b9\u6cd5\uff0cnew Runnable(){}\u8868\u793a\u4e00\u4e2aRunnable\u7684\u533f\u540d\u5b50\u7c7b\u7684\u5b9e\u4f8b\u5bf9\u8c61,runnable\u7684\u5b50\u7c7b\u52a0\u4e0arun\u65b9\u6cd5\u540e\u7684\u4ee3\u7801\u5982\u4e0b\uff1a\r\n\r\nnew Thread(new Runnable(){\r\n\r\npublic voidrun(){\r\n\r\n} \r\n\r\n}\r\n\r\n).start();\r\n\r\n\r\n\r\n\r\n\r\n\u4ecejava5\u5f00\u59cb\uff0c\u8fd8\u6709\u5982\u4e0b\u4e00\u4e9b\u7ebf\u7a0b\u6c60\u521b\u5efa\u591a\u7ebf\u7a0b\u7684\u65b9\u5f0f\uff1a\r\n\r\nExecutorService pool = Executors.newFixedThreadPool(3)\r\n\r\nfor(int i=0;i<10;i++)\r\n\r\n{\r\n\r\npool.execute(newRunable(){public void run(){}});\r\n\r\n}\r\n\r\nExecutors.newCachedThreadPool().execute(new Runable(){publicvoid run(){}});\r\n\r\nExecutors.newSingleThreadExecutor().execute(new Runable(){publicvoid run(){}});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\u6709\u4e24\u79cd\u5b9e\u73b0\u65b9\u6cd5\uff0c\u5206\u522b\u4f7f\u7528new Thread()\u548cnew Thread(runnable)\u5f62\u5f0f\uff0c\u7b2c\u4e00\u79cd\u76f4\u63a5\u8c03\u7528thread\u7684run\u65b9\u6cd5\uff0c\u6240\u4ee5\uff0c\u6211\u4eec\u5f80\u5f80\u4f7f\u7528Thread\u5b50\u7c7b\uff0c\u5373new SubThread()\u3002\u7b2c\u4e8c\u79cd\u8c03\u7528runnable\u7684run\u65b9\u6cd5\u3002\r\n\r\n\r\n\r\n\u6709\u4e24\u79cd\u5b9e\u73b0\u65b9\u6cd5\uff0c\u5206\u522b\u662f\u7ee7\u627fThread\u7c7b\u4e0e\u5b9e\u73b0Runnable\u63a5\u53e3\r\n\r\n\u7528synchronized\u5173\u952e\u5b57\u4fee\u9970\u540c\u6b65\u65b9\u6cd5\r\n\r\n\u53cd\u5bf9\u4f7f\u7528stop()\uff0c\u662f\u56e0\u4e3a\u5b83\u4e0d\u5b89\u5168\u3002\u5b83\u4f1a\u89e3\u9664\u7531\u7ebf\u7a0b\u83b7\u53d6\u7684\u6240\u6709\u9501\u5b9a\uff0c\u800c\u4e14\u5982\u679c\u5bf9\u8c61\u5904\u4e8e\u4e00\u79cd\u4e0d\u8fde\u8d2f\u72b6\u6001\uff0c\u90a3\u4e48\u5176\u4ed6\u7ebf\u7a0b\u80fd\u5728\u90a3\u79cd\u72b6\u6001\u4e0b\u68c0\u67e5\u548c\u4fee\u6539\u5b83\u4eec\u3002\u7ed3\u679c\u5f88\u96be\u68c0\u67e5\u51fa\u771f\u6b63\u7684\u95ee\u9898\u6240\u5728\u3002suspend()\u65b9\u6cd5\u5bb9\u6613\u53d1\u751f\u6b7b\u9501\u3002\u8c03\u7528suspend()\u7684\u65f6\u5019\uff0c\u76ee\u6807\u7ebf\u7a0b\u4f1a\u505c\u4e0b\u6765\uff0c\u4f46\u5374\u4ecd\u7136\u6301\u6709\u5728\u8fd9\u4e4b\u524d\u83b7\u5f97\u7684\u9501\u5b9a\u3002\u6b64\u65f6\uff0c\u5176\u4ed6\u4efb\u4f55\u7ebf\u7a0b\u90fd\u4e0d\u80fd\u8bbf\u95ee\u9501\u5b9a\u7684\u8d44\u6e90\uff0c\u9664\u975e\u88ab\"\u6302\u8d77\"\u7684\u7ebf\u7a0b\u6062\u590d\u8fd0\u884c\u3002\u5bf9\u4efb\u4f55\u7ebf\u7a0b\u6765\u8bf4\uff0c\u5982\u679c\u5b83\u4eec\u60f3\u6062\u590d\u76ee\u6807\u7ebf\u7a0b\uff0c\u540c\u65f6\u53c8\u8bd5\u56fe\u4f7f\u7528\u4efb\u4f55\u4e00\u4e2a\u9501\u5b9a\u7684\u8d44\u6e90\uff0c\u5c31\u4f1a\u9020\u6210\u6b7b\u9501\u3002\u6240\u4ee5\u4e0d\u5e94\u8be5\u4f7f\u7528suspend()\uff0c\u800c\u5e94\u5728\u81ea\u5df1\u7684Thread\u7c7b\u4e2d\u7f6e\u5165\u4e00\u4e2a\u6807\u5fd7\uff0c\u6307\u51fa\u7ebf\u7a0b\u5e94\u8be5\u6d3b\u52a8\u8fd8\u662f\u6302\u8d77\u3002\u82e5\u6807\u5fd7\u6307\u51fa\u7ebf\u7a0b\u5e94\u8be5\u6302\u8d77\uff0c\u4fbf\u7528wait()\u547d\u5176\u8fdb\u5165\u7b49\u5f85\u72b6\u6001\u3002\u82e5\u6807\u5fd7\u6307\u51fa\u7ebf\u7a0b\u5e94\u5f53\u6062\u590d\uff0c\u5219\u7528\u4e00\u4e2anotify()\u91cd\u65b0\u542f\u52a8\u7ebf\u7a0b\u3002"},{"ID":"634","typeID":"11","question":"\u8bf7\u5199\u51fa\u4f60\u6700\u5e38\u89c1\u5230\u76845\u4e2aruntime exception\uff1f","answer":"\u8fd9\u9053\u9898\u4e3b\u8981\u8003\u4f60\u7684\u4ee3\u7801\u91cf\u5230\u5e95\u591a\u5927\uff0c\u5982\u679c\u4f60\u957f\u671f\u5199\u4ee3\u7801\u7684\uff0c\u5e94\u8be5\u7ecf\u5e38\u90fd\u770b\u5230\u8fc7\u4e00\u4e9b\u7cfb\u7edf\u65b9\u9762\u7684\u5f02\u5e38\uff0c\u4f60\u4e0d\u4e00\u5b9a\u771f\u8981\u56de\u7b54\u51fa5\u4e2a\u5177\u4f53\u7684\u7cfb\u7edf\u5f02\u5e38\uff0c\u4f46\u4f60\u8981\u80fd\u591f\u8bf4\u51fa\u4ec0\u4e48\u662f\u7cfb\u7edf\u5f02\u5e38\uff0c\u4ee5\u53ca\u51e0\u4e2a\u7cfb\u7edf\u5f02\u5e38\u5c31\u53ef\u4ee5\u4e86\uff0c\u5f53\u7136\uff0c\u8fd9\u4e9b\u5f02\u5e38\u5b8c\u5168\u7528\u5176\u82f1\u6587\u540d\u79f0\u6765\u5199\u662f\u6700\u597d\u7684\uff0c\u5982\u679c\u5b9e\u5728\u5199\u4e0d\u51fa\uff0c\u90a3\u5c31\u7528\u4e2d\u6587\u5427\uff0c\u6709\u603b\u6bd4\u6ca1\u6709\u5f3a\uff01\r\n\r\n\u6240\u8c13\u7cfb\u7edf\u5f02\u5e38\uff0c\u5c31\u662f\u2026..\uff0c\u5b83\u4eec\u90fd\u662fRuntimeException\u7684\u5b50\u7c7b\uff0c\u5728jdk doc\u4e2d\u67e5RuntimeException\u7c7b\uff0c\u5c31\u53ef\u4ee5\u770b\u5230\u5176\u6240\u6709\u7684\u5b50\u7c7b\u5217\u8868\uff0c\u4e5f\u5c31\u662f\u770b\u5230\u4e86\u6240\u6709\u7684\u7cfb\u7edf\u5f02\u5e38\u3002\u6211\u6bd4\u8f83\u6709\u5370\u8c61\u7684\u7cfb\u7edf\u5f02\u5e38\u6709\uff1aNullPointerException\u3001ArrayIndexOutOfBoundsException\u3001ClassCastException\u3002"},{"ID":"633","typeID":"11","question":"Java\u4e2d\u7684\u5f02\u5e38\u5904\u7406\u673a\u5236\u7684\u7b80\u5355\u539f\u7406\u548c\u5e94\u7528\u3002","answer":"\u5f02\u5e38\u662f\u6307java\u7a0b\u5e8f\u8fd0\u884c\u65f6\uff08\u975e\u7f16\u8bd1\uff09\u6240\u53d1\u751f\u7684\u975e\u6b63\u5e38\u60c5\u51b5\u6216\u9519\u8bef\uff0c\u4e0e\u73b0\u5b9e\u751f\u6d3b\u4e2d\u7684\u4e8b\u4ef6\u5f88\u76f8\u4f3c\uff0c\u73b0\u5b9e\u751f\u6d3b\u4e2d\u7684\u4e8b\u4ef6\u53ef\u4ee5\u5305\u542b\u4e8b\u4ef6\u53d1\u751f\u7684\u65f6\u95f4\u3001\u5730\u70b9\u3001\u4eba\u7269\u3001\u60c5\u8282\u7b49\u4fe1\u606f\uff0c\u53ef\u4ee5\u7528\u4e00\u4e2a\u5bf9\u8c61\u6765\u8868\u793a\uff0cJava\u4f7f\u7528\u9762\u5411\u5bf9\u8c61\u7684\u65b9\u5f0f\u6765\u5904\u7406\u5f02\u5e38\uff0c\u5b83\u628a\u7a0b\u5e8f\u4e2d\u53d1\u751f\u7684\u6bcf\u4e2a\u5f02\u5e38\u4e5f\u90fd\u5206\u522b\u5c01\u88c5\u5230\u4e00\u4e2a\u5bf9\u8c61\u6765\u8868\u793a\u7684\uff0c\u8be5\u5bf9\u8c61\u4e2d\u5305\u542b\u6709\u5f02\u5e38\u7684\u4fe1\u606f\u3002\r\n\r\nJava\u5bf9\u5f02\u5e38\u8fdb\u884c\u4e86\u5206\u7c7b\uff0c\u4e0d\u540c\u7c7b\u578b\u7684\u5f02\u5e38\u5206\u522b\u7528\u4e0d\u540c\u7684Java\u7c7b\u8868\u793a\uff0c\u6240\u6709\u5f02\u5e38\u7684\u6839\u7c7b\u4e3ajava.lang.Throwable\uff0cThrowable\u4e0b\u9762\u53c8\u6d3e\u751f\u4e86\u4e24\u4e2a\u5b50\u7c7b\uff1aError\u548cException\uff0cError\u8868\u793a\u5e94\u7528\u7a0b\u5e8f\u672c\u8eab\u65e0\u6cd5\u514b\u670d\u548c\u6062\u590d\u7684\u4e00\u79cd\u4e25\u91cd\u95ee\u9898\uff0c\u7a0b\u5e8f\u53ea\u6709\u6b7b\u7684\u4efd\u4e86\uff0c\u4f8b\u5982\uff0c\u8bf4\u5185\u5b58\u6ea2\u51fa\u548c\u7ebf\u7a0b\u6b7b\u9501\u7b49\u7cfb\u7edf\u95ee\u9898\u3002Exception\u8868\u793a\u7a0b\u5e8f\u8fd8\u80fd\u591f\u514b\u670d\u548c\u6062\u590d\u7684\u95ee\u9898\uff0c\u5176\u4e2d\u53c8\u5206\u4e3a\u7cfb\u7edf\u5f02\u5e38\u548c\u666e\u901a\u5f02\u5e38\uff0c\u7cfb\u7edf\u5f02\u5e38\u662f\u8f6f\u4ef6\u672c\u8eab\u7f3a\u9677\u6240\u5bfc\u81f4\u7684\u95ee\u9898\uff0c\u4e5f\u5c31\u662f\u8f6f\u4ef6\u5f00\u53d1\u4eba\u5458\u8003\u8651\u4e0d\u5468\u6240\u5bfc\u81f4\u7684\u95ee\u9898\uff0c\u8f6f\u4ef6\u4f7f\u7528\u8005\u65e0\u6cd5\u514b\u670d\u548c\u6062\u590d\u8fd9\u79cd\u95ee\u9898\uff0c\u4f46\u5728\u8fd9\u79cd\u95ee\u9898\u4e0b\u8fd8\u53ef\u4ee5\u8ba9\u8f6f\u4ef6\u7cfb\u7edf\u7ee7\u7eed\u8fd0\u884c\u6216\u8005\u8ba9\u8f6f\u4ef6\u6b7b\u6389\uff0c\u4f8b\u5982\uff0c\u6570\u7ec4\u811a\u672c\u8d8a\u754c\uff08ArrayIndexOutOfBoundsException\uff09\uff0c\u7a7a\u6307\u9488\u5f02\u5e38\uff08NullPointerException\uff09\u3001\u7c7b\u8f6c\u6362\u5f02\u5e38\uff08ClassCastException\uff09\uff1b\u666e\u901a\u5f02\u5e38\u662f\u8fd0\u884c\u73af\u5883\u7684\u53d8\u5316\u6216\u5f02\u5e38\u6240\u5bfc\u81f4\u7684\u95ee\u9898\uff0c\u662f\u7528\u6237\u80fd\u591f\u514b\u670d\u7684\u95ee\u9898\uff0c\u4f8b\u5982\uff0c\u7f51\u7edc\u65ad\u7ebf\uff0c\u786c\u76d8\u7a7a\u95f4\u4e0d\u591f\uff0c\u53d1\u751f\u8fd9\u6837\u7684\u5f02\u5e38\u540e\uff0c\u7a0b\u5e8f\u4e0d\u5e94\u8be5\u6b7b\u6389\u3002\r\n\r\njava\u4e3a\u7cfb\u7edf\u5f02\u5e38\u548c\u666e\u901a\u5f02\u5e38\u63d0\u4f9b\u4e86\u4e0d\u540c\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u7f16\u8bd1\u5668\u5f3a\u5236\u666e\u901a\u5f02\u5e38\u5fc5\u987btry..catch\u5904\u7406\u6216\u7528throws\u58f0\u660e\u7ee7\u7eed\u629b\u7ed9\u4e0a\u5c42\u8c03\u7528\u65b9\u6cd5\u5904\u7406\uff0c\u6240\u4ee5\u666e\u901a\u5f02\u5e38\u4e5f\u79f0\u4e3achecked\u5f02\u5e38\uff0c\u800c\u7cfb\u7edf\u5f02\u5e38\u53ef\u4ee5\u5904\u7406\u4e5f\u53ef\u4ee5\u4e0d\u5904\u7406\uff0c\u6240\u4ee5\uff0c\u7f16\u8bd1\u5668\u4e0d\u5f3a\u5236\u7528try..catch\u5904\u7406\u6216\u7528throws\u58f0\u660e\uff0c\u6240\u4ee5\u7cfb\u7edf\u5f02\u5e38\u4e5f\u79f0\u4e3aunchecked\u5f02\u5e38\u3002\r\n\r\n\r\n\r\n\u63d0\u793a\u7b54\u9898\u8005\uff1a\u5c31\u6309\u7167\u4e09\u4e2a\u7ea7\u522b\u53bb\u601d\u8003\uff1a\u865a\u62df\u673a\u5fc5\u987b\u5b95\u673a\u7684\u9519\u8bef\uff0c\u7a0b\u5e8f\u53ef\u4ee5\u6b7b\u6389\u4e5f\u53ef\u4ee5\u4e0d\u6b7b\u6389\u7684\u9519\u8bef\uff0c\u7a0b\u5e8f\u4e0d\u5e94\u8be5\u6b7b\u6389\u7684\u9519\u8bef\uff1b\r\n"},{"ID":"632","typeID":"11","question":"error\u548cexception\u6709\u4ec0\u4e48\u533a\u522b?","answer":"error \u8868\u793a\u6062\u590d\u4e0d\u662f\u4e0d\u53ef\u80fd\u4f46\u5f88\u56f0\u96be\u7684\u60c5\u51b5\u4e0b\u7684\u4e00\u79cd\u4e25\u91cd\u95ee\u9898\u3002\u6bd4\u5982\u8bf4\u5185\u5b58\u6ea2\u51fa\u3002\u4e0d\u53ef\u80fd\u6307\u671b\u7a0b\u5e8f\u80fd\u5904\u7406\u8fd9\u6837\u7684\u60c5\u51b5\u3002 exception\u8868\u793a\u4e00\u79cd\u8bbe\u8ba1\u6216\u5b9e\u73b0\u95ee\u9898\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u8868\u793a\u5982\u679c\u7a0b\u5e8f\u8fd0\u884c\u6b63\u5e38\uff0c\u4ece\u4e0d\u4f1a\u53d1\u751f\u7684\u60c5\u51b5\u3002"},{"ID":"631","typeID":"11","question":"\u8fd0\u884c\u65f6\u5f02\u5e38\u4e0e\u4e00\u822c\u5f02\u5e38\u6709\u4f55\u5f02\u540c\uff1f","answer":"\u5f02\u5e38\u8868\u793a\u7a0b\u5e8f\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u53ef\u80fd\u51fa\u73b0\u7684\u975e\u6b63\u5e38\u72b6\u6001\uff0c\u8fd0\u884c\u65f6\u5f02\u5e38\u8868\u793a\u865a\u62df\u673a\u7684\u901a\u5e38\u64cd\u4f5c\u4e2d\u53ef\u80fd\u9047\u5230\u7684\u5f02\u5e38\uff0c\u662f\u4e00\u79cd\u5e38\u89c1\u8fd0\u884c\u9519\u8bef\u3002java\u7f16\u8bd1\u5668\u8981\u6c42\u65b9\u6cd5\u5fc5\u987b\u58f0\u660e\u629b\u51fa\u53ef\u80fd\u53d1\u751f\u7684\u975e\u8fd0\u884c\u65f6\u5f02\u5e38\uff0c\u4f46\u662f\u5e76\u4e0d\u8981\u6c42\u5fc5\u987b\u58f0\u660e\u629b\u51fa\u672a\u88ab\u6355\u83b7\u7684\u8fd0\u884c\u65f6\u5f02\u5e38\u3002"},{"ID":"630","typeID":"11","question":"\u4e0b\u9762\u8fd9\u6761\u8bed\u53e5\u4e00\u5171\u521b\u5efa\u4e86\u591a\u5c11\u4e2a\u5bf9\u8c61\uff1aString s=\"a\"+\"b\"+\"c\"+\"d\"; \uff1f","answer":"\u5bf9\u4e8e\u5982\u4e0b\u4ee3\u7801\uff1a\r\n\r\nString s1 = \"a\";\r\n\r\nString s2 = s1 + \"b\";\r\n\r\nString s3 = \"a\" + \"b\";\r\n\r\nSystem.out.println(s2 == \"ab\");\r\n\r\nSystem.out.println(s3 == \"ab\");\r\n\r\n\u7b2c\u4e00\u6761\u8bed\u53e5\u6253\u5370\u7684\u7ed3\u679c\u4e3afalse\uff0c\u7b2c\u4e8c\u6761\u8bed\u53e5\u6253\u5370\u7684\u7ed3\u679c\u4e3atrue\uff0c\u8fd9\u8bf4\u660ejavac\u7f16\u8bd1\u53ef\u4ee5\u5bf9\u5b57\u7b26\u4e32\u5e38\u91cf\u76f4\u63a5\u76f8\u52a0\u7684\u8868\u8fbe\u5f0f\u8fdb\u884c\u4f18\u5316\uff0c\u4e0d\u5fc5\u8981\u7b49\u5230\u8fd0\u884c\u671f\u53bb\u8fdb\u884c\u52a0\u6cd5\u8fd0\u7b97\u5904\u7406\uff0c\u800c\u662f\u5728\u7f16\u8bd1\u65f6\u53bb\u6389\u5176\u4e2d\u7684\u52a0\u53f7\uff0c\u76f4\u63a5\u5c06\u5176\u7f16\u8bd1\u6210\u4e00\u4e2a\u8fd9\u4e9b\u5e38\u91cf\u76f8\u8fde\u7684\u7ed3\u679c\u3002\r\n\r\n\u9898\u76ee\u4e2d\u7684\u7b2c\u4e00\u884c\u4ee3\u7801\u88ab\u7f16\u8bd1\u5668\u5728\u7f16\u8bd1\u65f6\u4f18\u5316\u540e\uff0c\u76f8\u5f53\u4e8e\u76f4\u63a5\u5b9a\u4e49\u4e86\u4e00\u4e2a\u201dabcd\u201d\u7684\u5b57\u7b26\u4e32\uff0c\u6240\u4ee5\uff0c\u4e0a\u9762\u7684\u4ee3\u7801\u5e94\u8be5\u53ea\u521b\u5efa\u4e86\u4e00\u4e2aString\u5bf9\u8c61\u3002\u5199\u5982\u4e0b\u4e24\u884c\u4ee3\u7801\uff0c\r\n\r\nString s =\"a\" + \"b\" + \"c\" + \"d\";\r\n\r\nSystem.out.println(s== \"abcd\");\r\n\r\n\u6700\u7ec8\u6253\u5370\u7684\u7ed3\u679c\u5e94\u8be5\u4e3atrue\u3002"},{"ID":"629","typeID":"11","question":"\u6570\u7ec4\u6709\u6ca1\u6709length()\u8fd9\u4e2a\u65b9\u6cd5? String\u6709\u6ca1\u6709length()\u8fd9\u4e2a\u65b9\u6cd5\uff1f","answer":"\u6570\u7ec4\u6ca1\u6709length()\u8fd9\u4e2a\u65b9\u6cd5\uff0c\u6709length\u7684\u5c5e\u6027\u3002String\u6709\u6709length()\u8fd9\u4e2a\u65b9\u6cd5\u3002"},{"ID":"628","typeID":"11","question":"\u5982\u4f55\u628a\u4e00\u6bb5\u9017\u53f7\u5206\u5272\u7684\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u4e00\u4e2a\u6570\u7ec4?","answer":"\u5982\u679c\u4e0d\u67e5jdk api\uff0c\u6211\u5f88\u96be\u5199\u51fa\u6765\uff01\u6211\u53ef\u4ee5\u8bf4\u8bf4\u6211\u7684\u601d\u8def\uff1a\r\n\r\n1 \u7528\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u4ee3\u7801\u5927\u6982\u4e3a\uff1aString [] result = orgStr.split(\u201c,\u201d);\r\n\r\n2 \u7528 StingTokenizer ,\u4ee3\u7801\u4e3a\uff1aStringTokenizer tokener = StringTokenizer(orgStr,\u201d,\u201d);\r\n\r\nString [] result =new String[tokener .countTokens()];\r\n\r\nInt i=0;\r\n\r\nwhile(tokener.hasNext(){result[i++]=toker.nextToken();}\r\n"},{"ID":"627","typeID":"11","question":"String\u548cStringBuffer\u7684\u533a\u522b\uff1f","answer":"JAVA\u5e73\u53f0\u63d0\u4f9b\u4e86\u4e24\u4e2a\u7c7b\uff1aString\u548cStringBuffer\uff0c\u5b83\u4eec\u53ef\u4ee5\u50a8\u5b58\u548c\u64cd\u4f5c\u5b57\u7b26\u4e32\uff0c\u5373\u5305\u542b\u591a\u4e2a\u5b57\u7b26\u7684\u5b57\u7b26\u6570\u636e\u3002\u8fd9\u4e2aString\u7c7b\u63d0\u4f9b\u4e86\u6570\u503c\u4e0d\u53ef\u6539\u53d8\u7684\u5b57\u7b26\u4e32\u3002\u800c\u8fd9\u4e2aStringBuffer\u7c7b\u63d0\u4f9b\u7684\u5b57\u7b26\u4e32\u8fdb\u884c\u4fee\u6539\u3002\u5f53\u4f60\u77e5\u9053\u5b57\u7b26\u6570\u636e\u8981\u6539\u53d8\u7684\u65f6\u5019\u4f60\u5c31\u53ef\u4ee5\u4f7f\u7528StringBuffer\u3002\u5178\u578b\u5730\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528StringBuffers\u6765\u52a8\u6001\u6784\u9020\u5b57\u7b26\u6570\u636e\u3002\u53e6\u5916\uff0cString\u5b9e\u73b0\u4e86equals\u65b9\u6cd5\uff0cnew String(\u201cabc\u201d).equals(newString(\u201cabc\u201d)\u7684\u7ed3\u679c\u4e3atrue,\u800cStringBuffer\u6ca1\u6709\u5b9e\u73b0equals\u65b9\u6cd5\uff0c\u6240\u4ee5\uff0cnew StringBuffer(\u201cabc\u201d).equals(newStringBuffer(\u201cabc\u201d)\u7684\u7ed3\u679c\u4e3afalse\u3002"},{"ID":"626","typeID":"11","question":"String s = new String(\"xyz\");\u521b\u5efa\u4e86\u51e0\u4e2aString Object?\u4e8c\u8005\u4e4b\u95f4\u6709\u4ec0\u4e48\u533a\u522b\uff1f","answer":"\u4e24\u4e2a\u6216\u4e00\u4e2a\uff0c\u201dxyz\u201d\u5bf9\u5e94\u4e00\u4e2a\u5bf9\u8c61\uff0c\u8fd9\u4e2a\u5bf9\u8c61\u653e\u5728\u5b57\u7b26\u4e32\u5e38\u91cf\u7f13\u51b2\u533a\uff0c\u5e38\u91cf\u201dxyz\u201d\u4e0d\u7ba1\u51fa\u73b0\u591a\u5c11\u904d\uff0c\u90fd\u662f\u7f13\u51b2\u533a\u4e2d\u7684\u90a3\u4e00\u4e2a\u3002New String\u6bcf\u5199\u4e00\u904d\uff0c\u5c31\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5bf9\u8c61\uff0c\u5b83\u4e00\u53e5\u90a3\u4e2a\u5e38\u91cf\u201dxyz\u201d\u5bf9\u8c61\u7684\u5185\u5bb9\u6765\u521b\u5efa\u51fa\u4e00\u4e2a\u65b0String\u5bf9\u8c61\u3002\u5982\u679c\u4ee5\u524d\u5c31\u7528\u8fc7\u2019xyz\u2019\uff0c\u8fd9\u53e5\u4ee3\u8868\u5c31\u4e0d\u4f1a\u521b\u5efa\u201dxyz\u201d\u81ea\u5df1\u4e86\uff0c\u76f4\u63a5\u4ece\u7f13\u51b2\u533a\u62ff\u3002"},{"ID":"625","typeID":"11","question":"\u662f\u5426\u53ef\u4ee5\u7ee7\u627fString\u7c7b?","answer":"String\u7c7b\u662ffinal\u7c7b\u6545\u4e0d\u53ef\u4ee5\u7ee7\u627f\u3002"},{"ID":"570","typeID":"11","question":"android\u4e2d\u7684\u52a8\u753b\u6709\u54ea\u51e0\u7c7b\uff0c\u4ed6\u4eec\u7684\u7279\u70b9\u548c\u533a\u522b\u662f\u4ec0\u4e48\uff1f","answer":"\u4e24\u79cd\uff0c\r\n\u4e00\u79cd\u662fTween\u52a8\u753b(\u8865\u95f4\u52a8\u753b)\uff0c\r\n\u4e00\u79cd\u662fFrame\u52a8\u753b(\u9010\u5e27\u52a8\u753b)\u3002\r\nTween\u52a8\u753b\uff1a\u4f7f\u8bd5\u56fe\u7ec4\u4ef6\u79fb\u52a8\uff0c\u653e\u5927\uff0c\u7f29\u5c0f\u4ee5\u53ca\u4ea7\u751f\u900f\u660e\u5ea6\u7684\u53d8\u5316\u3002\r\nFrame\u52a8\u753b\uff1a\u4f20\u7edf\u7684\u52a8\u753b\u65b9\u6cd5\uff0c\u901a\u8fc7\u987a\u5e8f\u7684\u64ad\u653e\u6392\u5217\u597d\u7684\u56fe\u7247\u6765\u5b9e\u73b0\uff0c\u7c7b\u4f3c\u7535\u5f71\u3002"},{"ID":"569","typeID":"11","question":"\u4f60\u5982\u4f55\u8bc4\u4ef7Android\u7cfb\u7edf\uff1f\u4f18\u7f3a\u70b9","answer":"\u4f18\u70b9\uff1a\u5f00\u6e90\u7279\u6027\uff0c\u5f97\u5230\u4f17\u591a\u5382\u5546\u652f\u6301\u3002\r\n\u8f6f\u4ef6\u53d1\u5c55\u5f88\u5feb\u3002\r\n\u754c\u9762UI\uff0c\u7cfb\u7edf\u4f18\u5316\u4e0d\u9519\u3002\r\n\u7f3a\u70b9\uff1a\u7248\u672c\u8fc7\u591a\uff0c\u5347\u7ea7\u8fc7\u5feb\u3002\r\n\u7528\u6237\u4f53\u9a8c\u4e0d\u4e00\u81f4\u3002"},{"ID":"568","typeID":"11","question":"\u8bf7\u89e3\u91ca\u4e0bAndroid\u7a0b\u5e8f\u8fd0\u884c\u65f6\u6743\u9650\u4e0e\u6587\u4ef6\u7cfb\u7edf\u6743\u9650\u7684\u533a\u522b","answer":"Android\u7a0b\u5e8f\u8fd0\u884c  \u662f\u865a\u62df\u673aDalvik( android\u6388\u6743)\r\n  \u6587\u4ef6\u7cfb\u7edf   \u662f linux \u5185\u6838 \u6388\u6743"},{"ID":"567","typeID":"11","question":"\u8bf7\u89e3\u91ca\u4e0b\u5728\u5355\u7ebf\u7a0b\u6a21\u578b\u4e2dMessage,Handler,Message Queue,Looper\u4e4b\u95f4\u7684\u5173\u7cfb","answer":"1.Message\r\n   Message\u6d88\u606f\uff0c\u7406\u89e3\u4e3a\u7ebf\u7a0b\u95f4\u4ea4\u6d41\u7684\u4fe1\u606f\uff0c\u5904\u7406\u6570\u636e\u540e\u53f0\u7ebf\u7a0b\u9700\u8981\u66f4\u65b0UI\uff0c\u5219\u53d1\u9001Message\u5185\u542b\u4e00\u4e9b\u6570\u636e\u7ed9UI\u7ebf\u7a0b\u3002\r\n2. Handler\r\n   Handler\u5904\u7406\u8005\uff0c\u662fMessage\u7684\u4e3b\u8981\u5904\u7406\u8005\uff0c\u8d1f\u8d23Message\u7684\u53d1\u9001\uff0cMessage\u5185\u5bb9\u7684\u6267\u884c\u5904\u7406\u3002\u540e\u53f0\u7ebf\u7a0b\u5c31\u662f\u901a\u8fc7\u4f20\u8fdb\u6765\u7684 Handler\u5bf9\u8c61\u5f15\u7528\u6765sendMessage(Message)\u3002\u800c\u4f7f\u7528Handler\uff0c\u9700\u8981implement \u8be5\u7c7b\u7684 handleMessage(Message)\r\n\u65b9\u6cd5\uff0c\u5b83\u662f\u5904\u7406\u8fd9\u4e9bMessage\u7684\u64cd\u4f5c\u5185\u5bb9\uff0c\u4f8b\u5982Update UI\u3002\u901a\u5e38\u9700\u8981\u5b50\u7c7b\u5316Handler\u6765\u5b9e\u73b0handleMessage\u65b9\u6cd5\u3002\r\nMessage Queue\r\n   Message Queue\u6d88\u606f\u961f\u5217\uff0c\u7528\u6765\u5b58\u653e\u901a\u8fc7Handler\u53d1\u5e03\u7684\u6d88\u606f\uff0c\u6309\u7167\u5148\u8fdb\u5148\u51fa\u6267\u884c\u3002\r\n    \u6bcf\u4e2amessage queue\u90fd\u4f1a\u6709\u4e00\u4e2a\u5bf9\u5e94\u7684Handler\u3002Handler\u4f1a\u5411message queue\u901a\u8fc7\u4e24\u79cd\u65b9\u6cd5\u53d1\u9001\u6d88\u606f\uff1asendMessage\u6216post\u3002\u8fd9\u4e24\u79cd\u6d88\u606f\u90fd\u4f1a\u63d2\u5728message queue\u961f\u5c3e\u5e76\u6309\u5148\u8fdb\u5148\u51fa\u6267\u884c\u3002\u4f46\u901a\u8fc7\u8fd9\u4e24\u79cd\u65b9\u6cd5\u53d1\u9001\u7684\u6d88\u606f\u6267\u884c\u7684\u65b9\u5f0f\u7565\u6709\u4e0d\u540c\uff1a\u901a\u8fc7sendMessage\u53d1\u9001\u7684\u662f\u4e00\u4e2amessage\u5bf9\u8c61,\u4f1a\u88ab Handler\u7684handleMessage()\u51fd\u6570\u5904\u7406\uff1b\u800c\u901a\u8fc7post\u65b9\u6cd5\u53d1\u9001\u7684\u662f\u4e00\u4e2arunnable\u5bf9\u8c61\uff0c\u5219\u4f1a\u81ea\u5df1\u6267\u884c\u3002\r\n4. Looper\r\n   Looper\u662f\u6bcf\u6761\u7ebf\u7a0b\u91cc\u7684MessageQueue\u7684\u7ba1\u5bb6\u3002Android\u6ca1\u6709Global\u7684Message Queue\uff0c\u800cAndroid\u4f1a\u81ea\u52a8\u66ff\u4e3b\u7ebf\u7a0b(UI\u7ebf\u7a0b)\u5efa\u7acbMessage Queue\uff0c\u4f46\u5728\u5b50\u7ebf\u7a0b\u91cc\u5e76\u6ca1\u6709\u5efa\u7acbMessage Queue\u3002\u6240\u4ee5\u8c03\u7528Looper.getMainLooper()\u5f97\u5230\u7684\u4e3b\u7ebf\u7a0b\u7684Looper\u4e0d\u4e3aNULL\uff0c\u4f46\u8c03\u7528Looper.myLooper() \u5f97\u5230\u5f53\u524d\u7ebf\u7a0b\u7684Looper\u5c31\u6709\u53ef\u80fd\u4e3aNULL\u3002\r\n    \u5bf9\u4e8e\u5b50\u7ebf\u7a0b\u4f7f\u7528Looper\uff0cAPI Doc\u63d0\u4f9b\u4e86\u6b63\u786e\u7684\u4f7f\u7528\u65b9\u6cd5\uff1a"},{"ID":"566","typeID":"11","question":"\u6ce8\u518c\u5e7f\u64ad\u6709\u51e0\u79cd\u65b9\u5f0f\uff0c\u8fd9\u4e9b\u65b9\u5f0f\u6709\u4f55\u4f18\u7f3a\u70b9\uff1fAndroid\u5f15\u5165\u5e7f\u64ad\u673a\u5236\u7684\u7528\u610f","answer":"2\u79cd\u65b9\u5f0f\r\n1.    \u5728androidmainfest.xml\u4e2d\u6ce8\u518c  \r\n2.    <receiver>\r\n3.        <intent-filter>\r\n4.           <action android:name = \"android.intent.action.PICK\"\/>\r\n5.        <\/intent-filter>\r\n6.    <\/receiver>\r\n7.    \u7f3a\u70b9\uff1a\u5e38\u9a7b\u578b\uff0c\u5360\u8d44\u6e90\u6bd4\u8f83\u5927\r\n8.   \r\n9.    registerReceiver(receiver,filter);  BroadcastReceiver\u66f4\u65b0UI\u4e00\u822c\u7528\u8fd9\u79cd\u65b9\u6cd5"},{"ID":"565","typeID":"11","question":"\u5982\u4f55\u542f\u7528Service\uff0c\u5982\u4f55\u505c\u7528Service","answer":"Intent intent = new Intent();\r\nintent.setClass(this,cba.class);\r\nstartService(intent);\r\nstopService(intent);"},{"ID":"564","typeID":"11","question":"\u8bf7\u4ecb\u7ecd\u4e0bandroid\u5927\u4f17\u5e38\u7528\u7684\u4e94\u79cd\u5e03\u5c40","answer":"FrameLayout\uff08\u6846\u67b6\u5e03\u5c40\uff09\r\n\u53ea\u53ef\u4ee5\u6709\u4e00\u4e2a\u63a7\u4ef6\uff0c\u5e76\u4e14\u4e0d\u80fd\u8bbe\u8ba1\u8fd9\u4e2a\u63a7\u4ef6\u7684\u4f4d\u7f6e\uff0c\u63a7\u4ef6\u4f1a\u653e\u5728\u5de6\u4e0a\u89d2\r\nLinearLayout\uff08\u7ebf\u6027\u5e03\u5c40\uff09\r\n\u4e00\u884c\u53ea\u80fd\u63a7\u5236\u4e00\u4e2a\u63a7\u4ef6\u7684\u7ebf\u6027\u5e03\u5c40\uff0c\u6240\u4ee5\u5f53\u6709\u5f88\u591a\u63a7\u4ef6\u9700\u8981\u5728\u4e00\u4e2a\u754c\u9762\u4e2d\u5217\u51fa\u65f6\uff0c\u53ef\u4ee5\u7528LinearLayout\u5e03\u5c40\r\nAbsoluteLayout\uff08\u7edd\u5bf9\u5e03\u5c40\uff09\r\n\u53ef\u4ee5\u653e\u7f6e\u591a\u4e2a\u63a7\u4ef6\uff0c\u5e76\u4e14\u53ef\u4ee5\u81ea\u5df1\u5b9a\u4e49\u63a7\u4ef6\u7684x,y\u7684\u4f4d\u7f6e\r\nRelativeLayout\uff08\u76f8\u5bf9\u5e03\u5c40\uff09\r\n\u6bd4\u5982\u8981\u5728\u4e00\u884c\u4e0a\u663e\u793a\u591a\u4e2a\u63a7\u4ef6\uff0c\u8fd9\u65f6\u5c31\u8981\u7528\u5230\u76f8\u5bf9\u5e03\u5c40\r\nTableLayout\uff08\u8868\u683c\u5e03\u5c40\uff09\r\n\u5c06\u5b50\u5143\u7d20\u7684\u4f4d\u7f6e\u5206\u914d\u5230\u884c\u6216\u5217\u4e2d\uff0c\u4e00\u4e2aTableLayout\u7531\u8bb8\u591a\u7684TableRow\u7ec4\u6210"},{"ID":"563","typeID":"11","question":"\u5982\u4f55\u9000\u51faActivity\uff1f\u5982\u4f55\u5b89\u5168\u9000\u51fa\u5df2\u8c03\u7528\u591a\u4e2aActivity\u7684Application\uff1f","answer":"1.Activity.finish();\r\n\u4e5f\u53ef\u4ee5\u7528killProcess()\u548cSystem.exit()\u8fd9\u6837\u7684\u65b9\u6cd5\r\n2.\u7528ActivityManager\u7684restartPackage\u65b9\u6cd5"},{"ID":"562","typeID":"11","question":"\u5982\u4f55\u5c06\u4e00\u4e2aActivity\u8bbe\u7f6e\u6210\u7a97\u53e3\u6837\u5f0f","answer":"\u5728AndroidManifext.xml\u4e2dActivity\u5b9a\u4e49\u5904\u6dfb\u52a0\r\nandroid:theme=\"@android:style\/Theme.Dialog\"\u6216\r\nandroid:theme=\"@android:style\/Theme.Translucent\"\u3002"},{"ID":"561","typeID":"11","question":"\u8bf7\u63cf\u8ff0\u4e0bActivity\u7684\u58f0\u660e\u5468\u671f","answer":" onCreate->onStart->onRemuse->onPause->onStop->onRestart->onDestroy"},{"ID":"560","typeID":"11","question":"Android\u5f15\u5165\u5e7f\u64ad\u673a\u5236\u7684\u7528\u610f?","answer":"a:\u4eceMVC\u7684\u89d2\u5ea6\u8003\u8651(\u5e94\u7528\u7a0b\u5e8f\u5185)\r\n \r\n\u3000\u5176\u5b9e\u56de\u7b54\u8fd9\u4e2a\u95ee\u9898\u7684\u65f6\u5019\u8fd8\u53ef\u4ee5\u8fd9\u6837\u95ee\uff0candroid\u4e3a\u4ec0\u4e48\u8981\u6709\u90a34\u5927\u7ec4\u4ef6\uff0c\u73b0\u5728\u7684\u79fb\u52a8\u5f00\u53d1\u6a21\u578b\u57fa\u672c\u4e0a\u4e5f\u662f\u7167\u642c\u7684web\u90a3\u4e00\u5957MVC\u67b6\u6784\uff0c\u53ea\u4e0d\u8fc7\u662f\u6539\u4e86\u70b9\u5ac1\u5986\u800c\u5df2\u3002android\u7684\u56db\u5927\u7ec4\u4ef6\u672c\u8d28\u4e0a\u5c31\u662f\u4e3a\u4e86\u5b9e\u73b0\u79fb\u52a8\u6216\u8005\u8bf4\u5d4c\u5165\u5f0f\u8bbe\u5907\u4e0a\u7684MVC\u67b6\u6784\uff0c\u5b83\u4eec\u4e4b\u95f4\u6709\u65f6\u5019\u662f\u4e00\u79cd\u76f8\u4e92\u4f9d\u5b58\u7684\u5173\u7cfb\uff0c\u6709\u65f6\u5019\u53c8\u662f\u4e00\u79cd\u8865\u5145\u5173\u7cfb\uff0c\u5f15\u5165\u5e7f\u64ad\u673a\u5236\u53ef\u4ee5\u65b9\u4fbf\u51e0\u5927\u7ec4\u4ef6\u7684\u4fe1\u606f\u548c\u6570\u636e\u4ea4\u4e92\u3002\r\n \r\n\u3000\u3000b\uff1a\u7a0b\u5e8f\u95f4\u4e92\u901a\u6d88\u606f(\u4f8b\u5982\u5728\u81ea\u5df1\u7684\u5e94\u7528\u7a0b\u5e8f\u5185\u76d1\u542c\u7cfb\u7edf\u6765\u7535)\r\n \r\n\u3000\u3000c\uff1a\u6548\u7387\u4e0a(\u53c2\u8003UDP\u7684\u5e7f\u64ad\u534f\u8bae\u5728\u5c40\u57df\u7f51\u7684\u65b9\u4fbf\u6027)"},{"ID":"559","typeID":"11","question":"\u5982\u4f55\u5c06\u6253\u5f00res aw\u76ee\u5f55\u4e2d\u7684\u6570\u636e\u5e93\u6587\u4ef6?","answer":"\u5728Android\u4e2d\u4e0d\u80fd\u76f4\u63a5\u6253\u5f00res aw\u76ee\u5f55\u4e2d\u7684\u6570\u636e\u5e93\u6587\u4ef6\uff0c\u800c\u9700\u8981\u5728\u7a0b\u5e8f\u7b2c\u4e00\u6b21\u542f\u52a8\u65f6\u5c06\u8be5\u6587\u4ef6\u590d\u5236\u5230\u624b\u673a\u5185\u5b58\u6216SD\u5361\u7684\u67d0\u4e2a\u76ee\u5f55\u4e2d\uff0c\u7136\u540e\u518d\u6253\u5f00\u8be5\u6570\u636e\u5e93\u6587\u4ef6\u3002\u590d\u5236\u7684\u57fa\u672c\u65b9\u6cd5\u662f\u4f7f\u7528getResources().openRawResource\u65b9\u6cd5\u83b7\u5f97resaw\u76ee\u5f55\u4e2d\u8d44\u6e90\u7684InputStream\u5bf9\u8c61\uff0c\u7136\u540e\u5c06\u8be5InputStream\u5bf9\u8c61\u4e2d\u7684\u6570\u636e\u5199\u5165\u5176\u4ed6\u7684\u76ee\u5f55\u4e2d\u76f8\u5e94\u6587\u4ef6\u4e2d\u3002\u5728Android SDK\u4e2d\u53ef\u4ee5\u4f7f\u7528SQLiteDatabase.openOrCreateDatabase\u65b9\u6cd5\u6765\u6253\u5f00\u4efb\u610f\u76ee\u5f55\u4e2d\u7684SQLite\u6570\u636e\u5e93\u6587\u4ef6\u3002"},{"ID":"558","typeID":"11","question":"\u5982\u4f55\u5c06SQLite\u6570\u636e\u5e93(dictionary.db\u6587\u4ef6)\u4e0eapk\u6587\u4ef6\u4e00\u8d77\u53d1\u5e03?","answer":"\u53ef\u4ee5\u5c06dictionary.db\u6587\u4ef6\u590d\u5236\u5230Eclipse Android\u5de5\u7a0b\u4e2d\u7684resaw\u76ee\u5f55\u4e2d\u3002\u6240\u6709\u5728resaw\u76ee\u5f55\u4e2d\u7684\u6587\u4ef6\u4e0d\u4f1a\u88ab\u538b\u7f29\uff0c\u8fd9\u6837\u53ef\u4ee5\u76f4\u63a5\u63d0\u53d6\u8be5\u76ee\u5f55\u4e2d\u7684\u6587\u4ef6\u3002\u53ef\u4ee5\u5c06dictionary.db\u6587\u4ef6\u590d\u5236\u5230resaw\u76ee\u5f55\u4e2d."},{"ID":"557","typeID":"11","question":"\u6a2a\u7ad6\u5c4f\u5207\u6362\u65f6\u5019activity\u7684\u751f\u547d\u5468\u671f?","answer":"1\u3001\u4e0d\u8bbe\u7f6eActivity\u7684android:configChanges\u65f6\uff0c\u5207\u5c4f\u4f1a\u91cd\u65b0\u8c03\u7528\u5404\u4e2a\u751f\u547d\u5468\u671f\uff0c\u5207\u6a2a\u5c4f\u65f6\u4f1a\u6267\u884c\u4e00\u6b21\uff0c\u5207\u7ad6\u5c4f\u65f6\u4f1a\u6267\u884c\u4e24\u6b21\r\n \r\n\u3000\u30002\u3001\u8bbe\u7f6eActivity\u7684android:configChanges=\"orientation\"\u65f6\uff0c\u5207\u5c4f\u8fd8\u662f\u4f1a\u91cd\u65b0\u8c03\u7528\u5404\u4e2a\u751f\u547d\u5468\u671f\uff0c\u5207\u6a2a\u3001\u7ad6\u5c4f\u65f6\u53ea\u4f1a\u6267\u884c\u4e00\u6b21\r\n \r\n\u3000\u30003\u3001\u8bbe\u7f6eActivity\u7684android:configChanges=\"orientation|keyboardHidden\"\u65f6\uff0c\u5207\u5c4f\u4e0d\u4f1a\u91cd\u65b0\u8c03\u7528\u5404\u4e2a\u751f\u547d\u5468\u671f\uff0c\u53ea\u4f1a\u6267\u884conConfigurationChanged\u65b9\u6cd5"},{"ID":"556","typeID":"11","question":"\u4ec0\u4e48\u60c5\u51b5\u4f1a\u5bfc\u81f4Force Close ?\u5982\u4f55\u907f\u514d?\u80fd\u5426\u6355\u83b7\u5bfc\u81f4\u5176\u7684\u5f02\u5e38?","answer":"\u4e00\u822c\u50cf\u7a7a\u6307\u9488\u554a\uff0c\u53ef\u4ee5\u770b\u8d77logcat\uff0c\u7136\u540e\u5bf9\u5e94\u5230\u7a0b\u5e8f\u4e2d \u6765\u89e3\u51b3\u9519\u8bef"},{"ID":"555","typeID":"11","question":"\u4ec0\u4e48\u662fANR \u5982\u4f55\u907f\u514d\u5b83?","answer":"ANR\uff1aApplication Not Responding\uff0c\u4e94\u79d2\r\n \r\n\u5728Android\u4e2d\uff0c\u6d3b\u52a8\u7ba1\u7406\u5668\u548c\u7a97\u53e3\u7ba1\u7406\u5668\u8fd9\u4e24\u4e2a\u7cfb\u7edf\u670d\u52a1\u8d1f\u8d23\u76d1\u89c6\u5e94\u7528\u7a0b\u5e8f\u7684\u54cd\u5e94\u3002\u5f53\u51fa\u73b0\u4e0b\u5217\u60c5\u51b5\u65f6\uff0cAndroid\u5c31\u4f1a\u663e\u793aANR\u5bf9\u8bdd\u6846\u4e86\uff1a\r\n \r\n\u3000\u3000\u5bf9\u8f93\u5165\u4e8b\u4ef6(\u5982\u6309\u952e\u3001\u89e6\u6478\u5c4f\u4e8b\u4ef6)\u7684\u54cd\u5e94\u8d85\u8fc75\u79d2\r\n \r\n\u3000\u3000\u610f\u5411\u63a5\u53d7\u5668(intentReceiver)\u8d85\u8fc710\u79d2\u949f\u4ecd\u672a\u6267\u884c\u5b8c\u6bd5\r\n \r\n\u3000\u3000Android\u5e94\u7528\u7a0b\u5e8f\u5b8c\u5168\u8fd0\u884c\u5728\u4e00\u4e2a\u72ec\u7acb\u7684\u7ebf\u7a0b\u4e2d(\u4f8b\u5982main)\u3002\u8fd9\u5c31\u610f\u5473\u7740\uff0c\u4efb\u4f55\u5728\u4e3b\u7ebf\u7a0b\u4e2d\u8fd0\u884c\u7684\uff0c\u9700\u8981\u6d88\u8017\u5927\u91cf\u65f6\u95f4\u7684\u64cd\u4f5c\u90fd\u4f1a\u5f15\u53d1ANR\u3002\u56e0\u4e3a\u6b64\u65f6\uff0c\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u5df2\u7ecf\u6ca1\u6709\u673a\u4f1a\u53bb\u54cd\u5e94\u8f93\u5165\u4e8b\u4ef6\u548c\u610f\u5411\u5e7f\u64ad(Intentbroadcast)\u3002\r\n \r\n\u3000\u3000\u56e0\u6b64\uff0c\u4efb\u4f55\u8fd0\u884c\u5728\u4e3b\u7ebf\u7a0b\u4e2d\u7684\u65b9\u6cd5\uff0c\u90fd\u8981\u5c3d\u53ef\u80fd\u7684\u53ea\u505a\u5c11\u91cf\u7684\u5de5\u4f5c\u3002\u7279\u522b\u662f\u6d3b\u52a8\u751f\u547d\u5468\u671f\u4e2d\u7684\u91cd\u8981\u65b9\u6cd5\u5982onCreate()\u548conResume()\u7b49\u66f4\u5e94\u5982\u6b64\u3002\u6f5c\u5728\u7684\u6bd4\u8f83\u8017\u65f6\u7684\u64cd\u4f5c\uff0c\u5982\u8bbf\u95ee\u7f51\u7edc\u548c\u6570\u636e\u5e93;\u6216\u8005\u662f\u5f00\u9500\u5f88\u5927\u7684\u8ba1\u7b97\uff0c\u6bd4\u5982\u6539\u53d8\u4f4d\u56fe\u7684\u5927\u5c0f\uff0c\u9700\u8981\u5728\u4e00\u4e2a\u5355\u72ec\u7684\u5b50\u7ebf\u7a0b\u4e2d\u5b8c\u6210(\u6216\u8005\u662f\u4f7f\u7528\u5f02\u6b65\u8bf7\u6c42\uff0c\u5982\u6570\u636e\u5e93\u64cd\u4f5c)\u3002\u4f46\u8fd9\u5e76\u4e0d\u610f\u5473\u7740\u4f60\u7684\u4e3b\u7ebf\u7a0b\u9700\u8981\u8fdb\u5165\u963b\u585e\u72b6\u6001\u5df2\u7b49\u5f85\u5b50\u7ebf\u7a0b\u7ed3\u675f-- \u4e5f\u4e0d\u9700\u8981\u8c03\u7528Therad.wait()\u6216\u8005Thread.sleep()\u65b9\u6cd5\u3002\u53d6\u800c\u4ee3\u4e4b\u7684\u662f\uff0c\u4e3b\u7ebf\u7a0b\u4e3a\u5b50\u7ebf\u7a0b\u63d0\u4f9b\u4e00\u4e2a\u53e5\u67c4(Handler)\uff0c\u8ba9\u5b50\u7ebf\u7a0b\u5728\u5373\u5c06\u7ed3\u675f\u7684\u65f6\u5019\u8c03\u7528\u5b83(xing:\u53ef\u4ee5\u53c2\u770bSnake\u7684\u4f8b\u5b50\uff0c\u8fd9\u79cd\u65b9\u6cd5\u4e0e\u4ee5\u524d\u6211\u4eec\u6240\u63a5\u89e6\u7684\u6709\u6240\u4e0d\u540c)\u3002\u4f7f\u7528\u8fd9\u79cd\u65b9\u6cd5\u6d89\u53ca\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u80fd\u591f\u4fdd\u8bc1\u4f60\u7684\u7a0b\u5e8f\u5bf9\u8f93\u5165\u4fdd\u6301\u826f\u597d\u7684\u54cd\u5e94\uff0c\u4ece\u800c\u907f\u514d\u56e0\u4e3a\u8f93\u5165\u4e8b\u4ef6\u8d85\u8fc75\u79d2\u949f\u4e0d\u88ab\u5904\u7406\u800c\u4ea7\u751f\u7684ANR\u3002\u8fd9\u79cd\u5b9e\u8df5\u9700\u8981\u5e94\u7528\u5230\u6240\u6709\u663e\u793a\u7528\u6237\u754c\u9762\u7684\u7ebf\u7a0b\uff0c\u56e0\u4e3a\u4ed6\u4eec\u90fd\u9762\u4e34\u7740\u540c\u6837\u7684\u8d85\u65f6\u95ee\u9898\u3002"},{"ID":"554","typeID":"11","question":"\u8bf4\u8bf4mvc\u6a21\u5f0f\u7684\u539f\u7406\uff0c\u5b83\u5728android\u4e2d\u7684\u8fd0\u7528","answer":"MVC(Model_view_controller)\u201d\u6a21\u578b_\u89c6\u56fe_\u63a7\u5236\u5668\u201d\u3002MVC\u5e94\u7528\u7a0b\u5e8f\u603b\u662f\u7531\u8fd9\u4e09\u4e2a\u90e8\u5206\u7ec4\u6210\u3002Event(\u4e8b\u4ef6)\u5bfc\u81f4Controller\u6539\u53d8Model\u6216View\uff0c\u6216\u8005\u540c\u65f6\u6539\u53d8\u4e24\u8005\u3002\u53ea\u8981Controller\u6539\u53d8\u4e86Models\u7684\u6570\u636e\u6216\u8005\u5c5e\u6027\uff0c\u6240\u6709\u4f9d\u8d56\u7684View\u90fd\u4f1a\u81ea\u52a8\u66f4\u65b0\u3002\u7c7b\u4f3c\u7684\uff0c\u53ea\u8981Contro\r\n"},{"ID":"553","typeID":"11","question":"handler\u673a\u5236\u7684\u539f\u7406","answer":"andriod\u63d0\u4f9b\u4e86 Handler \u548cLooper \u6765\u6ee1\u8db3\u7ebf\u7a0b\u95f4\u7684\u901a\u4fe1\u3002Handler\u5148\u8fdb\u5148\u51fa\u539f\u5219\u3002Looper\u7c7b\u7528\u6765\u7ba1\u7406\u7279\u5b9a\u7ebf\u7a0b\u5185\u5bf9\u8c61\u4e4b\u95f4\u7684\u6d88\u606f\u4ea4\u6362(MessageExchange)\u3002\r\n        1)Looper: \u4e00\u4e2a\u7ebf\u7a0b\u53ef\u4ee5\u4ea7\u751f\u4e00\u4e2aLooper\u5bf9\u8c61\uff0c\u7531\u5b83\u6765\u7ba1\u7406\u6b64\u7ebf\u7a0b\u91cc\u7684MessageQueue(\u6d88\u606f\u961f\u5217)\u3002\r\n \r\n\u3000\u30002)Handler: \u4f60\u53ef\u4ee5\u6784\u9020Handler\u5bf9\u8c61\u6765\u4e0eLooper\u6c9f\u901a\uff0c\u4ee5\u4fbfpush\u65b0\u6d88\u606f\u5230Message Queue\u91cc;\u6216\u8005\u63a5\u6536Looper\u4eceMessageQueue\u53d6\u51fa)\u6240\u9001\u6765\u7684\u6d88\u606f\u3002\r\n \r\n\u3000\u30003) Message Queue(\u6d88\u606f\u961f\u5217):\u7528\u6765\u5b58\u653e\u7ebf\u7a0b\u653e\u5165\u7684\u6d88\u606f\u3002\r\n \r\n\u3000\u30004)\u7ebf\u7a0b\uff1aUI thread \u901a\u5e38\u5c31\u662fmainthread\uff0c\u800cAndroid\u542f\u52a8\u7a0b\u5e8f\u65f6\u4f1a\u66ff\u5b83\u5efa\u7acb\u4e00\u4e2aMessageQueue\u3002"},{"ID":"552","typeID":"11","question":"Android\u4e2d\u7684\u52a8\u753b\u6709\u54ea\u51e0\u7c7b\uff0c\u5b83\u4eec\u7684\u7279\u70b9\u548c\u533a\u522b\u662f\u4ec0\u4e48?","answer":"\u4e24\u79cd\uff0c\u4e00\u79cd\u662fTween\u52a8\u753b\u3001\u8fd8\u6709\u4e00\u79cd\u662fFrame\u52a8\u753b\u3002Tween\u52a8\u753b\uff0c\u8fd9\u79cd\u5b9e\u73b0\u65b9\u5f0f\u53ef\u4ee5\u4f7f\u89c6\u56fe\u7ec4\u4ef6\u79fb\u52a8\u3001\u653e\u5927\u3001\u7f29\u5c0f\u4ee5\u53ca\u4ea7\u751f\u900f\u660e\u5ea6\u7684\u53d8\u5316;\u53e6\u4e00\u79cdFrame\u52a8\u753b\uff0c\u4f20\u7edf\u7684\u52a8\u753b\u65b9\u6cd5\uff0c\u901a\u8fc7\u987a\u5e8f\u7684\u64ad\u653e\u6392\u5217\u597d\u7684\u56fe\u7247\u6765\u5b9e\u73b0\uff0c\u7c7b\u4f3c\u7535\u5f71\u3002"},{"ID":"551","typeID":"11","question":"\u4e00\u6761\u6700\u957f\u7684\u77ed\u4fe1\u606f\u7ea6\u5360\u591a\u5c11byte?","answer":"\u4e2d\u658770(\u5305\u62ec\u6807\u70b9)\uff0c\u82f1\u6587160\uff0c160\u4e2a\u5b57\u8282\u3002"},{"ID":"550","typeID":"11","question":"\u4ec0\u4e48\u662f\u5d4c\u5165\u5f0f\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf,Android \u64cd\u4f5c\u7cfb\u7edf\u5c5e\u4e8e\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf\u5417?","answer":"\u5d4c\u5165\u5f0f\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf\u662f\u6307\u5f53\u5916\u754c\u4e8b\u4ef6\u6216\u6570\u636e\u4ea7\u751f\u65f6\uff0c\u80fd\u591f\u63a5\u53d7\u5e76\u4ee5\u8db3\u591f\u5feb\u7684\u901f\u5ea6\u4e88\u4ee5\u5904\u7406\uff0c\u5176\u5904\u7406\u7684\u7ed3\u679c\u53c8\u80fd\u5728\u89c4\u5b9a\u7684\u65f6\u95f4\u4e4b\u5185\u6765\u63a7\u5236\u751f\u4ea7\u8fc7\u7a0b\u6216\u5bf9\u5904\u7406\u7cfb\u7edf\u4f5c\u51fa\u5feb\u901f\u54cd\u5e94\uff0c\u5e76\u63a7\u5236\u6240\u6709\u5b9e\u65f6\u4efb\u52a1\u534f\u8c03\u4e00\u81f4\u8fd0\u884c\u7684\u5d4c\u5165\u5f0f\u64cd\u4f5c\u7cfb\u7edf\u3002\u4e3b\u8981\u7528\u4e8e\u5de5\u4e1a\u63a7\u5236\u3001 \u519b\u4e8b\u8bbe\u5907\u3001 \u822a\u7a7a\u822a\u5929\u7b49\u9886\u57df\u5bf9\u7cfb\u7edf\u7684\u54cd\u5e94\u65f6\u95f4\u6709\u82db\u523b\u7684\u8981\u6c42\uff0c\u8fd9\u5c31\u9700\u8981\u4f7f\u7528\u5b9e\u65f6\u7cfb\u7edf\u3002\u53c8\u53ef\u5206\u4e3a\u8f6f\u5b9e\u65f6\u548c\u786c\u5b9e\u65f6\u4e24\u79cd\uff0c\u800candroid\u662f\u57fa\u4e8elinux\u5185\u6838\u7684\uff0c\u56e0\u6b64\u5c5e\u4e8e\u8f6f\u5b9e\u65f6\u3002"},{"ID":"549","typeID":"11","question":"\u5d4c\u5165\u5f0f\u64cd\u4f5c\u7cfb\u7edf\u5185\u5b58\u7ba1\u7406\u6709\u54ea\u51e0\u79cd\uff0c\u5404\u6709\u4f55\u7279\u6027","answer":"\u9875\u5f0f\uff0c\u6bb5\u5f0f\uff0c\u6bb5\u9875\uff0c\u7528\u5230\u4e86MMU,\u865a\u62df\u7a7a\u95f4\u7b49\u6280\u672f"},{"ID":"548","typeID":"11","question":"sim\u5361\u7684EF\u6587\u4ef6\u6709\u4f55\u4f5c\u7528","answer":"sim\u5361\u7684\u6587\u4ef6\u7cfb\u7edf\u6709\u81ea\u5df1\u89c4\u8303\uff0c\u4e3b\u8981\u662f\u4e3a\u4e86\u548c\u624b\u673a\u901a\u8baf\uff0csim\u672c \u8eab\u53ef\u4ee5\u6709\u81ea\u5df1\u7684\u64cd\u4f5c\u7cfb\u7edf\uff0cEF\u5c31\u662f\u4f5c\u5b58\u50a8\u5e76\u548c\u624b\u673a\u901a\u8baf\u7528\u7684"},{"ID":"547","typeID":"11","question":"Android dvm\u7684\u8fdb\u7a0b\u548cLinux\u7684\u8fdb\u7a0b, \u5e94\u7528\u7a0b\u5e8f\u7684\u8fdb\u7a0b\u662f\u5426\u4e3a\u540c\u4e00\u4e2a\u6982\u5ff5","answer":"DVM\u6307dalivk\u7684\u865a\u62df\u673a\u3002\u6bcf\u4e00\u4e2aAndroid\u5e94\u7528\u7a0b\u5e8f\u90fd\u5728\u5b83\u81ea\u5df1\u7684\u8fdb\u7a0b\u4e2d\u8fd0\u884c\uff0c\u90fd\u62e5\u6709\u4e00\u4e2a\u72ec\u7acb\u7684Dalvik\u865a\u62df\u673a\u5b9e\u4f8b\u3002\u800c\u6bcf\u4e00\u4e2aDVM\u90fd\u662f\u5728Linux\u4e2d\u7684\u4e00\u4e2a\u8fdb\u7a0b\uff0c\u6240\u4ee5\u8bf4\u53ef\u4ee5\u8ba4\u4e3a\u662f\u540c\u4e00\u4e2a\u6982\u5ff5\u3002"},{"ID":"400","typeID":"11","question":"\u8bf4\u51faArrayList,Vector,LinkedList\u7684\u5b58\u50a8\u6027\u80fd\u548c\u7279\u6027","answer":"ArrayList \u548c Vector \u90fd\u662f\u4f7f\u7528\u6570\u7ec4\u65b9\u5f0f\u5b58\u50a8\u6570\u636e,\u6b64\u6570\u7ec4\u5143\u7d20\u6570\u5927\u4e8e\u5b9e\u9645\u5b58\u50a8\u7684\u6570\u636e\u4ee5\u4fbf\u589e\u52a0 \u548c\u63d2\u5165\u5143\u7d20, \u5b83\u4eec\u90fd\u5141\u8bb8\u76f4\u63a5\u6309\u5e8f\u53f7\u7d22\u5f15\u5143\u7d20,\u4f46\u662f\u63d2\u5165\u5143\u7d20\u8981\u6d89\u53ca\u6570\u7ec4\u5143\u7d20\u79fb\u52a8\u7b49\u5185\u5b58\u64cd\u4f5c,\u6240\u4ee5\u7d22\u5f15 \u6570\u636e\u5feb\u800c\u63d2\u5165\u6570\u636e\u6162,\r\nVector \u7531\u4e8e\u4f7f\u7528\u4e86 synchronized \u65b9\u6cd5(\u7ebf\u7a0b\u5b89\u5168),\u901a\u5e38\u6027\u80fd\u4e0a\u8f83 ArrayList \u5dee,\u800c LinkedList \u4f7f\u7528\u53cc\u5411\u94fe\u8868\u5b9e\u73b0\u5b58\u50a8, \u6309\u5e8f\u53f7\u7d22\u5f15\u6570\u636e\u9700\u8981\u8fdb\u884c\u524d\u5411\u6216\u540e\u5411\u904d\u5386,\u4f46\u662f\u63d2\u5165\u6570\u636e\u65f6\u53ea\u9700\u8981\u8bb0\u5f55\u672c\u9879\u7684\u524d\u540e\u9879\u5373\u53ef, \u6240\u4ee5\u63d2\u5165\u901f\u5ea6\u8f83\u5feb\u3002"},{"ID":"399","typeID":"11","question":"ArrayList\u548cVector\u7684\u533a\u522b,HashMap\u548cHashtable\u7684\u533a\u522b","answer":"\u5c31 ArrayList \u4e0e Vector \u4e3b\u8981\u4ece\u4e8c\u65b9\u9762\u6765\u8bf4.\r\n1)\u540c\u6b65\u6027:Vector \u662f\u7ebf\u7a0b\u5b89\u5168\u7684,\u4e5f\u5c31\u662f\u8bf4\u662f\u540c\u6b65\u7684,\u800c ArrayList \u662f\u7ebf\u7a0b\u5e8f\u4e0d\u5b89\u5168\u7684,\u4e0d\u662f \u540c\u6b65\u7684\r\n2)\u6570\u636e\u589e\u957f:\u5f53\u9700\u8981\u589e\u957f\u65f6,Vector \u9ed8\u8ba4\u589e\u957f\u4e3a\u539f\u6765\u4e00\u57f9,\u800c ArrayList \u5374\u662f\u539f\u6765\u7684\u4e00\u534a\r\n\u5c31 HashMap \u4e0e HashTable \u4e3b\u8981\u4ece\u4e09\u65b9\u9762\u6765\u8bf4\u3002 3)\u5386\u53f2\u539f\u56e0:Hashtable\u662f\u57fa\u4e8e\u9648\u65e7\u7684Dictionary\u7c7b\u7684,HashMap\u662fJava1.2\u5f15\u8fdb\u7684Map\u63a5\u53e3\u7684 \u4e00\u4e2a\u5b9e\u73b0\r\n1)\u540c\u6b65\u6027:Hashtable \u662f\u7ebf\u7a0b\u5b89\u5168\u7684,\u4e5f\u5c31\u662f\u8bf4\u662f\u540c\u6b65\u7684,\u800c HashMap \u662f\u7ebf\u7a0b\u5e8f\u4e0d\u5b89\u5168\u7684,\u4e0d\u662f \u540c\u6b65\u7684\r\n2)\u503c:\u53ea\u6709 HashMap \u53ef\u4ee5\u8ba9\u4f60\u5c06\u7a7a\u503c\u4f5c\u4e3a\u4e00\u4e2a\u8868\u7684\u6761\u76ee\u7684 key \u6216 value"},{"ID":"398","typeID":"11","question":"List,Set,Map\u662f\u5426\u7ee7\u627f\u81eaCollection\u63a5\u53e3","answer":"List\u548cSet\u662f\u7ee7\u627f\u81eaCollection\u63a5\u53e3\u7684\u63a5\u53e3,Set\u4e0d\u5141\u8bb8\u91cd\u590d\u7684\u9879\u76ee,List\u5141\u8bb8\u91cd\u590d\u9879\u76ee,Set \u63a5\u53e3\u6d3e\u751f\u7684\u7c7b\u6709 TreeSet,HashSet,LinkedHashSet\u3002List \u63a5\u53e3\u6d3e\u751f\u7684\u7c7b\u6709 ArrayList,Vector \u7b49\u3002Map \u662f\u72ec\u7acb\u7684\u63a5\u53e3,\u4e0d\u7ee7\u627f Collection \u63a5\u53e3"},{"ID":"397","typeID":"11","question":"\u7528\u6700\u6709\u6548\u7387\u7684\u65b9\u6cd5\u7b97\u51fa2\u4e58\u4ee58\u7b49\u65bc\u51e0","answer":"\u7528\u79fb\u4f4d\u8fd0\u7b97 inta=2<<3;\r\na \u5c31\u662f 2 \u4e58\u4ee5 8 \u6700\u540e\u7ed3\u679c\u662f 16 \u8fd9\u662f\u6700\u7701\u5185\u5b58\u6700\u6709\u6548\u7387\u7684\u65b9\u6cd5 \u8fd9\u4e2a\u65b9\u6cd5\u786e\u5b9e\u9ad8\u6548\u7387\u7684\u3002\u6211\u6765\u89e3\u91ca\u4e00\u4e0b:\r\n2 \u7684\u4e8c\u8fdb\u5236\u662f 10 \u5728 32 \u4f4d\u5b58\u50a8\u5668\u91cc\u9762\u662f 0000000000000010\r\n\u5de6\u79fb\u4e09\u4f4d\u540e\u53d8\u6210 0000000000010000 \u4e5f\u5c31\u662f 16"},{"ID":"396","typeID":"11","question":"\u662f\u5426\u53ef\u4ee5\u7ee7\u627fString\u7c7b","answer":"String \u7c7b\u662f final \u7c7b\u6545\u4e0d\u53ef\u4ee5\u7ee7\u627f\u3002"},{"ID":"395","typeID":"11","question":"\u6784\u9020\u5668Constructor\u662f\u5426\u53ef\u88aboverride","answer":"\u6784\u9020\u5668 Constructor \u4e0d\u80fd\u88ab\u7ee7\u627f,\u56e0\u6b64\u4e0d\u80fd\u91cd\u5199 Override,\u4f46\u53ef\u4ee5\u88ab\u91cd\u8f7d Overload"},{"ID":"394","typeID":"11","question":"error\u548cexception\u6709\u4ec0\u4e48\u533a\u522b","answer":"error \u8868\u793a\u6062\u590d\u4e0d\u662f\u4e0d\u53ef\u80fd\u4f46\u5f88\u56f0\u96be\u7684\u60c5\u51b5\u4e0b\u7684\u4e00\u79cd\u4e25\u91cd\u95ee\u9898\u3002\u6bd4\u5982\u8bf4\u5185\u5b58\u6ea2\u51fa\u3002\u4e0d\u53ef\u80fd\u6307\u671b\u7a0b \u5e8f\u80fd\u5904\u7406\u8fd9\u6837\u7684\u60c5\u51b5\u3002exception \u8868\u793a\u4e00\u79cd\u8bbe\u8ba1\u6216\u5b9e\u73b0\u95ee\u9898\u3002\u4e5f\u5c31\u662f\u8bf4,\u5b83\u8868\u793a\u5982\u679c\u7a0b\u5e8f\u8fd0\u884c\u6b63 \u5e38,\u4ece\u4e0d\u4f1a\u53d1\u751f\u7684\u60c5\u51b5"},{"ID":"393","typeID":"11","question":"Math.round(11.5)\u7b49\u65bc\u591a\u5c11?Math.round(-11.5)\u7b49\u65bc\u591a\u5c11","answer":"Math.round(11.5)==12\r\nMath.round(-11.5)==-11\r\nround \u65b9\u6cd5\u8fd4\u56de\u4e0e\u53c2\u6570\u6700\u63a5\u8fd1\u7684\u957f\u6574\u6570"},{"ID":"392","typeID":"11","question":"&\u548c&&\u7684\u533a\u522b","answer":"&\u548c&&\u90fd\u53ef\u4ee5\u7528\u4f5c\u903b\u8f91\u4e0e\u7684\u8fd0\u7b97\u7b26,\u8868\u793a\u903b\u8f91\u4e0e(and),\u5f53\u8fd0\u7b97\u7b26\u4e24\u8fb9\u7684\u8868\u8fbe\u5f0f\u7684\u7ed3\u679c\u90fd\u4e3a true \u65f6,\u6574\u4e2a\u8fd0\u7b97\u7ed3\u679c\u624d\u4e3a true,\u5426\u5219,\u53ea\u8981\u6709\u4e00\u65b9\u4e3a false,\u5219\u7ed3\u679c\u4e3a false\u3002 &&\u8fd8\u5177\u6709\u77ed\u8def\u7684\u529f\u80fd,\u5373\u5982\u679c\u7b2c\u4e00\u4e2a\u8868\u8fbe\u5f0f\u4e3a false,\u5219\u4e0d\u518d\u8ba1\u7b97\u7b2c\u4e8c\u4e2a\u8868\u8fbe\u5f0f,\u4f8b\u5982,\u5bf9\u4e8e if(str!=null&&!str.equals(\u201c\u201d))\u8868\u8fbe\u5f0f,\u5f53 str \u4e3a null \u65f6,\u540e\u9762\u7684\u8868\u8fbe\u5f0f\u4e0d\u4f1a\u6267\u884c,\u6240\u4ee5 \u4e0d\u4f1a\u51fa\u73b0 NullPointerException \u5982\u679c\u5c06&&\u6539\u4e3a&,\u5219\u4f1a\u629b\u51fa NullPointerException \u5f02\u5e38\u3002 If(x==33&++y>0)y \u4f1a\u589e\u957f,If(x==33&&++y>0)\u4e0d\u4f1a\u589e\u957f &\u8fd8\u53ef\u4ee5\u7528\u4f5c\u4f4d\u8fd0\u7b97\u7b26,\u5f53&\u64cd\u4f5c\u7b26\u4e24\u8fb9\u7684\u8868\u8fbe\u5f0f\u4e0d\u662f boolean \u7c7b\u578b\u65f6,&\u8868\u793a\u6309\u4f4d\u4e0e\u64cd\u4f5c,\u6211\u4eec \u901a\u5e38\u4f7f\u7528 0x0f \u6765\u4e0e\u4e00\u4e2a\u6574\u6570\u8fdb\u884c&\u8fd0\u7b97,\u6765\u83b7\u53d6\u8be5\u6574\u6570\u7684\u6700\u4f4e 4 \u4e2a bit \u4f4d,\u4f8b\u5982,0x31&0x0f \u7684 \u7ed3\u679c\u4e3a 0x01"},{"ID":"391","typeID":"11","question":"StaticNestedClass\u548cInnerClass\u7684\u4e0d\u540c","answer":"\"NestedClass(\u4e00\u822c\u662f C++\u7684\u8bf4\u6cd5),InnerClass(\u4e00\u822c\u662f JAVA \u7684\u8bf4\u6cd5)\u3002Java \u5185\u90e8\u7c7b\u4e0e C++\u5d4c\u5957 \u7c7b\u6700\u5927\u7684\u4e0d\u540c\u5c31\u5728\u4e8e\u662f\u5426\u6709\u6307\u5411\u5916\u90e8\u7684\u5f15\u7528\u4e0a\u3002\r\n\u9759\u6001\u5185\u90e8\u7c7b(InnerClass)\u610f\u5473\u7740 1 \u521b\u5efa\u4e00\u4e2a static \u5185\u90e8\u7c7b\u7684\u5bf9\u8c61,\u4e0d\u9700\u8981\u4e00\u4e2a\u5916\u90e8\u7c7b\u5bf9\u8c61,2 \u4e0d\u80fd\u4ece\u4e00\u4e2a static \u5185\u90e8\u7c7b\u7684\u4e00\u4e2a\u5bf9\u8c61\u8bbf\u95ee\u4e00\u4e2a\u5916\u90e8\u7c7b\u5bf9\u8c61"},{"ID":"390","typeID":"11","question":"\u4f5c\u7528\u57dfpublic,private,protected,\u4ee5\u53ca\u4e0d\u5199\u65f6\u7684\u533a\u522b","answer":"AnonymousInnerClass(\u533f\u540d\u5185\u90e8\u7c7b)\u662f\u5426\u53ef\u4ee5 extends(\u7ee7\u627f)\u5176\u5b83\u7c7b,\u662f\u5426\u53ef\u4ee5 implements(\u5b9e \u73b0)interface(\u63a5\u53e3)\r\n\u533f\u540d\u7684\u5185\u90e8\u7c7b\u662f\u6ca1\u6709\u540d\u5b57\u7684\u5185\u90e8\u7c7b\u3002\u4e0d\u80fd extends(\u7ee7\u627f)\u5176\u5b83\u7c7b,\u4f46\u4e00\u4e2a\u5185\u90e8\u7c7b\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2a\u63a5 \u53e3,\u7531\u53e6\u4e00\u4e2a\u5185\u90e8\u7c7b\u5b9e\u73b0\u3002"},{"ID":"389","typeID":"11","question":"finish()\u4e0eSystem.exit(0)\u7684\u533a\u522b\uff0c\u518d\u8c08\u8c08\u4f60\u5bf9\u9000\u51fa\u7684\u7406\u89e3","answer":"\u9996\u5148\u4e00\u4e2aActivity\u662f\u6709\u751f\u547d\u5468\u671fonCreate,onStart,onResume,onPause,onStop,onDestroy...\r\nfinish\u662fActivity\u7684\u7c7b\uff0c\u4ec5\u4ec5\u9488\u5bf9Activity\uff0c\u5f53\u8c03\u7528finish()\u65f6\uff0c\u53ea\u662f\u5c06\u6d3b\u52a8\u63a8\u5411\u540e\u53f0\uff0c\u5e76\u6ca1\u6709\u7acb\u5373\u91ca\u653e\u5185\u5b58\uff0c\u6d3b\u52a8\u7684\u8d44\u6e90\u5e76\u6ca1\u6709\u88ab\u6e05\u7406\uff1b\u5f53\u8c03\u7528System.exit(0)\u65f6\uff0c\u6740\u6b7b\u4e86\u6574\u4e2a\u8fdb\u7a0b\uff0c\u8fd9\u65f6\u5019\u6d3b\u52a8\u6240\u5360\u7684\u8d44\u6e90\u4e5f\u4f1a\u88ab\u91ca\u653e\u3002\r\n\u5176\u6b21\uff0candroid\u7684\u673a\u5236\u51b3\u5b9a\u4e86\u7528\u6237\u65e0\u6cd5\u5b8c\u5168\u9000\u51fa\u5e94\u7528\uff0c\u5f53\u4f60\u7684application\u6700\u957f\u65f6\u95f4\u6ca1\u6709\u88ab\u7528\u8fc7\u7684\u65f6\u5019\uff0candroid\u81ea\u8eab\u4f1a\u51b3\u5b9a\u5c06application\u5173\u95ed\u4e86\u3002\r\nfinish\u65b9\u6cd5\u53ef\u4ee5\u63a7\u5236\u50cfActivity\u4e00\u6837\u7684\u7ec4\u4ef6\uff0c\u4f7f\u5176\u7ed3\u675f\u751f\u547d\u5468\u671f\uff0c\u4f46\u5e94\u7528\u7a0b\u5e8f\u5168\u5c40\u7684\u8d44\u6e90\u5e76\u4e0d\u4f1a\u7acb\u523b\u91ca\u653e\uff0c\u50cfstatic\u53d8\u91cf\u7684\u503c\u4ecd\u7136\u4f1a\u4fdd\u7559\uff0c\u4fdd\u4ee5\u518d\u6b21\u4f7f\u7528\u3002\r\n"},{"ID":"388","typeID":"11","question":"\u5982\u4f55\u7ebf\u7a0b\u95f4\u901a\u8baf\uff1f","answer":"Intent \u7b49"},{"ID":"387","typeID":"11","question":"\u5e03\u5c40\u3001\u533a\u522b\u3001\u5e94\u7528\u573a\u666f","answer":"FrameLayout\uff0cLinearLayout\uff0cTableLayout\uff0cRelativeLayout\uff0cAbsoluteLayout"},{"ID":"386","typeID":"11","question":"Java\u7ebf\u7a0b\u5b9e\u73b0\u65b9\u5f0f\u548c\u533a\u522b","answer":"\u7ee7\u627fThread\uff0c\u5b9e\u73b0runable\u63a5\u53e3\u3002\r\n\u533a\u522b\uff1a\u907f\u514d\u70b9\u7ee7\u627f\u7684\u5c40\u9650\uff0c\u4e00\u4e2a\u7c7b\u53ef\u4ee5\u7ee7\u627f\u591a\u4e2a\u63a5\u53e3\u3002\r\n\u9002\u5408\u4e8e\u8d44\u6e90\u7684\u5171\u4eab\r\n"},{"ID":"385","typeID":"11","question":"java\u6709\u90a3\u4e9b\u6392\u5e8f\uff0c\u5192\u6ce1\u4ee3\u7801","answer":"for(inti=0;i<num.length;i++){\r\n\/\/\u5185\u5faa\u73af\u63a7\u5236\u6bd4\u8f83\u540e\u79fb\u4f4d\r\nfor(intj=num.length-1;j>i;j--){\r\nif(num[j-1]>num[j]){\r\ntemp=num[j-1];\r\nnum[j-1]=num[j];\r\nnum[j]=temp;\r\n}\r\n}\r\n"},{"ID":"384","typeID":"11","question":"LOST.DIR\u662f\u4ec0\u4e48\uff1f","answer":"LOST.DIR\u662f\u4e13\u95e8\u6536\u96c6Android\u7cfb\u7edf\u8fd0\u884c\u65f6\u610f\u5916\u4e22\u5931\u7684\u6587\u4ef6\u800c\u8bbe\u7f6e\u7684\u6587\u4ef6\u5939\uff0c\u5176\u6536\u96c6\u7684\u5185\u5bb9\u5305\u62ec\u7cfb\u7edf\u56e0\u4e3a\u610f\u5916\u800c\u6ca1\u80fd\u4fdd\u5b58\u7684\u5404\u7c7b\u5185\u5b58\u3001\u4ea4\u6362\u3001\u6682\u5b58\u7b49\u6570\u636e\uff0c\u8f6f\u4ef6\u7684\u7f13\u5b58\u6570\u636e\u3001\u4ee5\u53ca\u5176\u4ed6\u5404\u7c7b\u6587\u4ef6\u3002\u53ea\u8981\u7cfb\u7edf\u53d1\u751f\u610f\u5916\uff08\u5982\u8f6f\u4ef6\u7a81\u7136\u65e0\u6cd5\u6b63\u5e38\u8fd0\u884c\uff09\uff0c\u4fbf\u4f1a\u5c06\u53d1\u751f\u610f\u5916\u7684\u6587\u4ef6\u79fb\u5230\u6b64\u76ee\u5f55\u4e0b\uff0c\u4ee5\u6570\u5b57\u5e8f\u5217\u540d\u79f0\u4ee3\u66ff\u8be5\u6587\u4ef6\u7684\u6269\u5c55\u540d\u3002\u6ce8\u610f\uff1a\u7531\u4e8eLOST.DIR\u6587\u4ef6\u5939\u7684\u7279\u6b8a\u4f5c\u7528\uff0c\u91cc\u9762\u7684\u6587\u4ef6\u90fd\u662f\u201c\u610f\u5916\u800c\u751f\u201d\uff0c\u56e0\u6b64\u53ef\u4ee5\u5220\u9664\u91cc\u9762\u7684\u6587\u4ef6\uff0c\u4f46\u8bf7\u4e0d\u8981\u5220\u9664LOST.DIR\u6587\u4ef6\u5939\u3002"},{"ID":"383","typeID":"11","question":"throw\u4e0ethrows\u533a\u522b","answer":"throws\u662f\u7528\u6765\u58f0\u660e\u4e00\u4e2a\u65b9\u6cd5\u53ef\u80fd\u629b\u51fa\u7684\u6240\u6709\u5f02\u5e38\u4fe1\u606f\r\nthrow\u5219\u662f\u6307\u629b\u51fa\u7684\u4e00\u4e2a\u5177\u4f53\u7684\u5f02\u5e38\u7c7b\u578b\u3002\r\n\u901a\u5e38\u5728\u4e00\u4e2a\u65b9\u6cd5\uff08\u7c7b\uff09\u7684\u58f0\u660e\u5904\u901a\u8fc7throws\u58f0\u660e\u65b9\u6cd5\uff08\u7c7b\uff09\u53ef\u80fd\u629b\u51fa\u7684\u5f02\u5e38\u4fe1\u606f\uff0c\u800c\u5728\u65b9\u6cd5\uff08\u7c7b\uff09\u5185\u90e8\u901a\u8fc7throw\u58f0\u660e\u4e00\u4e2a\u5177\u4f53\u7684\u5f02\u5e38\u4fe1\u606f\u3002\r\nthrows\u901a\u5e38\u4e0d\u7528\u663e\u793a\u7684\u6355\u83b7\u5f02\u5e38\uff0c\u53ef\u7531\u7cfb\u7edf\u81ea\u52a8\u5c06\u6240\u6709\u6355\u83b7\u7684\u5f02\u5e38\u4fe1\u606f\u629b\u7ed9\u4e0a\u7ea7\u65b9\u6cd5\uff1b\r\nthrow\u5219\u9700\u8981\u7528\u6237\u81ea\u5df1\u6355\u83b7\u76f8\u5173\u7684\u5f02\u5e38\uff0c\u800c\u540e\u5728\u5bf9\u5176\u8fdb\u884c\u76f8\u5173\u5305\u88c5\uff0c\u6700\u540e\u5728\u5c06\u5305\u88c5\u540e\u7684\u5f02\u5e38\u4fe1\u606f\u629b\r\n"},{"ID":"382","typeID":"11","question":"ListView\u5207\u6362\u5947\u5076\u884c\u80cc\u666f\u8272","answer":"ListView\u4e2d\u6709\u65f6\u5019\u53c8\u8fd9\u6837\u7684\u9700\u6c42\uff0c\u5f53\u9009\u4e2d\u67d0\u9879listView\u7684\u65f6\u5019\uff0c\u9700\u6c42\u662f\u6539\u53d8listiew\u7684\u80cc\u666f\u989c\u8272\uff0c\u5982\u679c\u7528resource\u6587\u4ef6\u4f1a\u6709\u7f13\u5b58\u95ee\u9898\uff0c\u80cc\u666f\u663e\u793a\u9519\u8bef\uff0c\u90a3\u4e48\u76f4\u63a5\u752816\u8fdb\u5236\u8868\u793a\u989c\u8272\u5373\u53ef\u3002\u59820xFF7AACC6. \u6ce8\u610f\u8868\u793a\u900f\u660e\u5ea6\u7684\u9700\u8981\u5199\u4e0a\uff0c\u5426\u5219\u663e\u793a\u4e0d\u6b63\u786e"},{"ID":"381","typeID":"11","question":"java\u4e2d\u5982\u4f55\u5f15\u7528\u672c\u5730\u8bed\u8a00","answer":"\u53ef\u4ee5\u7528JNI\uff08java native interface java \u672c\u5730\u63a5\u53e3\uff09\u63a5\u53e3 \u3002"},{"ID":"380","typeID":"11","question":"DDMS\u548cTraceView\u7684\u533a\u522b?","answer":"DDMS\u662f\u4e00\u4e2a\u7a0b\u5e8f\u6267\u884c\u67e5\u770b\u5668\uff0c\u5728\u91cc\u9762\u53ef\u4ee5\u770b\u89c1\u7ebf\u7a0b\u548c\u5806\u6808\u7b49\u4fe1\u606f\uff0cTraceView\u662f\u7a0b\u5e8f\u6027\u80fd\u5206\u6790\u5668\u3002"},{"ID":"379","typeID":"11","question":"\u5982\u4f55\u5c06\u6253\u5f00res aw\u76ee\u5f55\u4e2d\u7684\u6570\u636e\u5e93\u6587\u4ef6?","answer":"\u5728Android\u4e2d\u4e0d\u80fd\u76f4\u63a5\u6253\u5f00res aw\u76ee\u5f55\u4e2d\u7684\u6570\u636e\u5e93\u6587\u4ef6\uff0c\u800c\u9700\u8981\u5728\u7a0b\u5e8f\u7b2c\u4e00\u6b21\u542f\u52a8\u65f6\u5c06\u8be5\u6587\u4ef6\u590d\u5236\u5230\u624b\u673a\u5185\u5b58\u6216SD\u5361\u7684\u67d0\u4e2a\u76ee\u5f55\u4e2d\uff0c\u7136\u540e\u518d\u6253\u5f00\u8be5\u6570\u636e\u5e93\u6587\u4ef6\u3002\r\n\u590d\u5236\u7684\u57fa\u672c\u65b9\u6cd5\u662f\u4f7f\u7528getResources().openRawResource\u65b9\u6cd5\u83b7\u5f97res aw\u76ee\u5f55\u4e2d\u8d44\u6e90\u7684 InputStream\u5bf9\u8c61\uff0c\u7136\u540e\u5c06\u8be5InputStream\u5bf9\u8c61\u4e2d\u7684\u6570\u636e\u5199\u5165\u5176\u4ed6\u7684\u76ee\u5f55\u4e2d\u76f8\u5e94\u6587\u4ef6\u4e2d\u3002\u5728Android SDK\u4e2d\u53ef\u4ee5\u4f7f\u7528SQLiteDatabase.openOrCreateDatabase\u65b9\u6cd5\u6765\u6253\u5f00\u4efb\u610f\u76ee\u5f55\u4e2d\u7684SQLite\u6570\u636e\u5e93\u6587\u4ef6\u3002\r\n"},{"ID":"378","typeID":"11","question":"\u600e\u4e48\u63d0\u9ad8sqlite\u7684\u6548\u7387?","answer":"\u4e8b\u7269"},{"ID":"377","typeID":"11","question":"SQLite\u7ebf\u7a0b\u5b89\u5168\u5417\uff1fsqlite3_threadsafe()\u6765\u786e\u5b9e\u662f\u5426\u7ebf\u7a0b\u5b89\u5168\u7248\u672c?","answer":"SQLite\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\u3002\r\n\u4e3a\u4e86\u8fbe\u5230\u7ebf\u7a0b\u5b89\u5168\uff0cSQLite\u5728\u7f16\u8bd1\u65f6\u5fc5\u987b\u5c06SQLITE_THREADSAFE\u9884\u5904\u7406\u5b8f\u7f6e\u4e3a1\u3002\u5728Windows\u548cLinux\u4e0a\uff0c\u5df2\u7f16\u8bd1\u7684\u597d\u7684\u4e8c\u8fdb\u5236\u53d1\u884c\u7248\u4e2d\u90fd\u662f\u8fd9\u6837\u8bbe\u7f6e\u7684\u3002\u5982\u679c\u4e0d\u786e\u5b9a\u4f60\u6240\u4f7f\u7528\u7684\u5e93\u662f\u5426\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\uff0c\u53ef\u4ee5\u8c03\u7528sqlite3_threadsafe()\u63a5\u53e3\u627e\u51fa\u3002"},{"ID":"376","typeID":"11","question":"\u5982\u4f55\u5c06SQLite\u6570\u636e\u5e93(dictionary.db\u6587\u4ef6)\u4e0eapk\u6587\u4ef6\u4e00\u8d77\u53d1\u5e03?","answer":"\u53ef\u4ee5\u5c06dictionary.db\u6587\u4ef6\u590d\u5236\u5230Eclipse Android\u5de5\u7a0b\u4e2d\u7684res aw\u76ee\u5f55\u4e2d\u3002\u6240\u6709\u5728res aw\u76ee\u5f55\u4e2d\u7684\u6587\u4ef6\u4e0d\u4f1a\u88ab\u538b\u7f29\uff0c\u8fd9\u6837\u53ef\u4ee5\u76f4\u63a5\u63d0\u53d6\u8be5\u76ee\u5f55\u4e2d\u7684\u6587\u4ef6\u3002\u53ef\u4ee5\u5c06dictionary.db\u6587\u4ef6\u590d\u5236\u5230res aw\u76ee\u5f55\u4e2d."},{"ID":"375","typeID":"11","question":"\u7528\u7b97\u6cd5\u8c03\u6574\u56fe\u7247\u7684\u900f\u660e\u5ea6?","answer":"\u6709\u4e00\u4e2a\u4e00\u7ef4\u6574\u578b\u6570\u7ec4int[]data\u4fdd\u5b58\u7684\u662f\u4e00\u5f20\u5bbd\u4e3awidth\uff0c\u9ad8\u4e3aheight\u7684\u56fe\u7247\u50cf\u7d20\u503c\u4fe1\u606f\u3002\u8bf7\u5199\u4e00\u4e2a\u7b97\u6cd5\uff0c\u5c06\u8be5\u56fe\u7247\u6240\u6709\u7684\u767d\u8272\u4e0d\u900f\u660e(0xffffffff)\u50cf\u7d20\u70b9\u7684\u900f\u660e\u5ea6\u8c03\u6574\u4e3a50%\u3002"},{"ID":"374","typeID":"11","question":"\u4e00\u6761\u6700\u957f\u7684\u77ed\u4fe1\u606f\u7ea6\u5360\u591a\u5c11byte","answer":"\u4e2d\u658770(\u5305\u62ec\u6807\u70b9)\uff0c\u82f1\u6587160\uff0c160\u4e2a\u5b57\u8282\u3002"},{"ID":"373","typeID":"11","question":"\u4ec0\u4e48\u662f\u5d4c\u5165\u5f0f\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf, Android \u64cd\u4f5c\u7cfb\u7edf\u5c5e\u4e8e\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf\u5417","answer":"\u5d4c\u5165\u5f0f\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf\u662f\u6307\u5f53\u5916\u754c\u4e8b\u4ef6\u6216\u6570\u636e\u4ea7\u751f\u65f6\uff0c\u80fd\u591f\u63a5\u53d7\u5e76\u4ee5\u8db3\u591f\u5feb\u7684\u901f\u5ea6\u4e88\u4ee5\u5904\u7406\uff0c\u5176\u5904\u7406\u7684\u7ed3\u679c\u53c8\u80fd\u5728\u89c4\u5b9a\u7684\u65f6\u95f4\u4e4b\u5185\u6765\u63a7\u5236\u751f\u4ea7\u8fc7\u7a0b\u6216\u5bf9\u5904\u7406\u7cfb\u7edf\u4f5c\u51fa\u5feb\u901f\u54cd\u5e94\uff0c\u5e76\u63a7\u5236\u6240\u6709\u5b9e\u65f6\u4efb\u52a1\u534f\u8c03\u4e00\u81f4\u8fd0\u884c\u7684\u5d4c\u5165\u5f0f\u64cd\u4f5c\u7cfb\u7edf\u3002\u4e3b\u8981\u7528\u4e8e\u5de5\u4e1a\u63a7\u5236\u3001 \u519b\u4e8b\u8bbe\u5907\u3001 \u822a\u7a7a\u822a\u5929\u7b49\u9886\u57df\u5bf9\u7cfb\u7edf\u7684\u54cd\u5e94\u65f6\u95f4\u6709\u82db\u523b\u7684\u8981\u6c42\uff0c\u8fd9\u5c31\u9700\u8981\u4f7f\u7528\u5b9e\u65f6\u7cfb\u7edf\u3002\u53c8\u53ef\u5206\u4e3a\u8f6f\u5b9e\u65f6\u548c\u786c\u5b9e\u65f6\u4e24\u79cd\uff0c\u800candroid\u662f\u57fa\u4e8elinux\u5185\u6838\u7684\uff0c\u56e0\u6b64\u5c5e\u4e8e\u8f6f\u5b9e\u65f6\u3002"},{"ID":"372","typeID":"11","question":"\u5d4c\u5165\u5f0f\u64cd\u4f5c\u7cfb\u7edf\u5185\u5b58\u7ba1\u7406\u6709\u54ea\u51e0\u79cd\uff0c \u5404\u6709\u4f55\u7279\u6027","answer":"\u9875\u5f0f\uff0c\u6bb5\u5f0f\uff0c\u6bb5\u9875\uff0c\u7528\u5230\u4e86MMU,\u865a\u62df\u7a7a\u95f4\u7b49\u6280\u672f"},{"ID":"371","typeID":"11","question":"\u7cfb\u7edf\u7684\u4f18\u52bf\u548c\u4e0d\u8db3?","answer":"5\u5927\u4f18\u52bf\uff1a \r\n\u2474\u5f00\u653e\u6027 \r\n\u5728\u4f18\u52bf\u65b9\u9762\uff0cAndroid\u5e73\u53f0\u9996\u5148\u5c31\u662f\u5176\u5f00\u53d1\u6027\uff0c\u5f00\u53d1\u7684\u5e73\u53f0\u5141\u8bb8\u4efb\u4f55\u79fb\u52a8\u7ec8\u7aef\u5382\u5546\u52a0\u5165\u5230Android\u8054\u76df\u4e2d\u6765\u3002\u663e\u8457\u7684\u5f00\u653e\u6027\u53ef\u4ee5\u4f7f\u5176\u62e5\u6709\u66f4\u591a\u7684\u5f00\u53d1\u8005\uff0c\u968f\u7740\u7528\u6237\u548c\u5e94\u7528\u7684\u65e5\u76ca\u4e30\u5bcc\uff0c\u4e00\u4e2a\u5d2d\u65b0\u7684\u5e73\u53f0\u4e5f\u5c06\u5f88\u5feb\u8d70\u5411\u6210\u719f\u3002\u5f00\u653e\u6027\u5bf9\u4e8eAndroid\u7684\u53d1\u5c55\u800c\u8a00\uff0c\u6709\u5229\u4e8e\u79ef\u7d2f\u4eba\u6c14\uff0c\u8fd9\u91cc\u7684\u4eba\u6c14\u5305\u62ec\u6d88\u8d39\u8005\u548c\u5382\u5546\uff0c\u800c\u5bf9\u4e8e\u6d88\u8d39\u8005\u6765\u8bb2\uff0c\u968f\u5927\u7684\u53d7\u76ca\u6b63\u662f\u4e30\u5bcc\u7684\u8f6f\u4ef6\u8d44\u6e90\u3002\u5f00\u653e\u7684\u5e73\u53f0\u4e5f\u4f1a\u5e26\u6765\u66f4\u5927\u7ade\u4e89\uff0c\u5982\u6b64\u4e00\u6765\uff0c\u6d88\u8d39\u8005\u5c06\u53ef\u4ee5\u7528\u66f4\u4f4e\u7684\u4ef7\u4f4d\u8d2d\u5f97\u5fc3\u4eea\u7684\u624b\u673a\u3002\r\n\u2475\u6323\u8131\u8fd0\u8425\u5546\u7684\u675f\u7f1a \r\n\u5728\u8fc7\u53bb\u5f88\u957f\u7684\u4e00\u6bb5\u65f6\u95f4\uff0c\u7279\u522b\u662f\u5728\u6b27\u7f8e\u5730\u533a\uff0c\u624b\u673a\u5e94\u7528\u5f80\u5f80\u53d7\u5230\u8fd0\u8425\u5546\u5236\u7ea6\uff0c\u4f7f\u7528\u4ec0\u4e48\u529f\u80fd\u63a5\u5165\u4ec0\u4e48\u7f51\u7edc\uff0c\u51e0\u4e4e\u90fd\u53d7\u5230\u8fd0\u8425\u5546\u7684\u63a7\u5236\u3002\u4ece\u53bb\u5e74iPhone \u4e0a\u5e02 \uff0c\u7528\u6237\u53ef\u4ee5\u66f4\u52a0\u65b9\u4fbf\u5730\u8fde\u63a5\u7f51\u7edc\uff0c\u8fd0\u8425\u5546\u7684\u5236\u7ea6\u51cf\u5c11\u3002\u968f\u7740EDGE\u3001HSDPA\u8fd9\u4e9b2G\u81f33G\u79fb\u52a8\u7f51\u7edc\u7684\u9010\u6b65\u8fc7\u6e21\u548c\u63d0\u5347\uff0c\u624b\u673a\u968f\u610f\u63a5\u5165\u7f51\u7edc\u5df2\u4e0d\u662f\u8fd0\u8425\u5546\u53e3\u4e2d\u7684\u7b11\u8c08\uff0c\u5f53\u4f60\u53ef\u4ee5\u901a\u8fc7\u624b\u673aIM\u8f6f\u4ef6\u65b9\u4fbf\u5730\u8fdb\u884c\u5373\u65f6\u804a\u5929\u65f6\uff0c\u518d\u56de\u60f3\u4e0d\u4e45\u524d\u5929\u4ef7\u7684\u5f69\u4fe1\u548c\u56fe\u94c3\u4e0b\u8f7d\u4e1a\u52a1\uff0c\u662f\u4e0d\u662f\u50cf\u5669\u68a6\u4e00\u6837\uff1f\u4e92\u8054\u7f51\u5de8\u5934Google\u63a8\u52a8\u7684Android\u7ec8\u7aef\u5929\u751f\u5c31\u6709\u7f51\u7edc\u7279\u8272\uff0c\u5c06\u8ba9\u7528\u6237\u79bb\u4e92\u8054\u7f51\u66f4\u8fd1\u3002\r\n\u2476\u4e30\u5bcc\u7684\u786c\u4ef6\u9009\u62e9 \r\n\u8fd9\u4e00\u70b9\u8fd8\u662f\u4e0eAndroid\u5e73\u53f0\u7684\u5f00\u653e\u6027\u76f8\u5173\uff0c\u7531\u4e8eAndroid\u7684\u5f00\u653e\u6027\uff0c\u4f17\u591a\u7684\u5382\u5546\u4f1a\u63a8\u51fa\u5343\u5947\u767e\u602a\uff0c\u529f\u80fd\u7279\u8272\u5404\u5177\u7684\u591a\u79cd\u4ea7\u54c1\u3002\u529f\u80fd\u4e0a\u7684\u5dee\u5f02\u548c\u7279\u8272\uff0c\u5374\u4e0d\u4f1a\u5f71\u54cd\u5230\u6570\u636e\u540c\u6b65\u3001\u751a\u81f3\u8f6f\u4ef6\u7684\u517c\u5bb9\uff0c\u597d\u6bd4\u4f60\u4ece\u8bfa\u57fa\u4e9a Symbian\u98ce\u683c\u624b\u673a \u4e00\u4e0b\u6539\u7528\u82f9\u679c iPhone \uff0c\u540c\u65f6\u8fd8\u53ef\u5c06Symbian\u4e2d\u4f18\u79c0\u7684\u8f6f\u4ef6\u5e26\u5230iPhone\u4e0a\u4f7f\u7528\u3001\u8054\u7cfb\u4eba\u7b49\u8d44\u6599\u66f4\u662f\u53ef\u4ee5\u65b9\u4fbf\u5730\u8f6c\u79fb\uff0c\u662f\u4e0d\u662f\u975e\u5e38\u65b9\u4fbf\u5462\uff1f\r\n\u2477\u4e0d\u53d7\u4efb\u4f55\u9650\u5236\u7684\u5f00\u53d1\u5546 \r\nAndroid\u5e73\u53f0\u63d0\u4f9b\u7ed9\u7b2c\u4e09\u65b9\u5f00\u53d1\u5546\u4e00\u4e2a\u5341\u5206\u5bbd\u6cdb\u3001\u81ea\u7531\u7684\u73af\u5883\uff0c\u4e0d\u4f1a\u53d7\u5230\u5404\u79cd\u6761\u6761\u6846\u6846\u7684\u963b\u6270\uff0c\u53ef\u60f3\u800c\u77e5\uff0c\u4f1a\u6709\u591a\u5c11\u65b0\u9896\u522b\u81f4\u7684\u8f6f\u4ef6\u4f1a\u8bde\u751f\u3002\u4f46\u4e5f\u6709\u5176\u4e24\u9762\u6027\uff0c\u8840\u8165\u3001\u66b4\u529b\u3001\u60c5\u8272\u65b9\u9762\u7684\u7a0b\u5e8f\u548c\u6e38\u620f\u5982\u53ef\u63a7\u5236\u6b63\u662f\u7559\u7ed9Android\u96be\u9898\u4e4b\u4e00\u3002\r\n\u2478\u65e0\u7f1d\u7ed3\u5408\u7684Google\u5e94\u7528 \r\n\u5982\u4eca\u53f1\u8be7\u4e92\u8054\u7f51\u7684Google\u5df2\u7ecf\u8d70\u8fc710\u5e74\u5ea6\u5386\u53f2\uff0c\u4ece\u641c\u7d22\u5de8\u4eba\u5230\u5168\u9762\u7684\u4e92\u8054\u7f51\u6e17\u900f\uff0cGoogle\u670d\u52a1\u5982\u5730\u56fe\u3001\u90ae\u4ef6\u3001\u641c\u7d22\u7b49\u5df2\u7ecf\u6210\u4e3a\u8fde\u63a5\u7528\u6237\u548c\u4e92\u8054\u7f51\u7684\u91cd\u8981\u7ebd\u5e26\uff0c\u800cAndroid\u5e73\u53f0\u624b\u673a\u5c06\u65e0\u7f1d\u7ed3\u5408\u8fd9\u4e9b\u4f18\u79c0\u7684Google\u670d\u52a1\u3002\r\n\u518d\u8bf4Android\u76845\u5927\u4e0d\u8db3\uff1a\r\n\u2474\u5b89\u5168\u548c\u9690\u79c1 \r\n\u7531\u4e8e\u624b\u673a \u4e0e\u4e92\u8054\u7f51\u7684\u7d27\u5bc6\u8054\u7cfb\uff0c\u4e2a\u4eba\u9690\u79c1\u5f88\u96be\u5f97\u5230\u4fdd\u5b88\u3002\u9664\u4e86\u4e0a\u7f51\u8fc7\u7a0b\u4e2d\u7ecf\u610f\u6216\u4e0d\u7ecf\u610f\u7559\u4e0b\u7684\u4e2a\u4eba\u8db3\u8ff9\uff0cGoogle\u8fd9\u4e2a\u5de8\u4eba\u4e5f\u65f6\u65f6\u7ad9\u5728\u4f60\u7684\u8eab\u540e\uff0c\u6d1e\u7a7f\u4e00\u5207\uff0c\u56e0\u6b64\uff0c\u4e92\u8054\u7f51\u7684\u6df1\u5165\u5c06\u4f1a\u5e26\u6765\u65b0\u4e00\u8f6e\u7684\u9690\u79c1\u5371\u673a\u3002\r\n\u2475\u9996\u5148\u5f00\u5356Android\u624b\u673a\u7684\u4e0d\u662f\u6700\u5927\u8fd0\u8425\u5546 \r\n\u4f17\u6240\u5468\u77e5\uff0cT-Mobile\u572823\u65e5\uff0c\u4e8e\u7f8e\u56fd\u7ebd\u7ea6\u53d1\u5e03 \u4e86Android\u9996\u6b3e\u624b\u673aG1\u3002\u4f46\u662f\u5728\u5317\u7f8e\u5e02\u573a\uff0c\u6700\u5927\u7684\u4e24\u5bb6\u8fd0\u8425\u5546\u4e43AT&T\u548cVerizon\uff0c\u800c\u76ee\u524d\u6240\u77e5\u53d6\u5f97Android\u624b\u673a\u9500\u552e\u6743\u7684\u4ec5\u6709 T-Mobile\u548cSprint\uff0c\u5176\u4e2dT-Mobile\u76843G\u7f51\u7edc\u76f8\u5bf9\u4e8e\u5176\u4ed6\u4e09\u5bb6\u4e5f\u8981\u900a\u8272\u4e0d\u5c11\uff0c\u56e0\u6b64\uff0c\u7528\u6237\u53ef\u4ee5\u4e70\u8d26\u8d2d\u4e70G1\uff0c\u80fd\u5426\u4f53\u9a8c\u5230\u6700\u4f73\u76843G\u7f51\u7edc\u670d\u52a1\u5219\u8981\u53e6\u5f53\u522b\u8bba\u4e86\uff01\r\n\u2476\u8fd0\u8425\u5546\u4ecd\u7136\u80fd\u591f\u5f71\u54cd\u5230Android\u624b\u673a \r\n\u5728\u56fd\u5185\u5e02\u573a\uff0c\u4e0d\u5c11\u7528\u6237\u5bf9\u8d2d\u5f97\u79fb\u52a8\u5b9a\u5236\u673a\u4e0d\u6ee1\uff0c\u611f\u89c9\u6240\u8d2d\u7684\u624b\u673a\u88ab\u4eba\u6d82\u753b\u4e86\u5e7f\u544a\u4e00\u822c\u3002\u8fd9\u6837\u7684\u60c5\u51b5\u5728\u56fd\u5916\u5e02\u573a\u540c\u6837\u51fa\u73b0\u3002Android\u624b\u673a\u7684\u53e6\u4e00\u53d1\u552e\u8fd0\u8425\u5546Sprint\u5c31\u5c06\u5728\u5176\u673a\u578b\u4e2d\u5185\u7f6e\u5176\u624b\u673a\u5546\u5e97\u7a0b\u5e8f\u3002\r\n\u2477\u540c\u7c7b\u673a\u578b\u7528\u6237\u51cf\u5c11 \r\n\u5728\u4e0d\u5c11\u624b\u673a\u8bba\u575b\u90fd\u4f1a\u6709\u9488\u5bf9\u67d0\u4e00\u578b\u53f7\u7684\u5b50\u8bba\u575b\uff0c\u5bf9\u4e00\u6b3e\u624b\u673a\u7684\u4f7f\u7528\u5fc3\u5f97\u4ea4\u6d41\uff0c\u5e76\u5206\u4eab\u8f6f\u4ef6\u8d44\u6e90\u3002\u800c\u5bf9\u4e8eAndroid\u5e73\u53f0\u624b\u673a\uff0c\u7531\u4e8e\u5382\u5546\u4e30\u5bcc\uff0c\u4ea7\u54c1\u7c7b\u578b\u591a\u6837\uff0c\u8fd9\u6837\u4f7f\u7528\u540c\u4e00\u6b3e\u673a\u578b\u7684\u7528\u6237\u8d8a\u6765\u8d8a\u5c11\uff0c\u7f3a\u5c11\u7edf\u4e00\u673a\u578b\u7684\u7a0b\u5e8f\u5f3a\u5316\u3002\u4e3e\u4e2a\u7a0d\u663e\u4e0d\u5f53\u7684\u4f8b\u5b50\uff0c\u73b0\u5728\u5c71\u5be8\u673a\u6cdb\u6ee5\uff0c\u54c1\u79cd\u5404\u5f02\uff0c\u5c31\u5f88\u5c11\u6709\u4e13\u95e8\u9488\u5bf9\u67d0\u4e2a\u578b\u53f7\u5c71\u5be8\u673a\u7684\u8ba8\u8bba\u548c\u7fa4\u7ec4\uff0c\u9664\u4e86\u54ea\u4e9b\u529f\u80fd\u5f02\u5e38\u62a2\u773c\u3001\u9887\u53d7\u8ffd\u6367\u7684\u673a\u578b\u4ee5\u5916\u3002\r\n\u2478\u8fc7\u5206\u4f9d\u8d56\u5f00\u53d1\u5546\u7f3a\u5c11\u6807\u51c6\u914d\u7f6e \r\n\u5728\u4f7f\u7528PC\u7aef\u7684Windows Xp\u7cfb\u7edf\u7684\u65f6\u5019\uff0c\u90fd\u4f1a\u5185\u7f6e\u5fae\u8f6fWindows Media Player\u8fd9\u6837\u4e00\u4e2a\u6d4f\u89c8\u5668\u7a0b\u5e8f\uff0c\u7528\u6237\u53ef\u4ee5\u9009\u62e9\u66f4\u591a\u6837\u7684\u64ad\u653e\u5668\uff0c\u5982Realplay\u6216\u66b4\u98ce\u5f71\u97f3\u7b49\u3002\u4f46\u5165\u624b\u5f00\u59cb\u4f7f\u7528\u9ed8\u8ba4\u7684\u7a0b\u5e8f\u540c\u6837\u53ef\u4ee5\u5e94\u4ed8\u591a\u6837\u7684\u9700\u8981\u3002\u5728 Android\u5e73\u53f0\u4e2d\uff0c\u7531\u4e8e\u5176\u5f00\u653e\u6027\uff0c\u8f6f\u4ef6\u66f4\u591a\u4f9d\u8d56\u7b2c\u4e09\u65b9\u5382\u5546\uff0c\u6bd4\u5982Android\u7cfb\u7edf\u7684SDK\u4e2d\u5c31\u6ca1\u6709\u5185\u7f6e\u97f3\u4e50 \u64ad\u653e\u5668\uff0c\u5168\u90e8\u4f9d\u8d56\u7b2c\u4e09\u65b9\u5f00\u53d1\uff0c\u7f3a\u5c11\u4e86\u4ea7\u54c1\u7684\u7edf\u4e00\u6027\u3002\r\n"},{"ID":"370","typeID":"11","question":"\u7cfb\u7edf\u4e0a\u5b89\u88c5\u4e86\u591a\u79cd\u6d4f\u89c8\u5668\uff0c\u80fd\u5426\u6307\u5b9a\u67d0\u6d4f\u89c8\u5668\u8bbf\u95ee\u6307\u5b9a\u9875\u9762\uff1f\u8bf7\u8bf4\u660e\u539f\u7531","answer":"\u901a\u8fc7\u76f4\u63a5\u53d1\u9001Uri\u628a\u53c2\u6570\u5e26\u8fc7\u53bb\uff0c\u6216\u8005\u901a\u8fc7manifest\u91cc\u7684intentfilter\u91cc\u7684data\u5c5e\u6027"},{"ID":"369","typeID":"11","question":"\u8bf7\u89e3\u91ca\u4e0bAndroid\u7a0b\u5e8f\u8fd0\u884c\u65f6\u6743\u9650\u4e0e\u6587\u4ef6\u7cfb\u7edf\u6743\u9650\u7684\u533a\u522b","answer":"\u8fd0\u884c\u65f6\u6743\u9650Dalvik( android\u6388\u6743) \r\n\u6587\u4ef6\u7cfb\u7edf linux \u5185\u6838\u6388\u6743\r\n"},{"ID":"368","typeID":"11","question":"AIDL\u7684\u5168\u79f0\u662f\u4ec0\u4e48\uff1f\u5982\u4f55\u5de5\u4f5c\uff1f\u80fd\u5904\u7406\u54ea\u4e9b\u7c7b\u578b\u7684\u6570\u636e","answer":"\u5168\u79f0\u662f\uff1aAndroid Interface Define Language\r\n\u5728Android\u4e2d, \u6bcf\u4e2a\u5e94\u7528\u7a0b\u5e8f\u90fd\u53ef\u4ee5\u6709\u81ea\u5df1\u7684\u8fdb\u7a0b. \u5728\u5199UI\u5e94\u7528\u7684\u65f6\u5019, \u7ecf\u5e38\u8981\u7528\u5230Service. \u5728\u4e0d\u540c\u7684\u8fdb\u7a0b\u4e2d, \u600e\u6837\u4f20\u9012\u5bf9\u8c61\u5462?\u663e\u7136, Java\u4e2d\u4e0d\u5141\u8bb8\u8de8\u8fdb\u7a0b\u5185\u5b58\u5171\u4eab. \u56e0\u6b64\u4f20\u9012\u5bf9\u8c61, \u53ea\u80fd\u628a\u5bf9\u8c61\u62c6\u5206\u6210\u64cd\u4f5c\u7cfb\u7edf\u80fd\u7406\u89e3\u7684\u7b80\u5355\u5f62\u5f0f, \u4ee5\u8fbe\u5230\u8de8\u754c\u5bf9\u8c61\u8bbf\u95ee\u7684\u76ee\u7684. \u5728J2EE\u4e2d,\u91c7\u7528RMI\u7684\u65b9\u5f0f, \u53ef\u4ee5\u901a\u8fc7\u5e8f\u5217\u5316\u4f20\u9012\u5bf9\u8c61. \u5728Android\u4e2d, \u5219\u91c7\u7528AIDL\u7684\u65b9\u5f0f. \u7406\u8bba\u4e0aAIDL\u53ef\u4ee5\u4f20\u9012Bundle,\u5b9e\u9645\u4e0a\u505a\u8d77\u6765\u5374\u6bd4\u8f83\u9ebb\u70e6\u3002\r\nAIDL(AndRoid\u63a5\u53e3\u63cf\u8ff0\u8bed\u8a00)\u662f\u4e00\u79cd\u501f\u53e3\u63cf\u8ff0\u8bed\u8a00; \u7f16\u8bd1\u5668\u53ef\u4ee5\u901a\u8fc7aidl\u6587\u4ef6\u751f\u6210\u4e00\u6bb5\u4ee3\u7801\uff0c\u901a\u8fc7\u9884\u5148\u5b9a\u4e49\u7684\u63a5\u53e3\u8fbe\u5230\u4e24\u4e2a\u8fdb\u7a0b\u5185\u90e8\u901a\u4fe1\u8fdb\u7a0b\u7684\u76ee\u7684. \u5982\u679c\u9700\u8981\u5728\u4e00\u4e2aActivity\u4e2d, \u8bbf\u95ee\u53e6\u4e00\u4e2aService\u4e2d\u7684\u67d0\u4e2a\u5bf9\u8c61, \u9700\u8981\u5148\u5c06\u5bf9\u8c61\u8f6c\u5316\u6210AIDL\u53ef\u8bc6\u522b\u7684\u53c2\u6570(\u53ef\u80fd\u662f\u591a\u4e2a\u53c2\u6570), \u7136\u540e\u4f7f\u7528AIDL\u6765\u4f20\u9012\u8fd9\u4e9b\u53c2\u6570, \u5728\u6d88\u606f\u7684\u63a5\u6536\u7aef, \u4f7f\u7528\u8fd9\u4e9b\u53c2\u6570\u7ec4\u88c5\u6210\u81ea\u5df1\u9700\u8981\u7684\u5bf9\u8c61.\r\nAIDL\u7684IPC\u7684\u673a\u5236\u548cCOM\u6216CORBA\u7c7b\u4f3c, \u662f\u57fa\u4e8e\u63a5\u53e3\u7684\uff0c\u4f46\u5b83\u662f\u8f7b\u91cf\u7ea7\u7684\u3002\u5b83\u4f7f\u7528\u4ee3\u7406\u7c7b\u5728\u5ba2\u6237\u7aef\u548c\u5b9e\u73b0\u5c42\u95f4\u4f20\u9012\u503c. \u5982\u679c\u8981\u4f7f\u7528AIDL, \u9700\u8981\u5b8c\u62102\u4ef6\u4e8b\u60c5: 1. \u5f15\u5165AIDL\u7684\u76f8\u5173\u7c7b.; 2. \u8c03\u7528aidl\u4ea7\u751f\u7684class.\r\nAIDL\u7684\u521b\u5efa\u65b9\u6cd5:\r\nAIDL\u8bed\u6cd5\u5f88\u7b80\u5355,\u53ef\u4ee5\u7528\u6765\u58f0\u660e\u4e00\u4e2a\u5e26\u4e00\u4e2a\u6216\u591a\u4e2a\u65b9\u6cd5\u7684\u63a5\u53e3\uff0c\u4e5f\u53ef\u4ee5\u4f20\u9012\u53c2\u6570\u548c\u8fd4\u56de\u503c\u3002 \u7531\u4e8e\u8fdc\u7a0b\u8c03\u7528\u7684\u9700\u8981, \u8fd9\u4e9b\u53c2\u6570\u548c\u8fd4\u56de\u503c\u5e76\u4e0d\u662f\u4efb\u4f55\u7c7b\u578b.\u4e0b\u9762\u662f\u4e9bAIDL\u652f\u6301\u7684\u6570\u636e\u7c7b\u578b:\r\n1)\u4e0d\u9700\u8981import\u58f0\u660e\u7684\u7b80\u5355Java\u7f16\u7a0b\u8bed\u8a00\u7c7b\u578b(int,boolean\u7b49)\r\n2) String, CharSequence\u4e0d\u9700\u8981\u7279\u6b8a\u58f0\u660e\r\n3) List, Map\u548cParcelables\u7c7b\u578b, \u8fd9\u4e9b\u7c7b\u578b\u5185\u6240\u5305\u542b\u7684\u6570\u636e\u6210\u5458\u4e5f\u53ea\u80fd\u662f\u7b80\u5355\u6570\u636e\u7c7b\u578b, String\u7b49\u5176\u4ed6\u6bd4\u652f\u6301\u7684\u7c7b\u578b.\r\n"},{"ID":"367","typeID":"11","question":"\u5982\u4f55\u9000\u51faActivity\uff1f\u5982\u4f55\u5b89\u5168\u9000\u51fa\u5df2\u8c03\u7528\u591a\u4e2aActivity\u7684Application","answer":"\u5bf9\u4e8e\u5355\u4e00Activity\u7684\u5e94\u7528\u6765\u8bf4\uff0c\u9000\u51fa\u5f88\u7b80\u5355\uff0c\u76f4\u63a5finish()\u5373\u53ef\u3002\u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u7528killProcess()\u548cSystem.exit()\u8fd9\u6837\u7684\u65b9\u6cd5\u3002\r\n\u5bf9\u4e8e\u591a\u4e2aactivity:\r\n1)\u8bb0\u5f55\u6253\u5f00\u7684Activity\uff1a\u6bcf\u6253\u5f00\u4e00\u4e2aActivity\uff0c\u5c31\u8bb0\u5f55\u4e0b\u6765\u3002\u5728\u9700\u8981\u9000\u51fa\u65f6\uff0c\u5173\u95ed\u6bcf\u4e00\u4e2aActivity\u5373\u53ef\r\n2)\u53d1\u9001\u7279\u5b9a\u5e7f\u64ad\uff1a\u5728\u9700\u8981\u7ed3\u675f\u5e94\u7528\u65f6\uff0c\u53d1\u9001\u4e00\u4e2a\u7279\u5b9a\u7684\u5e7f\u64ad\uff0c\u6bcf\u4e2aActivity\u6536\u5230\u5e7f\u64ad\u540e\uff0c\u5173\u95ed\u5373\u53ef\u3002\r\n3)\u9012\u5f52\u9000\u51fa\uff1a\u5728\u6253\u5f00\u65b0\u7684Activity\u65f6\u4f7f\u7528startActivityForResult\uff0c\u7136\u540e\u81ea\u5df1\u52a0\u6807\u5fd7\uff0c\u5728onActivityResult\u4e2d\u5904\u7406\uff0c\u9012\u5f52\u5173\u95ed\u3002\u4e3a\u4e86\u7f16\u7a0b\u65b9\u4fbf\uff0c\u6700\u597d\u5b9a\u4e49\u4e00\u4e2aActivity\u57fa\u7c7b\uff0c\u5904\u7406\u8fd9\u4e9b\u5171\u901a\u95ee\u9898\u3002\r\n\u57282.1\u4e4b\u524d\uff0c\u53ef\u4ee5\u4f7f\u7528ActivityManager\u7684restartPackage\u65b9\u6cd5\u3002\r\n\u5b83\u53ef\u4ee5\u76f4\u63a5\u7ed3\u675f\u6574\u4e2a\u5e94\u7528\u3002\u5728\u4f7f\u7528\u65f6\u9700\u8981\u6743\u9650android.permission.RESTART_PACKAGES\u3002\r\n\u6ce8\u610f\u4e0d\u8981\u88ab\u5b83\u7684\u540d\u5b57\u8ff7\u60d1\u3002\r\n\u53ef\u662f\uff0c\u57282.2\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u5931\u6548\u4e86\u3002\u57282.2\u6dfb\u52a0\u4e86\u4e00\u4e2a\u65b0\u7684\u65b9\u6cd5\uff0ckillBackground Processes()\uff0c\u9700\u8981\u6743\u9650 android.permission.KILL_BACKGROUND_PROCESSES\u3002\u53ef\u60dc\u7684\u662f\uff0c\u5b83\u548c2.2\u7684restartPackage\u4e00\u6837\uff0c\u6839\u672c\u8d77\u4e0d\u5230\u5e94\u6709\u7684\u6548\u679c\u3002\r\n\u53e6\u5916\u8fd8\u6709\u4e00\u4e2a\u65b9\u6cd5\uff0c\u5c31\u662f\u7cfb\u7edf\u81ea\u5e26\u7684\u5e94\u7528\u7a0b\u5e8f\u7ba1\u7406\u91cc\uff0c\u5f3a\u5236\u7ed3\u675f\u7a0b\u5e8f\u7684\u65b9\u6cd5\uff0cforceStopPackage()\u3002\u5b83\u9700\u8981\u6743\u9650android.permission.FORCE_STOP_PACKAGES\u3002\u5e76\u4e14\u9700\u8981\u6dfb\u52a0android:sharedUserId=\"android.uid.system\"\u5c5e\u6027\u3002\u540c\u6837\u53ef\u60dc\u7684\u662f\uff0c\u8be5\u65b9\u6cd5\u662f\u975e\u516c\u5f00\u7684\uff0c\u4ed6\u53ea\u80fd\u8fd0\u884c\u5728\u7cfb\u7edf\u8fdb\u7a0b\uff0c\u7b2c\u4e09\u65b9\u7a0b\u5e8f\u65e0\u6cd5\u8c03\u7528\u3002\r\n\u56e0\u4e3a\u9700\u8981\u5728Android.mk\u4e2d\u6dfb\u52a0LOCAL_CERTIFICATE := platform\u3002\r\n\u800cAndroid.mk\u662f\u7528\u4e8e\u5728Android\u6e90\u7801\u4e0b\u7f16\u8bd1\u7a0b\u5e8f\u7528\u7684\u3002\r\n\u4ece\u4ee5\u4e0a\u53ef\u4ee5\u770b\u51fa\uff0c\u57282.2\uff0c\u6ca1\u6709\u529e\u6cd5\u76f4\u63a5\u7ed3\u675f\u4e00\u4e2a\u5e94\u7528\uff0c\u800c\u53ea\u80fd\u7528\u81ea\u5df1\u7684\u529e\u6cd5\u95f4\u63a5\u529e\u5230\u3002\r\n\u73b0\u63d0\u4f9b\u51e0\u4e2a\u65b9\u6cd5\uff0c\u4f9b\u53c2\u8003\uff1a\r\n1)\u629b\u5f02\u5e38\u5f3a\u5236\u9000\u51fa\uff1a\r\n\u8be5\u65b9\u6cd5\u901a\u8fc7\u629b\u5f02\u5e38\uff0c\u4f7f\u7a0b\u5e8fForce Close\u3002\r\n\u9a8c\u8bc1\u53ef\u4ee5\uff0c\u4f46\u662f\uff0c\u9700\u8981\u89e3\u51b3\u7684\u95ee\u9898\u662f\uff0c\u5982\u4f55\u4f7f\u7a0b\u5e8f\u7ed3\u675f\u6389\uff0c\u800c\u4e0d\u5f39\u51faForce Close\u7684\u7a97\u53e3\u3002\r\n2)\u8bb0\u5f55\u6253\u5f00\u7684Activity\uff1a\r\n\u6bcf\u6253\u5f00\u4e00\u4e2aActivity\uff0c\u5c31\u8bb0\u5f55\u4e0b\u6765\u3002\u5728\u9700\u8981\u9000\u51fa\u65f6\uff0c\u5173\u95ed\u6bcf\u4e00\u4e2aActivity\u5373\u53ef\u3002\r\n3)\u53d1\u9001\u7279\u5b9a\u5e7f\u64ad\uff1a\r\n\u5728\u9700\u8981\u7ed3\u675f\u5e94\u7528\u65f6\uff0c\u53d1\u9001\u4e00\u4e2a\u7279\u5b9a\u7684\u5e7f\u64ad\uff0c\u6bcf\u4e2aActivity\u6536\u5230\u5e7f\u64ad\u540e\uff0c\u5173\u95ed\u5373\u53ef\u3002\r\n4)\u9012\u5f52\u9000\u51fa\r\n\u5728\u6253\u5f00\u65b0\u7684Activity\u65f6\u4f7f\u7528startActivityForResult\uff0c\u7136\u540e\u81ea\u5df1\u52a0\u6807\u5fd7\uff0c\u5728onActivityResult\u4e2d\u5904\u7406\uff0c\u9012\u5f52\u5173\u95ed\u3002\r\n\u9664\u4e86\u7b2c\u4e00\u4e2a\uff0c\u90fd\u662f\u60f3\u529e\u6cd5\u628a\u6bcf\u4e00\u4e2aActivity\u90fd\u7ed3\u675f\u6389\uff0c\u95f4\u63a5\u8fbe\u5230\u76ee\u7684\u3002\u4f46\u662f\u8fd9\u6837\u505a\u540c\u6837\u4e0d\u5b8c\u7f8e\u3002\u4f60\u4f1a\u53d1\u73b0\uff0c\u5982\u679c\u81ea\u5df1\u7684\u5e94\u7528\u7a0b\u5e8f\u5bf9\u6bcf\u4e00\u4e2aActivity\u90fd\u8bbe\u7f6e\u4e86nosensor\uff0c\u5728\u4e24\u4e2aActivity\u7ed3\u675f\u7684\u95f4\u9699\uff0csensor\u53ef\u80fd\u6709\u6548\u4e86\u3002\u4f46\u81f3\u5c11\uff0c\u6211\u4eec\u7684\u76ee\u7684\u8fbe\u5230\u4e86\uff0c\u800c\u4e14\u6ca1\u6709\u5f71\u54cd\u7528\u6237\u4f7f\u7528\u3002\u4e3a\u4e86\u7f16\u7a0b\u65b9\u4fbf\uff0c\u6700\u597d\u5b9a\u4e49\u4e00\u4e2aActivity\u57fa\u7c7b\uff0c\u5904\u7406\u8fd9\u4e9b\u5171\u901a\u95ee\u9898\u3002\r\n"},{"ID":"366","typeID":"11","question":"\u5982\u4f55\u5c06\u4e00\u4e2aActivity\u8bbe\u7f6e\u6210\u7a97\u53e3\u7684\u6837\u5f0f","answer":"<activity>\u4e2d\u914d\u7f6e\uff1aandroid :theme=\"@android:style\/Theme.Dialog\" \r\n\u53e6\u5916android:theme=\"@android:style\/Theme.Translucent\" \u662f\u8bbe\u7f6e\u900f\u660e\r\n"},{"ID":"365","typeID":"11","question":"\u5982\u679c\u540e\u53f0\u7684Activity\u7531\u4e8e\u67d0\u539f\u56e0\u88ab\u7cfb\u7edf\u56de\u6536\u4e86\uff0c\u5982\u4f55\u5728\u88ab\u7cfb\u7edf\u56de\u6536\u4e4b\u524d\u4fdd\u5b58\u5f53\u524d\u72b6\u6001\uff1f","answer":"\u91cd\u5199onSaveInstanceState()\u65b9\u6cd5\uff0c\u5728\u6b64\u65b9\u6cd5\u4e2d\u4fdd\u5b58\u9700\u8981\u4fdd\u5b58\u7684\u6570\u636e\uff0c\u8be5\u65b9\u6cd5\u5c06\u4f1a\u5728activity\u88ab\u56de\u6536\u4e4b\u524d\u8c03\u7528\u3002\u901a\u8fc7\u91cd\u5199onRestoreInstanceState()\u65b9\u6cd5\u53ef\u4ee5\u4ece\u4e2d\u63d0\u53d6\u4fdd\u5b58\u597d\u7684\u6570\u636e"},{"ID":"364","typeID":"11","question":"IntentService\u6709\u4f55\u4f18\u70b9\uff1f","answer":"Acitivity\u7684\u8fdb\u7a0b\uff0c\u5f53\u5904\u7406Intent\u7684\u65f6\u5019\uff0c\u4f1a\u4ea7\u751f\u4e00\u4e2a\u5bf9\u5e94\u7684Service\uff1b Android\u7684\u8fdb\u7a0b\u5904\u7406\u5668\u73b0\u5728\u4f1a\u5c3d\u53ef\u80fd\u7684\u4e0dkill\u6389\u4f60\uff1b\u975e\u5e38\u5bb9\u6613\u4f7f\u7528"},{"ID":"363","typeID":"11","question":"\u6709\u54ea\u4e9b\u5f02\u5e38\uff1f","answer":"Android\u672c\u8eab\u7684api\u5e76\u672a\u58f0\u660e\u4f1a\u629b\u51fa\u5f02\u5e38\uff0c\u5219\u5176\u5728\u8fd0\u884c\u65f6\u6709\u65e0\u53ef\u80fd\u629b\u51faruntime\u5f02\u5e38\uff0c\u4f60\u9047\u5230\u8fc7\u5417\uff1f\u8bfa\u6709\u7684\u8bdd\u4f1a\u5bfc\u81f4\u4ec0\u4e48\u95ee\u9898\uff1f\u5982\u4f55\u89e3\u51b3\uff1f\r\n\u7b54\uff1a\u4f1a\uff0c\u6bd4\u5982nullpointerException\u3002\u6211\u9047\u5230\u8fc7\uff0c\u6bd4\u5982textview.setText()\u65f6\uff0ctextview\u6ca1\u6709\u521d\u59cb\u5316\u3002\u4f1a\u5bfc\u81f4\u7a0b\u5e8f\u65e0\u6cd5\u6b63\u5e38\u8fd0\u884c\u51fa\u73b0forceclose\u3002\u6253\u5f00\u63a7\u5236\u53f0\u67e5\u770blogcat\u4fe1\u606f\u627e\u51fa\u5f02\u5e38\u4fe1\u606f\u5e76\u4fee\u6539\u7a0b\u5e8f\u3002\r\n"},{"ID":"362","typeID":"11","question":"Service\u548cThread\u7684\u533a\u522b","answer":"servie\u662f\u7cfb\u7edf\u7684\u7ec4\u4ef6\uff0c\u5b83\u7531\u7cfb\u7edf\u8fdb\u7a0b\u6258\u7ba1\uff08servicemanager\uff09\uff1b\u5b83\u4eec\u4e4b\u95f4\u7684\u901a\u4fe1\u7c7b\u4f3c\u4e8eclient\u548cserver\uff0c\u662f\u4e00\u79cd\u8f7b\u91cf\u7ea7\u7684ipc\u901a\u4fe1\uff0c\u8fd9\u79cd\u901a\u4fe1\u7684\u8f7d\u4f53\u662fbinder\uff0c\u5b83\u662f\u5728linux\u5c42\u4ea4\u6362\u4fe1\u606f\u7684\u4e00\u79cdipc\u3002\u800cthread\u662f\u7531\u672c\u5e94\u7528\u7a0b\u5e8f\u6258\u7ba1\u3002 1). Thread\uff1aThread \u662f\u7a0b\u5e8f\u6267\u884c\u7684\u6700\u5c0f\u5355\u5143\uff0c\u5b83\u662f\u5206\u914dCPU\u7684\u57fa\u672c\u5355\u4f4d\u3002\u53ef\u4ee5\u7528 Thread \u6765\u6267\u884c\u4e00\u4e9b\u5f02\u6b65\u7684\u64cd\u4f5c\u3002\r\n2). Service\uff1aService \u662fandroid\u7684\u4e00\u79cd\u673a\u5236\uff0c\u5f53\u5b83\u8fd0\u884c\u7684\u65f6\u5019\u5982\u679c\u662fLocal Service\uff0c\u90a3\u4e48\u5bf9\u5e94\u7684 Service \u662f\u8fd0\u884c\u5728\u4e3b\u8fdb\u7a0b\u7684 main \u7ebf\u7a0b\u4e0a\u7684\u3002\u5982\uff1aonCreate\uff0conStart \u8fd9\u4e9b\u51fd\u6570\u5728\u88ab\u7cfb\u7edf\u8c03\u7528\u7684\u65f6\u5019\u90fd\u662f\u5728\u4e3b\u8fdb\u7a0b\u7684 main \u7ebf\u7a0b\u4e0a\u8fd0\u884c\u7684\u3002\u5982\u679c\u662fRemote Service\uff0c\u90a3\u4e48\u5bf9\u5e94\u7684 Service \u5219\u662f\u8fd0\u884c\u5728\u72ec\u7acb\u8fdb\u7a0b\u7684 main \u7ebf\u7a0b\u4e0a\u3002\r\n\u65e2\u7136\u8fd9\u6837\uff0c\u90a3\u4e48\u6211\u4eec\u4e3a\u4ec0\u4e48\u8981\u7528 Service \u5462\uff1f\u5176\u5b9e\u8fd9\u8ddf android \u7684\u7cfb\u7edf\u673a\u5236\u6709\u5173\uff0c\u6211\u4eec\u5148\u62ff Thread \u6765\u8bf4\u3002Thread \u7684\u8fd0\u884c\u662f\u72ec\u7acb\u4e8e Activity \u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u5f53\u4e00\u4e2a Activity \u88ab finish \u4e4b\u540e\uff0c\u5982\u679c\u4f60\u6ca1\u6709\u4e3b\u52a8\u505c\u6b62 Thread \u6216\u8005 Thread \u91cc\u7684 run \u65b9\u6cd5\u6ca1\u6709\u6267\u884c\u5b8c\u6bd5\u7684\u8bdd\uff0cThread \u4e5f\u4f1a\u4e00\u76f4\u6267\u884c\u3002\u56e0\u6b64\u8fd9\u91cc\u4f1a\u51fa\u73b0\u4e00\u4e2a\u95ee\u9898\uff1a\u5f53 Activity \u88ab finish \u4e4b\u540e\uff0c\u4f60\u4e0d\u518d\u6301\u6709\u8be5 Thread \u7684\u5f15\u7528\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u4f60\u6ca1\u6709\u529e\u6cd5\u5728\u4e0d\u540c\u7684 Activity \u4e2d\u5bf9\u540c\u4e00 Thread \u8fdb\u884c\u63a7\u5236\u3002 \r\n\u4e3e\u4e2a\u4f8b\u5b50\uff1a\u5982\u679c\u4f60\u7684 Thread \u9700\u8981\u4e0d\u505c\u5730\u9694\u4e00\u6bb5\u65f6\u95f4\u5c31\u8981\u8fde\u63a5\u670d\u52a1\u5668\u505a\u67d0\u79cd\u540c\u6b65\u7684\u8bdd\uff0c\u8be5 Thread \u9700\u8981\u5728 Activity \u6ca1\u6709start\u7684\u65f6\u5019\u4e5f\u5728\u8fd0\u884c\u3002\u8fd9\u4e2a\u65f6\u5019\u5f53\u4f60 start \u4e00\u4e2a Activity \u5c31\u6ca1\u6709\u529e\u6cd5\u5728\u8be5 Activity \u91cc\u9762\u63a7\u5236\u4e4b\u524d\u521b\u5efa\u7684 Thread\u3002\u56e0\u6b64\u4f60\u4fbf\u9700\u8981\u521b\u5efa\u5e76\u542f\u52a8\u4e00\u4e2a Service \uff0c\u5728 Service \u91cc\u9762\u521b\u5efa\u3001\u8fd0\u884c\u5e76\u63a7\u5236\u8be5 Thread\uff0c\u8fd9\u6837\u4fbf\u89e3\u51b3\u4e86\u8be5\u95ee\u9898\uff08\u56e0\u4e3a\u4efb\u4f55 Activity \u90fd\u53ef\u4ee5\u63a7\u5236\u540c\u4e00 Service\uff0c\u800c\u7cfb\u7edf\u4e5f\u53ea\u4f1a\u521b\u5efa\u4e00\u4e2a\u5bf9\u5e94 Service \u7684\u5b9e\u4f8b\uff09\u3002 \r\n\u56e0\u6b64\u4f60\u53ef\u4ee5\u628a Service \u60f3\u8c61\u6210\u4e00\u79cd\u6d88\u606f\u670d\u52a1\uff0c\u800c\u4f60\u53ef\u4ee5\u5728\u4efb\u4f55\u6709 Context \u7684\u5730\u65b9\u8c03\u7528 Context.startService\u3001Context.stopService\u3001Context.bindService\uff0cContext.unbindService\uff0c\u6765\u63a7\u5236\u5b83\uff0c\u4f60\u4e5f\u53ef\u4ee5\u5728 Service \u91cc\u6ce8\u518c BroadcastReceiver\uff0c\u5728\u5176\u4ed6\u5730\u65b9\u901a\u8fc7\u53d1\u9001 broadcast \u6765\u63a7\u5236\u5b83\uff0c\u5f53\u7136\u8fd9\u4e9b\u90fd\u662f Thread \u505a\u4e0d\u5230\u7684\u3002"},{"ID":"361","typeID":"11","question":"\u8bf7\u4ecb\u7ecd\u4e0bContentProvider\u662f\u5982\u4f55\u5b9e\u73b0\u6570\u636e\u5171\u4eab\u7684\uff1f","answer":"\u4e00\u4e2a\u7a0b\u5e8f\u53ef\u4ee5\u901a\u8fc7\u5b9e\u73b0\u4e00\u4e2aContent provider\u7684\u62bd\u8c61\u63a5\u53e3\u5c06\u81ea\u5df1\u7684\u6570\u636e\u5b8c\u5168\u66b4\u9732\u51fa\u53bb\uff0c\u800c\u4e14Content providers\u662f\u4ee5\u7c7b\u4f3c\u6570\u636e\u5e93\u4e2d\u8868\u7684\u65b9\u5f0f\u5c06\u6570\u636e\u66b4\u9732\u3002Content providers\u5b58\u50a8\u548c\u68c0\u7d22\u6570\u636e\uff0c\u901a\u8fc7\u5b83\u53ef\u4ee5\u8ba9\u6240\u6709\u7684\u5e94\u7528\u7a0b\u5e8f\u8bbf\u95ee\u5230\uff0c\u8fd9\u4e5f\u662f\u5e94\u7528\u7a0b\u5e8f\u4e4b\u95f4\u552f\u4e00\u5171\u4eab\u6570\u636e\u7684\u65b9\u6cd5\u3002\r\n\u8981\u60f3\u4f7f\u5e94\u7528\u7a0b\u5e8f\u7684\u6570\u636e\u516c\u5f00\u5316\uff0c\u53ef\u901a\u8fc72\u79cd\u65b9\u6cd5\uff1a\u521b\u5efa\u4e00\u4e2a\u5c5e\u4e8e\u4f60\u81ea\u5df1\u7684Content provider\u6216\u8005\u5c06\u4f60\u7684\u6570\u636e\u6dfb\u52a0\u5230\u4e00\u4e2a\u5df2\u7ecf\u5b58\u5728\u7684Content provider\u4e2d\uff0c\u524d\u63d0\u662f\u6709\u76f8\u540c\u6570\u636e\u7c7b\u578b\u5e76\u4e14\u6709\u5199\u5165Content provider\u7684\u6743\u9650\u3002\r\n\u5982\u4f55\u901a\u8fc7\u4e00\u5957\u6807\u51c6\u53ca\u7edf\u4e00\u7684\u63a5\u53e3\u83b7\u53d6\u5176\u4ed6\u5e94\u7528\u7a0b\u5e8f\u66b4\u9732\u7684\u6570\u636e\uff0cAndroid\u63d0\u4f9b\u4e86ContentResolver\uff0c\u5916\u754c\u7684\u7a0b\u5e8f\u53ef\u4ee5\u901a\u8fc7ContentResolver\u63a5\u53e3\u8bbf\u95eeContentProvider\u63d0\u4f9b\u7684\u6570\u636e\u3002\r\n"},{"ID":"320","typeID":"11","question":"\u4ec0\u4e48\u60c5\u51b5\u4f1a\u5bfc\u81f4Force Close \uff0c\u5982\u4f55\u907f\u514d\uff0c\u80fd\u5426\u6355\u83b7\u5bfc\u81f4\u5176\u7684\u5f02\u5e38","answer":"\u7a0b\u5e8f\u51fa\u73b0\u5f02\u5e38\uff0c\u6bd4\u5982nullpointer\u3002\r\n\u907f\u514d\uff1a\u7f16\u5199\u7a0b\u5e8f\u65f6\u903b\u8f91\u8fde\u8d2f\uff0c\u601d\u7ef4\u7f1c\u5bc6\u3002\u80fd\u6355\u83b7\u5f02\u5e38\uff0c\u5728logcat\u4e2d\u80fd\u770b\u5230\u5f02\u5e38\u4fe1\u606f\u3002"},{"ID":"319","typeID":"11","question":"\u8bf4\u660ehandler\u673a\u5236\u7684\u539f\u7406","answer":"\u4e00\u4e2aHandler\u5141\u8bb8\u4f60\u53d1\u9001\u548c\u5904\u7406Message\u548cRunable\u5bf9\u8c61\uff0c\u6bcf\u4e2a\u7ebf\u7a0b\u90fd\u6709\u81ea\u5df1\u7684Looper\uff0c\u6bcf\u4e2aLooper\u4e2d\u5c01\u88c5\u7740MessageQueue\u3002 Looper\u8d1f\u8d23\u4e0d\u65ad\u7684\u4ece\u81ea\u5df1\u7684\u6d88\u606f\u961f\u5217\u91cc\u53d6\u51fa\u961f\u5934\u7684\u4efb\u52a1\u6216\u6d88\u606f\u6267\u884c\u3002\u6bcf\u4e2ahandler\u4e5f\u548c\u7ebf\u7a0b\u5173\u8054\uff0cHandler\u8d1f\u8d23\u628aMessage\u548cRunable\r\n\u5bf9\u8c61\u4f20\u9012\u7ed9MessageQueue\uff08\u7528\u5230post\uff0csendMessage\u7b49\u65b9\u6cd5\uff09\uff0c\u800c\u4e14\u5728\u8fd9\u4e9b\u5bf9\u8c61\u79bb\u5f00MessageQueue\u65f6\uff0cHandler\u8d1f\u8d23\u6267\u884c\u4ed6\u4eec\uff08\u7528\u5230handleMessage\u65b9\u6cd5\uff09\u3002\r\n\u5176\u4e2dMessage\u7c7b\u5c31\u662f\u5b9a\u4e49\u4e86\u4e00\u4e2a\u4fe1\u606f\uff0c\u8fd9\u4e2a\u4fe1\u606f\u4e2d\u5305\u542b\u4e00\u4e2a\u63cf\u8ff0\u7b26\u548c\u4efb\u610f\u7684\u6570\u636e\u5bf9\u8c61\uff0c\u8fd9\u4e2a\u4fe1\u606f\u88ab\u7528\u6765\u4f20\u9012\u7ed9Handler.Message\u5bf9\u8c61\u3002"},{"ID":"318","typeID":"11","question":"\u5982\u4f55\u542f\u7528\u505c\u7528Service","answer":"\u670d\u52a1\u7684\u5f00\u53d1\u6bd4\u8f83\u7b80\u5355\uff0c\u5982\u4e0b\uff1a\r\n\u7b2c\u4e00\u6b65\uff1a\u7ee7\u627fService\u7c7b\r\npublic class SMSService extends Service {}\r\n\u7b2c\u4e8c\u6b65\uff1a\u5728AndroidManifest.xml\u6587\u4ef6\u4e2d\u7684<application>\u8282\u70b9\u91cc\u5bf9\u670d\u52a1\u8fdb\u884c\u914d\u7f6e:<service android:name=\".SMSService\" \/>\r\n\u670d\u52a1\u4e0d\u80fd\u81ea\u5df1\u8fd0\u884c\uff0c\u9700\u8981\u901a\u8fc7\u8c03\u7528Context.startService()\u6216Context.bindService()\u65b9\u6cd5\u542f\u52a8\u670d\u52a1\u3002\u8fd9\u4e24\u4e2a\u65b9\u6cd5\u90fd\u53ef\u4ee5\u542f\u52a8Service\uff0c\u4f46\u662f\u5b83\u4eec\u7684\u4f7f\u7528\u573a\u5408\u6709\u6240\u4e0d\u540c\u3002\u4f7f\u7528startService()\u65b9\u6cd5\u542f\u7528\u670d\u52a1\uff0c\u8c03\u7528\u8005\u4e0e\u670d\u52a1\u4e4b\u95f4\u6ca1\u6709\u5173\u8fde\uff0c\u5373\u4f7f\u8c03\u7528\u8005\u9000\u51fa\u4e86\uff0c\u670d\u52a1\u4ecd\u7136\u8fd0\u884c\u3002\u4f7f\u7528bindService()\u65b9\u6cd5\u542f\u7528\u670d\u52a1\uff0c\u8c03\u7528\u8005\u4e0e\u670d\u52a1\u7ed1\u5b9a\u5728\u4e86\u4e00\u8d77\uff0c\u8c03\u7528\u8005\u4e00\u65e6\u9000\u51fa\uff0c\u670d\u52a1\u4e5f\u5c31\u7ec8\u6b62\uff0c\u5927\u6709\u201c\u4e0d\u6c42\u540c\u65f6\u751f\uff0c\u5fc5\u987b\u540c\u65f6\u6b7b\u201d\u7684\u7279\u70b9\u3002\r\n\u5982\u679c\u6253\u7b97\u91c7\u7528Context.startService()\u65b9\u6cd5\u542f\u52a8\u670d\u52a1\uff0c\u5728\u670d\u52a1\u672a\u88ab\u521b\u5efa\u65f6\uff0c\u7cfb\u7edf\u4f1a\u5148\u8c03\u7528\u670d\u52a1\u7684onCreate()\u65b9\u6cd5\uff0c\u63a5\u7740\u8c03\u7528onStart()\u65b9\u6cd5\u3002\u5982\u679c\u8c03\u7528startService()\u65b9\u6cd5\u524d\u670d\u52a1\u5df2\u7ecf\u88ab\u521b\u5efa\uff0c\u591a\u6b21\u8c03\u7528startService()\u65b9\u6cd5\u5e76\u4e0d\u4f1a\u5bfc\u81f4\u591a\u6b21\u521b\u5efa\u670d\u52a1\uff0c\u4f46\u4f1a\u5bfc\u81f4\u591a\u6b21\u8c03\u7528onStart()\u65b9\u6cd5\u3002\u91c7\u7528startService()\u65b9\u6cd5\u542f\u52a8\u7684\u670d\u52a1\uff0c\u53ea\u80fd\u8c03\u7528Context.stopService()\u65b9\u6cd5\u7ed3\u675f\u670d\u52a1\uff0c\u670d\u52a1\u7ed3\u675f\u65f6\u4f1a\u8c03\u7528onDestroy()\u65b9\u6cd5\u3002\r\n\u5982\u679c\u6253\u7b97\u91c7\u7528Context.bindService()\u65b9\u6cd5\u542f\u52a8\u670d\u52a1\uff0c\u5728\u670d\u52a1\u672a\u88ab\u521b\u5efa\u65f6\uff0c\u7cfb\u7edf\u4f1a\u5148\u8c03\u7528\u670d\u52a1\u7684onCreate()\u65b9\u6cd5\uff0c\u63a5\u7740\u8c03\u7528onBind()\u65b9\u6cd5\u3002\u8fd9\u4e2a\u65f6\u5019\u8c03\u7528\u8005\u548c\u670d\u52a1\u7ed1\u5b9a\u5728\u4e00\u8d77\uff0c\u8c03\u7528\u8005\u9000\u51fa\u4e86\uff0c\u7cfb\u7edf\u5c31\u4f1a\u5148\u8c03\u7528\u670d\u52a1\u7684onUnbind()\u65b9\u6cd5\uff0c\u63a5\u7740\u8c03\u7528onDestroy()\u65b9\u6cd5\u3002\u5982\u679c\u8c03\u7528bindService()\u65b9\u6cd5\u524d\u670d\u52a1\u5df2\u7ecf\u88ab\u7ed1\u5b9a\uff0c\u591a\u6b21\u8c03\u7528bindService()\u65b9\u6cd5\u5e76\u4e0d\u4f1a\u5bfc\u81f4\u591a\u6b21\u521b\u5efa\u670d\u52a1\u53ca\u7ed1\u5b9a(\u4e5f\u5c31\u662f\u8bf4onCreate()\u548conBind()\u65b9\u6cd5\u5e76\u4e0d\u4f1a\u88ab\u591a\u6b21\u8c03\u7528)\u3002\u5982\u679c\u8c03\u7528\u8005\u5e0c\u671b\u4e0e\u6b63\u5728\u7ed1\u5b9a\u7684\u670d\u52a1\u89e3\u9664\u7ed1\u5b9a\uff0c\u53ef\u4ee5\u8c03\u7528unbindService()\u65b9\u6cd5\uff0c\u8c03\u7528\u8be5\u65b9\u6cd5\u4e5f\u4f1a\u5bfc\u81f4\u7cfb\u7edf\u8c03\u7528\u670d\u52a1\u7684onUnbind()-->onDestroy()\u65b9\u6cd5\u3002\r\n\u670d\u52a1\u5e38\u7528\u751f\u547d\u5468\u671f\u56de\u8c03\u65b9\u6cd5\u5982\u4e0b\uff1a \r\nonCreate() \u8be5\u65b9\u6cd5\u5728\u670d\u52a1\u88ab\u521b\u5efa\u65f6\u8c03\u7528\uff0c\u8be5\u65b9\u6cd5\u53ea\u4f1a\u88ab\u8c03\u7528\u4e00\u6b21\uff0c\u65e0\u8bba\u8c03\u7528\u591a\u5c11\u6b21startService()\u6216bindService()\u65b9\u6cd5\uff0c\u670d\u52a1\u4e5f\u53ea\u88ab\u521b\u5efa\u4e00\u6b21\u3002\r\nonDestroy()\u8be5\u65b9\u6cd5\u5728\u670d\u52a1\u88ab\u7ec8\u6b62\u65f6\u8c03\u7528\u3002\r\n\u4e0e\u91c7\u7528Context.startService()\u65b9\u6cd5\u542f\u52a8\u670d\u52a1\u6709\u5173\u7684\u751f\u547d\u5468\u671f\u65b9\u6cd5\r\nonStart() \u53ea\u6709\u91c7\u7528Context.startService()\u65b9\u6cd5\u542f\u52a8\u670d\u52a1\u65f6\u624d\u4f1a\u56de\u8c03\u8be5\u65b9\u6cd5\u3002\u8be5\u65b9\u6cd5\u5728\u670d\u52a1\u5f00\u59cb\u8fd0\u884c\u65f6\u88ab\u8c03\u7528\u3002\u591a\u6b21\u8c03\u7528startService()\u65b9\u6cd5\u5c3d\u7ba1\u4e0d\u4f1a\u591a\u6b21\u521b\u5efa\u670d\u52a1\uff0c\u4f46onStart() \u65b9\u6cd5\u4f1a\u88ab\u591a\u6b21\u8c03\u7528\u3002\r\n\u4e0e\u91c7\u7528Context.bindService()\u65b9\u6cd5\u542f\u52a8\u670d\u52a1\u6709\u5173\u7684\u751f\u547d\u5468\u671f\u65b9\u6cd5\r\nonBind()\u53ea\u6709\u91c7\u7528Context.bindService()\u65b9\u6cd5\u542f\u52a8\u670d\u52a1\u65f6\u624d\u4f1a\u56de\u8c03\u8be5\u65b9\u6cd5\u3002\u8be5\u65b9\u6cd5\u5728\u8c03\u7528\u8005\u4e0e\u670d\u52a1\u7ed1\u5b9a\u65f6\u88ab\u8c03\u7528\uff0c\u5f53\u8c03\u7528\u8005\u4e0e\u670d\u52a1\u5df2\u7ecf\u7ed1\u5b9a\uff0c\u591a\u6b21\u8c03\u7528Context.bindService()\u65b9\u6cd5\u5e76\u4e0d\u4f1a\u5bfc\u81f4\u8be5\u65b9\u6cd5\u88ab\u591a\u6b21\u8c03\u7528\u3002\r\nonUnbind()\u53ea\u6709\u91c7\u7528Context.bindService()\u65b9\u6cd5\u542f\u52a8\u670d\u52a1\u65f6\u624d\u4f1a\u56de\u8c03\u8be5\u65b9\u6cd5\u3002\u8be5\u65b9\u6cd5\u5728\u8c03\u7528\u8005\u4e0e\u670d\u52a1\u89e3\u9664\u7ed1\u5b9a\u65f6\u88ab\u8c03\u7528.\r\n"},{"ID":"317","typeID":"11","question":"Activity\u7684\u542f\u52a8\u6a21\u5f0f\u6709\u54ea\u4e9b\uff0c\u662f\u4ec0\u4e48\u542b\u4e49","answer":"\u5728android\u91cc\uff0c\u67094\u79cdactivity\u7684\u542f\u52a8\u6a21\u5f0f\uff0c\u5206\u522b\u4e3a\uff1a \r\n\u201cstandard\u201d (\u9ed8\u8ba4) \r\n\u201csingleTop\u201d \r\n\u201csingleTask\u201d \r\n\u201csingleInstance\u201d\r\n\u5b83\u4eec\u4e3b\u8981\u6709\u5982\u4e0b\u4e0d\u540c\uff1a\r\n1)\u5982\u4f55\u51b3\u5b9a\u6240\u5c5etask \r\n\u201cstandard\u201d\u548c\u201dsingleTop\u201d\u7684activity\u7684\u76ee\u6807task\uff0c\u548c\u6536\u5230\u7684Intent\u7684\u53d1\u9001\u8005\u5728\u540c\u4e00\u4e2atask\u5185\uff0c\u9664\u975eintent\u5305\u62ec\u53c2\u6570FLAG_ACTIVITY_NEW_TASK\u3002 \r\n\u5982\u679c\u63d0\u4f9b\u4e86FLAG_ACTIVITY_NEW_TASK\u53c2\u6570\uff0c\u4f1a\u542f\u52a8\u5230\u522b\u7684task\u91cc\u3002 \r\n\u201csingleTask\u201d\u548c\u201dsingleInstance\u201d\u603b\u662f\u628aactivity\u4f5c\u4e3a\u4e00\u4e2atask\u7684\u6839\u5143\u7d20\uff0c\u4ed6\u4eec\u4e0d\u4f1a\u88ab\u542f\u52a8\u5230\u4e00\u4e2a\u5176\u4ed6task\u91cc\u3002\r\n2)\u662f\u5426\u5141\u8bb8\u591a\u4e2a\u5b9e\u4f8b \r\n\u201cstandard\u201d\u548c\u201dsingleTop\u201d\u53ef\u4ee5\u88ab\u5b9e\u4f8b\u5316\u591a\u6b21\uff0c\u5e76\u4e14\u5b58\u5728\u4e8e\u4e0d\u540c\u7684task\u4e2d\uff0c\u4e14\u4e00\u4e2atask\u53ef\u4ee5\u5305\u62ec\u4e00\u4e2aactivity\u7684\u591a\u4e2a\u5b9e\u4f8b\uff1b \r\n\u201csingleTask\u201d\u548c\u201dsingleInstance\u201d\u5219\u9650\u5236\u53ea\u751f\u6210\u4e00\u4e2a\u5b9e\u4f8b\uff0c\u5e76\u4e14\u662ftask\u7684\u6839\u5143\u7d20\u3002 singleTop\u8981\u6c42\u5982\u679c\u521b\u5efaintent\u7684\u65f6\u5019\u6808\u9876\u5df2\u7ecf\u6709\u8981\u521b\u5efa \u7684Activity\u7684\u5b9e\u4f8b\uff0c\u5219\u5c06intent\u53d1\u9001\u7ed9\u8be5\u5b9e\u4f8b\uff0c\u800c\u4e0d\u53d1\u9001\u7ed9\u65b0\u7684\u5b9e\u4f8b\u3002\r\n3)\u662f\u5426\u5141\u8bb8\u5176\u5b83activity\u5b58\u5728\u4e8e\u672ctask\u5185 \r\n\u201csingleInstance\u201d\u72ec\u5360\u4e00\u4e2atask\uff0c\u5176\u5b83activity\u4e0d\u80fd\u5b58\u5728\u90a3\u4e2atask\u91cc\uff1b\u5982\u679c\u5b83\u542f\u52a8\u4e86\u4e00\u4e2a\u65b0\u7684activity\uff0c\u4e0d\u7ba1\u65b0\u7684activity\u7684launch mode \u5982\u4f55\uff0c\u65b0\u7684activity\u90fd\u5c06\u4f1a\u5230\u522b\u7684task\u91cc\u8fd0\u884c\uff08\u5982\u540c\u52a0\u4e86FLAG_ACTIVITY_NEW_TASK\u53c2\u6570\uff09\u3002 \r\n\u800c\u53e6\u5916\u4e09\u79cd\u6a21\u5f0f\uff0c\u5219\u53ef\u4ee5\u548c\u5176\u5b83activity\u5171\u5b58\u3002\r\n4)\u662f\u5426\u6bcf\u6b21\u90fd\u751f\u6210\u65b0\u5b9e\u4f8b \r\n\u201cstandard\u201d\u5bf9\u4e8e\u6ca1\u4e00\u4e2a\u542f\u52a8Intent\u90fd\u4f1a\u751f\u6210\u4e00\u4e2aactivity\u7684\u65b0\u5b9e\u4f8b\uff1b \r\n\u201csingleTop\u201d\u7684activity\u5982\u679c\u5728task\u7684\u6808\u9876\u7684\u8bdd\uff0c\u5219\u4e0d\u751f\u6210\u65b0\u7684\u8be5activity\u7684\u5b9e\u4f8b\uff0c\u76f4\u63a5\u4f7f\u7528\u6808\u9876\u7684\u5b9e\u4f8b\uff0c\u5426\u5219\uff0c\u751f\u6210\u8be5activity\u7684\u5b9e\u4f8b\u3002 \r\n\u6bd4\u5982\u73b0\u5728task\u6808\u5143\u7d20\u4e3aA-B-C-D\uff08D\u5728\u6808\u9876\uff09\uff0c\u8fd9\u65f6\u5019\u7ed9D\u53d1\u4e00\u4e2a\u542f\u52a8intent\uff0c\u5982\u679cD\u662f \u201cstandard\u201d\u7684\uff0c\u5219\u751f\u6210D\u7684\u4e00\u4e2a\u65b0\u5b9e\u4f8b\uff0c\u6808\u53d8\u4e3aA\uff0dB\uff0dC\uff0dD\uff0dD\u3002 \r\n\u5982\u679cD\u662fsingleTop\u7684\u8bdd\uff0c\u5219\u4e0d\u4f1a\u751f\u4ea7D\u7684\u65b0\u5b9e\u4f8b\uff0c\u6808\u72b6\u6001\u4ecd\u4e3aA-B-C-D \r\n\u5982\u679c\u8fd9\u65f6\u5019\u7ed9B\u53d1Intent\u7684\u8bdd\uff0c\u4e0d\u7ba1B\u7684launchmode\u662f\u201dstandard\u201d \u8fd8\u662f \u201csingleTop\u201d \uff0c\u90fd\u4f1a\u751f\u6210B\u7684\u65b0\u5b9e\u4f8b\uff0c\u6808\u72b6\u6001\u53d8\u4e3aA-B-C-D-B\u3002\r\n\u201csingleInstance\u201d\u662f\u5176\u6240\u5728\u6808\u7684\u552f\u4e00activity\uff0c\u5b83\u4f1a\u6bcf\u6b21\u90fd\u88ab\u91cd\u7528\u3002\r\n\u201csingleTask\u201d\u5982\u679c\u5728\u6808\u9876\uff0c\u5219\u63a5\u53d7intent\uff0c\u5426\u5219\uff0c\u8be5intent\u4f1a\u88ab\u4e22\u5f03\uff0c\u4f46\u662f\u8be5task\u4ecd\u4f1a\u56de\u5230\u524d\u53f0\u3002\r\n\u5f53\u5df2\u7ecf\u5b58\u5728\u7684activity\u5b9e\u4f8b\u5904\u7406\u65b0\u7684intent\u65f6\u5019\uff0c\u4f1a\u8c03\u7528onNewIntent()\u65b9\u6cd5 \u5982\u679c\u6536\u5230intent\u751f\u6210\u4e00\u4e2aactivity\u5b9e\u4f8b\uff0c\u90a3\u4e48\u7528\u6237\u53ef\u4ee5\u901a\u8fc7back\u952e\u56de\u5230\u4e0a\u4e00\u4e2a\u72b6\u6001\uff1b\u5982\u679c\u662f\u5df2\u7ecf\u5b58\u5728\u7684\u4e00\u4e2aactivity\u6765\u5904\u7406\u8fd9\u4e2aintent\u7684\u8bdd\uff0c\u7528\u6237\u4e0d\u80fd\u901a\u8fc7\u6309back\u952e\u8fd4\u56de\u5230\u8fd9\u4e4b\u524d\u7684\u72b6\u6001\u3002\r\n"},{"ID":"316","typeID":"11","question":"Android\u4e2d\u7684\u52a8\u753b\u6709\u54ea\u51e0\u7c7b\uff0c\u5b83\u4eec\u7684\u7279\u70b9\u548c\u533a\u522b\u662f\u4ec0\u4e48","answer":"\u4e24\u79cd\uff0c\u4e00\u79cd\u662fTween\u52a8\u753b\u3001\u8fd8\u6709\u4e00\u79cd\u662fFrame\u52a8\u753b\u3002Tween\u52a8\u753b\uff0c\u8fd9\u79cd\u5b9e\u73b0\u65b9\u5f0f\u53ef\u4ee5\u4f7f\u89c6\u56fe\u7ec4\u4ef6\u79fb\u52a8\u3001\u653e\u5927\u3001\u7f29\u5c0f\u4ee5\u53ca\u4ea7\u751f\u900f\u660e\u5ea6\u7684\u53d8\u5316;\u53e6\u4e00\u79cdFrame\u52a8\u753b\uff0c\u4f20\u7edf\u7684\u52a8\u753b\u65b9\u6cd5\uff0c\u901a\u8fc7\u987a\u5e8f\u7684\u64ad\u653e\u6392\u5217\u597d\u7684\u56fe\u7247\u6765\u5b9e\u73b0\uff0c\u7c7b\u4f3c\u7535\u5f71\u3002"},{"ID":"315","typeID":"11","question":"\u8bf7\u4ecb\u7ecd\u4e0bAndroid\u4e2d\u5e38\u7528\u7684\u4e94\u79cd\u5e03\u5c40\u5206\u522b\u662f\u4ec0\u4e48","answer":"\u5e38\u7528\u4e94\u79cd\u5e03\u5c40\u65b9\u5f0f\uff0c\u5206\u522b\u662f\uff1aFrameLayout\uff08\u6846\u67b6\u5e03\u5c40\uff09\uff0cLinearLayout \uff08\u7ebf\u6027\u5e03\u5c40\uff09\uff0cAbsoluteLayout\uff08\u7edd\u5bf9\u5e03\u5c40\uff09\uff0cRelativeLayout\uff08\u76f8\u5bf9\u5e03\u5c40\uff09\uff0cTableLayout\uff08\u8868\u683c\u5e03\u5c40\uff09\u3002\r\n1)FrameLayout\uff1a\u6240\u6709\u4e1c\u897f\u4f9d\u6b21\u90fd\u653e\u5728\u5de6\u4e0a\u89d2\uff0c\u4f1a\u91cd\u53e0\uff0c\u8fd9\u4e2a\u5e03\u5c40\u6bd4\u8f83\u7b80\u5355\uff0c\u4e5f\u53ea\u80fd\u653e\u4e00\u70b9\u6bd4\u8f83\u7b80\u5355\u7684\u4e1c\u897f\u30022)LinearLayout\uff1a\u7ebf\u6027\u5e03\u5c40\uff0c\u6bcf\u4e00\u4e2aLinearLayout\u91cc\u9762\u53c8\u53ef\u5206\u4e3a\u5782\u76f4\u5e03\u5c40\uff08android:orientation=\"vertical\"\uff09\u548c\u6c34\u5e73\u5e03\u5c40\uff08android:orientation=\"horizontal\" \uff09\u3002\u5f53\u5782\u76f4\u5e03\u5c40\u65f6\uff0c\u6bcf\u4e00\u884c\u5c31\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\uff0c\u591a\u4e2a\u5143\u7d20\u4f9d\u6b21\u5782\u76f4\u5f80\u4e0b\uff1b\u6c34\u5e73\u5e03\u5c40\u65f6\uff0c\u53ea\u6709\u4e00\u884c\uff0c\u6bcf\u4e00\u4e2a\u5143\u7d20\u4f9d\u6b21\u5411\u53f3\u6392\u5217\u3002\r\n3)AbsoluteLayout\uff1a\u7edd\u5bf9\u5e03\u5c40\u7528X,Y\u5750\u6807\u6765\u6307\u5b9a\u5143\u7d20\u7684\u4f4d\u7f6e\uff0c\u8fd9\u79cd\u5e03\u5c40\u65b9\u5f0f\u4e5f\u6bd4\u8f83\u7b80\u5355\uff0c\u4f46\u662f\u5728\u5c4f\u5e55\u65cb\u8f6c\u65f6\uff0c\u5f80\u5f80\u4f1a\u51fa\u95ee\u9898\uff0c\u800c\u4e14\u591a\u4e2a\u5143\u7d20\u7684\u65f6\u5019\uff0c\u8ba1\u7b97\u6bd4\u8f83\u9ebb\u70e6\u3002\r\n4)RelativeLayout\uff1a\u76f8\u5bf9\u5e03\u5c40\u53ef\u4ee5\u7406\u89e3\u4e3a\u67d0\u4e00\u4e2a\u5143\u7d20\u4e3a\u53c2\u7167\u7269\uff0c\u6765\u5b9a\u4f4d\u7684\u5e03\u5c40\u65b9\u5f0f\u3002\u4e3b\u8981\u5c5e\u6027\u6709\uff1a\u76f8\u5bf9\u4e8e\u67d0\u4e00\u4e2a\u5143\u7d20android:layout_below\u3001 android:layout_toLeftOf\u76f8\u5bf9\u4e8e\u7236\u5143\u7d20\u7684\u5730\u65b9android:layout_alignParentLeft\u3001android:layout_alignParentRigh;\r\n5)TableLayout\uff1a\u8868\u683c\u5e03\u5c40\uff0c\u6bcf\u4e00\u4e2aTableLayout\u91cc\u9762\u6709\u8868\u683c\u884cTableRow\uff0cTableRow\u91cc\u9762\u53ef\u4ee5\u5177\u4f53\u5b9a\u4e49\u6bcf\u4e00\u4e2a\u5143\u7d20\u3002\u6bcf\u4e00\u4e2a\u5e03\u5c40\u90fd\u6709\u81ea\u5df1\u9002\u5408\u7684\u65b9\u5f0f\uff0c\u8fd9\u4e94\u4e2a\u5e03\u5c40\u5143\u7d20\u53ef\u4ee5\u76f8\u4e92\u5d4c\u5957\u5e94\u7528\uff0c\u505a\u51fa\u7f8e\u89c2\u7684\u754c\u9762\u3002\r\n"},{"ID":"314","typeID":"11","question":"android\u5ba2\u6237\u7aef\u5982\u4f55\u5b9e\u73b0\u81ea\u52a8\u767b\u5f55","answer":"\u901a\u8fc7SharedPreferences\u5b58\u50a8\u7528\u6237\u540d,\u5bc6\u7801,\u5f53\u5b58\u50a8\u4e0d\u4e3a\u7a7a\u65f6\u5b9e\u73b0\u81ea\u52a8\u767b\u5f55\u529f\u80fd"},{"ID":"313","typeID":"11","question":"Android SDK 3.0(HoneyComb)\u53ca4.0(Ice Cream)\u65b0\u7279\u6027","answer":"\u65b0\u7248SDK\u53d1\u5e03\u7684\u540c\u65f6\u4e5f\u53d1\u5e03\u4e86\u4e00\u4e2a\u6269\u5c55\u5305android-support-v4\uff0c\u628a\u90e8\u5206\u7279\u6027\u5355\u72ec\u7684\u62bd\u51fa\u6765\uff0c\u4f7f\u4f4e\u7248\u672c\u7684SDK\u4e5f\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e9b\u7279\u6027\uff0c\u4e3b\u8981\u652f\u6301\u4ee5\u4e0b\u7279\u6027\uff1a\r\nFragment: 3.0\u5f15\u5165,\u788e\u7247\u7ba1\u7406,\u53ef\u4ee5\u5c40\u90e8\u5237\u65b0UI,\u5b83\u8bbe\u8ba1\u7684\u529f\u80fd\u548cActivity\u4e00\u6837\u5f3a\u5927\uff0c\u5305\u62ec\u751f\u547d\u5468\u671f\u3001\u5bfc\u822a\u7b49\uff0cFragment\u7684\u6bcf\u6b21\u5bfc\u822a\u90fd\u53ef\u4ee5\u8bb0\u5f55\u4e0b\u6765\u7528\u4e8e\u8fd4\u56de\u3002 \r\nViewPager: \u63d0\u4f9b\u4e86\u591a\u754c\u9762\u5207\u6362\u7684\u65b0\u6548\u679c \r\nGridLayout: 4.0\u5f15\u5165, \u7f51\u683c\u5e03\u5c40, android\u7b2c\u516d\u5927\u5e03\u5c40\r\nLoader: \u88c5\u8f7d\u5668\u4eceandroid3.0\u5f00\u59cb\u5f15\u8fdb\u3002\u5b83\u4f7f\u5f97\u5728activity\u6216fragment\u4e2d\u5f02\u6b65\u52a0\u8f7d\u6570\u636e\u53d8\u5f97\u7b80\u5355\r\n"},{"ID":"312","typeID":"11","question":"\u5b9e\u73b0\u624b\u98ce\u7434\u6548\u679c","answer":"\u5b9e\u73b0\u624b\u98ce\u7434\u6548\u679c\uff08ExpandableListView\uff09\r\n\u8bbe\u7f6e\u754c\u9762\u7684\u7c7b\uff08preferenceActivity\uff09\u4fdd\u5b58\u5230sharedpreference\u4e2d\r\n\u62bd\u5c49\u6548\u679c\uff08slidingDrawer\uff09\u7ec4\u4ef6\r\n\u60ac\u6d6e\u7a97\u53e3: PopWindow,\u53ef\u4ee5\u5b9e\u73b0\u7c7b\u4f3cDialog\u548c\u83dc\u5355\u7684\u6548\u679c\r\n"},{"ID":"311","typeID":"11","question":"\u8c08\u8c08UI\u4e2d\uff0c Padding\u548cMargin\u6709\u4ec0\u4e48\u533a\u522b,gravity\u4e0elayout_gravity\u7684\u533a\u522b","answer":"Padding \u7528\u6765\u6307\u5b9a\u7ec4\u4ef6\u5185\u7684\u5185\u5bb9\u8ddd\u79bb\u7ec4\u4ef6\u8fb9\u754c\u7684\u8ddd\u79bb;\r\n Margin\u7528\u6765\u6307\u5b9a\u63a7\u4ef6\u4e0e\u63a7\u4ef6\u4e4b\u95f4\u7684\u8ddd\u79bb\r\nGravity\u7528\u6765\u6307\u5b9a\u7ec4\u4ef6\u5185\u7684\u5185\u5bb9\u76f8\u5bf9\u4e8e\u7ec4\u4ef6\u672c\u8eab\u7684\u4f4d\u7f6e\r\nLayout_gravity\u7528\u6765\u6307\u5b9a\u7ec4\u4ef6\u76f8\u5bf9\u4e8e\u5176\u7236\u7ec4\u4ef6\u7684\u4f4d\u7f6e\r\n"},{"ID":"310","typeID":"11","question":"\u5982\u4f55\u5c06\u4e00\u4e2aActivity\u8bbe\u7f6e\u6210\u7a97\u53e3\u7684\u6837\u5f0f","answer":"\u5728\u6e05\u5355\u6587\u4ef6AndroidManifest.xml\u4e2d\u76f8\u5e94\u7684<activity>\u6807\u7b7e\u5185\u8bbe\u7f6e\u5c5e\u6027android:theme=\u201d@android:style\/Theme.Dialog\u201d"},{"ID":"309","typeID":"11","question":"\u5982\u4f55\u5b9e\u73b0\u4e00\u952e\u9000\u51fa","answer":"\u5b9a\u4e49\u4e00\u4e2a\u7c7b\u7ee7\u627fApplication\uff0c\u5b9a\u4e49\u4e00\u4e2a\u96c6\u5408\u5b58\u653e\u6240\u6709\u7684activity\uff0c \r\n\u5b9a\u4e49\u4e00\u4e2a\u6dfb\u52a0\u7684\u65b9\u6cd5\uff0c\u518d\u5199\u4e00\u4e2a\u9000\u51fa\u7684\u65b9\u6cd5\uff0c\u4f7f\u7528for\u5faa\u73af\u5168\u90e8\u8c03\u7528finish\u65b9\u6cd5\uff0c\u7136\r\n\u540e\u5728\u6bcf\u4e2aActivity\u7684onCreate\u65b9\u6cd5\u4e2d\u8c03\u7528\u81ea\u5b9a\u4e49\u7c7b\u91cc\u7684\u6dfb\u52a0\u65b9\u6cd5\uff0c\u7136\u540e\u5728\u9700\u8981\u4f7f\u7528\u4e00\r\n\u952e\u9000\u51fa\u7684\u5730\u65b9\u8c03\u7528\u7c7b\u4e2d\u7684\u9000\u51fa\u65b9\u6cd5\u5373\u53ef\u3002\r\n"},{"ID":"308","typeID":"11","question":"NDK\u5f00\u53d1\u6d41\u7a0b\uff1f\uff08JNI\u8fd0\u884c\u539f\u7406\uff09","answer":"NDK\u5e94\u7528\u7684\u5f00\u53d1\u6d41\u7a0b(\u5728\u5e94\u7528\u4e2d\u5b9a\u4e49\u672c\u5730\u63a5\u53e3(native), \u7f16\u8bd1\u6210.h\u5934\u6587\u4ef6,\u4ea4\u7531C\u7a0b\u5e8f\u5458\u5b9e\u73b0,\u5c06.c\u5b9e\u73b0\u901a\u8fc7NDK\u7f16\u8bd1\u6210.so\u52a8\u6001\u94fe\u63a5\u5e93,\u5bfc\u5165\u9879\u76ee\u4e2dlibs\/armeabi,\u4ee3\u7801\u4e2d\u8c03\u7528\u8be5\u672c\u5730\u63a5\u53e3)\r\n\u5e94\u7528\u573a\u666f: \u97f3\u9891,\u89c6\u9891\u89e3\u7801,\u62cd\u6444\u8f66\u724c\u53f7,\u8bc6\u522b\u8f66\u724c\u53f7\r\n"},{"ID":"307","typeID":"11","question":"\u64ad\u653e\u89c6\u9891\u6709\u54ea\u4e9b\u5b9e\u73b0\u65b9\u5f0f","answer":"1)\u4f7f\u7528\u7cfb\u7edf\u81ea\u5e26\u7684\u64ad\u653e\u5668\u6765\u64ad\u653e\uff0c\u6307\u5b9aAction\u4e3aACTION_VIEW,Data\u4e3aUri\uff0cType\u4e3a\u5176MIME\u7c7b\u578b\u3002\r\n\t\t\t\/\/\u8c03\u7528\u7cfb\u7edf\u81ea\u5e26\u7684\u64ad\u653e\u5668 \r\n Intent intent = new Intent(Intent.ACTION_VIEW); \r\n intent.setDataAndType(uri, \"video\/mp4\"); \r\n startActivity(intent);\r\n2)\u4f7f\u7528VideoView\u7ec4\u4ef6\u6765\u64ad\u653e, \u53ef\u4ee5\u7ed3\u5408MediaController\u6765\u5b9e\u73b0\u64ad\u63a7, \u53ea\u662f\u4e0d\u80fd\u968f\u610f\u66f4\u6539\u89c6\u9891\u7684\u5927\u5c0f\u53ca\u4f4d\u7f6e\u3002\r\n3)\u4f7f\u7528MediaPlayer\u548cSurfaceView\u6765\u5b9e\u73b0\uff0c\u8fd9\u79cd\u65b9\u5f0f\u5f88\u7075\u6d3b,\u53ef\u4ee5\u81ea\u5b9a\u4e49\u89c6\u9891\u64ad\u653e\u7684\u5927\u5c0f\u548c\u4f4d\u7f6e\u3002\r\n"},{"ID":"306","typeID":"11","question":"\u7248\u672c\u66f4\u65b0\u7684\u5b9e\u73b0\u601d\u8def","answer":"\u5728\u670d\u52a1\u5668\u76f8\u5e94URL\u4e0a\u6709\u7248\u672c\u6587\u4ef6, \u5ba2\u6237\u7aef\u540c\u65f6\u5b58\u50a8\u8be5\u5e94\u7528\u5f53\u524d\u7248\u672c\u53f7 (SharedPreferences\/Sqlite), \u6bcf\u6b21\u6253\u5f00\u5e94\u7528,\u53bb\u68c0\u6d4b\u670d\u52a1\u5668\u7248\u672c\u53f7\u4e0e\u672c\u5730\u7248\u672c\u53f7\u662f\u5426\u4e00\u81f4,\u5982\u679c\u4e0d\u4e00 \u81f4,\u5219\u81ea\u5b9a\u4e49\u5bf9\u8bdd\u6846\u63d0\u793a\u662f\u5426\u4e0b\u8f7d\u66f4\u65b0"},{"ID":"305","typeID":"11","question":"Android \u81ea\u5b9a\u4e49\u7ec4\u4ef6\u5b9e\u73b0\u601d\u8def","answer":"Android \u81ea\u5b9a\u4e49\u7ec4\u4ef6\u6709\u4e09\u79cd\u5b9e\u73b0\u601d\u8def:\r\n1) \u7ee7\u627f\u67d0\u4e2a\u73b0\u6709\u7ec4\u4ef6,\u5728\u5176\u57fa\u7840\u4e0a\u6dfb\u52a0\u989d\u5916\u529f\u80fd,\u5982\u7ee7\u627f Gallery \u5b9e\u73b0 CoverFlow \u6548\u679c\r\n2) \u7ee7\u627f\u67d0\u4e2a Layout,\u5b9e\u73b0\u590d\u5408\u7ec4\u4ef6\u81ea\u5b9a\u4e49,\u5982 TextView \u548c EditText \u7ec4\u5408\u5b9e\u73b0\u767b\u5f55\u6ce8\u518c\u7ec4\u4ef6\r\n3) \u7ee7\u627f View,\u5b9e\u73b0 onDraw()\u65b9\u6cd5,\u5b9e\u73b0\u81ea\u5df1\u7ed8\u5236\u7ec4\u4ef6,\u5982\u7ffb\u9875\u6548\u679c\u7ec4\u4ef6"},{"ID":"304","typeID":"11","question":"\u5982\u4f55\u5b9e\u73b0\u6d88\u606f\u63a8\u9001","answer":"\u5b9e\u73b0\u6d88\u606f\u63a8\u9001\u7684\u65b9\u5f0f\u6709\u4e94\u79cd,\u5206\u522b\u662f\u8f6e\u8be2,SMS,C2DM,MQTT,XMPP \u6700\u5e38\u4f7f\u7528\u7684\u662f XMPP, \u6211 \u4eec\u505a\u9879\u76ee\u65f6\u91c7\u7528\u7684\u662f XMPP \u534f\u8bae"},{"ID":"303","typeID":"11","question":"\u52a0\u8f7d\u5927\u56fe\u7247\u7684\u65f6\u5019\u5982\u4f55\u9632\u6b62\u5185\u5b58\u6ea2\u51fa","answer":" android \u7cfb\u7edf\u7ed9\u56fe\u7247\u5206\u914d\u7684\u5185\u5b58\u53ea\u6709 8M,\u5f53\u52a0\u8f7d\u5927\u91cf\u56fe\u7247\u65f6\u5f80\u5f80\u4f1a\u51fa\u73b0 OOM\u3002"},{"ID":"302","typeID":"11","question":"android \u5185\u5b58\u7684\u4f18\u5316","answer":"android \u5185\u5b58\u6cc4\u9732\u5bb9\u6613\u5bfc\u81f4\u5185\u5b58\u6ea2\u51fa,\u53c8\u79f0\u4e3a OOM\u3002\r\nAndroid \u5185\u5b58\u4f18\u5316\u7b56\u7565:\r\n1)\u5728\u5faa\u73af\u5185\u5c3d\u91cf\u4e0d\u8981\u4f7f\u7528\u5c40\u90e8\u53d8\u91cf\r\n2)\u4e0d\u7528\u7684\u5bf9\u8c61\u5373\u65f6\u91ca\u653e,\u5373\u6307\u5411 NULL\r\n3)\u6570\u636e\u5e93\u7684 cursor \u5373\u65f6\u5173\u95ed\u3002\r\n4)\u6784\u9020 adapter \u65f6\u4f7f\u7528\u7f13\u5b58 contentview\r\n5)\u8c03\u7528 registerReceiver()\u540e\u5728\u5bf9\u5e94\u7684\u751f\u547d\u5468\u671f\u65b9\u6cd5\u4e2d\u8c03\u7528 unregisterReceiver()\r\n6)\u5373\u65f6\u5173\u95ed InputStream\/OutputStream\u3002\r\n7)android\u7cfb\u7edf\u7ed9\u56fe\u7247\u5206\u914d\u7684\u5185\u5b58\u53ea\u67098M, \u56fe\u7247\u5c3d\u91cf\u4f7f\u7528\u8f6f\u5f15\u7528, \u8f83\u5927\u56fe\u7247\u53ef\u901a\u8fc7BitmapFactory \u7f29\u653e\u540e\u518d\u4f7f\u7528,\u5e76\u53ca\u65f6 recycle\r\n8)\u5c3d\u91cf\u907f\u514d static \u6210\u5458\u53d8\u91cf\u5f15\u7528\u8d44\u6e90\u8017\u8d39\u8fc7\u591a\u7684\u5b9e\u4f8b\u3002"},{"ID":"301","typeID":"11","question":"\u5ea6\u5730\u56fe\u6838\u5fc3\u7c7b,\u53ca\u5b9e\u73b0\u7684\u529f\u80fd","answer":"BMapManager:\u5730\u56fe\u5f15\u64ce\u7ba1\u7406\u7c7b,\u8d1f\u8d23\u521d\u59cb\u5316,\u5f00\u542f\u5730\u56fe API,\u7ec8\u6b62\u767e\u5ea6\u5730\u56fe API \u7b49\u5de5\u4f5c MKSearch:\u641c\u7d22\u670d\u52a1.\u7528\u4e8e\u4f4d\u7f6e\u68c0\u7d22\u3001\u5468\u8fb9\u68c0\u7d22\u3001\u8303\u56f4\u68c0\u7d22\u3001\u516c\u4ea4\u68c0\u7d22\u3001\u9a7e\u4e58\u68c0\u7d22\u3001\u6b65\u884c\u68c0\u7d22 MKSearchListener \u641c\u7d22\u7ed3\u679c\u901a\u77e5\u63a5\u53e3\u3002\u8be5\u63a5\u53e3\u8fd4\u56de poi \u641c\u7d22,\u516c\u4ea4\u641c\u7d22,\u9a7e\u4e58\u8def\u7ebf,\u6b65\u884c\u8def\u7ebf\u7ed3\u679c MapView:\u663e\u793a\u5730\u56fe\u7684 View\r\nMyLocationOverlay:\u4e00\u4e2a\u8d1f\u8d23\u663e\u793a\u7528\u6237\u5f53\u524d\u4f4d\u7f6e\u7684 Overlay\u3002\r\nOverlay:Overlay \u662f\u4e00\u4e2a\u57fa\u7c7b,\u5b83\u8868\u793a\u53ef\u4ee5\u663e\u793a\u5728\u5730\u56fe\u4e0a\u65b9\u7684\u8986\u76d6\u7269\u3002"},{"ID":"203","typeID":"11","question":"\u8bf4\u51fa ArrayList,Vector, LinkedList \u7684\u5b58\u50a8\u6027\u80fd\u548c\u7279\u6027?","answer":"ArrayList \u548c Vector \u90fd\u662f\u4f7f\u7528\u6570\u7ec4\u65b9\u5f0f\u5b58\u50a8\u6570\u636e,\u6b64\u6570\u7ec4\u5143\u7d20\u6570\u5927\u4e8e\u5b9e \u9645\u5b58\u50a8\u7684\u6570\u636e\u4ee5\u4fbf\u589e\u52a0\u548c\u63d2\u5165\u5143\u7d20,\u5b83\u4eec\u90fd\u5141\u8bb8\u76f4\u63a5\u6309\u5e8f\u53f7\u7d22\u5f15\u5143\u7d20, \u4f46\u662f\u63d2\u5165\u5143\u7d20\u8981\u6d89\u53ca\u6570\u7ec4\u5143\u7d20\u79fb\u52a8\u7b49\u5185\u5b58\u64cd\u4f5c,\u6240\u4ee5\u7d22\u5f15\u6570\u636e\u5feb\u800c\u63d2\u5165 \u6570\u636e\u6162,Vector \u7531\u4e8e\u4f7f\u7528\u4e86 synchronized \u65b9\u6cd5(\u7ebf\u7a0b\u5b89\u5168),\u901a\u5e38\u6027 \u80fd\u4e0a\u8f83 ArrayList \u5dee,\u800c LinkedList \u4f7f\u7528\u53cc\u5411\u94fe\u8868\u5b9e\u73b0\u5b58\u50a8,\u6309\u5e8f\u53f7 \u7d22\u5f15\u6570\u636e\u9700\u8981\u8fdb\u884c\u524d\u5411\u6216\u540e\u5411\u904d\u5386,\u4f46\u662f\u63d2\u5165\u6570\u636e\u65f6\u53ea\u9700\u8981\u8bb0\u5f55\u672c\u9879\u7684 \u524d\u540e\u9879\u5373\u53ef,\u6240\u4ee5\u63d2\u5165\u901f\u5ea6\u8f83\u5feb\u3002"},{"ID":"202","typeID":"11","question":"\u9762\u5411\u5bf9\u8c61\u7684\u7279\u5f81\u6709\u54ea\u4e9b\u65b9\u9762?","answer":"1.\u62bd\u8c61: \u62bd\u8c61\u5c31\u662f\u5ffd\u7565\u4e00\u4e2a\u4e3b\u9898\u4e2d\u4e0e\u5f53\u524d\u76ee\u6807\u65e0\u5173\u7684\u90a3\u4e9b\u65b9\u9762,\u4ee5\u4fbf\u66f4\u5145\u5206\u5730\u6ce8 \u610f\u4e0e\u5f53\u524d\u76ee\u6807\u6709\u5173\u7684\u65b9\u9762\u3002\u62bd\u8c61\u5e76\u4e0d\u6253\u7b97\u4e86\u89e3\u5168\u90e8\u95ee\u9898,\u800c\u53ea\u662f\u9009\u62e9\u5176 \u4e2d\u7684\u4e00\u90e8\u5206,\u6682\u65f6\u4e0d\u7528\u90e8\u5206\u7ec6\u8282\u3002\u62bd\u8c61\u5305\u62ec\u4e24\u4e2a\u65b9\u9762,\u4e00\u662f\u8fc7\u7a0b\u62bd\u8c61, \u4e8c\u662f\u6570\u636e\u62bd\u8c61\u3002\u20282.\u7ee7\u627f: \u7ee7\u627f\u662f\u4e00\u79cd\u8054\u7ed3\u7c7b\u7684\u5c42\u6b21\u6a21\u578b,\u5e76\u4e14\u5141\u8bb8\u548c\u9f13\u52b1\u7c7b\u7684\u91cd\u7528,\u5b83\u63d0\u4f9b\u4e86\u4e00 \u79cd\u660e\u786e\u8868\u8ff0\u5171\u6027\u7684\u65b9\u6cd5\u3002\u5bf9\u8c61\u7684\u4e00\u4e2a\u65b0\u7c7b\u53ef\u4ee5\u4ece\u73b0\u6709\u7684\u7c7b\u4e2d\u6d3e\u751f,\u8fd9\u4e2a \u8fc7\u7a0b\u79f0\u4e3a\u7c7b\u7ee7\u627f\u3002\u65b0\u7c7b\u7ee7\u627f\u4e86\u539f\u59cb\u7c7b\u7684\u7279\u6027,\u65b0\u7c7b\u79f0\u4e3a\u539f\u59cb\u7c7b\u7684\u6d3e\u751f\u7c7b (\u5b50\u7c7b),\u800c\u539f\u59cb\u7c7b\u79f0\u4e3a\u65b0\u7c7b\u7684\u57fa\u7c7b(\u7236\u7c7b)\u3002\u6d3e\u751f\u7c7b\u53ef\u4ee5\u4ece\u5b83\u7684\u57fa\u7c7b \u90a3\u91cc\u7ee7\u627f\u65b9\u6cd5\u548c\u5b9e\u4f8b\u53d8\u91cf,\u5e76\u4e14\u7c7b\u53ef\u4ee5\u4fee\u6539\u6216\u589e\u52a0\u65b0\u7684\u65b9\u6cd5\u4f7f\u4e4b\u66f4\u9002\u5408 \u7279\u6b8a\u7684\u9700\u8981\u3002\u20283.\u5c01\u88c5: \u5c01\u88c5\u662f\u628a\u8fc7\u7a0b\u548c\u6570\u636e\u5305\u56f4\u8d77\u6765,\u5bf9\u6570\u636e\u7684\u8bbf\u95ee\u53ea\u80fd\u901a\u8fc7\u5df2\u5b9a\u4e49\u7684\u754c\u9762\u3002 \u9762\u5411\u5bf9\u8c61\u8ba1\u7b97\u59cb\u4e8e\u8fd9\u4e2a\u57fa\u672c\u6982\u5ff5,\u5373\u73b0\u5b9e\u4e16\u754c\u53ef\u4ee5\u88ab\u63cf\u7ed8\u6210\u4e00\u7cfb\u5217\u5b8c\u5168 \u81ea\u6cbb\u3001\u5c01\u88c5\u7684\u5bf9\u8c61,\u8fd9\u4e9b\u5bf9\u8c61\u901a\u8fc7\u4e00\u4e2a\u53d7\u4fdd\u62a4\u7684\u63a5\u53e3\u8bbf\u95ee\u5176\u4ed6\u5bf9\u8c61\u3002 4. \u591a\u6001\u6027: \u591a\u6001\u6027\u662f\u6307\u5141\u8bb8\u4e0d\u540c\u7c7b\u7684\u5bf9\u8c61\u5bf9\u540c\u4e00\u6d88\u606f\u4f5c\u51fa\u54cd\u5e94\u3002\u591a\u6001\u6027\u5305\u62ec\u53c2\u6570\u5316 \u591a\u6001\u6027\u548c\u5305\u542b\u591a\u6001\u6027\u3002\u591a\u6001\u6027\u8bed\u8a00\u5177\u6709\u7075\u6d3b\u3001\u62bd\u8c61\u3001\u884c\u4e3a\u5171\u4eab\u3001\u4ee3\u7801\u5171 \u4eab\u7684\u4f18\u52bf,\u5f88\u597d\u7684\u89e3\u51b3\u4e86\u5e94\u7528\u7a0b\u5e8f\u51fd\u6570\u540c\u540d\u95ee\u9898\u3002\r\n"},{"ID":"201","typeID":"11","question":"try {}\u91cc\u6709\u4e00\u4e2a return \u8bed\u53e5,\u90a3\u4e48\u7d27\u8ddf\u5728\u8fd9\u4e2a try \u540e\u7684 finally {}\u91cc\u7684 code \u4f1a\u4e0d\u4f1a\u88ab\u6267\u884c,\u4ec0\u4e48\u65f6\u5019\u88ab\u6267\u884c,\u5728 return \u524d\u8fd8 \u662f\u540e?","answer":"\u4f1a\u6267\u884c,\u5728 return \u524d\u6267\u884c\u3002"},{"ID":"200","typeID":"11","question":"\u5f53\u4e00\u4e2a\u7ebf\u7a0b\u8fdb\u5165\u4e00\u4e2a\u5bf9\u8c61\u7684\u4e00\u4e2a synchronized \u65b9\u6cd5\u540e,\u5176\u5b83 \u7ebf\u7a0b\u662f\u5426\u53ef\u8fdb\u5165\u6b64\u5bf9\u8c61\u7684\u5176\u5b83\u65b9\u6cd5?","answer":"\u4e0d\u80fd,\u4e00\u4e2a\u5bf9\u8c61\u7684\u4e00\u4e2a synchronized \u65b9\u6cd5\u53ea\u80fd\u7531\u4e00\u4e2a\u7ebf\u7a0b\u8bbf\u95ee\u3002"},{"ID":"199","typeID":"11","question":"\u662f\u5426\u53ef\u4ee5\u7ee7\u627f String \u7c7b?","answer":"String \u7c7b\u662f final \u7c7b\u6545\u4e0d\u53ef\u4ee5\u7ee7\u627f\u3002"},{"ID":"198","typeID":"11","question":"\u6784\u9020\u5668 Constructor \u662f\u5426\u53ef\u88ab override?","answer":"\u6784\u9020\u5668 Constructor \u4e0d\u80fd\u88ab\u7ee7\u627f,\u56e0\u6b64\u4e0d\u80fd\u91cd\u5199 Overriding,\u4f46\u53ef\u4ee5\u88ab \u91cd\u8f7d Overloading\u3002"},{"ID":"197","typeID":"11","question":"\u542f\u52a8\u4e00\u4e2a\u7ebf\u7a0b\u662f\u7528 run()\u8fd8\u662f start()?","answer":"\u542f\u52a8\u4e00\u4e2a\u7ebf\u7a0b\u662f\u8c03\u7528 start()\u65b9\u6cd5,\u4f7f\u7ebf\u7a0b\u6240\u4ee3\u8868\u7684\u865a\u62df\u5904\u7406\u673a\u5904\u4e8e\u53ef\u8fd0 \u884c\u72b6\u6001,\u8fd9\u610f\u5473\u7740\u5b83\u53ef\u4ee5\u7531 JVM \u8c03\u5ea6\u5e76\u6267\u884c\u3002\u8fd9\u5e76\u4e0d\u610f\u5473\u7740\u7ebf\u7a0b\u5c31\u4f1a\u7acb\u5373 \u8fd0\u884c\u3002run()\u65b9\u6cd5\u53ef\u4ee5\u4ea7\u751f\u5fc5\u987b\u9000\u51fa\u7684\u6807\u5fd7\u6765\u505c\u6b62\u4e00\u4e2a\u7ebf\u7a0b\u3002\r\n"},{"ID":"196","typeID":"11","question":"\u63a5\u53e3\u662f\u5426\u53ef\u7ee7\u627f\u63a5\u53e3? \u62bd\u8c61\u7c7b\u662f\u5426\u53ef\u5b9e\u73b0(implements)\u63a5\u53e3?","answer":"\u62bd\u8c61\u7c7b\u662f\u5426\u53ef\u7ee7\u627f\u5b9e\u4f53\u7c7b(concrete class)? \u63a5\u53e3\u53ef\u4ee5\u7ee7\u627f\u63a5\u53e3\u3002\u62bd\u8c61\u7c7b\u53ef\u4ee5\u5b9e\u73b0(implements)\u63a5\u53e3,\u62bd\u8c61\u7c7b\u662f\u5426\u53ef\u7ee7 \u627f\u5b9e\u4f53\u7c7b,\u4f46\u524d\u63d0\u662f\u5b9e\u4f53\u7c7b\u5fc5\u987b\u6709\u660e\u786e\u7684\u6784\u9020\u51fd\u6570\u3002\r\n"},{"ID":"195","typeID":"11","question":"abstract \u7684 method \u662f\u5426\u53ef\u540c\u65f6\u662f static,\u662f\u5426\u53ef\u540c\u65f6\u662f native,\u662f\u5426\u53ef\u540c\u65f6\u662f synchronized?","answer":"\u90fd\u4e0d\u80fd\r\n"},{"ID":"194","typeID":"11","question":"abstract class \u548c interface \u6709\u4ec0\u4e48\u533a\u522b?","answer":"\u58f0\u660e\u65b9\u6cd5\u7684\u5b58\u5728\u800c\u4e0d\u53bb\u5b9e\u73b0\u5b83\u7684\u7c7b\u88ab\u53eb\u505a\u62bd\u8c61\u7c7b(abstract class), \u5b83\u7528\u4e8e\u8981\u521b\u5efa\u4e00\u4e2a\u4f53\u73b0\u67d0\u4e9b\u57fa\u672c\u884c\u4e3a\u7684\u7c7b,\u5e76\u4e3a\u8be5\u7c7b\u58f0\u660e\u65b9\u6cd5,\u4f46\u4e0d\u80fd\u5728 \u8be5\u7c7b\u4e2d\u5b9e\u73b0\u8be5\u7c7b\u7684\u60c5\u51b5\u3002\u4e0d\u80fd\u521b\u5efa abstract \u7c7b\u7684\u5b9e\u4f8b\u3002\u7136\u800c\u53ef\u4ee5\u521b\u5efa\u4e00 \u4e2a\u53d8\u91cf,\u5176\u7c7b\u578b\u662f\u4e00\u4e2a\u62bd\u8c61\u7c7b,\u5e76\u8ba9\u5b83\u6307\u5411\u5177\u4f53\u5b50\u7c7b\u7684\u4e00\u4e2a\u5b9e\u4f8b\u3002\u4e0d\u80fd\u6709 \u62bd\u8c61\u6784\u9020\u51fd\u6570\u6216\u62bd\u8c61\u9759\u6001\u65b9\u6cd5\u3002Abstract \u7c7b\u7684\u5b50\u7c7b\u4e3a\u5b83\u4eec\u7236\u7c7b\u4e2d\u7684\u6240\u6709 \u62bd\u8c61\u65b9\u6cd5\u63d0\u4f9b\u5b9e\u73b0,\u5426\u5219\u5b83\u4eec\u4e5f\u662f\u62bd\u8c61\u7c7b\u4e3a\u3002\u53d6\u800c\u4ee3\u4e4b,\u5728\u5b50\u7c7b\u4e2d\u5b9e\u73b0\u8be5 \u65b9\u6cd5\u3002\u77e5\u9053\u5176\u884c\u4e3a\u7684\u5176\u5b83\u7c7b\u53ef\u4ee5\u5728\u7c7b\u4e2d\u5b9e\u73b0\u8fd9\u4e9b\u65b9\u6cd5\u3002 \u63a5\u53e3(interface)\u662f\u62bd\u8c61\u7c7b\u7684\u53d8\u4f53\u3002\u5728\u63a5\u53e3\u4e2d,\u6240\u6709\u65b9\u6cd5\u90fd\u662f\u62bd\u8c61\u7684\u3002 \u591a\u7ee7\u627f\u6027\u53ef\u901a\u8fc7\u5b9e\u73b0\u8fd9\u6837\u7684\u63a5\u53e3\u800c\u83b7\u5f97\u3002\u63a5\u53e3\u4e2d\u7684\u6240\u6709\u65b9\u6cd5\u90fd\u662f\u62bd\u8c61\u7684, \u6ca1\u6709\u4e00\u4e2a\u6709\u7a0b\u5e8f\u4f53\u3002\u63a5\u53e3\u53ea\u53ef\u4ee5\u5b9a\u4e49 static final \u6210\u5458\u53d8\u91cf\u3002\u63a5\u53e3\u7684\u5b9e \u73b0\u4e0e\u5b50\u7c7b\u76f8\u4f3c,\u9664\u4e86\u8be5\u5b9e\u73b0\u7c7b\u4e0d\u80fd\u4ece\u63a5\u53e3\u5b9a\u4e49\u4e2d\u7ee7\u627f\u884c\u4e3a\u3002\u5f53\u7c7b\u5b9e\u73b0\u7279\u6b8a \u63a5\u53e3\u65f6,\u5b83\u5b9a\u4e49(\u5373\u5c06\u7a0b\u5e8f\u4f53\u7ed9\u4e88)\u6240\u6709\u8fd9\u79cd\u63a5\u53e3\u7684\u65b9\u6cd5\u3002\u7136\u540e,\u5b83\u53ef\u4ee5 \u5728\u5b9e\u73b0\u4e86\u8be5\u63a5\u53e3\u7684\u7c7b\u7684\u4efb\u4f55\u5bf9\u8c61\u4e0a\u8c03\u7528\u63a5\u53e3\u7684\u65b9\u6cd5\u3002\u7531\u4e8e\u6709\u62bd\u8c61\u7c7b,\u5b83\u5141 \u8bb8\u4f7f\u7528\u63a5\u53e3\u540d\u4f5c\u4e3a\u5f15\u7528\u53d8\u91cf\u7684\u7c7b\u578b\u3002\u901a\u5e38\u7684\u52a8\u6001\u8054\u7f16\u5c06\u751f\u6548\u3002\u5f15\u7528\u53ef\u4ee5\u8f6c \u6362\u5230\u63a5\u53e3\u7c7b\u578b\u6216\u4ece\u63a5\u53e3\u7c7b\u578b\u8f6c\u6362,instanceof \u8fd0\u7b97\u7b26\u53ef\u4ee5\u7528\u6765\u51b3\u5b9a\u67d0\u5bf9 \u8c61\u7684\u7c7b\u662f\u5426\u5b9e\u73b0\u4e86\u63a5\u53e3\u3002"},{"ID":"193","typeID":"11","question":"List, Set, Map \u662f\u5426\u7ee7\u627f\u81ea Collection \u63a5\u53e3?","answer":"List,Set \u662f\r\nMap \u4e0d\u662f"},{"ID":"192","typeID":"11","question":"error \u548c exception \u6709\u4ec0\u4e48\u533a\u522b?","answer":"error \u8868\u793a\u6062\u590d\u4e0d\u662f\u4e0d\u53ef\u80fd\u4f46\u5f88\u56f0\u96be\u7684\u60c5\u51b5\u4e0b\u7684\u4e00\u79cd\u4e25\u91cd\u95ee\u9898\u3002\u6bd4\u5982\u8bf4\u5185 \u5b58\u6ea2\u51fa\u3002\u4e0d\u53ef\u80fd\u6307\u671b\u7a0b\u5e8f\u80fd\u5904\u7406\u8fd9\u6837\u7684\u60c5\u51b5\u3002\r\nexception \u8868\u793a\u4e00\u79cd\u8bbe\u8ba1\u6216\u5b9e\u73b0\u95ee\u9898\u3002\u4e5f\u5c31\u662f\u8bf4,\u5b83\u8868\u793a\u5982\u679c\u7a0b\u5e8f\u8fd0\u884c\u6b63 \u5e38,\u4ece\u4e0d\u4f1a\u53d1\u751f\u7684\u60c5\u51b5\u3002"},{"ID":"191","typeID":"11","question":"Set\u91cc\u7684\u5143\u7d20\u662f\u4e0d\u80fd\u91cd\u590d\u7684,\u90a3\u4e48\u7528\u4ec0\u4e48\u65b9\u6cd5\u6765\u533a\u5206\u91cd\u590d\u4e0e\u5426\u5462? \u662f\u7528==\u8fd8\u662f equals()? \u5b83\u4eec\u6709\u4f55\u533a\u522b?","answer":"Set \u91cc\u7684\u5143\u7d20\u662f\u4e0d\u80fd\u91cd\u590d\u7684,\u90a3\u4e48\u7528 iterator()\u65b9\u6cd5\u6765\u533a\u5206\u91cd\u590d\u4e0e\u5426\u3002 equals()\u662f\u5224\u8bfb\u4e24\u4e2a Set \u662f\u5426\u76f8\u7b49\u3002 equals()\u548c==\u65b9\u6cd5\u51b3\u5b9a\u5f15\u7528\u503c\u662f\u5426\u6307\u5411\u540c\u4e00\u5bf9\u8c61 equals()\u5728\u7c7b\u4e2d\u88ab\u8986 \u76d6,\u4e3a\u7684\u662f\u5f53\u4e24\u4e2a\u5206\u79bb\u7684\u5bf9\u8c61\u7684\u5185\u5bb9\u548c\u7c7b\u578b\u76f8\u914d\u7684\u8bdd,\u8fd4\u56de\u771f\u503c\u3002"},{"ID":"190","typeID":"11","question":"Overload \u548c Override \u7684\u533a\u522b\u3002Overloaded \u7684\u65b9\u6cd5\u662f\u5426\u53ef\u4ee5\u6539 \u53d8\u8fd4\u56de\u503c\u7684\u7c7b\u578b?","answer":"\u65b9\u6cd5\u7684\u91cd\u5199 Overriding \u548c\u91cd\u8f7d Overloading \u662f Java \u591a\u6001\u6027\u7684\u4e0d\u540c\u8868\u73b0\u3002 \u91cd\u5199 Overriding \u662f\u7236\u7c7b\u4e0e\u5b50\u7c7b\u4e4b\u95f4\u591a\u6001\u6027\u7684\u4e00\u79cd\u8868\u73b0,\u91cd\u8f7d Overloading \u662f\u4e00\u4e2a\u7c7b\u4e2d\u591a\u6001\u6027\u7684\u4e00\u79cd\u8868\u73b0\u3002\u5982\u679c\u5728\u5b50\u7c7b\u4e2d\u5b9a\u4e49\u67d0\u65b9\u6cd5\u4e0e \u5176\u7236\u7c7b\u6709\u76f8\u540c\u7684\u540d\u79f0\u548c\u53c2\u6570,\u6211\u4eec\u8bf4\u8be5\u65b9\u6cd5\u88ab\u91cd\u5199 (Overriding)\u3002\u5b50\u7c7b \u7684\u5bf9\u8c61\u4f7f\u7528\u8fd9\u4e2a\u65b9\u6cd5\u65f6,\u5c06\u8c03\u7528\u5b50\u7c7b\u4e2d\u7684\u5b9a\u4e49,\u5bf9\u5b83\u800c\u8a00,\u7236\u7c7b\u4e2d\u7684\u5b9a\u4e49 \u5982\u540c\u88ab\u201c\u5c4f\u853d\u201d\u4e86\u3002\u5982\u679c\u5728\u4e00\u4e2a\u7c7b\u4e2d\u5b9a\u4e49\u4e86\u591a\u4e2a\u540c\u540d\u7684\u65b9\u6cd5,\u5b83\u4eec\u6216\u6709\u4e0d \u540c\u7684\u53c2\u6570\u4e2a\u6570\u6216\u6709\u4e0d\u540c\u7684\u53c2\u6570\u7c7b\u578b,\u5219\u79f0\u4e3a\u65b9\u6cd5\u7684\u91cd\u8f7d(Overloading)\u3002 Overloaded \u7684\u65b9\u6cd5\u662f\u53ef\u4ee5\u6539\u53d8\u8fd4\u56de\u503c\u7684\u7c7b\u578b\u3002"},{"ID":"189","typeID":"11","question":"\u6570\u7ec4\u6709\u6ca1\u6709 length()\u8fd9\u4e2a\u65b9\u6cd5? String \u6709\u6ca1\u6709 length()\u8fd9\u4e2a \u65b9\u6cd5?","answer":"\u6570\u7ec4\u6ca1\u6709 length()\u8fd9\u4e2a\u65b9\u6cd5,\u6709 length \u7684\u5c5e\u6027\u3002\r\nString \u6709\u6709 length()\u8fd9\u4e2a\u65b9\u6cd5\u3002\r\n"},{"ID":"188","typeID":"11","question":"Java \u6709\u6ca1\u6709 goto?","answer":"Goto?java \u4e2d\u7684\u4fdd\u7559\u5b57,\u73b0\u5728\u6ca1\u6709\u5728 java \u4e2d\u4f7f\u7528\u3002"},{"ID":"187","typeID":"11","question":"sleep() \u548c wait() \u6709\u4ec0\u4e48\u533a\u522b? ","answer":"sleep()\u65b9\u6cd5\u662f\u4f7f\u7ebf\u7a0b\u505c\u6b62\u4e00\u6bb5\u65f6\u95f4\u7684\u65b9\u6cd5\u3002\u5728 sleep \u65f6\u95f4\u95f4\u9694\u671f\u6ee1\u540e, \u7ebf\u7a0b\u4e0d\u4e00\u5b9a\u7acb\u5373\u6062\u590d\u6267\u884c\u3002\u8fd9\u662f\u56e0\u4e3a\u5728\u90a3\u4e2a\u65f6\u523b,\u5176\u5b83\u7ebf\u7a0b\u53ef\u80fd\u6b63\u5728\u8fd0\u884c \u800c\u4e14\u6ca1\u6709\u88ab\u8c03\u5ea6\u4e3a\u653e\u5f03\u6267\u884c,\u9664\u975e(a)\u201c\u9192\u6765\u201d\u7684\u7ebf\u7a0b\u5177\u6709\u66f4\u9ad8\u7684\u4f18\u5148\u7ea7 (b)\u6b63\u5728\u8fd0\u884c\u7684\u7ebf\u7a0b\u56e0\u4e3a\u5176\u5b83\u539f\u56e0\u800c\u963b\u585e\u3002 wait()\u662f\u7ebf\u7a0b\u4ea4\u4e92\u65f6,\u5982\u679c\u7ebf\u7a0b\u5bf9\u4e00\u4e2a\u540c\u6b65\u5bf9\u8c61 x \u53d1\u51fa\u4e00\u4e2a wait()\u8c03\u7528, \u8be5\u7ebf\u7a0b\u4f1a\u6682\u505c\u6267\u884c,\u88ab\u8c03\u5bf9\u8c61\u8fdb\u5165\u7b49\u5f85\u72b6\u6001,\u76f4\u5230\u88ab\u5524\u9192\u6216\u7b49\u5f85\u65f6\u95f4\u5230\u3002\r\n"},{"ID":"186","typeID":"11","question":"Math.round(11.5)\u7b49\u65bc\u591a\u5c11? Math.round(-11.5)\u7b49\u65bc\u591a\u5c11?","answer":"Math.round(11.5)\u8fd4\u56de(long)12,Math.round(-11.5)\u8fd4\u56de(long) -11;"},{"ID":"185","typeID":"11","question":"String s = new String(\"xyz\");\u521b\u5efa\u4e86\u51e0\u4e2a String Object?","answer":"\u4e24\u4e2a\u5bf9\u8c61,\u4e00\u4e2a\u662f\u201cxyx\u201d,\u4e00\u4e2a\u662f\u6307\u5411\u201cxyx\u201d\u7684\u5f15\u7528\u5bf9\u8c61 s\u3002"},{"ID":"184","typeID":"11","question":"GC \u662f\u4ec0\u4e48? \u4e3a\u4ec0\u4e48\u8981\u6709 GC?","answer":"GC \u662f\u5783\u573e\u6536\u96c6\u5668\u3002Java \u7a0b\u5e8f\u5458\u4e0d\u7528\u62c5\u5fc3\u5185\u5b58\u7ba1\u7406,\u56e0\u4e3a\u5783\u573e\u6536\u96c6\u5668\u4f1a\u81ea \u52a8\u8fdb\u884c\u7ba1\u7406\u3002\u8981\u8bf7\u6c42\u5783\u573e\u6536\u96c6,\u53ef\u4ee5\u8c03\u7528\u4e0b\u9762\u7684\u65b9\u6cd5\u4e4b\u4e00: System.gc()\r\nRuntime.getRuntime().gc()"},{"ID":"183","typeID":"11","question":"Collection \u548c Collections \u7684\u533a\u522b","answer":"Collections \u662f\u4e2a java.util \u4e0b\u7684\u7c7b,\u5b83\u5305\u542b\u6709\u5404\u79cd\u6709\u5173\u96c6\u5408\u64cd\u4f5c\u7684\u9759 \u6001\u65b9\u6cd5\u3002\r\nCollection \u662f\u4e2a java.util \u4e0b\u7684\u63a5\u53e3,\u5b83\u662f\u5404\u79cd\u96c6\u5408\u7ed3\u6784\u7684\u7236\u63a5\u53e3\u3002"},{"ID":"182","typeID":"11","question":"HashMap \u548c Hashtable \u7684\u533a\u522b","answer":"\u90fd\u5c5e\u4e8e Map \u63a5\u53e3\u7684\u7c7b,\u5b9e\u73b0\u4e86\u5c06\u60df\u4e00\u952e\u6620\u5c04\u5230\u7279\u5b9a\u7684\u503c\u4e0a\u3002\r\nHashMap \u7c7b\u6ca1\u6709\u5206\u7c7b\u6216\u8005\u6392\u5e8f\u3002\u5b83\u5141\u8bb8\u4e00\u4e2a null \u952e\u548c\u591a\u4e2a null \u503c\u3002 Hashtable \u7c7b\u4f3c\u4e8e HashMap,\u4f46\u662f\u4e0d\u5141\u8bb8 null \u952e\u548c null \u503c\u3002\u5b83\u4e5f\u6bd4 HashMap \u6162,\u56e0\u4e3a\u5b83\u662f\u540c\u6b65\u7684\u3002\r\n"},{"ID":"181","typeID":"11","question":"&\u548c&&\u7684\u533a\u522b","answer":"&\u662f\u4f4d\u8fd0\u7b97\u7b26\u3002&&\u662f\u5e03\u5c14\u903b\u8f91\u8fd0\u7b97\u7b26\u3002\r\n"},{"ID":"180","typeID":"11","question":"sax \u89e3\u6790\u4ee3\u7801","answer":"\u9996\u5148 SAXParserFactory \u6765\u521b\u5efa\u4e00\u4e2a SAXParserFactory \u5b9e\u4f8b SAXParserFactory factory = SAXParserFactory.newInstance(); \u6839\u636e SAXParserFactory \u5b9e\u4f8b\u6765\u521b\u5efa SAXParser\r\nSAXParser \u4ea7\u751f SAXReader\r\nXMLReader reader = factory.newSAXParser().getXMLReader();\r\nXMLReader \u52a0\u8f7d XML,\u7136\u540e\u89e3\u6790 XML,\u5728\u89e3\u6790\u7684\u8fc7\u7a0b\u4e2d\u89e6\u53d1\u76f8\u5bf9\u4e8e\u63a5\u53e3\u4e2d\u7684\u4e8b\u4ef6\u5904\u7406\u7a0b\u5e8f"},{"ID":"179","typeID":"11","question":"XML \u89e3\u6790\u6709\u54ea\u51e0\u79cd?\u5404\u81ea\u4f18\u7f3a\u70b9,\u5b98\u65b9\u63a8\u8350\u4f7f\u7528\u54ea\u79cd","answer":"\u57fa\u672c\u7684\u89e3\u6790\u65b9\u5f0f\u6709\u4e09\u79cd: DOM,SAX,Pull\u20281)dom \u89e3\u6790\u89e3\u6790\u5668\u8bfb\u5165\u6574\u4e2a\u6587\u6863,\u7136\u540e\u6784\u5efa\u4e00\u4e2a\u9a7b\u7559\u5185\u5b58\u7684\u6811\u7ed3\u6784,\u7136\u540e\u4ee3\u7801\u5c31\u53ef\u4ee5\u4f7f\u7528 DOM \u63a5\u53e3\u6765\u64cd\u4f5c\u8fd9\u4e2a\u6811\u7ed3\u6784\u7684\u4f18\u70b9\u662f\u5bf9\u6587\u6863\u589e\u5220\u6539\u67e5\u6bd4\u8f83\u65b9\u4fbf,\u7f3a\u70b9\u5360\u7528\u5185\u5b58\u6bd4\u8f83\u5927\u3002\u20282)sax \u89e3\u6790\u57fa\u4e8e\u4e8b\u4ef6\u9a71\u52a8\u578b,\u4f18\u70b9\u5360\u7528\u5185\u5b58\u5c11,\u89e3\u6790\u901f\u5ea6\u5feb,\u7f3a\u70b9\u662f\u53ea\u9002\u5408\u505a\u6587\u6863\u7684\u8bfb\u53d6,\u4e0d\u9002\u5408 \u505a\u6587\u6863\u7684\u589e\u5220\u6539\u67e5\u3002\u20283)pull \u89e3\u6790\u540c\u6837\u57fa\u4e8e\u4e8b\u4ef6\u9a71\u52a8\u578b,android \u5b98\u65b9 API \u63d0\u4f9b,\u53ef\u968f\u65f6\u7ec8\u6b62,\u8c03\u7528 next() \u65b9\u6cd5\u63d0\u53d6\u5b83\u4eec(\u4e3b\u52a8\u63d0\u53d6\u4e8b\u4ef6)\r\n"},{"ID":"178","typeID":"11","question":"\u79fb\u52a8\u4e92\u8054\u6570\u636e\u4ea4\u4e92\u683c\u5f0f\u6709\u54ea\u4e9b\u53ca\u5176\u533a\u522b","answer":"(Json(\u6709\u6570\u636e\u7c7b\u578b)\u4e0e xml(\u6ca1\u6709)\u7684\u533a\u522b?) \u79fb\u52a8\u4e92\u8054\u6570\u636e\u4ea4\u4e92\u683c\u5f0f\u6709 XML \u548c JSON\u20281)JSON \u548c XML \u7684\u6570\u636e\u53ef\u8bfb\u6027\u57fa\u672c\u76f8\u540c\r\n2)JSON \u548c XML \u540c\u6837\u62e5\u6709\u4e30\u5bcc\u7684\u89e3\u6790\u624b\u6bb5 3)JSON \u76f8\u5bf9\u4e8e XML \u6765\u8bb2,\u6570\u636e\u7684\u4f53\u79ef\u5c0f 4)JSON \u4e0e JavaScript \u7684\u4ea4\u4e92\u66f4\u52a0\u65b9\u4fbf 5)JSON \u5bf9\u6570\u636e\u7684\u63cf\u8ff0\u6027\u6bd4 XML \u8f83\u5dee"},{"ID":"177","typeID":"11","question":"\u8bf4\u8bf4HttpClient\u7684\u901a\u4fe1\u8fc7\u7a0b","answer":"1)\u751f\u6210\u8bf7\u6c42\u5bf9\u8c61(HttpGet get,HttpPost post)\r\n2)\u751f\u6210\u5ba2\u6237\u7aef\u5bf9\u8c61 HttpClient client\r\n3)\u6267\u884c\u8bf7\u6c42\u63a5\u6536\u76f8\u5e94 HttpResponse response = client.execute(post)\r\nHttpEntity entity = response.getEntity()\r\n4)\u5f97\u5230\u6570\u636e\u6d41\r\nInputStream inputStream = entity.getContent();\r\n5)\u6700\u540e\u5173\u95ed\u8fc7\u671f\u8fde\u63a5"},{"ID":"176","typeID":"11","question":"android \u54ea\u51e0\u79cd\u65b9\u5f0f\u8bbf\u95ee\u7f51\u7edc","answer":"http \u534f\u8bae:\u8d85\u6587\u672c\u4f20\u8f93\u534f\u8bae\r\n(\u6700\u5e95\u5c42\u7684\u662f Socket,\u63a5\u7740\u662f URLConnection,HttpClient)\r\n\ufffcaction \u8282\u70b9\u4e2d\u7684 android.intent.action.MAIN \u8868\u660e\u5b83\u6240\u5728\u7684 Activity \u662f\u6574\u4e2a\u5e94\u7528\u7a0b\u5e8f\u7684\u5165\u53e3\ufffc\u70b9\r\nHttpURLConnection\r\nHttpClient \u65b9\u5f0f(HttpGet \u548c HttpPost \u7c7b)"},{"ID":"175","typeID":"11","question":"Android \u7a0b\u5e8f\u5165\u53e3\u5982\u4f55\u5224\u65ad","answer":"\ufffcaction \u8282\u70b9\u4e2d\u7684 android.intent.action.MAIN \u8868\u660e\u5b83\u6240\u5728\u7684 Activity \u662f\u6574\u4e2a\u5e94\u7528\u7a0b\u5e8f\u7684\u5165\u53e3\ufffc\u70b9"},{"ID":"174","typeID":"11","question":"\u7b80\u8ff0Android\u4e2d\u7684IPC\u673a\u5236","answer":"IPC(Inter-Process Communication,\u8fdb\u7a0b\u95f4\u901a\u4fe1),aidl \u662f Android Interface definition language \u7684\u7f29\u5199,\u5b83\u662f\u4e00\u79cd android \u5185\u90e8\u8fdb\u7a0b\u901a\u4fe1\u63a5\u53e3\u7684\u63cf\u8ff0\u8bed\u8a00,\u901a\u8fc7\u5b83\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u8fdb\u7a0b \u95f4\u7684\u901a\u4fe1\u63a5\u53e3.\u7f16\u8bd1\u5668\u53ef\u4ee5\u901a\u8fc7\u6269\u5c55\u540d\u4e3a aidl \u7684\u6587\u4ef6\u751f\u6210\u4e00\u6bb5\u4ee3\u7801,\u901a\u8fc7\u9884\u5148\u5b9a\u4e49\u7684\u63a5\u53e3\u8fbe\u5230\u4e24 \u4e2a\u8fdb\u7a0b\u5185\u90e8\u901a\u4fe1\u8fdb\u7a0b\u7684\u76ee\u7684.\r\nBroadcastReceiver \u4e5f\u53ef\u4ee5\u5b9e\u73b0\u8fdb\u7a0b\u95f4\u901a\u4fe1\r\nContentProvider \u63d0\u4f9b\u8fdb\u7a0b\u95f4\u6570\u636e\u5171\u4eab"},{"ID":"173","typeID":"11","question":"\u5982\u4f55\u5b9e\u73b0\u5c4f\u5e55\u5206\u8fa8\u7387\u7684\u81ea\u9002\u5e94(\u5e03\u5c40\u3001\u4e5d\u7ebf\u56fe\u3001\u76ee\u5f55)","answer":"\u6700\u597d\u53ef\u4ee5\u901a\u8fc7\u6743\u91cd(layout_weight)\u7684\u65b9\u5f0f\u6765\u5206\u914d\u6bcf\u4e2a\u7ec4\u4ef6\u7684\u5927\u5c0f,\u4e5f\u53ef\u4ee5\u901a\u8fc7\u5177\u4f53\u7684\u50cf\u7d20 (dip)\u6765\u786e\u5b9a\u5927\u5c0f\u3002 \u00a0\u2028\u5c3d\u91cf\u4f7f\u7528 Relativelayout \u3002 \u00a0\u2028\u5df2\u77e5\u5e94\u7528\u652f\u6301\u5e73\u53f0\u8bbe\u5907\u7684\u5206\u8fa8\u7387,\u53ef\u4ee5\u63d0\u4f9b\u591a\u4e2a layout_320*480 ... drawable-hdpi,drawable-mdpi,drawable-ldpi \u5206\u522b\u4ee3\u8868\u5206\u8fa8\u7387\u4e3a480*800,360*480,240*360, \u653e\u7f6e\u56fe\u7247\u5927\u5c0f\u76f8\u5dee1.5\u500d\u2028\u6700\u540e\u8fd8\u9700\u8981\u5728 AndroidManifest.xml \u91cc\u6dfb\u52a0\u4e0b\u9762\u4e00\u6bb5,\u6ca1\u6709\u8fd9\u4e00\u6bb5\u81ea\u9002\u5e94\u5c31\u4e0d\u80fd\u5b9e\u73b0: <supports-screens\u2028android:largeScreens=\"true\"\u2028android:normalScreens=\"true\"\r\nandroid:anyDensity = \"true\"\/>\u2028\u5728<\/application>\u6807\u7b7e\u548c<\/manifest> \u6807\u7b7e\u4e4b\u95f4\u6dfb\u52a0\u4e0a\u9762\u90a3\u6bb5\u4ee3\u7801\u3002\u5373\u53ef\u3002 \u5907\u6ce8:\u4e09\u8005\u7684\u89e3\u6790\u5ea6\u4e0d\u4e00\u6837,\u5c31\u50cf\u4f60\u628a\u7535\u8111\u7684\u5206\u8fa8\u7387\u8c03\u4f4e,\u56fe\u7247\u4f1a\u53d8\u5927\u4e00\u6837,\u53cd\u4e4b\u5206\u8fa8\u7387\u9ad8,\u56fe \u7247\u7f29\u5c0f\u2028\u8fd8\u53ef\u4ee5\u901a\u8fc7.9.png \u5b9e\u73b0\u56fe\u7247\u7684\u81ea\u9002\u5e94\r\n"},{"ID":"172","typeID":"11","question":"Intent \u7684\u539f\u7406\u3001\u4f5c\u7528\u3001\u53ef\u4ee5\u4f20\u9012\u54ea\u4e9b\u7c7b\u578b\u7684\u53c2\u6570","answer":"intent \u662f\u8fde\u63a5 Activity, Service, BroadcastReceiver, ContentProvider \u56db\u5927\u7ec4\u4ef6\u7684\u4fe1\u4f7f,, \u53ef\u4ee5\u4f20\u9012\u516b\u79cd\u57fa\u672c\u6570\u636e\u7c7b\u578b\u4ee5\u53ca string, Bundle \u7c7b\u578b,\u4ee5\u53ca\u5b9e\u73b0\u4e86 Serializable \u6216\u8005 Parcelable \u7684\u7c7b\u578b\u3002\r\nIntent \u53ef\u4ee5\u5212\u5206\u6210\u663e\u5f0f\u610f\u56fe\u548c\u9690\u5f0f\u610f\u56fe\u3002 \u663e\u5f0f\u610f\u56fe:\u8c03\u7528Intent.setComponent()\u6216Intent.setClass()\u65b9\u6cd5\u660e\u786e\u6307\u5b9a\u4e86\u7ec4\u4ef6\u540d\u7684Intent \u4e3a\u663e\u5f0f\u610f\u56fe,\u663e\u5f0f\u610f\u56fe\u660e\u786e\u6307\u5b9a\u4e86 Intent \u5e94\u8be5\u4f20\u9012\u7ed9\u54ea\u4e2a\u7ec4\u4ef6\u3002 \u9690\u5f0f\u610f\u56fe:\u6ca1\u6709\u660e\u786e\u6307\u5b9a\u7ec4\u4ef6\u540d\u7684 Intent \u4e3a\u9690\u5f0f\u610f\u56fe\u3002 Android \u7cfb\u7edf\u4f1a\u6839\u636e\u9690\u5f0f\u610f\u56fe\u4e2d\u8bbe\u7f6e\u7684 \u52a8\u4f5c(action)\u3001\u7c7b\u522b(category)\u3001\u6570\u636e(URI \u548c\u6570\u636e\u7c7b\u578b)\u627e\u5230\u6700\u5408\u9002\u7684\u7ec4\u4ef6\u6765\u5904\u7406\u8fd9\u4e2a\u610f\u56fe\u3002"},{"ID":"171","typeID":"11","question":"ListView \u56fe\u7247\u5f02\u6b65\u52a0\u8f7d\u5b9e\u73b0\u601d\u8def","answer":"1)\u5148\u4ece\u5185\u5b58\u7f13\u5b58\u4e2d\u83b7\u53d6\u56fe\u7247\u663e\u793a(\u5185\u5b58\u7f13\u51b2)\r\n2)\u83b7\u53d6\u4e0d\u5230\u7684\u8bdd\u4ece SD \u5361\u91cc\u83b7\u53d6(SD \u5361\u7f13\u51b2,\u4ece SD \u5361\u83b7\u53d6\u56fe\u7247\u662f\u653e\u5728\u5b50\u7ebf\u7a0b\u91cc\u6267\u884c\u7684,\u5426\u5219\u5feb \u901f\u6ed1\u5c4f\u7684\u8bdd\u4f1a\u4e0d\u591f\u6d41\u7545)\r\n3)\u90fd\u83b7\u53d6\u4e0d\u5230\u7684\u8bdd\u4ece\u7f51\u7edc\u4e0b\u8f7d\u56fe\u7247\u5e76\u4fdd\u5b58\u5230 SD \u5361\u540c\u65f6\u52a0\u5165\u5185\u5b58\u5e76\u663e\u793a(\u89c6\u60c5\u51b5\u770b\u662f\u5426\u8981\u663e\u793a)"},{"ID":"170","typeID":"11","question":"ListView \u5206\u9875\u52a0\u8f7d\u5b9e\u73b0\u601d\u8def","answer":"\u5b9e\u73b0 OnScrollListener \u63a5\u53e3\u91cd\u5199 onScrollStateChanged \u548c onScroll \u65b9\u6cd5,\u4f7f\u7528 onscroll \u65b9\u6cd5 \u5b9e\u73b0\u201d\u6ed1\u52a8\u201c\u540e\u5904\u7406\u68c0\u67e5\u662f\u5426\u8fd8\u6709\u65b0\u7684\u8bb0\u5f55,\u5982\u679c\u6709,\u8c03\u7528 addFooterView,\u6dfb\u52a0\u8bb0\u5f55\u5230 adapter, adapter \u8c03\u7528 notifyDataSetChanged \u66f4\u65b0\u6570\u636e;\u5982\u679c\u6ca1\u6709\u8bb0\u5f55\u4e86,\u628a\u81ea\u5b9a\u4e49\u7684 mFooterView \u53bb \u6389\u3002\u4f7f\u7528 onScrollStateChanged \u53ef\u4ee5\u68c0\u6d4b\u662f\u5426\u6eda\u5230\u6700\u540e\u4e00\u884c\u4e14\u505c\u6b62\u6eda\u52a8\u7136\u540e\u6267\u884c\u52a0\u8f7d"},{"ID":"169","typeID":"11","question":"listview \u4f18\u5316\u7b56\u7565","answer":"1)\u5bf9 convetView \u8fdb\u884c\u5224\u7a7a,\u662f\u5f53 convertView \u4e0d\u4e3a\u7a7a\u7684\u65f6\u5019\u76f4\u63a5\u91cd\u65b0\u4f7f\u7528 convertView \u4ece\u800c\u51cf\u5c11\u4e86\u5f88\u591a\u4e0d\u5fc5\u8981\u7684 View \u7684\u521b\u5efa\r\n2)\u5b9a\u4e49\u4e00\u4e2a ViewHolder,\u5c06 convetView \u7684 tag \u8bbe\u7f6e\u4e3a ViewHolder,\u4e0d\u4e3a\u7a7a\u65f6\u91cd\u65b0\u4f7f\u7528\u5373\u53ef\r\n3)\u5f53 ListView \u52a0\u8f7d\u6570\u636e\u91cf\u8f83\u5927\u65f6\u53ef\u4ee5\u91c7\u7528\u5206\u9875\u52a0\u8f7d\u548c\u56fe\u7247\u5f02\u6b65\u52a0\u8f7d"},{"ID":"168","typeID":"11","question":"\u4ec0\u4e48\u662fANR\u5982\u4f55\u907f\u514d\u5b83?(Android\u7ebf\u7a0b\u95f4\u7684\u901a\u4fe1\u65b9\u5f0f)","answer":"ANR:Application Not Responding(\u5e94\u7528\u7a0b\u5e8f\u65e0\u54cd\u5e94).\u5f53\u51fa\u73b0\u4e0b\u5217\u60c5\u51b5\u65f6,Android\u5c31\u4f1a \u663e\u793aANR\u5bf9\u8bdd\u6846\u4e86:\u5bf9\u8f93\u5165\u4e8b\u4ef6(\u5982\u6309\u952e\u3001\u89e6\u6478\u5c4f\u4e8b\u4ef6)\u7684\u54cd\u5e94\u8d85\u8fc75\u79d2 \u610f\u5411\u63a5\u53d7\u5668 (intentReceiver)\u8d85\u8fc710\u79d2\u949f\u4ecd\u672a\u6267\u884c\u5b8c\u6bd5 Android \u5e94\u7528\u7a0b\u5e8f\u5b8c\u5168\u8fd0\u884c\u5728\u4e00\u4e2a\u72ec\u7acb\u7684\u7ebf\u7a0b\u4e2d (\u4f8b\u5982 main)\u3002\u8fd9\u5c31\u610f\u5473\u7740,\u4efb\u4f55\u5728\u4e3b\u7ebf\u7a0b\u4e2d\u8fd0\u884c\u7684,\u9700\u8981\u6d88\u8017\u5927\u91cf\u65f6\u95f4\u7684\u64cd\u4f5c\u90fd\u4f1a\u5f15\u53d1 ANR\u3002 \u89e3\u51b3\u65b9\u6848\u6709\u4e24\u79cd:\r\n1)AsyncTask \u5f02\u6b65\u4efb\u52a1\u4e2d,doInBackground()\u548c onPostExecute(Result)\u4e24\u4e2a\u65b9\u6cd5\u975e\u5e38\u91cd\u8981 doInBackground() \u8fd9\u4e2a\u65b9\u6cd5\u8fd0\u884c\u5728\u540e\u53f0\u7ebf\u7a0b\u4e2d,\u4e3b\u8981\u8d1f\u8d23\u6267\u884c\u90a3\u4e9b\u5f88\u8017\u65f6\u7684\u64cd\u4f5c,\u5982\u79fb\u52a8\u62a4\u7406 \u7cfb\u7edf\u4e2d\u7684\u7f51\u7edc\u8fde\u63a5\u3001\u89e3\u6790 XML \u7b49\u64cd\u4f5c\u3002\u8be5\u65b9\u6cd5\u5fc5\u987b\u91cd\u8f7d\u3002\r\nonPostExecute(Result) \u8fd9\u4e2a\u65b9\u6cd5\u4e5f\u8fd0\u884c\u4e8eUI\u7ebf\u7a0b,\u5728doInBackground(Params...)\u65b9\u6cd5\u6267\u884c\u540e \u8c03\u7528,\u8be5\u65b9\u6cd5\u7528\u4e8e\u5904\u7406\u540e\u53f0\u4efb\u52a1\u6267\u884c\u540e\u8fd4\u56de\u7684\u7ed3\u679c\u3002\r\n2) \u5b50 thread + handler"},{"ID":"167","typeID":"11","question":"Android \u4e2d\u7684\u4e94\u79cd\u5b58\u50a8\u65b9\u5f0f\u53ca\u5176\u5e94\u7528\u573a\u666f","answer":"1)SharedPreferences\r\n\u5b58\u50a8\u8def\u5f84:(data\/data\/packagename\/shares_prefs), \u8f7b\u91cf\u7ea7\u5b58\u50a8,\u4ee5\u952e\u503c\u5bf9\u7684\u5f62\u5f0f\u5b58\u50a8\u5728 xml \u4e2d,\u4e00\u822c\u7528\u6765\u4fdd\u5b58\u5e94\u7528\u4e2d\u7684\u8bbe\u7f6e\u5c5e\u6027\r\n2)\u6587\u4ef6\u5b58\u50a8 SD \u5361\u5b58\u50a8\u591a\u5a92\u4f53\u6587\u4ef6, \u6587\u4ef6\u7f13\u5b58\r\n3) Sqlite \u6570\u636e\u5e93 \u5b58\u50a8\u8def\u5f84:(data\/data\/packagename\/databases), \u4e00\u79cd\u5d4c\u5165\u5f0f\u6570\u636e\u5e93,\u652f\u6301 sql \u8bed\u8a00,\u5b58\u50a8\u5927\u91cf\u7ed3\u6784\u6027\u6570\u636e\r\n4)ContentProvider \u8fdb\u7a0b(\u5e94\u7528\u7a0b\u5e8f)\u95f4\u6570\u636e\u5171\u4eab,\u6570\u636e\u6e90\u53ef\u4ee5\u662f sqlite,\u4e5f\u53ef\u4ee5\u662f xml,\u76f8\u5173\u7c7b: ContentResolver(\u5185\u5bb9\u89e3\u6790\u5668), ContentObserver(\u6570\u636e \u89c2\u5bdf\u8005)\r\n5) \u7f51\u7edc\u5b58\u50a8 \u5929\u6c14\u6570\u636e\u7684 xml,json \u683c\u5f0f\u7b49\u7b49,\u901a\u8fc7 HttpUrlConnection,HttpClient,\u6216\u8005 SOAP \u534f\u8bae\u83b7\u53d6\u6570\u636e"},{"ID":"166","typeID":"11","question":"Android \u4e2d asset \u6587\u4ef6\u5939\u548c raw \u6587\u4ef6\u5939\u533a\u522b","answer":"res\/raw \u548c assets \u7684\u76f8\u540c\u70b9:\r\n\u4e24\u8005\u76ee\u5f55\u4e0b\u7684\u6587\u4ef6\u5728\u6253\u5305\u540e\u4f1a\u539f\u5c01\u4e0d\u52a8\u7684\u4fdd\u5b58\u5728 apk \u5305\u4e2d,\u4e0d\u4f1a\u88ab\u7f16\u8bd1\u6210\u4e8c\u8fdb\u5236\u3002\r\nres\/raw \u548c assets \u7684\u4e0d\u540c\u70b9:\r\n5\r\n1)res\/raw\u4e2d\u7684\u6587\u4ef6\u4f1a\u88ab\u6620\u5c04\u5230R.java\u6587\u4ef6\u4e2d,\u8bbf\u95ee\u7684\u65f6\u5019\u76f4\u63a5\u4f7f\u7528\u8d44\u6e90ID\u5373 R.raw.filename; assets \u6587\u4ef6\u5939\u4e0b\u7684\u6587\u4ef6\u4e0d\u4f1a\u88ab\u6620\u5c04\u5230 R.java \u4e2d,\u8bbf\u95ee\u7684\u65f6\u5019\u9700\u8981 AssetManager \u7c7b\u3002 2)res\/raw \u4e0d\u53ef\u4ee5\u6709\u76ee\u5f55\u7ed3\u6784,\u800c assets \u5219\u53ef\u4ee5\u6709\u76ee\u5f55\u7ed3\u6784,\u4e5f\u5c31\u662f assets \u76ee\u5f55\u4e0b\u53ef\u4ee5\u518d\u5efa \u7acb\u6587\u4ef6\u5939\r\n3)\u8bfb\u53d6\u6587\u4ef6\u8d44\u6e90\u4e3e\u4f8b:\r\n\u8bfb\u53d6 res\/raw \u4e0b\u7684\u6587\u4ef6\u8d44\u6e90,\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u83b7\u53d6\u8f93\u5165\u6d41\u6765\u8fdb\u884c\u5199\u64cd\u4f5c\r\nInputStream is = getResources().openRawResource(R.raw.filename);\r\n\u8bfb\u53d6 assets \u4e0b\u7684\u6587\u4ef6\u8d44\u6e90,\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u83b7\u53d6\u8f93\u5165\u6d41\u6765\u8fdb\u884c\u5199\u64cd\u4f5c\r\nAssetManager am = null;\r\nam = getAssets();\r\nInputStream is = am.open(\"filename\");"},{"ID":"165","typeID":"11","question":"activity \u5728\u5c4f\u5e55\u65cb\u8f6c\u65f6\u7684\u751f\u547d\u5468\u671f","answer":"\u4e0d\u8bbe\u7f6e Activity \u7684 android:configChanges \u65f6,\u5207\u5c4f\u4f1a\u91cd\u65b0\u8c03\u7528\u5404\u4e2a\u751f\u547d\u5468\u671f,\u5207\u6a2a\u5c4f\u65f6 \u4f1a\u6267\u884c\u4e00\u6b21,\u5207\u7ad6\u5c4f\u65f6\u4f1a\u6267\u884c\u4e24\u6b21;\u8bbe\u7f6e Activity \u7684 android:configChanges=\"orientation\" \u65f6,\u5207\u5c4f\u8fd8\u662f\u4f1a\u91cd\u65b0\u8c03\u7528\u5404\u4e2a\u751f\u547d\u5468\u671f,\u5207\u6a2a\u3001\u7ad6\u5c4f\u65f6\u53ea\u4f1a\u6267\u884c\u4e00\u6b21;\u8bbe\u7f6e Activity \u7684 android:configChanges=\"orientation|keyboardHidden\"\u65f6,\u5207\u5c4f\u4e0d\u4f1a\u91cd\u65b0\u8c03\u7528\u5404\u4e2a\u751f\u547d\u5468\u671f, \u53ea\u4f1a\u6267\u884c onConfigurationChanged \u65b9\u6cd5"},{"ID":"164","typeID":"11","question":"Android\u7684\u56db\u5927\u7ec4\u4ef6\u4f5c\u7528\u662f\u4ec0\u4e48\uff1f","answer":"Activity :\u5e94\u7528\u7a0b\u5e8f\u4e2d,\u4e00\u4e2a Activity \u901a\u5e38\u5c31\u662f\u4e00\u4e2a\u5355\u72ec\u7684\u5c4f\u5e55,\u5b83\u4e0a\u9762\u53ef\u4ee5\u663e\u793a\u4e00\u4e9b\u63a7\u4ef6\u4e5f \u53ef\u4ee5\u76d1\u542c\u5e76\u5904\u7406\u7528\u6237\u7684\u4e8b\u4ef6\u505a\u51fa\u54cd\u5e94\u3002Activity \u4e4b\u95f4\u901a\u8fc7 Intent \u8fdb\u884c\u901a\u4fe1\u3002\u2028Service \u670d\u52a1:\u4e00\u4e2a Service \u662f\u4e00\u6bb5\u957f\u751f\u547d\u5468\u671f\u7684,\u6ca1\u6709\u7528\u6237\u754c\u9762\u7684\u7a0b\u5e8f,\u53ef\u4ee5\u7528\u6765\u5f00\u53d1\u5982\u76d1\u63a7 \u7c7b\u7a0b\u5e8f\u3002\u2028BroadcastReceive \u5e7f\u64ad\u63a5\u6536\u5668:\u4f60\u7684\u5e94\u7528\u53ef\u4ee5\u4f7f\u7528\u5b83\u5bf9\u5916\u90e8\u4e8b\u4ef6\u8fdb\u884c\u8fc7\u6ee4\u53ea\u5bf9\u611f\u5174\u8da3\u7684\u5916\u90e8\u4e8b \u4ef6(\u5982\u5f53\u7535\u8bdd\u547c\u5165\u65f6,\u6216\u8005\u6570\u636e\u7f51\u7edc\u53ef\u7528\u65f6)\u8fdb\u884c\u63a5\u6536\u5e76\u505a\u51fa\u54cd\u5e94\u3002\u5e7f\u64ad\u63a5\u6536\u5668\u6ca1\u6709\u7528\u6237\u754c\u9762\u3002\u7136 \u800c,\u5b83\u4eec\u53ef\u4ee5\u542f\u52a8\u4e00\u4e2a activity \u6216 serice \u6765\u54cd\u5e94\u5b83\u4eec\u6536\u5230\u7684\u4fe1\u606f\u3002\u2028Content Provider \u5185\u5bb9\u63d0\u4f9b\u8005 :\u4e3b\u8981\u7528\u4e8e\u591a\u4e2a\u5e94\u7528\u95f4\u6570\u636e\u5171\u4eab\u3002\u8fd9\u4e9b\u6570\u636e\u53ef\u4ee5\u5b58\u50a8\u5728\u6587\u4ef6\u7cfb\u7edf \u4e2d\u6216 SQLite \u6570\u636e\u5e93\u3002"},{"ID":"163","typeID":"11","question":"Activity \u7684 onSaveInstanceState() \u548c onRestoreInstanceState()","answer":"Activity \u7684 onSaveInstanceState() \u548c onRestoreInstanceState()\u5e76\u4e0d\u662f\u751f\u547d\u5468\u671f\u65b9\u6cd5, \u5b83\u4eec\u4e0d\u540c\u4e8e onCreate()\u3001onPause()\u7b49\u751f\u547d\u5468\u671f\u65b9\u6cd5,\u5b83\u4eec\u5e76\u4e0d\u4e00\u5b9a\u4f1a\u88ab\u89e6\u53d1\u3002\u5f53\u5e94\u7528\u9047\u5230\u610f\u5916 \u60c5\u51b5(\u5982:\u5185\u5b58\u4e0d\u8db3\u3001\u7528\u6237\u76f4\u63a5\u6309 Home \u952e)\u7531\u7cfb\u7edf\u9500\u6bc1\u4e00\u4e2a Activity \u65f6,onSaveInstanceState() \u4f1a\u88ab\u8c03\u7528\u3002\u4f46\u662f\u5f53\u7528\u6237\u4e3b\u52a8\u53bb\u9500\u6bc1\u4e00\u4e2a Activity \u65f6,\u4f8b\u5982\u5728\u5e94\u7528\u4e2d\u6309\u8fd4\u56de\u952e, onSaveInstanceState()\u5c31\u4e0d\u4f1a\u88ab\u8c03\u7528\u3002\u56e0\u4e3a\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b,\u7528\u6237\u7684\u884c\u4e3a\u51b3\u5b9a\u4e86\u4e0d\u9700\u8981\u4fdd\u5b58 Activity \u7684\u72b6\u6001\u3002\u901a\u5e38 onSaveInstanceState()\u53ea\u9002\u5408\u7528\u4e8e\u4fdd\u5b58\u4e00\u4e9b\u4e34\u65f6\u6027\u7684\u72b6\u6001,\u800c onPause() \u9002\u5408\u7528\u4e8e\u6570\u636e\u7684\u6301\u4e45\u5316\u4fdd\u5b58\u3002 \u00a0\r\n\u53e6\u5916,\u5f53\u5c4f\u5e55\u7684\u65b9\u5411\u53d1\u751f\u4e86\u6539\u53d8, Activity \u4f1a\u88ab\u6467\u6bc1\u5e76\u4e14\u88ab\u91cd\u65b0\u521b\u5efa,\u5982\u679c\u4f60\u60f3\u5728 Activity \u88ab\u6467\u6bc1\u524d\u7f13\u5b58\u4e00\u4e9b\u6570\u636e,\u5e76\u4e14\u5728 Activity \u88ab\u91cd\u65b0\u521b\u5efa\u540e\u6062\u590d\u7f13\u5b58\u7684\u6570\u636e\u3002\u53ef\u4ee5\u91cd\u5199 Activity \u7684 onSaveInstanceState() \u548c onRestoreInstanceState()\u65b9\u6cd5\u3002"},{"ID":"162","typeID":"11","question":"Activity \u751f\u547d\u5468\u671f?\u4fdd\u5b58 activity \u7684\u4e00\u4e9b\u4fe1\u606f\u5728\u54ea\u4e2a\u751f\u547d\u5468\u671f\u65b9\u6cd5\u4e2d\u6a2a\u7ad6\u5c4f\u5207\u6362 activity \u7684\u751f\u547d\u5468\u671f","answer":"\u5171\u6709\u4e03\u4e2a\u5468\u671f\u51fd\u6570:\r\nvoid onCreate(Bundle savedInstanceState) \u7b2c\u4e00\u6b21\u521b\u5efa\u65f6\u8c03\u7528\r\nvoid onStart() \u88ab\u7528\u6237\u53ef\u89c1\u65f6\u8c03\u7528\r\nvoid onRestart() \u5f53 Activity \u5904\u4e8e stop \u72b6\u6001\u53c8\u88ab\u91cd\u65b0\u542f\u52a8\u65f6\u8c03\u7528\r\nvoid onResume() \u5f53\u83b7\u5f97\u7126\u70b9\u5373\u53ef\u4e0e\u7528\u6237\u4ea4\u4e92\u65f6\u8c03\u7528\r\nvoid onPause() \u5f53\u5931\u53bb\u7126\u70b9\u65f6\u8c03\u7528\r\nvoid onStop() \u5f53\u4e0d\u53ef\u89c1\u65f6\u8c03\u7528\r\nvoid onDestroy() \u5f53\u9500\u6bc1\u65f6\u8c03\u7528"},{"ID":"161","typeID":"11","question":"Android \u7684\u56db\u5927\u7ec4\u4ef6\u662f\u4ec0\u4e48?","answer":"Android \u6709\u56db\u5927\u7ec4\u4ef6:Activity\u3001Service\u3001Broadcast Receiver\u3001Content Provider\u3002"},{"ID":"160","typeID":"11","question":"android \u7cfb\u7edf\u67b6\u6784","answer":"1)\u5e94\u7528\u7a0b\u5e8f\u5c42 java \u8bed\u8a00 \u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1 \r\n2)\u5e94\u7528\u7a0b\u5e8f\u6846\u67b6\u5c42 java \u8bed\u8a00 OS \u5b9a\u5236 framework \u5c42\u5f00\u53d1\r\n3)\u7cfb\u7edf\u8fd0\u884c\u5e93\u5c42 C C++ \u5b9e\u73b0 so \u5e93\r\n4)Linux \u5185\u6838\u5c42"},{"ID":"159","typeID":"11","question":"\u5e7f\u64ad\u5982\u4f55\u8c03\u7528,\u6709\u4ec0\u4e48\u65b9\u5f0f,\u5404\u81ea\u7684\u533a\u522b,\u5b9e\u73b0\u5e7f\u64ad\u7684\u610f\u56fe\u662f\u4ec0\u4e48,\u54ea\u91cc\u7528\u5230","answer":"\u7a0b\u5e8f\u4e2d\u53d1\u9001\u5e7f\u64ad\u901a\u8fc7 sendBroadcastReceiver()\u5b9e\u73b0\r\n\u63a5\u6536\u5e7f\u64ad\u901a\u8fc7\u5b9a\u4e49\u4e00\u4e2a\u7c7b\u7ee7\u627f BroadcastReceiver \u5e76\u91cd\u5199 onReceive()\u65b9\u6cd5\u5b9e\u73b0 \u6ce8\u518c\u5e7f\u64ad\u6709\u4e24\u79cd\u65b9\u5f0f:\r\n\u7b2c\u4e00\u79cd\u9759\u6001\u65b9\u5f0f:\u5728\u6e05\u5355\u6587\u4ef6\u4e2d\u901a\u8fc7<receive>\u6807\u7b7e\u58f0\u660e\r\n\u7b2c\u4e8c\u79cd\u4ee3\u7801\u52a8\u6001\u65b9\u5f0f:\r\nIntentFilter filter = new IntentFilter(\"android.provider.Telephony.SMS_RECEIVED\"); IncomingSMSReceiver receiver = new IncomgSMSReceiver(); registerReceiver(receiver.filter);\r\n1)\u7b2c\u4e00\u79cd\u4e0d\u662f\u5e38\u9a7b\u578b\u5e7f\u64ad,\u4e5f\u5c31\u662f\u8bf4\u5e7f\u64ad\u8ddf\u968f activity \u7684\u751f\u547d\u5468\u671f\u3002\u6ce8\u610f: \u5728 activity \u7ed3\u675f \u524d,\u79fb\u9664\u5e7f\u64ad\u63a5\u6536\u5668\u3002\r\n2)\u7b2c\u4e8c\u79cd\u662f\u5e38\u9a7b\u578b,\u4e5f\u5c31\u662f\u8bf4\u5f53\u5e94\u7528\u7a0b\u5e8f\u5173\u95ed\u540e,\u5982\u679c\u6709\u4fe1\u606f\u5e7f\u64ad\u6765,\u7a0b\u5e8f\u4e5f\u4f1a\u88ab\u7cfb\u7edf\u8c03\u7528\u81ea \u52a8\u8fd0\u884c\u3002"},{"ID":"158","typeID":"11","question":"\u5e38\u7528\u8bbe\u8ba1\u6a21\u5f0f\u53ca\u5e94\u7528\u573a\u666f","answer":"\u5e38\u7528\u8bbe\u8ba1\u6a21\u5f0f\u53ca\u5e94\u7528\u573a\u666f,\u7528\u4e24\u79cd\u65b9\u5f0f\u5b9e\u73b0\u5355\u4f8b\u6a21\u5f0f,\u8981\u6c42\u7ebf\u7a0b\u5b89\u5168\r\n\u5e38\u7528\u8bbe\u8ba1\u6a21\u5f0f:\r\n\u5355\u4f8b\u6a21\u5f0f: Calendar \u5b9e\u4f8b\u7684\u83b7\u53d6\r\n\u9002\u914d\u5668\u6a21\u5f0f: Adapter \u4e3a ListView GridView \u7b49\u6dfb\u52a0\u6570\u636e\r\n\u5de5\u5382\u6a21\u5f0f: Spring IOC \u53cd\u8f6c\u63a7\u5236\r\n\u4ee3\u7406\u6a21\u5f0f: Spring AOP \u9762\u5411\u5207\u9762\u7f16\u7a0b\r\n\u89c2\u5bdf\u8005\u6a21\u5f0f: ContentObserver \u76d1\u542c\u5185\u5bb9\u6539\u53d8 (\u61d2\u6c49\u5f0f)\u7a0b\u5e8f\u6267\u884c\u8fc7\u7a0b\u4e2d\u9700\u8981\u8fd9\u4e2a\u7c7b\u7684\u5bf9\u8c61\u65f6\u518d\u5b9e\u4f8b\u5316\u8be5\u7c7b\u7684\u5bf9\u8c61"},{"ID":"157","typeID":"11","question":"sleep() \u4e0e wait()\u7684\u533a\u522b\uff1f","answer":"1\u8fd9\u4e24\u4e2a\u65b9\u6cd5\u6765\u81ea\u4e0d\u540c\u7684\u7c7b\u5206\u522b\u662f,sleep \u6765\u81ea Thread \u7c7b,\u548c wait \u6765\u81ea Object\r\n\u7c7b\u3002\r\n2\u6700\u4e3b\u8981\u662f sleep \u65b9\u6cd5\u6ca1\u6709\u91ca\u653e\u9501,\u800c wait \u65b9\u6cd5\u91ca\u653e\u4e86\u9501,\u4f7f\u5f97\u5176\u4ed6\u7ebf\u7a0b\u53ef \u4ee5\u4f7f\u7528\u540c\u6b65\u63a7\u5236\u5757\u6216\u8005\u65b9\u6cd5\u3002sleep \u4e0d\u51fa\u8ba9\u7cfb\u7edf\u8d44\u6e90;wait \u662f\u8fdb\u5165\u7ebf\u7a0b\u7b49\u5f85\u6c60 \u7b49\u5f85,\u51fa\u8ba9\u7cfb\u7edf\u8d44\u6e90,\u5176\u4ed6\u7ebf\u7a0b\u53ef\u4ee5\u5360\u7528 CPU\u3002\u4e00\u822c wait \u4e0d\u4f1a\u52a0\u65f6\u95f4\u9650\u5236, \u56e0\u4e3a\u5982\u679c wait \u7ebf\u7a0b\u7684\u8fd0\u884c\u8d44\u6e90\u4e0d\u591f,\u518d\u51fa\u6765\u4e5f\u6ca1\u7528,\u8981\u7b49\u5f85\u5176\u4ed6\u7ebf\u7a0b\u8c03\u7528 notify\/notifyAll \u5524\u9192\u7b49\u5f85\u6c60\u4e2d\u7684\u6240\u6709\u7ebf\u7a0b,\u624d\u4f1a\u8fdb\u5165\u5c31\u7eea\u961f\u5217\u7b49\u5f85 OS \u5206\u914d\u7cfb \u7edf\u8d44\u6e90\u3002sleep(milliseconds)\u53ef\u4ee5\u7528\u65f6\u95f4\u6307\u5b9a\u4f7f\u5b83\u81ea\u52a8\u5524\u9192\u8fc7\u6765,\u5982\u679c\u65f6\u95f4\u4e0d\u5230 \u53ea\u80fd\u8c03\u7528 interrupt()\u5f3a\u884c\u6253\u65ad\u3002\r\n"},{"ID":"156","typeID":"11","question":"\u7ebf\u7a0b\u7684\u5b9e\u73b0\u65b9\u5f0f","answer":"\u7ebf\u7a0b\u7684\u5b9e\u73b0\u6709\u4e24\u79cd\u65b9\u5f0f,\u4e00\u662f\u7ee7\u627f Thread \u7c7b,\u4e8c\u662f\u5b9e\u73b0 Runnable \u63a5\u53e3"},{"ID":"155","typeID":"11","question":"\u7ebf\u7a0b\u6709\u51e0\u79cd\u72b6\u6001,\u5206\u522b\u662f\u54ea\u4e9b(\u8c03\u7528 run()\u548c\u8c03\u7528 start()\u7684\u533a\u522b)","answer":"1)\u65b0\u5efa\u72b6\u6001(New):\u65b0\u521b\u5efa\u4e86\u4e00\u4e2a\u7ebf\u7a0b\u5bf9\u8c61\u3002 2)\u5c31\u7eea\u72b6\u6001(Runnable):\u7ebf\u7a0b\u5bf9\u8c61\u521b\u5efa\u540e,\u5176\u4ed6\u7ebf\u7a0b\u8c03\u7528\u4e86\u8be5\u5bf9\u8c61\u7684 start()\u65b9\u6cd5\u3002\u8be5\u72b6\u6001\u7684\r\n\u7ebf\u7a0b\u4f4d\u4e8e\u53ef\u8fd0\u884c\u7ebf\u7a0b\u6c60\u4e2d,\u53d8\u5f97\u53ef\u8fd0\u884c,\u7b49\u5f85\u83b7\u53d6 CPU \u7684\u4f7f\u7528\u6743\u3002 3)\u8fd0\u884c\u72b6\u6001(Running):\u5c31\u7eea\u72b6\u6001\u7684\u7ebf\u7a0b\u83b7\u53d6\u4e86 CPU,\u6267\u884c run()\u65b9\u6cd5\u3002 4)\u963b\u585e\u72b6\u6001(Blocked):\u963b\u585e\u72b6\u6001\u662f\u7ebf\u7a0b\u56e0\u4e3a\u67d0\u79cd\u539f\u56e0\u653e\u5f03 CPU \u4f7f\u7528\u6743,\u6682\u65f6\u505c\u6b62\u8fd0\u884c\u3002\u76f4\r\n\u5230\u7ebf\u7a0b\u8fdb\u5165\u5c31\u7eea\u72b6\u6001,\u624d\u6709\u673a\u4f1a\u8f6c\u5230\u8fd0\u884c\u72b6\u6001\u3002\u963b\u585e\u7684\u60c5\u51b5\u5206\u4e09\u79cd: 1\u7b49\u5f85\u963b\u585e:\u8fd0\u884c\u7684\u7ebf\u7a0b\u6267\u884c wait()\u65b9\u6cd5,JVM \u4f1a\u628a\u8be5\u7ebf\u7a0b\u653e\u5165\u7b49\u5f85\u6c60\u4e2d\u3002 2\u540c\u6b65\u963b\u585e:\u8fd0\u884c\u7684\u7ebf\u7a0b\u5728\u83b7\u53d6\u5bf9\u8c61\u7684\u540c\u6b65\u9501\u65f6,\u82e5\u8be5\u540c\u6b65\u9501\u88ab\u522b\u7684\u7ebf\u7a0b\u5360\u7528,\u5219 JVM \u4f1a\u628a\u8be5 \u7ebf\u7a0b\u653e\u5165\u9501\u6c60\u4e2d\u3002\r\n3\u5176\u4ed6\u963b\u585e:\u8fd0\u884c\u7684\u7ebf\u7a0b\u6267\u884c sleep()\u6216 join()\u65b9\u6cd5,\u6216\u8005\u53d1\u51fa\u4e86 I\/O \u8bf7\u6c42\u65f6,JVM \u4f1a\u628a\u8be5\u7ebf\u7a0b\u7f6e \u4e3a\u963b\u585e\u72b6\u6001\u3002\u5f53 sleep()\u72b6\u6001\u8d85\u65f6\u3001join()\u7b49\u5f85\u7ebf\u7a0b\u7ec8\u6b62\u6216\u8005\u8d85\u65f6\u3001\u6216\u8005 I\/O \u5904\u7406\u5b8c\u6bd5\u65f6,\u7ebf\u7a0b\u91cd \u65b0\u8f6c\u5165\u5c31\u7eea\u72b6\u6001\u3002\r\n5)\u6b7b\u4ea1\u72b6\u6001(Dead):\u7ebf\u7a0b\u6267\u884c\u5b8c\u4e86\u6216\u8005\u56e0\u5f02\u5e38\u9000\u51fa\u4e86 run()\u65b9\u6cd5,\u8be5\u7ebf\u7a0b\u7ed3\u675f\u751f\u547d\u5468\u671f\u3002\r\n\ufffc\u5f53\u8c03\u7528 start \u65b9\u6cd5\u7684\u65f6\u5019,\u8be5\u7ebf\u7a0b\u5c31\u8fdb\u5165\u5c31\u7eea\u72b6\u6001\u3002\u7b49\u5f85 CPU \u8fdb\u884c\u8c03\u5ea6\u6267\u884c,\u6b64\u65f6\u8fd8\u6ca1\u6709\u771f\u6b63\u6267 \u884c\u7ebf\u7a0b\u3002\r\n\u5f53\u8c03\u7528 run \u65b9\u6cd5\u7684\u65f6\u5019,\u662f\u5df2\u7ecf\u88ab CP U \u8fdb\u884c\u8c03\u5ea6,\u6267\u884c\u7ebf\u7a0b\u7684\u4e3b\u8981\u4efb\u52a1\u3002"},{"ID":"154","typeID":"11","question":"\u62bd\u8c61\u7c7b\u4e0e\u63a5\u53e3\u7684\u533a\u522b(abstract \u4e0e interface \u7684\u533a\u522b)","answer":"abstract \u53ef\u4ee5\u4fee\u9970\u62bd\u8c61\u65b9\u6cd5,\u800c\u4e00\u4e2a\u7c7b\u53ea\u8981\u6709\u4e00\u4e2a\u62bd\u8c61\u65b9\u6cd5,\u5c31\u5fc5\u987b\u7528 abstract \u5b9a\u4e49\u8be5\u7c7b,\r\n\u62bd\u8c61\u7c7b,\u88ab\u7ee7\u627f,\u5b9e\u73b0\u5b83\u91cc\u9762\u7684\u65b9\u6cd5,\u53ef\u4ee5\u53ea\u6709\u666e\u901a\u65b9\u6cd5"},{"ID":"153","typeID":"11","question":"\u5b9e\u73b0\u4e00\u4e2a\u5b57\u7b26\u4e32\u5012\u5e8f","answer":"\u5b57\u7b26\u4e32\u201cabcde\u201d\u901a\u8fc7\u5199\u4e00\u4e2a\u51fd\u6570\u4e0d\u8ba9\u8c03\u7528\u7b2c\u4e09\u65b9\u7684\u5b57\u7b26\u4e32,\u5b9e\u73b0\u4e00\u4e2a\u5b57\u7b26\u4e32\u5012\u5e8f,\u6bd4\u5982\u5b57\u7b26\u4e32 \u201cabcde\u201d \u53d8\u6210\u201cedcba\u201d\r\n\u7b54: String src = \"ABCDEF \";\r\nString dst = new StringBuffer(src).reverse().toString();"},{"ID":"152","typeID":"11","question":"String \u548cStringBuffer\u7684\u533a\u522b","answer":"STRING\u7684\u957f\u5ea6\u662f\u4e0d\u53ef\u53d8\u7684\uff0cSTRINGBUFFER\u7684\u957f\u5ea6\u662f\u53ef\u53d8\u7684\u3002\u5982\u679c\u4f60\u5bf9\u5b57\u7b26\u4e32\u4e2d\u7684\u5185\u5bb9\u7ecf\u5e38\u8fdb\u884c\u64cd\u4f5c\uff0c\u7279\u522b\u662f\u5185\u5bb9\u8981\u4fee\u6539\u65f6\uff0c\u90a3\u4e48\u4f7f\u7528StringBuffer\uff0c\u5982\u679c\u6700\u540e\u9700\u8981String\uff0c\u90a3\u4e48\u4f7f\u7528StringBuffer\uff08\u7f13\u5b58\uff09\u7684toString()\u65b9\u6cd5\u3002 \r\nStringBuilder\uff1a\u8282\u7ea6\u5185\u5b58\uff0c\u521b\u5efa\u5b57\u7b26\u4e32\uff1b\r\n"},{"ID":"151","typeID":"11","question":"Overload\u548cOverride\u7684\u533a\u522b","answer":"Overloaded\u7684\u65b9\u6cd5\u662f\u5426\u53ef\u4ee5\u6539\u53d8\u8fd4\u56de\u503c\u7684\u7c7b\u578b?\r\n\u65b9\u6cd5\u7684\u91cd\u5199Overriding\u548c\u91cd\u8f7dOverloading\u662fJava\u591a\u6001\u6027\u7684\u4e0d\u540c\u8868\u73b0\u3002\u91cd\u5199Overriding\u662f\u7236\u7c7b\u4e0e\u5b50\u7c7b\u4e4b\u95f4\u591a\u6001\u6027\u7684\u4e00\u79cd\u8868\u73b0\uff0c\u91cd\u8f7dOverloading\u662f\u4e00\u4e2a\u7c7b\u4e2d\u591a\u6001\u6027\u7684\u4e00\u79cd\u8868\u73b0\u3002\u5982\u679c\u5728\u5b50\u7c7b\u4e2d\u5b9a\u4e49\u67d0\u65b9\u6cd5\u4e0e\u5176\u7236\u7c7b\u6709\u76f8\u540c\u7684\u540d\u79f0\u548c\u53c2\u6570\uff0c\u6211\u4eec\u8bf4\u8be5\u65b9\u6cd5\u88ab\u91cd\u5199 (Overriding)\u3002\u5b50\u7c7b\u7684\u5bf9\u8c61\u4f7f\u7528\u8fd9\u4e2a\u65b9\u6cd5\u65f6\uff0c\u5c06\u8c03\u7528\u5b50\u7c7b\u4e2d\u7684\u5b9a\u4e49\uff0c\u5bf9\u5b83\u800c\u8a00\uff0c\u7236\u7c7b\u4e2d\u7684\u5b9a\u4e49\u5982\u540c\u88ab\"\u5c4f\u853d\"\u4e86\u3002\u5982\u679c\u5728\u4e00\u4e2a\u7c7b\u4e2d\u5b9a\u4e49\u4e86\u591a\u4e2a\u540c\u540d\u7684\u65b9\u6cd5\uff0c\u5b83\u4eec\u6216\u6709\u4e0d\u540c\u7684\u53c2\u6570\u4e2a\u6570\u6216\u6709\u4e0d\u540c\u7684\u53c2\u6570\u7c7b\u578b\uff0c\u5219\u79f0\u4e3a\u65b9\u6cd5\u7684\u91cd\u8f7d(Overloading)\u3002Overloaded\u7684\u65b9\u6cd5\u662f\u53ef\u4ee5\u6539\u53d8\u8fd4\u56de\u503c\u7684\u7c7b\u578b\u3002\r\n"},{"ID":"54","typeID":"11","question":"swtich\u662f\u5426\u80fd\u4f5c\u7528\u5728byte\u4e0a\uff0c\u662f\u5426\u80fd\u4f5c\u7528\u5728long\u4e0a\uff0c\u662f\u5426\u80fd\u4f5c\u7528\u5728String\u4e0a","answer":"witch\uff08expr1\uff09\u4e2d\uff0cexpr1\u662f\u4e00\u4e2a\u6574\u6570\u8868\u8fbe\u5f0f\u3002\u56e0\u6b64\u4f20\u9012\u7ed9 switch \u548c case \u8bed\u53e5\u7684\u53c2\u6570\u5e94\u8be5\u662f int\u3001 short\u3001 char \u6216\u8005 byte\u3002long,string \u90fd\u4e0d\u80fd\u4f5c\u7528\u4e8eswtich"},{"ID":"53","typeID":"11","question":"ArrayList\u548cVector\u7684\u533a\u522b,HashMap\u548cHashtable\u7684\u533a\u522b","answer":"\u5c31ArrayList\u4e0eVector\u4e3b\u8981\u4ece\u4e8c\u65b9\u9762\u6765\u8bf4.\r\n\u4e00.\u540c\u6b65\u6027:Vector\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u662f\u540c\u6b65\u7684\uff0c\u800cArrayList\u662f\u7ebf\u7a0b\u5e8f\u4e0d\u5b89\u5168\u7684\uff0c\u4e0d\u662f\u540c\u6b65\u7684\r\n\u4e8c.\u6570\u636e\u589e\u957f:\u5f53\u9700\u8981\u589e\u957f\u65f6,Vector\u9ed8\u8ba4\u589e\u957f\u4e3a\u539f\u6765\u4e00\u57f9\uff0c\u800cArrayList\u5374\u662f\u539f\u6765\u7684\u4e00\u534a\r\n\u5c31HashMap\u4e0eHashTable\u4e3b\u8981\u4ece\u4e09\u65b9\u9762\u6765\u8bf4\u3002\r\n\u4e00.\u5386\u53f2\u539f\u56e0:Hashtable\u662f\u57fa\u4e8e\u9648\u65e7\u7684Dictionary\u7c7b\u7684\uff0cHashMap\u662fJava 1.2\u5f15\u8fdb\u7684Map\u63a5\u53e3\u7684\u4e00\u4e2a\u5b9e\u73b0\r\n\u4e8c.\u540c\u6b65\u6027:Hashtable\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u662f\u540c\u6b65\u7684\uff0c\u800cHashMap\u662f\u7ebf\u7a0b\u5e8f\u4e0d\u5b89\u5168\u7684\uff0c\u4e0d\u662f\u540c\u6b65\u7684\r\n\u4e09.\u503c\uff1a\u53ea\u6709HashMap\u53ef\u4ee5\u8ba9\u4f60\u5c06\u7a7a\u503c\u4f5c\u4e3a\u4e00\u4e2a\u8868\u7684\u6761\u76ee\u7684key\u6216value "},{"ID":"52","typeID":"11","question":"\u62bd\u8c61\u7c7b\u4e0e\u63a5\u53e3\uff1f","answer":"\u62bd\u8c61\u7c7b\u4e0e\u63a5\u53e3\u90fd\u7528\u4e8e\u62bd\u8c61\uff0c\u4f46\u662f\u62bd\u8c61\u7c7b(JAVA\u4e2d)\u53ef\u4ee5\u6709\u81ea\u5df1\u7684\u90e8\u5206\u5b9e\u73b0\uff0c\u800c\u63a5\u53e3\u5219\u5b8c\u5168\u662f\u4e00\u4e2a\u6807\u8bc6(\u540c\u65f6\u6709\u591a\u91cd\u7ee7\u627f\u7684\u529f\u80fd)\u3002 \r\nJAVA\u7c7b\u5b9e\u73b0\u5e8f\u4f8b\u5316\u7684\u65b9\u6cd5\u662f\u5b9e\u73b0java.io.Serializable\u63a5\u53e3\r\nCollection\u6846\u67b6\u4e2d\u5b9e\u73b0\u6bd4\u8f83\u8981\u5b9e\u73b0Comparable \u63a5\u53e3\u548c Comparator \u63a5\u53e3"},{"ID":"51","typeID":"11","question":"STRING\u4e0eSTRINGBUFFER\u7684\u533a\u522b","answer":"STRING\u7684\u957f\u5ea6\u662f\u4e0d\u53ef\u53d8\u7684\uff0cSTRINGBUFFER\u7684\u957f\u5ea6\u662f\u53ef\u53d8\u7684\u3002\u5982\u679c\u4f60\u5bf9\u5b57\u7b26\u4e32\u4e2d\u7684\u5185\u5bb9\u7ecf\u5e38\u8fdb\u884c\u64cd\u4f5c\uff0c\u7279\u522b\u662f\u5185\u5bb9\u8981\u4fee\u6539\u65f6\uff0c\u90a3\u4e48\u4f7f\u7528StringBuffer\uff0c\u5982\u679c\u6700\u540e\u9700\u8981String\uff0c\u90a3\u4e48\u4f7f\u7528StringBuffer\u7684toString()\u65b9\u6cd5"},{"ID":"50","typeID":"11","question":"\u8c08\u8c08final, finally, finalize?","answer":"final\u662f\u4fee\u9970\u7b26\uff08\u5173\u952e\u5b57\uff09\u5982\u679c\u4e00\u4e2a\u7c7b\u88ab\u58f0\u660e\u4e3afinal\uff0c\u610f\u5473\u7740\u5b83\u4e0d\u80fd\u518d\u6d3e\u751f\u51fa\u65b0\u7684\u5b50\u7c7b\uff0c\u4e0d\u80fd\u4f5c\u4e3a\u7236\u7c7b\u88ab\u7ee7\u627f\u3002\u56e0\u6b64\u4e00\u4e2a\u7c7b\u4e0d\u80fd\u65e2\u88ab\u58f0\u660e\u4e3a abstract\uff0c\u53c8\u88ab\u58f0\u660e\u4e3afinal.\u5c06\u53d8\u91cf\u6216\u65b9\u6cd5\u58f0\u660e\u4e3afinal\uff0c\u53ef\u4ee5\u4fdd\u8bc1\u5b83\u4eec\u5728\u4f7f\u7528\u4e2d\u4e0d\u88ab\u6539\u53d8\u3002\u88ab\u58f0\u660e\u4e3afinal\u7684\u53d8\u91cf\u5fc5\u987b\u5728\u58f0\u660e\u65f6\u7ed9\u5b9a\u521d\u503c\uff0c\u800c\u5728\u4ee5\u540e\u7684\u5f15\u7528\u4e2d\u53ea\u80fd\u8bfb\u53d6\uff0c\u4e0d\u53ef\u4fee\u6539\u3002\u88ab\u58f0\u660e\u4e3afinal\u7684\u65b9\u6cd5\u4e5f\u540c\u6837\u53ea\u80fd\u4f7f\u7528\uff0c\u4e0d\u80fd\u91cd\u8f7d\u3002Finally\u662f\u5728\u5f02\u5e38\u5904\u7406\u65f6\u63d0\u4f9b finally \u5757\u6765\u6267\u884c\u4efb\u4f55\u6e05\u9664\u64cd\u4f5c\u3002\u5982\u679c\u629b\u51fa\u4e00\u4e2a\u5f02\u5e38\uff0c\u90a3\u4e48\u76f8\u5339\u914d\u7684 catch \u5b50\u53e5\u5c31\u4f1a\u6267\u884c\uff0c\u7136\u540e\u63a7\u5236\u5c31\u4f1a\u8fdb\u5165 finally \u5757\uff08\u5982\u679c\u6709\u7684\u8bdd\uff09\uff0c\u53ea\u8981\u6709finally\u8bed\u53e5\u5757\uff0c\u65e0\u8bba\u7a0b\u5e8f\u5982\u4f55\u8fd0\u884c\uff0c\u5b83\u90fd\u5fc5\u7136\u88ab\u6267\u884c\u5230\u3002"},{"ID":"49","typeID":"11","question":"error\u548cexception\u6709\u4ec0\u4e48\u533a\u522b","answer":"error \u8868\u793a\u6062\u590d\u4e0d\u662f\u4e0d\u53ef\u80fd\u4f46\u5f88\u56f0\u96be\u7684\u60c5\u51b5\u4e0b\u7684\u4e00\u79cd\u4e25\u91cd\u95ee\u9898\u3002\u6bd4\u5982\u8bf4\u5185\u5b58\u6ea2\u51fa\u3002\u4e0d\u53ef\u80fd\u6307\u671b\u7a0b\u5e8f\u80fd\u5904\u7406\u8fd9\u6837\u7684\u60c5\u51b5\r\n    exception \u8868\u793a\u4e00\u79cd\u8bbe\u8ba1\u6216\u5b9e\u73b0\u95ee\u9898\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u8868\u793a\u5982\u679c\u7a0b\u5e8f\u8fd0\u884c\u6b63\u5e38\uff0c\u4ece\u4e0d\u4f1a\u53d1\u751f\u7684\u60c5\u51b5"},{"ID":"48","typeID":"11","question":"Set\u91cc\u7684\u5143\u7d20\u662f\u4e0d\u80fd\u91cd\u590d\u7684\uff0c\u90a3\u4e48\u7528\u4ec0\u4e48\u65b9\u6cd5\u6765\u533a\u5206\u91cd\u590d\u4e0e\u5426\u5462? \u662f\u7528==\u8fd8\u662fequals()? \u5b83\u4eec\u6709\u4f55\u533a\u522b","answer":"Set\u91cc\u7684\u5143\u7d20\u662f\u4e0d\u80fd\u91cd\u590d\u7684\uff0c\u90a3\u4e48\u7528iterator()\u65b9\u6cd5\u6765\u533a\u5206\u91cd\u590d\u4e0e\u5426\u3002equals()\u662f\u5224\u8bfb\u4e24\u4e2aSet\u662f\u5426\u76f8\u7b49\r\n    equals()\u548c==\u65b9\u6cd5\u51b3\u5b9a\u5f15\u7528\u503c\u662f\u5426\u6307\u5411\u540c\u4e00\u5bf9\u8c61equals()\u5728\u7c7b\u4e2d\u88ab\u8986\u76d6\uff0c\u4e3a\u7684\u662f\u5f53\u4e24\u4e2a\u5206\u79bb\u7684\u5bf9\u8c61\u7684\u5185\u5bb9\u548c\u7c7b\u578b\u76f8\u914d\u7684\u8bdd\uff0c\u8fd4\u56de\u771f\u503c"},{"ID":"47","typeID":"11","question":"Overload\u548cOverride\u7684\u533a\u522b\u3002Overloaded\u7684\u65b9\u6cd5\u662f\u5426\u53ef\u4ee5\u6539\u53d8\u8fd4\u56de\u503c\u7684\u7c7b\u578b","answer":"\u65b9\u6cd5\u7684\u91cd\u5199Overriding\u548c\u91cd\u8f7dOverloading\u662fJava\u591a\u6001\u6027\u7684\u4e0d\u540c\u8868\u73b0\u3002\u91cd\u5199Overriding\u662f\u7236\u7c7b\u4e0e\u5b50\u7c7b\u4e4b\u95f4\u591a\u6001\u6027\u7684\u4e00\u79cd\u8868\u73b0\uff0c\u91cd\u8f7dOverloading\u662f\u4e00\u4e2a\u7c7b\u4e2d\u591a\u6001\u6027\u7684\u4e00\u79cd\u8868\u73b0\u3002\u5982 \u679c\u5728\u5b50\u7c7b\u4e2d\u5b9a\u4e49\u67d0\u65b9\u6cd5\u4e0e\u5176\u7236\u7c7b\u6709\u76f8\u540c\u7684\u540d\u79f0\u548c\u53c2\u6570\uff0c\u6211\u4eec\u8bf4\u8be5\u65b9\u6cd5\u88ab\u91cd\u5199 (Overriding)\u3002\u5b50\u7c7b\u7684\u5bf9\u8c61\u4f7f\u7528\u8fd9\u4e2a\u65b9\u6cd5\u65f6\uff0c\u5c06\u8c03\u7528\u5b50\u7c7b\u4e2d\u7684\u5b9a\u4e49\uff0c\u5bf9\u5b83 \u800c\u8a00\uff0c\u7236\u7c7b\u4e2d\u7684\u5b9a\u4e49\u5982\u540c\u88ab\"\u5c4f\u853d\"\u4e86\u3002\u5982\u679c\u5728\u4e00\u4e2a\u7c7b\u4e2d\u5b9a\u4e49\u4e86\u591a\u4e2a\u540c\u540d\u7684\u65b9\u6cd5\uff0c\u5b83\u4eec\u6216\u6709\u4e0d\u540c\u7684\u53c2\u6570\u4e2a\u6570\u6216\u6709\u4e0d\u540c\u7684\u53c2\u6570\u7c7b\u578b\uff0c\u5219\u79f0\u4e3a\u65b9\u6cd5\u7684\u91cd\u8f7d (Overloading)\u3002Overloaded\u7684\u65b9\u6cd5\u662f\u53ef\u4ee5\u6539\u53d8\u8fd4\u56de\u503c\u7684\u7c7b\u578b"},{"ID":"46","typeID":"11","question":"\u6570\u7ec4\u6709\u6ca1\u6709length()\u8fd9\u4e2a\u65b9\u6cd5? String\u6709\u6ca1\u6709length()\u8fd9\u4e2a\u65b9\u6cd5","answer":"\u6570\u7ec4\u6ca1\u6709length()\u8fd9\u4e2a\u65b9\u6cd5\uff0c\u6709length\u7684\u5c5e\u6027\u3002String\u6709length()\u8fd9\u4e2a\u65b9\u6cd5"},{"ID":"45","typeID":"11","question":"short s1 = 1; s1 = s1 + 1;\u6709\u4ec0\u4e48\u9519? short s1 = 1; s1 += 1;\u6709\u4ec0\u4e48\u9519","answer":"short s1 = 1; s1 = s1 + 1; \uff08s1+1\u8fd0\u7b97\u7ed3\u679c\u662fint\u578b\uff0c\u9700\u8981\u5f3a\u5236\u8f6c\u6362\u7c7b\u578b\uff09short s1 = 1; s1 += 1;\uff08\u53ef\u4ee5\u6b63\u786e\u7f16\u8bd1\uff09"},{"ID":"44","typeID":"11","question":"Math.round(11.5)\u7b49\u65bc\u591a\u5c11? Math.round(-11.5)\u7b49\u65bc\u591a\u5c11","answer":" Math.round(11.5)==12;Math.round(-11.5)==-11;round\u65b9\u6cd5\u8fd4\u56de\u4e0e\u53c2\u6570\u6700\u63a5\u8fd1\u7684\u957f\u6574\u6570\uff0c\u53c2\u6570\u52a01\/2\u540e\u6c42\u5176floor"},{"ID":"43","typeID":"11","question":"String s = new String(\"xyz\");\u521b\u5efa\u4e86\u51e0\u4e2aString Object","answer":"\u4e24\u4e2a\uff0c\u4e00\u4e2a\u5b57\u7b26\u5bf9\u8c61\uff0c\u4e00\u4e2a\u5b57\u7b26\u5bf9\u8c61\u5f15\u7528\u5bf9\u8c61"},{"ID":"42","typeID":"11","question":"\u4ec0\u4e48\u65f6\u5019\u7528assert?","answer":"\uff1aassertion(\u65ad\u8a00)\u5728\u8f6f\u4ef6\u5f00\u53d1\u4e2d\u662f\u4e00\u79cd\u5e38\u7528\u7684\u8c03\u8bd5\u65b9\u5f0f\uff0c\u5f88\u591a\u5f00\u53d1\u8bed\u8a00\u4e2d\u90fd\u652f\u6301\u8fd9\u79cd\u673a\u5236\u3002\u5728\u5b9e\u73b0\u4e2d\uff0cassertion\u5c31\u662f\u5728\u7a0b\u5e8f\u4e2d\u7684\u4e00\u6761\u8bed\u53e5\uff0c\u5b83\u5bf9\u4e00\u4e2aboolean\u8868\u8fbe\u5f0f\u8fdb\u884c\u68c0\u67e5\uff0c\u4e00\u4e2a\u6b63\u786e\u7a0b\u5e8f\u5fc5\u987b\u4fdd\u8bc1\u8fd9\u4e2aboolean\u8868\u8fbe\u5f0f\u7684\u503c\u4e3atrue\uff1b\u5982\u679c\u8be5\u503c\u4e3afalse\uff0c\u8bf4\u660e\u7a0b\u5e8f\u5df2\u7ecf\u5904\u4e8e\u4e0d\u6b63\u786e\u7684\u72b6\u6001\u4e0b\uff0c\u7cfb\u7edf\u5c06\u7ed9\u51fa\u8b66\u544a\u6216\u9000\u51fa\u3002\u4e00\u822c\u6765\u8bf4\uff0cassertion\u7528\u4e8e\u4fdd\u8bc1\u7a0b\u5e8f\u6700\u57fa\u672c\u3001\u5173\u952e\u7684\u6b63\u786e\u6027\u3002assertion\u68c0\u67e5\u901a\u5e38\u5728\u5f00\u53d1\u548c\u6d4b\u8bd5\u65f6\u5f00\u542f\u3002\u4e3a\u4e86\u63d0\u9ad8\u6027\u80fd\uff0c\u5728\u8f6f\u4ef6\u53d1\u5e03\u540e\uff0cassertion\u68c0\u67e5\u901a\u5e38\u662f\u5173\u95ed\u7684"},{"ID":"41","typeID":"11","question":"Collection \u548c Collections\u7684\u533a\u522b?","answer":"Collection\u662f\u96c6\u5408\u7c7b\u7684\u4e0a\u7ea7\u63a5\u53e3\uff0c\u7ee7\u627f\u4e0e\u4ed6\u7684\u63a5\u53e3\u4e3b\u8981\u6709Set \u548cList.\r\nCollections\u662f\u9488\u5bf9\u96c6\u5408\u7c7b\u7684\u4e00\u4e2a\u5e2e\u52a9\u7c7b\uff0c\u4ed6\u63d0\u4f9b\u4e00\u7cfb\u5217\u9759\u6001\u65b9\u6cd5\u5b9e\u73b0\u5bf9\u5404\u79cd\u96c6\u5408\u7684\u641c\u7d22\u3001\u6392\u5e8f\u3001\u7ebf\u7a0b\u5b89\u5168\u5316\u7b49\u64cd\u4f5c"},{"ID":"40","typeID":"11","question":"&\u548c&&\u7684\u533a\u522b","answer":"&\u662f\u4f4d\u8fd0\u7b97\u7b26\uff0c\u8868\u793a\u6309\u4f4d\u4e0e\u8fd0\u7b97\uff0c&&\u662f\u903b\u8f91\u8fd0\u7b97\u7b26\uff0c\u8868\u793a\u903b\u8f91\u4e0e\uff08and\uff09"},{"ID":"39","typeID":"11","question":"Static Nested Class \u548c Inner Class\u7684\u4e0d\u540c","answer":"Nested Class \uff08\u4e00\u822c\u662fC++\u7684\u8bf4\u6cd5\uff09\uff0cInner Class (\u4e00\u822c\u662fJAVA\u7684\u8bf4\u6cd5)\u3002Java\u5185\u90e8\u7c7b\u4e0eC++\u5d4c\u5957\u7c7b\u6700\u5927\u7684\u4e0d\u540c\u5c31\u5728\u4e8e\u662f\u5426\u6709\u6307\u5411\u5916\u90e8\u7684\u5f15\u7528\u4e0a\u3002\u6ce8\uff1a \u9759\u6001\u5185\u90e8\u7c7b\uff08Inner Class\uff09\u610f\u5473\u77401\u521b\u5efa\u4e00\u4e2astatic\u5185\u90e8\u7c7b\u7684\u5bf9\u8c61\uff0c\u4e0d\u9700\u8981\u4e00\u4e2a\u5916\u90e8\u7c7b\u5bf9\u8c61\uff0c2\u4e0d\u80fd\u4ece\u4e00\u4e2astatic\u5185\u90e8\u7c7b\u7684\u4e00\u4e2a\u5bf9\u8c61\u8bbf\u95ee\u4e00\u4e2a\u5916\u90e8\u7c7b\u5bf9\u8c61!"},{"ID":"38","typeID":"11","question":"Anonymous Inner Class (\u533f\u540d\u5185\u90e8\u7c7b) \u662f\u5426\u53ef\u4ee5extends(\u7ee7\u627f)\u5176\u5b83\u7c7b\uff0c\u662f\u5426\u53ef\u4ee5implements(\u5b9e\u73b0)interface(\u63a5\u53e3)","answer":"\u533f\u540d\u7684\u5185\u90e8\u7c7b\u662f\u6ca1\u6709\u540d\u5b57\u7684\u5185\u90e8\u7c7b\u3002\u4e0d\u80fdextends(\u7ee7\u627f) \u5176\u5b83\u7c7b\uff0c\u4f46\u4e00\u4e2a\u5185\u90e8\u7c7b\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2a\u63a5\u53e3\uff0c\u7531\u53e6\u4e00\u4e2a\u5185\u90e8\u7c7b\u5b9e\u73b0"},{"ID":"13","typeID":"11","question":"ContentProvider\u662f\u5982\u4f55\u5b9e\u73b0\u6570\u636e\u5171\u4eab\u7684\uff1f","answer":"\u521b\u5efa\u4e00\u4e2a\u5c5e\u4e8e\u4f60\u81ea\u5df1\u7684Content provider\u6216\u8005\u5c06\u4f60\u7684\u6570\u636e\u6dfb\u52a0\u5230\u4e00\u4e2a\u5df2\u7ecf\u5b58\u5728\u7684Content provider\u4e2d\uff0c\u524d\u63d0\u662f\u6709\u76f8\u540c\u6570\u636e\u7c7b\u578b\u5e76\u4e14\u6709\u5199\u5165Content provider\u7684\u6743\u9650\u3002"},{"ID":"12","typeID":"11","question":"Android\u4e2d\u5e38\u7528\u7684\u4e94\u79cd\u5e03\u5c40\uff1f","answer":"FrameLayout\uff08\u6846\u67b6\u5e03\u5c40\uff09\uff0cLinearLayout \uff08\u7ebf\u6027\u5e03\u5c40\uff09\uff0cAbsoluteLayout\uff08\u7edd\u5bf9\u5e03\u5c40\uff09\uff0cRelativeLayout\uff08\u76f8\u5bf9\u5e03\u5c40\uff09\uff0cTableLayout\uff08\u8868\u683c\u5e03\u5c40\uff09\u3002"},{"ID":"11","typeID":"11","question":"\u4ecb\u7ecd\u4e0bAndroid\u7684\u6570\u636e\u5b58\u50a8\u65b9\u5f0f\u6709\u54ea\u51e0\u79cd\uff1f","answer":"Android \u63d0\u4f9b\u4e865\u79cd\u65b9\u5f0f\u5b58\u50a8\u6570\u636e\uff1a\r\n--\u4f7f\u7528SharedPreferences\u5b58\u50a8\u6570\u636e\uff1b\r\n--\u6587\u4ef6\u5b58\u50a8\u6570\u636e\uff1b\r\n--SQLite\u6570\u636e\u5e93\u5b58\u50a8\u6570\u636e\uff1b\r\n--\u4f7f\u7528ContentProvider\u5b58\u50a8\u6570\u636e\uff1b\r\n--\u7f51\u7edc\u5b58\u50a8\u6570\u636e\uff1b"}]}
