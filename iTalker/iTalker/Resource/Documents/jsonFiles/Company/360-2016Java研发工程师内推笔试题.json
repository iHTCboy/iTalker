{"success":1,"total":2100,"result":[
  {
    "ID" : "55fa69c5e4b043d0caf270de",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "AB,B",
    "optionC" : "B,B",
    "optionAnswer" : "D",
    "answer" : " ",
    "optionB" : "A,B",
    "type" : "1",
    "optionA" : "A,A",
    "knowledge" : "Java",
    "question" : "执行以下程序后的输出结果是（）\npublic class Test {\npublic static void main(String[] args) {\n    StringBuffer a = new StringBuffer(\"A\"); \n    StringBuffer b = new StringBuffer(\"B\"); \n    operator(a, b); \n    System.out.println(a + \",\" + b); \n} \npublic static void operator(StringBuffer x, StringBuffer y) { \n    x.append(y); y = x; \n}\n}"
  },
  {
    "ID" : "55fa69c5e4b043d0caf270df",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "适配器",
    "optionC" : "桥接模式",
    "optionAnswer" : "A",
    "answer" : " ",
    "optionB" : "合成模式",
    "type" : "1",
    "optionA" : "装饰模式",
    "knowledge" : "Java 软件工程",
    "question" : "结构型模式中最体现扩展性的几种模式是（）"
  },
  {
    "ID" : "55fa69c5e4b043d0caf270e0",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "-rw-r--r-x",
    "optionC" : "-rw-r--rw-",
    "optionAnswer" : "D",
    "answer" : " ",
    "optionB" : "-rw-r--rx-",
    "type" : "1",
    "optionA" : "-rw-r--r--",
    "knowledge" : "Linux",
    "question" : "在Linux中,对file.sh文件执行#chmod 645 file.sh中,该文件的权限是()"
  },
  {
    "ID" : "55fa69c5e4b043d0caf270e1",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "999, 1999",
    "optionC" : "999, 2000",
    "optionAnswer" : "B",
    "answer" : " ",
    "optionB" : "1999, 1000",
    "type" : "1",
    "optionA" : "1999, 999",
    "knowledge" : "网络基础",
    "question" : "TCP建立连接的过程采用三次握手，已知第三次握手报文的发送序列号为1000，确认序列号为2000，请问第二次握手报文的发送序列号和确认序列号分别为"
  },
  {
    "ID" : "55fa69c5e4b043d0caf270e2",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "服务端未收到客户端确认包，等待2*ml时间后会直接关闭连接",
    "optionC" : "当客户端处于ESTABLISHED状态时，服务端可能仍然处于SYN_RCVD状态",
    "optionAnswer" : "C",
    "answer" : " ",
    "optionB" : "服务端收到客户端的ACK包后会进入SYN_RCVD状态",
    "type" : "1",
    "optionA" : "服务端收到客户端的SYN包后等待2*ml时间后就会进入SYN_SENT状态",
    "knowledge" : "网络基础",
    "question" : "下列TCP连接建立过程描述正确的是："
  },
  {
    "ID" : "55fa69c5e4b043d0caf270e3",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "112.10.198.0",
    "optionC" : "112.10.224.0",
    "optionAnswer" : "A",
    "answer" : " ",
    "optionB" : "112.10.217.0",
    "type" : "1",
    "optionA" : "112.10.206.0",
    "knowledge" : "网络基础",
    "question" : "属于网络112.10.200.0\/21的地址是()"
  },
  {
    "ID" : "55fa69c5e4b043d0caf270e4",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "2",
    "optionC" : "1",
    "optionAnswer" : "C",
    "answer" : " ",
    "optionB" : "null",
    "type" : "1",
    "optionA" : "0",
    "knowledge" : "Java",
    "question" : "以下java程序代码，执行后的结果是（）\njava.util.HashMap map=new java.util.HashMap(); \nmap.put(\"name\",null);      \nmap.put(\"name\",\"Jack\");\nSystem.out.println(map.size());\n"
  },
  {
    "ID" : "55fa69c5e4b043d0caf270e5",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "运行时抛出异常",
    "optionC" : "编译错误",
    "optionAnswer" : "B",
    "answer" : " ",
    "optionB" : " true",
    "type" : "1",
    "optionA" : "Fred",
    "knowledge" : "Java",
    "question" : "以下java程序代码，执行后的结果是（）\njava.util.HashMap map=new java.util.HashMap(); \nmap.put(\"name\",null);      \nmap.put(\"name\",\"Jack\");\nSystem.out.println(map.size());"
  },
  {
    "ID" : "55fa69c5e4b043d0caf270e6",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "运行期抛出异常",
    "optionC" : "语句：b3=b1+b2编译出错",
    "optionAnswer" : "C",
    "answer" : " ",
    "optionB" : "语句：b6=b4+b5编译出错",
    "type" : "1",
    "optionA" : "输出结果：13",
    "knowledge" : "Java",
    "question" : "代码片段： \nbyte b1=1,b2=2,b3,b6; \nfinal byte b4=4,b5=6; \nb6=b4+b5; \nb3=(b1+b2); \nSystem.out.println(b3+b6);\n关于上面代码片段叙述正确的是（）"
  },
  {
    "ID" : "55fa69c5e4b043d0caf270e7",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "和是：43，finally语句块",
    "optionC" : "finally语句块，和是：43",
    "optionAnswer" : "C",
    "answer" : " ",
    "optionB" : "编译异常",
    "type" : "1",
    "optionA" : "catch语句块，和是：43",
    "knowledge" : "Java",
    "question" : "下面代码运行结果是（）\npublic class Test{ \n    public int add(int a,int b){   \n         try {\n             return a+b;      \n         } \n        catch (Exception e) {  \n            System.out.println(\"catch语句块\");\n         }\n         finally{ \n             System.out.println(\"finally语句块\");\n         }\n         return 0;\n    } \n     public static void main(String argv[]){ \n         Test test =new Test(); \n         System.out.println(\"和是：\"+test.add(9, 34)); \n     }\n}"
  },
  {
    "ID" : "55fa69c5e4b043d0caf270e8",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "在一个已关闭的socket上收到数据",
    "optionC" : "服务器主机崩溃后重启",
    "optionAnswer" : "C",
    "answer" : " ",
    "optionB" : "SO_RCVTIMEO选项设置了超时时间并超时",
    "type" : "1",
    "optionA" : "服务器端端口未打开而客户端来连接时",
    "knowledge" : "Java",
    "question" : "以下情况下不一定出现TCP分节RST的情况是："
  },
  {
    "ID" : "55fa69c5e4b043d0caf270e9",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "同时删除语句E和语句F",
    "optionC" : "同时保留语句C和语句D",
    "optionAnswer" : "D",
    "answer" : " ",
    "optionB" : "保留语句E并且删除语句C",
    "type" : "1",
    "optionA" : "保留语句E并且删除语句D",
    "knowledge" : "数据库",
    "question" : "一个数据库中现有A,B,C,D,E,F六个语句但目前这个数据库是不协调的，必须删除某些语句才能恢复数据库的协调性。已知：（1）如果保留语句A，那么必须保留语句B和C。（2）如果保留语句E，则必须同时删除语句D和语句C。（3）只有保留语句E，才能保留语句F。（4）语句A是重要的信息，不能删除以上各项如果为真，则以下哪项一定为真？"
  },
  {
    "ID" : "55fa69c5e4b043d0caf270ea",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "二者都满足开闭原则：静态工厂以if else方式创建对象，增加需求的时候会修改源代码",
    "optionC" : "静态工厂对具体产品的创建类别和创建时机的判断是混和在一起的，这点在工厂方法中",
    "optionAnswer" : "D",
    "answer" : " ",
    "optionB" : "不能形成静态工厂的继承结构",
    "type" : "1",
    "optionA" : "在工厂方法模式中，对于存在继承等级结构的产品树，产品的创建是通过相应等级结构的工厂创建的",
    "knowledge" : "软件工程",
    "question" : "下列关于静态工厂和工厂方法表述错误的是：（）"
  },
  {
    "ID" : "55fa69c5e4b043d0caf270eb",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "(m-r+f)mod m",
    "optionC" : "(m-r-f)mod m",
    "optionAnswer" : "A",
    "answer" : " ",
    "optionB" : "r-f",
    "type" : "1",
    "optionA" : "(m+r-f)mod m",
    "knowledge" : "队列",
    "question" : "设有一个用数组Q[1..m]表示的环形队列，约定f为当前队头元素在数组中的位置，r为队尾元素的后一位置(按顺时针方向),若队列非空，则计算队列中元素个数的公式应为()"
  },
  {
    "ID" : "55fa69c5e4b043d0caf270ec",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "O(n)",
    "optionC" : "O(n^2)",
    "optionAnswer" : "A",
    "answer" : " ",
    "optionB" : "O(1)",
    "type" : "1",
    "optionA" : "O(logn)",
    "knowledge" : "编程基础",
    "question" : "以下程序是用辗转相除法来计算两个非负数之间的最大公约数：\nlong long gcd(long long x,long long y){ \n     if(y==0) \n        return x; \n     else return gcd(y,x%y);\n}\n我们假设x,y中最大的那个数的长度为n，基本基本运算时间复杂度是O(1),那么该程序的时间复杂度为（）"
  },
  {
    "ID" : "55fa69c5e4b043d0caf270ed",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "177",
    "optionC" : "157",
    "optionAnswer" : "D",
    "answer" : " ",
    "optionB" : "137",
    "type" : "1",
    "optionA" : "117",
    "knowledge" : "编程基础",
    "question" : "计算斐波那契数列第n项的函数定义如下：\nint fib(int n){ \n     if(n==0) \n        return 1; \n     else if(n==1) \n        return 2; \n     else \n        return fib(n-1)+fib(n-2);\n}\n若执行函数调用表达式fib(10),函数fib被调用的次数是："
  },
  {
    "ID" : "55fa69c5e4b043d0caf270ee",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "5,8",
    "optionC" : "5,6",
    "optionAnswer" : "D",
    "answer" : " ",
    "optionB" : "4,10",
    "type" : "1",
    "optionA" : "4,5",
    "knowledge" : "图",
    "question" : "设图G的相邻矩阵如下图：则G的顶点数和边数分别为：\n0 1 1 1 1\n1 0 1 0 0\n1 1 0 1 1\n1 0 1 0 1\n1 0 1 1 0"
  }
]}
