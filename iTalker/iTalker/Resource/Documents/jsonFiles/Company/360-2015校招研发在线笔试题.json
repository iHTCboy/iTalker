{"success":1,"total":2100,"result":[
  {
    "ID" : "55fa69c5e4b043d0caf270b9",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "150",
    "optionC" : "165",
    "optionAnswer" : "B",
    "answer" : " ",
    "optionB" : "166",
    "type" : "1",
    "optionA" : "172",
    "knowledge" : "智力题",
    "question" : "上高中的小明暗恋女神三年，高考结束后，小明决定向女神表白。这天，小明来到女神楼下等待女神的出现，时间一分一秒的流逝，两个多小时过去了，女神还没有出现，小明看了下表，时针和分针的位置正好跟开始等的时候互换，请问小明一共等了女神多少分钟（）"
  },
  {
    "ID" : "55fa69c5e4b043d0caf270ba",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "16个",
    "optionC" : "13个",
    "optionAnswer" : "D",
    "answer" : " ",
    "optionB" : "11个",
    "type" : "1",
    "optionA" : "6个",
    "knowledge" : "智力题",
    "question" : "一个不透明的箱子里共有红，黄，蓝，绿，白五种颜色的小球，每种颜色的小球大小相同，质量相等，数量充足。每个人从篮子里抽出两个小球，请问至少需要多少个人抽球，才能保证有两个人抽到的小球颜色相同？"
  },
  {
    "ID" : "55fa69c5e4b043d0caf270bb",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "165",
    "optionC" : "162",
    "optionAnswer" : "B",
    "answer" : " ",
    "optionB" : "160",
    "type" : "1",
    "optionA" : "158",
    "knowledge" : "组合数学 智力题",
    "question" : "平面内有11个点，由它们连成48条不同的直线，由这些点可连成多少个三角形？"
  },
  {
    "ID" : "55fa69c5e4b043d0caf270bc",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "240",
    "optionC" : "180",
    "optionAnswer" : "C",
    "answer" : " ",
    "optionB" : "120",
    "type" : "1",
    "optionA" : "90",
    "knowledge" : "智力题",
    "question" : "8,8,12,24,60（）"
  },
  {
    "ID" : "55fa69c5e4b043d0caf270bd",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "16",
    "optionC" : "20",
    "optionAnswer" : "B",
    "answer" : " ",
    "optionB" : "14",
    "type" : "1",
    "optionA" : "100",
    "knowledge" : "编程基础",
    "question" : "假定x=65530，下面函数的返回值是多少？（）\nint func(x)\n{\n    int countx = 0;\n    while (x)\n    {\n        countx++；\n        x = x & (x - 1);\n    }\n    return countx;\n}"
  },
  {
    "ID" : "55fa69c5e4b043d0caf270be",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "快速排序",
    "optionC" : "归并排序",
    "optionAnswer" : "D",
    "answer" : " ",
    "optionB" : "希尔排序",
    "type" : "1",
    "optionA" : "选择排序",
    "knowledge" : "排序",
    "question" : " 用某种排序方法对关键字序列（25,84,21,47,15,27,68,35,20）进行排序，序列的变化情况采样如下：\n20,15,21,25,47,27,68,35,84\n15,20,21,25,35,27,47,68,84\n15,20,21,25,27,35,47,68,84\n请问采用的是以下哪种排序算法（）"
  },
  {
    "ID" : "55fa69c5e4b043d0caf270bf",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "7",
    "optionC" : "8",
    "optionAnswer" : "B",
    "answer" : " ",
    "optionB" : "9",
    "type" : "1",
    "optionA" : "10",
    "knowledge" : "树",
    "question" : "设某颗二叉树中有360个结点，则该二叉树的最小高度是？(包括根节点)"
  },
  {
    "ID" : "55fa69c5e4b043d0caf270c0",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "线性排序",
    "optionC" : "二分插入排序",
    "optionAnswer" : "A",
    "answer" : " ",
    "optionB" : "冒泡排序",
    "type" : "1",
    "optionA" : "快速排序",
    "knowledge" : "排序",
    "question" : "下列哪个算法是对一个list排序的最快方法（）"
  },
  {
    "ID" : "55fa69c5e4b043d0caf270c1",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "ICMP应答报文",
    "optionC" : "ICMP请求报文",
    "optionAnswer" : "C",
    "answer" : " ",
    "optionB" : "TCP应答报文",
    "type" : "1",
    "optionA" : "TCP请求报文",
    "knowledge" : "网络基础",
    "question" : "应用程序PING发出的是什么报文（）"
  },
  {
    "ID" : "55fa69c5e4b043d0caf270c2",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "3.36E+06",
    "optionC" : "2.0 ",
    "optionAnswer" : "D",
    "answer" : " ",
    "optionB" : "1",
    "type" : "1",
    "optionA" : "5280",
    "knowledge" : "正则表达式",
    "question" : "digit ->0|1|...|9\ndigits ->digit digit*\noptionalFraction ->.digits|∈\noptionalExponent ->(E+|-|∈)digits|∈\nnumber -> digits optionalPraction option|Exponent\n上面给出的正则规约的描述中，下面的无符号数哪个不符合规约的要求："
  },
  {
    "ID" : "55fa69c5e4b043d0caf270c3",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "识别并修正语法，语义错误",
    "optionC" : "识别语法错误",
    "optionAnswer" : "C",
    "answer" : " ",
    "optionB" : "识别语法和语义错误",
    "type" : "1",
    "optionA" : "识别语义错误",
    "knowledge" : "编译和体系结构",
    "question" : "语法分析器可以用于（）"
  },
  {
    "ID" : "55fa69c5e4b043d0caf270c4",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "128",
    "optionC" : "64",
    "optionAnswer" : "D",
    "answer" : " ",
    "optionB" : "32",
    "type" : "1",
    "optionA" : "16",
    "knowledge" : "网络基础",
    "question" : "IPV6地址包含多少位（）"
  },
  {
    "ID" : "55fa69c5e4b043d0caf270c5",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "连接发生错误",
    "optionC" : "还没有收到对端数据",
    "optionAnswer" : "B",
    "answer" : " ",
    "optionB" : "对端关闭了连接",
    "type" : "1",
    "optionA" : "对端发送了一段长度为0的数据",
    "knowledge" : "网络基础",
    "question" : "如果在一个建立了TCP连接的socket上调用recv函数，返回值为0，则表示（）"
  },
  {
    "ID" : "55fa69c5e4b043d0caf270c6",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "临界区",
    "optionC" : "互斥器",
    "optionAnswer" : "D",
    "answer" : " ",
    "optionB" : "线程",
    "type" : "1",
    "optionA" : "进程",
    "knowledge" : "操作系统",
    "question" : "以下哪些不是内核对象（）"
  },
  {
    "ID" : "55fa69c5e4b043d0caf270c7",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "thread ID",
    "optionC" : "register set",
    "optionAnswer" : "B",
    "answer" : " ",
    "optionB" : "data section",
    "type" : "1",
    "optionA" : "stack",
    "knowledge" : "操作系统",
    "question" : "同一进程下的多个线程可以共享哪一种资源（）"
  },
  {
    "ID" : "55fa69c5e4b043d0caf270c8",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "10",
    "optionC" : "9",
    "optionAnswer" : "C",
    "answer" : " ",
    "optionB" : "8",
    "type" : "1",
    "optionA" : "7",
    "knowledge" : "操作系统",
    "question" : "优异虚拟存储系统，若进程在内存中占3页（开始时内存为空），若采用先进先出（FIFO）页面淘汰算法，当执行以下访问页号序列后1,3,4,2,1,3,5,1,2,5,4,2，会产生多少次缺页（）"
  },
  {
    "ID" : "55fa69c5e4b043d0caf270c9",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "一条系统汇编指令执行完成",
    "optionC" : "计算结果溢出",
    "optionAnswer" : "A",
    "answer" : " ",
    "optionB" : "两数相加结果为零",
    "type" : "1",
    "optionA" : "在键盘输入过程中，每按一次键",
    "knowledge" : "操作系统",
    "question" : "下述哪种情况会提出中断请求（）"
  },
  {
    "ID" : "55fa69c5e4b043d0caf270ca",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "60%",
    "optionC" : "50%",
    "optionAnswer" : "C",
    "answer" : " ",
    "optionB" : "40%",
    "type" : "1",
    "optionA" : "30%",
    "knowledge" : "操作系统",
    "question" : "单任务系统中两个程序A和B，其中\nA程序：CPU:10s -> 设备1:5s -> CPU:5Ss ->设备2:10s ->CPU:10s；\nB程序：设备1:10s-> CPU:10s -> 设备2:5s ->CPU:5s ->设备2:10s；\n执行顺序为A->B，那么CPU的利用率是（）"
  },
  {
    "ID" : "55fa69c5e4b043d0caf270cb",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "8",
    "optionC" : "6",
    "optionAnswer" : "C",
    "answer" : " ",
    "optionB" : "5",
    "type" : "1",
    "optionA" : "4",
    "knowledge" : "编程基础",
    "question" : "for (int i = 0; i < 2; i++)\n{\n    fork();\n    printf(\"-\\n\");\n}\n会打印出多少个\"-\"?"
  },
  {
    "ID" : "55fa69c5e4b043d0caf270cc",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "多个进程竞争源出现了循环等待可能造成系统死锁",
    "optionC" : "基本的存储技术包括RAM，ROM，磁盘以及SSD，其中访问速度最慢的是磁盘，CPU的高速缓存一般是由RAM组成的",
    "optionAnswer" : "A",
    "answer" : " ",
    "optionB" : "每个进程都有自己的文件描述符表，所有进程共享同一打开文件表和v-node表",
    "type" : "1",
    "optionA" : "进程调度中\"可抢占\"和\"非抢占\"两种方式，后者引起系统的开销更大",
    "knowledge" : "操作系统",
    "question" : "以下说法不正确的是（）"
  },
  {
    "ID" : "55fa69c5e4b043d0caf270cd",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "malloc函数是应用程序向操作系统申请内存的接口",
    "optionC" : "ulimit -c设置的是函数调用栈的大小",
    "optionAnswer" : "A",
    "answer" : " ",
    "optionB" : "用mv命令移动文件时，文件的修改时间会发生变化",
    "type" : "1",
    "optionA" : "线性访问内存非法时，当前线程会进入信号处理函数",
    "knowledge" : "操作系统",
    "question" : "对于Linux说法，下列说法正确的是（）"
  },
  {
    "ID" : "55fa69c5e4b043d0caf270ce",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "线性地址先经过分页机制映射到虚拟地址，然后虚拟地址通过分段机制映射到物理地址",
    "optionC" : "虚拟地址先经过分页机制映射到线性地址，然后线性地址通过分段机制映射到物理地址",
    "optionAnswer" : "A",
    "answer" : " ",
    "optionB" : "线性地址先经过分段机制映射到虚拟地址，然后虚拟地址通过分页机制映射到物理地址",
    "type" : "1",
    "optionA" : "虚拟地址先经过分段机制映射到线性地址，然后线性地址通过分页机制映射到物理地址",
    "knowledge" : "编译和体系结构 操作系统",
    "question" : "X86体系结构在保护模式下中有三种地址，请问一下那种说法是正确的？"
  },
  {
    "ID" : "55fa69c5e4b043d0caf270cf",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "Hash文件",
    "optionC" : "链接文件",
    "optionAnswer" : "C",
    "answer" : " ",
    "optionB" : "索引文件",
    "type" : "1",
    "optionA" : "顺序文件",
    "knowledge" : "操作系统",
    "question" : "当需要对文件进行随机存取时，下列哪一种文件物理结构不适用于上述应用场景？"
  },
  {
    "ID" : "55fa69c5e4b043d0caf270d0",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "123444",
    "optionC" : "122444",
    "optionAnswer" : "C",
    "answer" : " ",
    "optionB" : "11314444",
    "type" : "1",
    "optionA" : "11214444",
    "knowledge" : "C\/C++ 编程基础",
    "question" : "#include<iostream>\nusing namespace std;\nclass MyClass\n{\npublic:\n    MyClass(int i = 0)\n    {\n        cout << i;\n    }\n    MyClass(const MyClass &x)\n    {\n        cout << 2;\n    }\n    MyClass &operator=(const MyClass &x)\n    {\n        cout << 3;\n        re"
  },
  {
    "ID" : "55fa69c5e4b043d0caf270d1",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "0，0，1",
    "optionC" : "0，1，1",
    "optionAnswer" : "A",
    "answer" : " ",
    "optionB" : "1，1，0",
    "type" : "1",
    "optionA" : "1，0，0",
    "knowledge" : "编程基础",
    "question" : "在一个64位的操作系统中定义如下结构体：\nstruct st_task{\n    uint16_t id;\n    uint32_t value;\n    uint64_t timestamp;\n};\n同时定义fool函数如下：\nvoid fool(){\n    st_task task = {};\n    uint64_t a = 0x00010001; \n   memcpy(&task, &a, sizeof(uint64_t));\n    printf(\"%11u,%11u,%11u\", task.id, task.value, task.timestamp);\n}\n上述fool()程序的执行结果为（）"
  },
  {
    "ID" : "55fa69c5e4b043d0caf270d2",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "4",
    "optionC" : "3",
    "optionAnswer" : "D",
    "answer" : " ",
    "optionB" : "2",
    "type" : "1",
    "optionA" : "1",
    "knowledge" : "C\/C++ 编程基础",
    "question" : "下面代码会输出什么（）\nint main(int argc, char **argv)\n{\n    int a[4] = {1, 2, 3, 4};\n    int *ptr = (int *)(&a + 1);\n    printf(\"%d\", *(ptr - 1));\n}"
  },
  {
    "ID" : "55fa69c5e4b043d0caf270d3",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "31",
    "optionC" : "5",
    "optionAnswer" : "D",
    "answer" : " ",
    "optionB" : "8",
    "type" : "1",
    "optionA" : "10",
    "knowledge" : "C\/C++ 编程基础",
    "question" : "int fun(int a)\n{\n    a = (1 << 5) - 1;\n    return a;\n}\nFun(21)结果是（）"
  },
  {
    "ID" : "55fa69c5e4b043d0caf270d4",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "template<class A，class B> void sort(A first，A last，B pred)",
    "optionC" : "template<class A><class B> void sort(A first，A last，B pred)",
    "optionAnswer" : "D",
    "answer" : " ",
    "optionB" : "void template(class A，class B)sort(A first，A last，B pred)",
    "type" : "1",
    "optionA" : "void sort(class A first，class A last，class B pred)",
    "knowledge" : "C\/C++ 编程基础",
    "question" : "下面哪一个是sort的template的正确写法"
  },
  {
    "ID" : "55fa69c5e4b043d0caf270d5",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "0，0",
    "optionC" : "1，0",
    "optionAnswer" : "A",
    "answer" : " ",
    "optionB" : "1，1",
    "type" : "1",
    "optionA" : "0，1",
    "knowledge" : "C\/C++ 编程基础",
    "question" : "在c++中，\nconst int i = 0; \nint *j = (int *) &i; \n*j = 1; \nprintf(\"%d,%d\", i, *j)\n输出是多少？"
  },
  {
    "ID" : "55fa69c5e4b043d0caf270d6",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "以上全部不正确",
    "optionC" : "Well",
    "optionAnswer" : "D",
    "answer" : " ",
    "optionB" : "Hello World!",
    "type" : "1",
    "optionA" : "Hello",
    "knowledge" : "C\/C++ 字符串 编程基础",
    "question" : "如下代码输出结果是什么？\n#include<stdio.h>\nchar *myString()\n{\n    char buffer[6] = {0};\n    char *s = \"Hello World!\";\n    for (int i = 0; i < sizeof(buffer) - 1; i++)\n    {\n        buffer[i] = *(s + i);\n    }\n    return buffer;\n}\nint main(int argc, char **argv)\n{\n    printf(\"%s\\n\", myString());\n    return 0;\n}\n"
  },
  {
    "ID" : "55fa69c5e4b043d0caf270d7",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "char b[10]=\"HELLO!\";",
    "optionC" : "char b[10];strcpy(b，\"HELLO!\");",
    "optionAnswer" : "B",
    "answer" : " ",
    "optionB" : "char b[10];b=\"HELLO!\";",
    "type" : "1",
    "optionA" : "char b[10]={'H'，'E'，'L'，'L'，'O'，'!'，'\\0'};",
    "knowledge" : "C\/C++ 字符串 编程基础",
    "question" : "不能把字符串\"HELLO!\"赋给数组b的语句是（）"
  },
  {
    "ID" : "55fa69c5e4b043d0caf270d8",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "X+215",
    "optionC" : "X+368",
    "optionAnswer" : "C",
    "answer" : " ",
    "optionB" : "X+365",
    "type" : "1",
    "optionA" : "X+195",
    "knowledge" : "C\/C++ 编程基础",
    "question" : "struct Date\n{\n    char a;\n    int b;\n    int64_t c;\n    char d;\n};\nDate data[2][10];\n 在32位系统上，如果Data的地址是x，那么data[1][5].c的地址是（）"
  },
  {
    "ID" : "55fa69c5e4b043d0caf270d9",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "int (*a[10])(int);",
    "optionC" : "int *a[10];",
    "optionAnswer" : "C",
    "answer" : " ",
    "optionB" : "int (*a)[10];",
    "type" : "1",
    "optionA" : "int a[10];",
    "knowledge" : "C\/C++ 编程基础",
    "question" : "如何定义一个int类型的指针数组，数组元素个数为10个："
  },
  {
    "ID" : "55fa69c5e4b043d0caf270da",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "52",
    "optionC" : "51",
    "optionAnswer" : "C",
    "answer" : " ",
    "optionB" : "50",
    "type" : "1",
    "optionA" : "49",
    "knowledge" : "树",
    "question" : "将一颗有100个结点的完全二叉树从根这一层开始，进行广度遍历编号，那么编号最小的叶节点的编号是（）"
  },
  {
    "ID" : "55fa69c5e4b043d0caf270db",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "栈",
    "optionC" : "队列",
    "optionAnswer" : "D",
    "answer" : " ",
    "optionB" : "树",
    "type" : "1",
    "optionA" : "链表",
    "knowledge" : "链表",
    "question" : "解析XML时，需要校验节点是否闭合，如必须有与之对应，用（）数据结构实现比较好（）"
  },
  {
    "ID" : "55fa69c5e4b043d0caf270dc",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "O(n^2  logn)",
    "optionC" : "O(n)",
    "optionAnswer" : "B",
    "answer" : " ",
    "optionB" : "O(n^2)",
    "type" : "1",
    "optionA" : "O(nlogn）",
    "knowledge" : "复杂度 排序",
    "question" : "快速排序算法在序列已经有序的情况下的复杂度为（）"
  },
  {
    "ID" : "55fa69c5e4b043d0caf270dd",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "a，e，d，f，c，b",
    "optionC" : "a，e，b，c，f，d",
    "optionAnswer" : "D",
    "answer" : " ",
    "optionB" : "a，c，f，e，b，d",
    "type" : "1",
    "optionA" : "a，b，e，c，d，f",
    "knowledge" : "图 排序",
    "question" : "无向图G=（V E），其中V={a,b,c,d,e,f},E={<a,b>,<a,e>,<a,c>,<b,e>,<c,f>,<f,d>,<e,d>}对该图进行深度优先排序，得到的顶点序列正确的是（）"
  }
]}
