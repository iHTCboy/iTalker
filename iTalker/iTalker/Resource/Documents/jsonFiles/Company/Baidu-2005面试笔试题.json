{"success":1,"total":2100,"result":[
  {
    "ID" : "55e429cde4b0152a610c8300",
    "typeID" : "",
    "optionD" : "n*n-2e",
    "optionC" : "n*n-e",
    "optionAnswer" : "D",
    "answer" : "因为有n个顶点,所以有n*n个元素,2*e个非零元素（无向图,对称）,所以有n*n-2*e个零元素.",
    "optionB" : "2e",
    "type" : "1",
    "optionA" : "e",
    "knowledge" : "无向图",
    "question" : "一个含有n个顶点和e条边的简单无向图，在其邻接矩阵存储结构中共有____个零元素。"
  },
  {
    "ID" : "55e429cee4b0152a610c8301",
    "typeID" : "",
    "optionD" : "动态绑定（Dynamic Binding）",
    "optionC" : "对象的自身引用（Self-Reference）",
    "optionAnswer" : "D",
    "answer" : "本题考查面向对象程序设计语言中的一些常见技术。继承：这是我们非常熟悉的概念，是子类从父类派生，继承父类的特点并拥有自己新的特点，体现了特殊与一般的关系。模板：是对具有相同特性的函数或类的再抽象，是一种参数化的多态性工具。模板的使用为各种逻辑功能相同而数据类型不同的程序提供一种代码共享的机制。动态绑定：是面向对象程序设计语言中的一种机制，是一种方法的定义与具体的对象无关，而对方法的调用则可以关联于具体的对象的机制。",
    "optionB" : "模板（Template）",
    "type" : "1",
    "optionA" : "继承（Inhertance）",
    "knowledge" : "设计语言",
    "question" : "____是面向对象程序设计语言中的一种机制。这种机制实现了方法的定义与具体的对象无关，而对方法的调用则可以关联于具体的对象。"
  },
  {
    "ID" : "55e429cee4b0152a610c8302",
    "typeID" : "",
    "optionD" : "网络硬件地址到IP地址的映射",
    "optionC" : "网络设备名字到IP地址的映射",
    "optionAnswer" : "C",
    "answer" : "每个IP地址都可以有一个主机名，也叫网络设备名，DNS协议完成网络设备名字到IP地址的动态映射，网络上需要使用主机名通信的设备，首先需要到DNS服务器查询主机所对应的IP地址。有了主机名，就不要死记硬背每台IP设备的IP地址，只要记住相对直观有意义的主机名(网络设备名字)就行了,这就是DNS协议所要完成的功能.",
    "optionB" : "IP地址到网络硬件地址的映射  ",
    "type" : "1",
    "optionA" : "IP地址到网络设备名字的映射",
    "knowledge" : "网络基础",
    "question" : "应用层DNS协议主要用于实现哪种网络服务功能."
  },
  {
    "ID" : "55e429cee4b0152a610c8303",
    "typeID" : "",
    "optionD" : "1024",
    "optionC" : "512",
    "optionAnswer" : "D",
    "answer" : "linux 系统中单个进程的最大线程数有其最大的限制 PTHREAD_THREADS_MAX\r这个限制可以在 \/usr\/include\/bits\/local_lim.h 中查看 \r对 linuxthreads 这个值一般是 1024，对于 nptl 则没有硬性的限制，仅仅受限于系统的资源\r1024，是系统默认的能打开fd的最大值\r修改的话需要重新编译内核",
    "optionB" : "128",
    "type" : "1",
    "optionA" : "64",
    "knowledge" : "Linux",
    "question" : "linux默认情况下，一个进程最多能打开多少文件？ "
  },
  {
    "ID" : "55e429cee4b0152a610c8304",
    "typeID" : "",
    "optionD" : "24字节",
    "optionC" : "20字节",
    "optionAnswer" : "B",
    "answer" : "先考虑char ch, *ptr;  因为指针占4个字节，再考虑对齐，因此ch也占4字节；同理struct s1 *next; 也占4字节；而共用体也占4字节。",
    "optionB" : "16字节",
    "type" : "1",
    "optionA" : "12字节",
    "knowledge" : "结构体",
    "question" : "下面结构体 \r struct s1 { \r      char ch, *ptr;\r      union { \r           short a, b;\r           unsigned int c:2, d:1; \r       }  \r      struct s1 *next;\r    };   的大小是_____："
  },
  {
    "ID" : "55e429cee4b0152a610c8305",
    "typeID" : "",
    "optionD" : "消息队列",
    "optionC" : "线程局部存储",
    "optionAnswer" : "C",
    "answer" : "进程间通讯(IPC)方法主要有以下几种：管道\/FIFO\/共享内存\/消息队列\/信号",
    "optionB" : "信号量",
    "type" : "1",
    "optionA" : "共享内存",
    "knowledge" : "Linux",
    "question" : "以下不是进程间通讯的是___ "
  },
  {
    "ID" : "55e429cee4b0152a610c8306",
    "typeID" : "",
    "optionD" : "11",
    "optionC" : "5",
    "optionAnswer" : "A",
    "answer" : "x&(x-1)将x的二进制中的最后一个1变为0，而9999的二进制位1001100110011001，共有8个1，所以while循环执行了8次，count变为8",
    "optionB" : "10",
    "type" : "1",
    "optionA" : "8",
    "knowledge" : "C\/C++",
    "question" : "下面程序，求count的值  \rint func(x)  {  \r       int count= 0;\r       x=9999;  \r       while(x)  {\r             Count ++;\r              x = x&(x-1);\r      }   \r      return count;  \r} "
  },
  {
    "ID" : "55e429cee4b0152a610c8307",
    "typeID" : "",
    "optionD" : "堆",
    "optionC" : "物理内存",
    "optionAnswer" : "D",
    "answer" : "malloc分配的存储空间在堆上；临时变量在栈上；bss段是汇编之后 未初始化的全局变量和静态变量；物理内存是通过MMU映射到虚拟内存的。",
    "optionB" : "bss",
    "type" : "1",
    "optionA" : "栈",
    "knowledge" : "C\/C++",
    "question" : "使用malloc系统调用分配的内存是在____ 上分配的？"
  },
  {
    "ID" : "55e429cee4b0152a610c8308",
    "typeID" : "",
    "optionD" : "2n-2",
    "optionC" : "2n+1",
    "optionAnswer" : "B",
    "answer" : "最坏情况为: 每比较一次,只确定一个元素的位置(最后一次比较确定两个元素的位置,即倒数第一个和倒数第2个),所以总的最坏比较次数为2n-1.",
    "optionB" : "2n-1",
    "type" : "1",
    "optionA" : "2n",
    "knowledge" : "C\/C++",
    "question" : "最坏情况下，合并两个大小为n的已排序数组所需要的比较次数_____  "
  },
  {
    "ID" : "55fa697ee4b043d0caf26fe4",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "n*n-2e",
    "optionC" : "n*n-e",
    "optionAnswer" : "D",
    "answer" : "解析正在重新整理中……请不要离开和卸载，其实陪伴是最长情的告白。",
    "optionB" : "2e",
    "type" : "1",
    "optionA" : "e",
    "knowledge" : "无向图",
    "question" : "一个含有n个顶点和e条边的简单无向图，在其邻接矩阵存储结构中共有____个零元素。"
  },
  {
    "ID" : "55fa697ee4b043d0caf26fe5",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "动态绑定（Dynamic Binding）",
    "optionC" : "对象的自身引用（Self-Reference）",
    "optionAnswer" : "D",
    "answer" : "解析正在重新整理中……请不要离开和卸载，其实陪伴是最长情的告白。",
    "optionB" : "模板（Template）",
    "type" : "1",
    "optionA" : "继承（Inhertance）",
    "knowledge" : "设计语言",
    "question" : "____是面向对象程序设计语言中的一种机制。这种机制实现了方法的定义与具体的对象无关，而对方法的调用则可以关联于具体的对象。"
  },
  {
    "ID" : "55fa697ee4b043d0caf26fe6",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "网络硬件地址到IP地址的映射",
    "optionC" : "网络设备名字到IP地址的映射",
    "optionAnswer" : "C",
    "answer" : "解析正在重新整理中……请不要离开和卸载，其实陪伴是最长情的告白。",
    "optionB" : "IP地址到网络硬件地址的映射  ",
    "type" : "1",
    "optionA" : "IP地址到网络设备名字的映射",
    "knowledge" : "网络基础",
    "question" : "应用层DNS协议主要用于实现哪种网络服务功能."
  },
  {
    "ID" : "55fa697ee4b043d0caf26fe7",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "1024",
    "optionC" : "512",
    "optionAnswer" : "D",
    "answer" : "解析正在重新整理中……请不要离开和卸载，其实陪伴是最长情的告白。",
    "optionB" : "128",
    "type" : "1",
    "optionA" : "64",
    "knowledge" : "Linux",
    "question" : "linux默认情况下，一个进程最多能打开多少文件？ "
  },
  {
    "ID" : "55fa697ee4b043d0caf26fe8",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "24字节",
    "optionC" : "20字节",
    "optionAnswer" : "B",
    "answer" : "解析正在重新整理中……请不要离开和卸载，其实陪伴是最长情的告白。",
    "optionB" : "16字节",
    "type" : "1",
    "optionA" : "12字节",
    "knowledge" : "结构体",
    "question" : "下面结构体 \n struct s1 { \n      char ch, *ptr;\n      union { \n           short a, b;\n           unsigned int c:2, d:1; \n       }  \n      struct s1 *next;\n    };   的大小是_____："
  },
  {
    "ID" : "55fa697ee4b043d0caf26fe9",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "消息队列",
    "optionC" : "线程局部存储",
    "optionAnswer" : "C",
    "answer" : "解析正在重新整理中……请不要离开和卸载，其实陪伴是最长情的告白。",
    "optionB" : "信号量",
    "type" : "1",
    "optionA" : "共享内存",
    "knowledge" : "Linux",
    "question" : "以下不是进程间通讯的是___ "
  },
  {
    "ID" : "55fa697ee4b043d0caf26fea",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "11",
    "optionC" : "5",
    "optionAnswer" : "A",
    "answer" : "解析正在重新整理中……请不要离开和卸载，其实陪伴是最长情的告白。",
    "optionB" : "10",
    "type" : "1",
    "optionA" : "8",
    "knowledge" : "C\/C++",
    "question" : "下面程序，求count的值  \nint func(x)  {  \n       int count= 0;\n       x=9999;  \n       while(x)  {\n             Count ++;\n              x = x&(x-1);\n      }   \n      return count;  \n} "
  },
  {
    "ID" : "55fa697ee4b043d0caf26feb",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "堆",
    "optionC" : "物理内存",
    "optionAnswer" : "D",
    "answer" : "解析正在重新整理中……请不要离开和卸载，其实陪伴是最长情的告白。",
    "optionB" : "bss",
    "type" : "1",
    "optionA" : "栈",
    "knowledge" : "C\/C++",
    "question" : "使用malloc系统调用分配的内存是在____ 上分配的？"
  },
  {
    "ID" : "55fa697ee4b043d0caf26fec",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "2n-2",
    "optionC" : "2n+1",
    "optionAnswer" : "B",
    "answer" : "解析正在重新整理中……请不要离开和卸载，其实陪伴是最长情的告白。",
    "optionB" : "2n-1",
    "type" : "1",
    "optionA" : "2n",
    "knowledge" : "C\/C++",
    "question" : "最坏情况下，合并两个大小为n的已排序数组所需要的比较次数_____  "
  }
]}