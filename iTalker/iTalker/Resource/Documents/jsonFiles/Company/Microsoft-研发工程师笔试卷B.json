{"success":1,"total":2100,"result":[
  {
    "ID" : "55fa6a5de4b043d0caf2724c",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "以上都不对",
    "optionC" : "以上都对",
    "optionAnswer" : "B",
    "answer" : "解析正在重新整理中……请不要离开和卸载，其实陪伴是最长情的告白。",
    "optionB" : "char *p=\"hello\"; return p == \"hello\";",
    "type" : "1",
    "optionA" : "main 函数正常结束的返回值",
    "knowledge" : "C\/C++",
    "question" : "在 C 语言中下面那个语句的结果是 1 ？"
  },
  {
    "ID" : "55fa6a5de4b043d0caf2724d",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "F-G=1",
    "optionC" : "X 是负数",
    "optionAnswer" : "C",
    "answer" : "解析正在重新整理中……请不要离开和卸载，其实陪伴是最长情的告白。",
    "optionB" : "X 是奇数",
    "type" : "1",
    "optionA" : "编译错误",
    "knowledge" : "编程基础",
    "question" : "F、G、X 都是32位有符号整数，F=X\/2，G=X>>1，如果 F != G，那么："
  },
  {
    "ID" : "55fa6a5de4b043d0caf2724e",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "60",
    "optionC" : "40",
    "optionAnswer" : "D",
    "answer" : "解析正在重新整理中……请不要离开和卸载，其实陪伴是最长情的告白。",
    "optionB" : "20",
    "type" : "1",
    "optionA" : "18",
    "knowledge" : "智力题",
    "question" : "3*4 的方格，有多少个长方形？"
  },
  {
    "ID" : "55fa6a5de4b043d0caf2724f",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "5511",
    "optionC" : "5510",
    "optionAnswer" : "A",
    "answer" : "解析正在重新整理中……请不要离开和卸载，其实陪伴是最长情的告白。",
    "optionB" : "5053",
    "type" : "1",
    "optionA" : "5051",
    "knowledge" : "智力题 图",
    "question" : "一个直线将一个平面分成 2 部分，两条直线分成 4 部分，如果直线不平行，多条直线不共一点，问 100 条直线将平面分成几部分？"
  },
  {
    "ID" : "55fa6a5de4b043d0caf27250",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "n!",
    "optionC" : "2^n-1",
    "optionAnswer" : "B",
    "answer" : "解析正在重新整理中……请不要离开和卸载，其实陪伴是最长情的告白。",
    "optionB" : "n(n+1)\/2",
    "type" : "1",
    "optionA" : "n+1",
    "knowledge" : "智力题 字符串",
    "question" : " n 个字符构成的字符串，假设每个字符都不一样，问有多少个子串？"
  },
  {
    "ID" : "55fa6a5de4b043d0caf27251",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "4",
    "optionC" : "3",
    "optionAnswer" : "B",
    "answer" : "解析正在重新整理中……请不要离开和卸载，其实陪伴是最长情的告白。",
    "optionB" : "2",
    "type" : "1",
    "optionA" : "1",
    "knowledge" : "数据库",
    "question" : "根据下面给的表和 SQL 语句，问执行 SQL 语句更新多少条数据？sql 语句： \nupdate Books set NumberOfCopies = NumberOfCopies + 1 where AuthorID in select AuthorID from Books group by AuthorID having sum(NumberOfCopies) <= 8 \n表中数据： \nBookID Tittle Category NumberOfCopies AuthorID \n1 SQL Server 2008 MS 3 1 \n2 SharePoint 2007 MS 2 2 \n3 SharePoint 2010 MS 4 2 \n5 DB2 IBM 10 3 \n7 SQL Server 2012 MS 6 1"
  },
  {
    "ID" : "55fa6a5de4b043d0caf27252",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "39",
    "optionC" : "32",
    "optionAnswer" : "C",
    "answer" : "解析正在重新整理中……请不要离开和卸载，其实陪伴是最长情的告白。",
    "optionB" : "31",
    "type" : "1",
    "optionA" : "16",
    "knowledge" : "查找",
    "question" : "Suppose that a Selection Sort of 80 items has completed 32 iterations of the main loop. How many items are now guaranteed to be in their final spot (never to be moved again)?"
  },
  {
    "ID" : "55fa6a5de4b043d0caf27253",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "0011 0100 0011 0111",
    "optionC" : "0011 0100 0011 0101",
    "optionAnswer" : "A",
    "answer" : "解析正在重新整理中……请不要离开和卸载，其实陪伴是最长情的告白。",
    "optionB" : "0101 0111 0111 0011",
    "type" : "1",
    "optionA" : "0001 0100 0011 1111",
    "knowledge" : "编程基础",
    "question" : "What is the result of binary number 01011001 after multiplying by 0111001 and adding 1101110?"
  },
  {
    "ID" : "55fa6a5de4b043d0caf27254",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "void f(int *ret) { int a[3] = {1, 2, 3}; ret = a; return; }",
    "optionC" : "vector<int> f() {vector<int> v(3); return v; }",
    "optionAnswer" : "C",
    "answer" : "解析正在重新整理中……请不要离开和卸载，其实陪伴是最长情的告白。",
    "optionB" : "int *f() { int a[3] = {1, 2, 3}; return a; }",
    "type" : "1",
    "optionA" : "int f() { int *a = new int(3); return *a; }",
    "knowledge" : "C\/C++",
    "question" : "Which of following C++ code is correct?"
  },
  {
    "ID" : "55fa6a5de4b043d0caf27255",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "10968",
    "optionC" : "18609",
    "optionAnswer" : "D",
    "answer" : "解析正在重新整理中……请不要离开和卸载，其实陪伴是最长情的告白。",
    "optionB" : "91086",
    "type" : "1",
    "optionA" : "60918",
    "knowledge" : "智力题",
    "question" : "Given that the 180-degree rotated image of a 5-digit number is another 5-digit number and the difference between the numbers is 78633, what is the original 5-digit number?"
  },
  {
    "ID" : "55fa6a5de4b043d0caf27256",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "None of above.",
    "optionC" : "(x ^ y) ^ (y ^ x)",
    "optionAnswer" : "D",
    "answer" : "解析正在重新整理中……请不要离开和卸载，其实陪伴是最长情的告白。",
    "optionB" : "y ^(x ^ y)",
    "type" : "1",
    "optionA" : "y ^ ((x ^ y) & ~(x < y))",
    "knowledge" : "编程基础",
    "question" : "Assume both x and y are integers, which one of the followings returns the minimum of the two integers?"
  },
  {
    "ID" : "55fa6a5de4b043d0caf27257",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "abddcccd",
    "optionC" : "abcc",
    "optionAnswer" : "D",
    "answer" : "解析正在重新整理中……请不要离开和卸载，其实陪伴是最长情的告白。",
    "optionB" : "abdd",
    "type" : "1",
    "optionA" : "abdcccd",
    "knowledge" : "C\/C++",
    "question" : " What is the result of the following program?\nchar* f(char *str, char ch) {\n    char *it1 = str;\n    char *it2 = str;\n    while (*it2 != '\\0') {\n        while (*it2 == ch) { it2++; }\n        *it1++ = *it2++;\n     }\n    return str;\n}\nvoid main(int argc, char *argv[]) {\n    char *a = new char[10];\n    strcpy(a, \"abcdcccd\");\n    cout << f(a, 'c');\n}"
  },
  {
    "ID" : "55fa6a5de4b043d0caf27258",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "exponential",
    "optionC" : "quadratic",
    "optionAnswer" : "A",
    "answer" : "解析正在重新整理中……请不要离开和卸载，其实陪伴是最长情的告白。",
    "optionB" : "linear",
    "type" : "1",
    "optionA" : "logarithmic",
    "knowledge" : "复杂度 C\/C++",
    "question" : "Consider the following definition of a recursive function, power, that will perform exponentiation.\nint power(int b, int e) {\n    if (e == 0)\n        return 1;\n    if (e %2 == 0)\n        return power (b * b, e \/ 2);\n    return b * power(b * b, e \/ 2);\n}\nAsymptotically (渐进地) in terms of the exponent e, the number of calls to power that occur as a result of the call power(b, e) is"
  },
  {
    "ID" : "55fa6a5de4b043d0caf27259",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "dcba",
    "optionC" : "dbca",
    "optionAnswer" : "D",
    "answer" : "解析正在重新整理中……请不要离开和卸载，其实陪伴是最长情的告白。",
    "optionB" : "badc",
    "type" : "1",
    "optionA" : "cbad",
    "knowledge" : "C\/C++",
    "question" : "What is the output of the following piece of C++ code?\nusing namespace std;\nstruct Item {\n    char c;\n    Item *next;\n};\nItem *Routine1(Item *x) {\n    Item *prev = NULL, *curr = x;\n    while (curr) {\n        Item *next = curr->next;\n        curr->next = prev;\n        prev = curr;\n        curr = next;\n    }\n    return prev;\n}\nvoid Routine2(Item *x) {\n    Item *curr = x;\n    while (curr) {\n         cout << curr->c << ” “;\n         curr = curr->next;\n    }\n}\nint main(void) {\n    Item *x, d = {‘d’, NULL}, c = {‘c’, &d}, b = {‘b’, &c}, a = {‘a’, &b};\n    x = Routine1(&a);\n    Routine2(x);\n    return 0;\n}"
  },
  {
    "ID" : "55fa6a5de4b043d0caf2725a",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "Time: N, Space: N",
    "optionC" : "Time: NlogN, Space: N",
    "optionAnswer" : "C",
    "answer" : "解析正在重新整理中……请不要离开和卸载，其实陪伴是最长情的告白。",
    "optionB" : "Time: N^2, Space: N",
    "type" : "1",
    "optionA" : "Time: N^2, Space: N^2",
    "knowledge" : "编程基础",
    "question" : " Longest Increasing Subsequence (LIS) means a sequence containing some elements in another sequence by the same order, and the values of elements keeps increasing.For example, LIS of {2, 1, 4, 2, 3, 7, 4, 6} is {1, 2, 3, 4, 6}, and its LIS length is 5. Considering an array with N elements, what is the average time and space complexity to get the length of LIS?"
  },
  {
    "ID" : "55fa6a5de4b043d0caf2725b",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "None of the above",
    "optionC" : "const static\/static",
    "optionAnswer" : "B",
    "answer" : "解析正在重新整理中……请不要离开和卸载，其实陪伴是最长情的告白。",
    "optionB" : "_\/static",
    "type" : "1",
    "optionA" : "static\/const const\/static",
    "knowledge" : "C\/C++",
    "question" : "Fill the blanks inside class definition\nclass Test {\n    public:\n         ____ int a;\n         ____ int b;\n    public:\n        Test::Test(int _a, int _b) : a(_a) {\n            b = _b;\n         }\n};\nint Test::b;\nint _tmain(int argc, __TCHAR *argv[]) {\n    Test t1(0, 0), t2(1, 1);\n    t1.b = 10;\n    t2.b = 20;\n    printf(“%u %u %u %u”, t1.a, t1.b, t2.a, t2.b);\n}\nRunning result: 0 20 1 20"
  },
  {
    "ID" : "55fa6a5de4b043d0caf2725c",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "Heap sort uses two heap operations: insertion and root deletion.",
    "optionC" : "There is an array: 7, 6, 5, 4, 3, 2, 1. If using selection sort (ascending), the number of swap operation is 6.",
    "optionAnswer" : "C",
    "answer" : "解析正在重新整理中……请不要离开和卸载，其实陪伴是最长情的告白。",
    "optionB" : "Quick sort makes O(n^2) comparisons in the worst case.",
    "type" : "1",
    "optionA" : "Insertion sort and bubble sort are not effcient for large data sets.",
    "knowledge" : "排序",
    "question" : "Which of the following statements are false?"
  },
  {
    "ID" : "55fa6a5de4b043d0caf2725d",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "Suppose T(n) is the runtime of resolving a problem with n elements, T(n) = Θ(1) if n = 1; T(n) = 2T(n\/2) + Θ(n) if > 1; so T(n) is Θ(n log n).",
    "optionC" : "For an almost sorted array, insertion sort can be more effective than Quicksort.",
    "optionAnswer" : "B",
    "answer" : "解析正在重新整理中……请不要离开和卸载，其实陪伴是最长情的告白。",
    "optionB" : "We can create a binary tree from given preorder and postorder traversal sequences.",
    "type" : "1",
    "optionA" : "We can create a binary tree from given inorder and preorder traversal sequences.",
    "knowledge" : "C\/C++ 数组 树 排序 递归 编程基础",
    "question" : "Which of the following statements are false?"
  },
  {
    "ID" : "55fa6a5de4b043d0caf2725e",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "MVC 的常用实践是，模型从用户接收 GET 和 POST 的请求，然后决定做神马，通过移交给控制器和视图",
    "optionC" : "控制器介于用户和系统之间，它接受用户的输入，指挥着模型和视图来完成输入对应的任务",
    "optionAnswer" : "D",
    "answer" : "解析正在重新整理中……请不要离开和卸载，其实陪伴是最长情的告白。",
    "optionB" : "视图 ( View ) 是对模型的(可视化)展示，它渲染模型的结果，典型的是一个用户接口元素(user interface element)",
    "type" : "1",
    "optionA" : "型 ( Model )表示数据以及处理数据的业务逻辑",
    "knowledge" : "软件工程",
    "question" : "Web 应用程序中常使用 MVC 模式，关于说法错的是"
  }
]}