{"success":1,"total":2100,"result":[
  {
    "ID" : "55fa696ce4b043d0caf26efc",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "4",
    "optionC" : "3",
    "optionAnswer" : "C",
    "answer" : "解析正在重新整理中……请不要离开和卸载，其实陪伴是最长情的告白。",
    "optionB" : "2",
    "type" : "1",
    "optionA" : "1",
    "knowledge" : "Linux\/递归",
    "question" : "int main(){fork()||fork();}共创建几个进程：_____"
  },
  {
    "ID" : "55fa696ce4b043d0caf26efd",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "插入排序",
    "optionC" : "堆排序",
    "optionAnswer" : "C",
    "answer" : "解析正在重新整理中……请不要离开和卸载，其实陪伴是最长情的告白。",
    "optionB" : "快速排序",
    "type" : "1",
    "optionA" : "选择排序",
    "knowledge" : "排序",
    "question" : "个数约为 50k 的数列需要从小到大排序， 数列特征是基本逆序 （多数数字从大到小，个别乱序） ，以下哪种排序算法在事先不了解数列特征的情况下性能大概率最优（不考虑空间限制）___."
  },
  {
    "ID" : "55fa696ce4b043d0caf26efe",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "利用迭代替代递归",
    "optionC" : "利用数据库连接池替代直接的数据库访问",
    "optionAnswer" : "B",
    "answer" : "解析正在重新整理中……请不要离开和卸载，其实陪伴是最长情的告白。",
    "optionB" : "使用多线程的方式提高 I\/O 密集型操作的效率",
    "type" : "1",
    "optionA" : "改善数据访问方式以提升缓存命中率",
    "knowledge" : "递归\/操作系统",
    "question" : "下列方法中，____不可以用来程序调优？"
  },
  {
    "ID" : "55fa696ce4b043d0caf26eff",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "有限次循环",
    "optionC" : "是无限循环",
    "optionAnswer" : "A",
    "answer" : "解析正在重新整理中……请不要离开和卸载，其实陪伴是最长情的告白。",
    "optionB" : "循环体执行一次",
    "type" : "1",
    "optionA" : "循环体一次也不执行",
    "knowledge" : "C\/C++\/编程基础",
    "question" : "设 m 和 n 都是 int 类型，那么以下 for 循环语句，___，for(m=0,n=-1;n=0;m++,n++)\n    n++;"
  },
  {
    "ID" : "55fa696ce4b043d0caf26f00",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "40,43,76,79,4,11,19",
    "optionC" : "40,43,76,79,19,11,4",
    "optionAnswer" : "B",
    "answer" : "解析正在重新整理中……请不要离开和卸载，其实陪伴是最长情的告白。",
    "optionB" : "40,43,19,11,4,76,79",
    "type" : "1",
    "optionA" : "19,43,40,4,79,11,76",
    "knowledge" : "操作系统",
    "question" : "若干个等待访问磁盘者依次要访问的磁道为 19， 43， 40， 4， 79，11，76，当前磁头位于 40 号柱面，若用最短寻道时间优先磁盘调度算法，则访问序列为___"
  },
  {
    "ID" : "55fa696ce4b043d0caf26f01",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "无法判断这 100 台虚拟机和 100 台物理机哪个更可靠",
    "optionC" : "这100台虚拟机单位时间内出现故障的个数高于100台物理机单位时间内出现故障的个数",
    "optionAnswer" : "C",
    "answer" : "解析正在重新整理中……请不要离开和卸载，其实陪伴是最长情的告白。",
    "optionB" : "这 100 台虚拟机发生故障是彼此独立的",
    "type" : "1",
    "optionA" : "单台虚拟机的故障率高于单台物理机的故障率",
    "knowledge" : "数理统计",
    "question" : "每台物理计算机可以虚拟出 20 台虚拟机，假设一台虚拟机发生故障当且仅当它所宿主的物理机发生故障。通过 5 台物理机虚拟出100 台虚拟机，那么关于这 100 台虚拟机的故障的说法正确的是：____?"
  },
  {
    "ID" : "55fa696ce4b043d0caf26f02",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "0.7",
    "optionC" : "0.5",
    "optionAnswer" : "C",
    "answer" : "解析正在重新整理中……请不要离开和卸载，其实陪伴是最长情的告白。",
    "optionB" : "0.4",
    "type" : "1",
    "optionA" : "0.2",
    "knowledge" : "数理统计",
    "question" : "对立的两方争夺一个价值为1的物品，双方可以采取的策略可以分为鸽子策略和鹰策略。如果双方都是鸽子策略，那么双方各有1\/2的几率获得该物品；如果双方均为鹰策略，那么双方各有1\/2的概率取胜，胜方获得价值为1的物品，付出价值为1的代价，负方付出价值为1的代价；如果一方为鸽子策略，一方为鹰策略，那么鹰策略获得价值为1的物品。在争夺的结果出来之前，没人知道对方是鸽子策略还是鹰策略。当选择鸽子策略的人的比例是某一个值时，选择鸽子策略和选择鹰策略的预期收益是相同的。那么该值是( )。"
  },
  {
    "ID" : "55fa696ce4b043d0caf26f03",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "int i=0;printf(“%d%d\\n”,i++,i--);",
    "optionC" : "char *p=”hello”;char ch=*p++;",
    "optionAnswer" : "B",
    "answer" : "解析正在重新整理中……请不要离开和卸载，其实陪伴是最长情的告白。",
    "optionB" : "char *p=”hello”;p[1]=’E’;",
    "type" : "1",
    "optionA" : "Int i=0;i=(i++);",
    "knowledge" : "C\/C++",
    "question" : "下列 C 代码中，不属于未定义行为的有___"
  },
  {
    "ID" : "55fa696ce4b043d0caf26f04",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "重合点构成了一条直线",
    "optionC" : "可能有无穷多个重合点",
    "optionAnswer" : "B",
    "answer" : "解析正在重新整理中……请不要离开和卸载，其实陪伴是最长情的告白。",
    "optionB" : "必然有且只有一个重合点",
    "type" : "1",
    "optionA" : "可能不存在重合点",
    "knowledge" : "编程基础",
    "question" : "把校园中同一区域的两张不同比例尺的地图叠放在一起，并且使 其中较小尺寸的地图完全在较大尺寸的地图的覆盖之下。 每张地图上 都有经纬度坐标，显然，这两个坐标系并不相同。我们把恰好重叠在 一起的两个相同的坐标称之为重合点。 下面关于重合点的说法中正确 的是？"
  },
  {
    "ID" : "55fa696ce4b043d0caf26f05",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "132",
    "optionC" : "64",
    "optionAnswer" : "D",
    "answer" : "解析正在重新整理中……请不要离开和卸载，其实陪伴是最长情的告白。",
    "optionB" : "30",
    "type" : "1",
    "optionA" : "15",
    "knowledge" : "组合数学\/数理统计",
    "question" : "一个合法的表达式由()包围，()可以嵌套和连接，如(())()也是合法 表达式；现在有 6 对()，它们可以组成的合法表达式的个数为____"
  },
  {
    "ID" : "55fa696ce4b043d0caf26f06",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "将分组转发或分片",
    "optionC" : "转发该分组",
    "optionAnswer" : "A",
    "answer" : "解析正在重新整理中……请不要离开和卸载，其实陪伴是最长情的告白。",
    "optionB" : "将该分组分片",
    "type" : "1",
    "optionA" : "丢掉该分组",
    "knowledge" : "网络基础",
    "question" : "某路由器接受的 IP 报文的目的地址不是路由器的接口 IP 地址， 并且未匹配的路由项，则采取的策略是"
  },
  {
    "ID" : "55fa696ce4b043d0caf26f07",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "步长为 2 的希尔排序",
    "optionC" : "步长为 4 的希尔排序",
    "optionAnswer" : "B",
    "answer" : "解析正在重新整理中……请不要离开和卸载，其实陪伴是最长情的告白。",
    "optionB" : "快速排序",
    "type" : "1",
    "optionA" : "二路归并排序",
    "knowledge" : "排序",
    "question" : "有字符序列 ｛Q,H,C,Y,P,A,M,S,R,D,F,X｝ ,新序列{F,H,C,D,P,A,M,Q,R,S,Y,X}，是下列____排序算法一趟扫描的结果。"
  },
  {
    "ID" : "55fa696ce4b043d0caf26f08",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "Redo log",
    "optionC" : "中继日志",
    "optionAnswer" : "C",
    "answer" : "解析正在重新整理中……请不要离开和卸载，其实陪伴是最长情的告白。",
    "optionB" : "事务日志",
    "type" : "1",
    "optionA" : "错误日志",
    "knowledge" : "数据库",
    "question" : "MySQL 主从结构的主数据库中不可能出现以下哪种日志？"
  },
  {
    "ID" : "55fa696ce4b043d0caf26f09",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "程序运行正常",
    "optionC" : "运行阶段出错",
    "optionAnswer" : "D",
    "answer" : "解析正在重新整理中……请不要离开和卸载，其实陪伴是最长情的告白。",
    "optionB" : "链接阶段出错",
    "type" : "1",
    "optionA" : "汇编阶段出错",
    "knowledge" : "C\/C++\/编译和体系结构",
    "question" : "程序出错在什么阶段__？int main(void) {\n    http:\/\/www.taobao.com\n    cout << \"welcome to taobao\" << endl; \n}"
  },
  {
    "ID" : "55fa696ce4b043d0caf26f0a",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "S=3,F=8;S=4,F=7",
    "optionC" : "S=3,F=8;S=4,F=5",
    "optionAnswer" : "D",
    "answer" : "解析正在重新整理中……请不要离开和卸载，其实陪伴是最长情的告白。",
    "optionB" : "S=3,F=7;S=4,F=6",
    "type" : "1",
    "optionA" : "S=3,F=6;S=4,F=5",
    "knowledge" : "操作系统",
    "question" : "在一个请求页式存储管理中，一个程序的页面走向为 3、4、2、1、4、5、3、4、5、1、2，并采用 LRU 算法。设分配给该程序的存储块数 S 分别为 3 和 4，在该访问中发生的缺页次数 F 是"
  },
  {
    "ID" : "55fa696ce4b043d0caf26f0b",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "p->next=q->next;delete q;",
    "optionC" : "p-next=q->next;delete p;",
    "optionAnswer" : "D",
    "answer" : "解析正在重新整理中……请不要离开和卸载，其实陪伴是最长情的告白。",
    "optionB" : "q->next=p->nerx;delete p;",
    "type" : "1",
    "optionA" : "delete q",
    "knowledge" : "C\/C++\/链表",
    "question" : "在一个单链表中，q 的前一个节点为 p，删除 q 所指向节点，则执行"
  }
]}