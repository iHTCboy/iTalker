{"success":1,"total":2100,"result":[
  {
    "ID" : "55fa69d2e4b043d0caf270ef",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "5",
    "optionC" : "4",
    "optionAnswer" : "C",
    "answer" : "  ",
    "optionB" : "3",
    "type" : "1",
    "optionA" : "2",
    "knowledge" : "编程基础",
    "question" : "34^17（34的17次方）对6取余， 结果是多少？"
  },
  {
    "ID" : "55fa69d2e4b043d0caf270f0",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "11",
    "optionC" : "12",
    "optionAnswer" : "B",
    "answer" : "  ",
    "optionB" : "13",
    "type" : "1",
    "optionA" : "14",
    "knowledge" : "编程基础",
    "question" : "有如下算式成立，13*7=88，是采用（）进制计算的。"
  },
  {
    "ID" : "55fa69d2e4b043d0caf270f1",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "冒泡排序",
    "optionC" : "堆排序",
    "optionAnswer" : "A",
    "answer" : "  ",
    "optionB" : "快速排序",
    "type" : "1",
    "optionA" : "希尔排序",
    "knowledge" : "排序",
    "question" : "有字符序列（Q,H,C,Y,P,A,M,N,R,D,F,X）,新序列（M,H,C,D,F,A,Q,N,R,Y,P,X）是下列（）排序算法一趟扫描结果。"
  },
  {
    "ID" : "55fa69d2e4b043d0caf270f2",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "可以在任何节点",
    "optionC" : "可能在叶子节点， 也可能在根节点，也可能在只有右孩子的父节点",
    "optionAnswer" : "C",
    "answer" : "  ",
    "optionB" : "只能在叶子节点",
    "type" : "1",
    "optionA" : "只能在根节点",
    "knowledge" : "树",
    "question" : "二叉排序树中的最小值在二叉排序树的何处?"
  },
  {
    "ID" : "55fa69d2e4b043d0caf270f3",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "n的2次方-2e",
    "optionC" : "n的2次方-e",
    "optionAnswer" : "D",
    "answer" : "  ",
    "optionB" : "2e",
    "type" : "1",
    "optionA" : "e",
    "knowledge" : "图",
    "question" : "一个含有n个顶点和e条边的简单无向图， 在其邻接矩阵存储结构中共有（）个零元素。"
  },
  {
    "ID" : "55fa69d2e4b043d0caf270f4",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "fun(2015)=8",
    "optionC" : "fun(2015)=9",
    "optionAnswer" : "B",
    "answer" : "  ",
    "optionB" : "fun(2015)=10",
    "type" : "1",
    "optionA" : "fun(2015)=11",
    "knowledge" : "编程基础",
    "question" : "下面程序中， 输出是什么？\nint fun(int x){\n    int count = 0;\n    while(x){\n        count++;\n        x = x &(x-1)\n    }\n    return count;\n}\nint main(){\n    cout << \"fun(2015)=\" << fun(2015)<<endl;\n}"
  },
  {
    "ID" : "55fa69d2e4b043d0caf270f5",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "5",
    "optionC" : "4",
    "optionAnswer" : "C",
    "answer" : "  ",
    "optionB" : "3",
    "type" : "1",
    "optionA" : "2",
    "knowledge" : "并发",
    "question" : "若系统中有五台绘图仪，有多个进程均需要使用两台，规定每个进程一次仅允许申请一台，则至多允许（ ）个进程参于竞争，而不会发生死锁。"
  },
  {
    "ID" : "55fa69d2e4b043d0caf270f6",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "文件名在目录中查找对应的超级块，在超级块查找对应i节点，通过i节点存取文件数据",
    "optionC" : "文件名在目录中查找对应的i节点，通过i节点存取文件数据。",
    "optionAnswer" : "C",
    "answer" : "  ",
    "optionB" : "文件名直接找到文件的数据，进行存取操作。",
    "type" : "1",
    "optionA" : "文件在目录中查找文件数据存取位置。",
    "knowledge" : "操作系统",
    "question" : "通过文件名存取文件时，文件系统内部的操作过程是通过？"
  },
  {
    "ID" : "55fa69d2e4b043d0caf270f7",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "FTP协议",
    "optionC" : "UDP协议",
    "optionAnswer" : "A",
    "answer" : "  ",
    "optionB" : "HTTP协议",
    "type" : "1",
    "optionA" : "TCP协议",
    "knowledge" : "网络基础",
    "question" : "以下哪个协议不是无状态协议？"
  }
]}
