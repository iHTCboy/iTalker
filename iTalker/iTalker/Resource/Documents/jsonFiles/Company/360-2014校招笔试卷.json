{"success":1,"total":26,"result":[
  {
    "ID" : "55fa69c4e4b043d0caf2709f",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "a构造 b构造 b析构 a析构",
    "optionC" : "b构造 a构造 b析构 a析构",
    "optionAnswer" : "D",
    "answer" : " ",
    "optionB" : "a构造 a析构 b构造 b析构",
    "type" : "1",
    "optionA" : "b构造 a构造 a析构 b析构",
    "knowledge" : "C\/C++",
    "question" : "Class A;\nClass B;\nvoid F() {\n        A a;\n        B b;\n}\n在函数F中，本地变量a和b的构造函数(constructor)和析构函数(destructor)的调用顺序是:"
  },
  {
    "ID" : "55fa69c4e4b043d0caf270a0",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "delete []p;",
    "optionC" : "delete &p;",
    "optionAnswer" : "A",
    "answer" : " ",
    "optionB" : "delete *p;",
    "type" : "1",
    "optionA" : "delete p;",
    "knowledge" : "C\/C++",
    "question" : "假定指针变量p定义为“int *p=new int(100);”，要释放p所指向的动态内存，应使用语句（ ）"
  },
  {
    "ID" : "55fa69c5e4b043d0caf270a1",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "reinterpret_cast",
    "optionC" : "const_cast",
    "optionAnswer" : "B",
    "answer" : " ",
    "optionB" : "dynamic_cast",
    "type" : "1",
    "optionA" : "static_cast",
    "knowledge" : "C\/C++",
    "question" : "在C++, 下列哪一个可以做为对象继承之间的转换"
  },
  {
    "ID" : "55fa69c5e4b043d0caf270a2",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "gdbehcfa",
    "optionC" : "fdcehgba",
    "optionAnswer" : "A",
    "answer" : " ",
    "optionB" : "hcdeabf",
    "type" : "1",
    "optionA" : "gdbehfca",
    "knowledge" : "树",
    "question" : "若某二叉树的前序遍历访问顺序是abdgcefh，中序遍历访问顺序是dgbaechf，则其后序遍历的结点访问顺序是（ ）"
  },
  {
    "ID" : "55fa69c5e4b043d0caf270a3",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "6",
    "optionC" : "5",
    "optionAnswer" : "B",
    "answer" : " ",
    "optionB" : "4",
    "type" : "1",
    "optionA" : "3",
    "knowledge" : "查找",
    "question" : "用二分法查找长度为10的、排好序的线性表，查找不成功时，最多需要比较多少次？"
  },
  {
    "ID" : "55fa69c5e4b043d0caf270a4",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "O(x)",
    "optionC" : "O(n)",
    "optionAnswer" : "B",
    "answer" : " ",
    "optionB" : "O(logn)",
    "type" : "1",
    "optionA" : "O(1)",
    "knowledge" : "C\/C++\/递归\/复杂度",
    "question" : "以下程序是用辗转相除法来计算两个非负数之间的最大公约数：\nlong long gcd(long long x, long long y) {\n    if (y == 0)\n        return x;\n    else\n        return gcd(y, x % y);\n}\n我们假设x,y中最大的那个数的长度为n，x>y，基本运算时间复杂度为O(1)，那么该程序的时间复杂度为（ ）"
  },
  {
    "ID" : "55fa69c5e4b043d0caf270a5",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "250",
    "optionC" : "249",
    "optionAnswer" : "B",
    "answer" : " ",
    "optionB" : "248",
    "type" : "1",
    "optionA" : "247",
    "knowledge" : "树",
    "question" : "一棵有124个叶节点的完全二叉树，最多有（ ）个节点。"
  },
  {
    "ID" : "55fa69c5e4b043d0caf270a6",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "所需存储空间与线性表长度成正比",
    "optionC" : "无需事先估计存储空间大小",
    "optionAnswer" : "A",
    "answer" : " ",
    "optionB" : "插入、删除操作不需要移动元素",
    "type" : "1",
    "optionA" : "可随机访问任何一个元素",
    "knowledge" : "链表",
    "question" : "链表不具备的特点是（ ）"
  },
  {
    "ID" : "55fa69c5e4b043d0caf270a7",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "堆排序",
    "optionC" : "冒泡排序",
    "optionAnswer" : "A",
    "answer" : " ",
    "optionB" : "希尔排序",
    "type" : "1",
    "optionA" : "快速排序",
    "knowledge" : "排序",
    "question" : "下列排序算法中，在待排序数据有序的情况下，花费时间最多的是（ ）"
  },
  {
    "ID" : "55fa69c5e4b043d0caf270a8",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "快速排序",
    "optionC" : "堆排序",
    "optionAnswer" : "C",
    "answer" : " ",
    "optionB" : "基数排序",
    "type" : "1",
    "optionA" : "冒泡排序",
    "knowledge" : "堆\/排序\/复杂度",
    "question" : "有 1000 个无序的整数，希望使用最快的方式找出前 50 个最大的，最佳的选择是（ ）"
  },
  {
    "ID" : "55fa69c5e4b043d0caf270a9",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "随机探测法",
    "optionC" : "拉链探测法",
    "optionAnswer" : "C",
    "answer" : " ",
    "optionB" : "线性补偿探测法",
    "type" : "1",
    "optionA" : "线性探测法",
    "knowledge" : "哈希",
    "question" : "下面哪个不是用来解决哈希表冲突的开放地址法？"
  },
  {
    "ID" : "55fa69c5e4b043d0caf270aa",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "（143）10",
    "optionC" : "（96）16",
    "optionAnswer" : "B",
    "answer" : " ",
    "optionB" : "（227）8",
    "type" : "1",
    "optionA" : "（10010101）2",
    "knowledge" : "编程基础",
    "question" : "下列数最大的是（ ）。括号内为数字，括号外为进制。"
  },
  {
    "ID" : "55fa69c5e4b043d0caf270ab",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "增加内存容量且加快存取速度",
    "optionC" : "增加内存容量",
    "optionAnswer" : "B",
    "answer" : " ",
    "optionB" : "解决内存速度低于CPU的性能问题",
    "type" : "1",
    "optionA" : "提高内存稳定性",
    "knowledge" : "编译和体系结构",
    "question" : "在CPU和内存之间增加cache的作用是（ ）"
  },
  {
    "ID" : "55fa69c5e4b043d0caf270ac",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "0x78",
    "optionC" : "0x56",
    "optionAnswer" : "A",
    "answer" : " ",
    "optionB" : "0x34",
    "type" : "1",
    "optionA" : "0x12",
    "knowledge" : "编译和体系结构",
    "question" : "假设整数0x12345678 存放在内存地址0x0开始的连续四个字节中 (即地址0x0到 0x3). 那么在以Little Endian字节序存储的memory中,地址0x3的地方存放的字节是:"
  },
  {
    "ID" : "55fa69c5e4b043d0caf270ad",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "第一段代码更适合阅读",
    "optionC" : "这段代码只适用于x为正数的情况",
    "optionAnswer" : "C",
    "answer" : " ",
    "optionB" : "用第二段代码执行起来会更快一些",
    "type" : "1",
    "optionA" : "计算机的补码表示使得两段代码等价",
    "knowledge" : "C\/C++\/编译和体系结构",
    "question" : "将逻辑代码：if (x % 2) {\n    return x - 1;\n} else {\n    return x;\n}\n用表达式：return x & -2; 替代，以下说法中不正确的是（ ）"
  },
  {
    "ID" : "55fa69c5e4b043d0caf270ae",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "把汇编语言翻译成机器语言",
    "optionC" : "把中间代码变换成依赖具体机器的目标代码",
    "optionAnswer" : "C",
    "answer" : " ",
    "optionB" : "把高级语言翻译成机器语言",
    "type" : "1",
    "optionA" : "把高级语言翻译成汇编语言",
    "knowledge" : "编译和体系结构",
    "question" : "代码生成阶段的主要任务是（ ）"
  },
  {
    "ID" : "55fa69c5e4b043d0caf270af",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "(a+b)\/(c+d)",
    "optionC" : "a+b\/(c+d)",
    "optionAnswer" : "D",
    "answer" : " ",
    "optionB" : "(a+b)\/c+d",
    "type" : "1",
    "optionA" : "a+b\/c+d",
    "knowledge" : "栈",
    "question" : "后缀式 ab+cd+\/可用表达式（ ）来表示"
  },
  {
    "ID" : "55fa69c5e4b043d0caf270b0",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "以上都不对",
    "optionC" : "传引用后形参和实参是不同的对象",
    "optionAnswer" : "D",
    "answer" : " ",
    "optionB" : "传地址后实参和形参指向不同的对象",
    "type" : "1",
    "optionA" : "传值后对形参的修改会改变实参的值",
    "knowledge" : "C\/C++",
    "question" : "以下关于函数调用的说法哪个是正确的？"
  },
  {
    "ID" : "55fa69c5e4b043d0caf270b1",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "[a-zA-Z]\\w{2,14}[0-9a-zA-Z]@\\w",
    "optionC" : "[a-zA-Z]\\w{2,14}[0-9a-zA-Z]\\@\\w+([-.]\\w+)*",
    "optionAnswer" : "C",
    "answer" : " ",
    "optionB" : "[a-zA-Z]\\w{3,15}@\\w+.\\w*",
    "type" : "1",
    "optionA" : "\\w[0-9a-zA-Z_]{3,15}\\@\\w+.([-.]\\w+)*",
    "knowledge" : "正则表达式",
    "question" : "一个合法的 360 账户名称要求如下：是一个合法的邮箱地址，如 kefu@360.cn；邮箱前缀的长度为 [ 4, 16 ] 个字符；邮箱前缀必须以字母开头，字母或数字结尾；邮箱前缀可以包括字母、数字、下划线。请问如下正则表达式中，哪一个能正确校验用户名的合法性："
  },
  {
    "ID" : "55fa69c5e4b043d0caf270b2",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "所有进程共享一张页表，只有页表中当前使用的页面必须驻留在内存中，以最大限度地节约有限的内存空间",
    "optionC" : "所有进程共享一张页表，以节约有限的内存空间，但页表必须驻留在内存中",
    "optionAnswer" : "B",
    "answer" : " ",
    "optionB" : "每个进程拥有一张页表，但只要执行进程的页表驻留在内存中，其他进程的页表不必驻留在内存中",
    "type" : "1",
    "optionA" : "每个进程拥有一张页表，且进程的页表驻留在内存中",
    "knowledge" : "操作系统",
    "question" : "操作系统采用分页式存储管理(PAGING)方法，要求( )"
  },
  {
    "ID" : "55fa69c5e4b043d0caf270b3",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "若干进程因竞争资源而无休止的等待着其他进程释放已占有的资源",
    "optionC" : "一个进程进入死循环",
    "optionAnswer" : "D",
    "answer" : " ",
    "optionB" : "有多个封锁的进程同时存在",
    "type" : "1",
    "optionA" : "资源数大大少于进程数，或进程同时申请的资源数大大超过资源总数",
    "knowledge" : "并发\/操作系统",
    "question" : "计算机操作系统出现死锁的原因是什么?"
  },
  {
    "ID" : "55fa69c5e4b043d0caf270b4",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "套接字",
    "optionC" : "共享内存",
    "optionAnswer" : "D",
    "answer" : " ",
    "optionB" : "消息队列",
    "type" : "1",
    "optionA" : "管道",
    "knowledge" : "操作系统",
    "question" : "进程间通讯的方式中哪种的访问速度最快？"
  },
  {
    "ID" : "55fa69c5e4b043d0caf270b5",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "在已经成功建立连接的TCP连接上，任何情况下都不允许丢失数据。",
    "optionC" : "主动发送FIN消息的连接端，收到对方回应ack之前不能发只能收，在收到对方回复ack之后不能发也不能收，进入CLOSING状态",
    "optionAnswer" : "A",
    "answer" : " ",
    "optionB" : "对一个established状态的TCP连接，在调用shutdown函数之前调用close接口，可以让主动调用的一方进入半关闭状态",
    "type" : "1",
    "optionA" : "处于TIME_WAIT状态的连接等待2MSL后真正关闭连接",
    "knowledge" : "网络基础",
    "question" : "TCP的关闭过程，说法正确的是（ ）"
  },
  {
    "ID" : "55fa69c5e4b043d0caf270b6",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "系统调用失败",
    "optionC" : "系统网络buff收到 n个字节",
    "optionAnswer" : "B",
    "answer" : " ",
    "optionB" : "本地已发送n个字节",
    "type" : "1",
    "optionA" : "对端已收到n个字节",
    "knowledge" : "Linux\/网络基础",
    "question" : "linux中调用write发送网络数据返回n(n>0)表示（ ）"
  },
  {
    "ID" : "55fa69c5e4b043d0caf270b7",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "没有访问权限",
    "optionC" : "客户端网络不通",
    "optionAnswer" : "A",
    "answer" : " ",
    "optionB" : "文件未找到",
    "type" : "1",
    "optionA" : "服务器内部出错",
    "knowledge" : "网络基础",
    "question" : "HTTP 应答中的 500 错误是："
  },
  {
    "ID" : "55fa69c5e4b043d0caf270b8",
    "typeID" : "55dd5e2360b258078b9e4458",
    "optionD" : "数字证书都是有有效期的，Android只是在应用程序安装的时候才会检查证书的有效期。如果程序已经安装在系统中，即使证书过期也不会影响程序的正常功能。",
    "optionC" : "如果要正式发布一个Android程序，可以使用集成开发工具生成的调试证书来发布。",
    "optionAnswer" : "C",
    "answer" : " ",
    "optionB" : "Android程序包使用的数字证书可以是自签名的，不需要一个权威的数字证书机构签名认证",
    "type" : "1",
    "optionA" : "所有的应用程序都必须有数字证书，Android系统不会安装一个没有数字证书的应用程序",
    "knowledge" : "Android",
    "question" : "下列关于 Android 数字签名描述错误的是："
  }
]}
